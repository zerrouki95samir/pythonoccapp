# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TColGeom.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColGeom')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColGeom')
    _TColGeom = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColGeom', [dirname(__file__)])
        except ImportError:
            import _TColGeom
            return _TColGeom
        try:
            _mod = imp.load_module('_TColGeom', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColGeom = swig_import_helper()
    del swig_import_helper
else:
    import _TColGeom
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColGeom.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TColGeom.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TColGeom.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TColGeom.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TColGeom.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TColGeom.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TColGeom.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TColGeom.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TColGeom.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TColGeom.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TColGeom.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TColGeom.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TColGeom.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TColGeom.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TColGeom.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TColGeom.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TColGeom.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TColGeom.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.Geom
import OCC.MMgt
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class TColGeom_Array1OfBSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_BSplineCurve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array1OfBSplineCurve_swiginit(self, _TColGeom.new_TColGeom_Array1OfBSplineCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_BSplineCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom_Array1OfBSplineCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfBSplineCurve &
        :rtype: TColGeom_Array1OfBSplineCurve

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array1OfBSplineCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfBSplineCurve &
        :rtype: TColGeom_Array1OfBSplineCurve

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_BSplineCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineCurve

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineCurve

        """
        return _TColGeom.TColGeom_Array1OfBSplineCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfBSplineCurve
TColGeom_Array1OfBSplineCurve.Init = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Init, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Destroy = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Destroy, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.IsAllocated = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_IsAllocated, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Assign = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Assign, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Set = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Set, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Length = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Length, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Lower = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Lower, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Upper = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Upper, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_SetValue, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.Value = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_Value, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array1OfBSplineCurve_ChangeValue, None, TColGeom_Array1OfBSplineCurve)
TColGeom_Array1OfBSplineCurve_swigregister = _TColGeom.TColGeom_Array1OfBSplineCurve_swigregister
TColGeom_Array1OfBSplineCurve_swigregister(TColGeom_Array1OfBSplineCurve)

class TColGeom_Array1OfBezierCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_BezierCurve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array1OfBezierCurve_swiginit(self, _TColGeom.new_TColGeom_Array1OfBezierCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_BezierCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom_Array1OfBezierCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfBezierCurve &
        :rtype: TColGeom_Array1OfBezierCurve

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array1OfBezierCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfBezierCurve &
        :rtype: TColGeom_Array1OfBezierCurve

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_BezierCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BezierCurve

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BezierCurve

        """
        return _TColGeom.TColGeom_Array1OfBezierCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfBezierCurve
TColGeom_Array1OfBezierCurve.Init = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Init, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Destroy = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Destroy, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.IsAllocated = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_IsAllocated, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Assign = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Assign, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Set = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Set, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Length = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Length, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Lower = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Lower, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Upper = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Upper, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_SetValue, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.Value = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_Value, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array1OfBezierCurve_ChangeValue, None, TColGeom_Array1OfBezierCurve)
TColGeom_Array1OfBezierCurve_swigregister = _TColGeom.TColGeom_Array1OfBezierCurve_swigregister
TColGeom_Array1OfBezierCurve_swigregister(TColGeom_Array1OfBezierCurve)

class TColGeom_Array1OfCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_Curve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array1OfCurve_swiginit(self, _TColGeom.new_TColGeom_Array1OfCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_Array1OfCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom_Array1OfCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfCurve &
        :rtype: TColGeom_Array1OfCurve

        """
        return _TColGeom.TColGeom_Array1OfCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array1OfCurve const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfCurve &
        :rtype: TColGeom_Array1OfCurve

        """
        return _TColGeom.TColGeom_Array1OfCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_Array1OfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_Array1OfCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfCurve
TColGeom_Array1OfCurve.Init = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Init, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Destroy = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Destroy, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.IsAllocated = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_IsAllocated, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Assign = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Assign, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Set = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Set, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Length = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Length, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Lower = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Lower, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Upper = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Upper, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_SetValue, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.Value = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_Value, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array1OfCurve_ChangeValue, None, TColGeom_Array1OfCurve)
TColGeom_Array1OfCurve_swigregister = _TColGeom.TColGeom_Array1OfCurve_swigregister
TColGeom_Array1OfCurve_swigregister(TColGeom_Array1OfCurve)

class TColGeom_Array1OfSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_Surface &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array1OfSurface_swiginit(self, _TColGeom.new_TColGeom_Array1OfSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfSurface_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfSurface_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_Array1OfSurface_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom_Array1OfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfSurface &
        :rtype: TColGeom_Array1OfSurface

        """
        return _TColGeom.TColGeom_Array1OfSurface_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array1OfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array1OfSurface &
        :rtype: TColGeom_Array1OfSurface

        """
        return _TColGeom.TColGeom_Array1OfSurface_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfSurface_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfSurface_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array1OfSurface_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array1OfSurface_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_Array1OfSurface_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_Array1OfSurface_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array1OfSurface
TColGeom_Array1OfSurface.Init = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Init, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Destroy = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Destroy, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.IsAllocated = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_IsAllocated, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Assign = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Assign, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Set = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Set, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Length = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Length, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Lower = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Lower, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Upper = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Upper, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_SetValue, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.Value = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_Value, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array1OfSurface_ChangeValue, None, TColGeom_Array1OfSurface)
TColGeom_Array1OfSurface_swigregister = _TColGeom.TColGeom_Array1OfSurface_swigregister
TColGeom_Array1OfSurface_swigregister(TColGeom_Array1OfSurface)

class TColGeom_Array2OfBezierSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_BezierSurface &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array2OfBezierSurface_swiginit(self, _TColGeom.new_TColGeom_Array2OfBezierSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_BezierSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_Destroy(self, *args)


    def Assign(self, *args) -> "TColGeom_Array2OfBezierSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array2OfBezierSurface &
        :rtype: TColGeom_Array2OfBezierSurface

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array2OfBezierSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array2OfBezierSurface &
        :rtype: TColGeom_Array2OfBezierSurface

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_Geom_BezierSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BezierSurface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_BezierSurface

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BezierSurface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_BezierSurface

        """
        return _TColGeom.TColGeom_Array2OfBezierSurface_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array2OfBezierSurface
TColGeom_Array2OfBezierSurface.Init = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_Init, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.Destroy = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_Destroy, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.Assign = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_Assign, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.Set = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_Set, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.ColLength = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_ColLength, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.RowLength = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_RowLength, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.LowerCol = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_LowerCol, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.LowerRow = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_LowerRow, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.UpperCol = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_UpperCol, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.UpperRow = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_UpperRow, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_SetValue, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.Value = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_Value, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array2OfBezierSurface_ChangeValue, None, TColGeom_Array2OfBezierSurface)
TColGeom_Array2OfBezierSurface_swigregister = _TColGeom.TColGeom_Array2OfBezierSurface_swigregister
TColGeom_Array2OfBezierSurface_swigregister(TColGeom_Array2OfBezierSurface)

class TColGeom_Array2OfSurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom_Surface &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColGeom.TColGeom_Array2OfSurface_swiginit(self, _TColGeom.new_TColGeom_Array2OfSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfSurface_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfSurface_Destroy(self, *args)


    def Assign(self, *args) -> "TColGeom_Array2OfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array2OfSurface &
        :rtype: TColGeom_Array2OfSurface

        """
        return _TColGeom.TColGeom_Array2OfSurface_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_Array2OfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_Array2OfSurface &
        :rtype: TColGeom_Array2OfSurface

        """
        return _TColGeom.TColGeom_Array2OfSurface_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_Array2OfSurface_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_Array2OfSurface_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_Array2OfSurface_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Surface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_Array2OfSurface_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_Array2OfSurface
TColGeom_Array2OfSurface.Init = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_Init, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.Destroy = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_Destroy, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.Assign = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_Assign, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.Set = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_Set, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.ColLength = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_ColLength, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.RowLength = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_RowLength, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.LowerCol = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_LowerCol, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.LowerRow = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_LowerRow, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.UpperCol = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_UpperCol, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.UpperRow = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_UpperRow, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_SetValue, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.Value = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_Value, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_Array2OfSurface_ChangeValue, None, TColGeom_Array2OfSurface)
TColGeom_Array2OfSurface_swigregister = _TColGeom.TColGeom_Array2OfSurface_swigregister
TColGeom_Array2OfSurface_swigregister(TColGeom_Array2OfSurface)

class TColGeom_HArray1OfBSplineCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom_BSplineCurve &
        :rtype: None

        """
        _TColGeom.TColGeom_HArray1OfBSplineCurve_swiginit(self, _TColGeom.new_TColGeom_HArray1OfBSplineCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_BSplineCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_BSplineCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineCurve

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BSplineCurve

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom_Array1OfBSplineCurve const &":
        """
        :rtype: TColGeom_Array1OfBSplineCurve

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom_Array1OfBSplineCurve &":
        """
        :rtype: TColGeom_Array1OfBSplineCurve

        """
        return _TColGeom.TColGeom_HArray1OfBSplineCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HArray1OfBSplineCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfBSplineCurve
TColGeom_HArray1OfBSplineCurve.Init = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Init, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.Length = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Length, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.Lower = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Lower, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.Upper = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Upper, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_SetValue, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.Value = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Value, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_ChangeValue, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.Array1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_Array1, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve.ChangeArray1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfBSplineCurve_ChangeArray1, None, TColGeom_HArray1OfBSplineCurve)
TColGeom_HArray1OfBSplineCurve_swigregister = _TColGeom.TColGeom_HArray1OfBSplineCurve_swigregister
TColGeom_HArray1OfBSplineCurve_swigregister(TColGeom_HArray1OfBSplineCurve)

class Handle_TColGeom_HArray1OfBSplineCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_HArray1OfBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HArray1OfBSplineCurve
Handle_TColGeom_HArray1OfBSplineCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_Nullify, None, Handle_TColGeom_HArray1OfBSplineCurve)
Handle_TColGeom_HArray1OfBSplineCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_IsNull, None, Handle_TColGeom_HArray1OfBSplineCurve)
Handle_TColGeom_HArray1OfBSplineCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBSplineCurve__get_reference, None, Handle_TColGeom_HArray1OfBSplineCurve)
Handle_TColGeom_HArray1OfBSplineCurve_swigregister = _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_swigregister
Handle_TColGeom_HArray1OfBSplineCurve_swigregister(Handle_TColGeom_HArray1OfBSplineCurve)

def Handle_TColGeom_HArray1OfBSplineCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HArray1OfBSplineCurve const":
    return _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_DownCast(AnObject)
Handle_TColGeom_HArray1OfBSplineCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfBSplineCurve_DownCast

class TColGeom_HArray1OfBezierCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom_BezierCurve &
        :rtype: None

        """
        _TColGeom.TColGeom_HArray1OfBezierCurve_swiginit(self, _TColGeom.new_TColGeom_HArray1OfBezierCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_BezierCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_BezierCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BezierCurve

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BezierCurve

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom_Array1OfBezierCurve const &":
        """
        :rtype: TColGeom_Array1OfBezierCurve

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom_Array1OfBezierCurve &":
        """
        :rtype: TColGeom_Array1OfBezierCurve

        """
        return _TColGeom.TColGeom_HArray1OfBezierCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HArray1OfBezierCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfBezierCurve
TColGeom_HArray1OfBezierCurve.Init = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Init, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.Length = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Length, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.Lower = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Lower, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.Upper = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Upper, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_SetValue, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.Value = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Value, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_ChangeValue, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.Array1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_Array1, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve.ChangeArray1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfBezierCurve_ChangeArray1, None, TColGeom_HArray1OfBezierCurve)
TColGeom_HArray1OfBezierCurve_swigregister = _TColGeom.TColGeom_HArray1OfBezierCurve_swigregister
TColGeom_HArray1OfBezierCurve_swigregister(TColGeom_HArray1OfBezierCurve)

class Handle_TColGeom_HArray1OfBezierCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_HArray1OfBezierCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HArray1OfBezierCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HArray1OfBezierCurve
Handle_TColGeom_HArray1OfBezierCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBezierCurve_Nullify, None, Handle_TColGeom_HArray1OfBezierCurve)
Handle_TColGeom_HArray1OfBezierCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBezierCurve_IsNull, None, Handle_TColGeom_HArray1OfBezierCurve)
Handle_TColGeom_HArray1OfBezierCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfBezierCurve__get_reference, None, Handle_TColGeom_HArray1OfBezierCurve)
Handle_TColGeom_HArray1OfBezierCurve_swigregister = _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_swigregister
Handle_TColGeom_HArray1OfBezierCurve_swigregister(Handle_TColGeom_HArray1OfBezierCurve)

def Handle_TColGeom_HArray1OfBezierCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HArray1OfBezierCurve const":
    return _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_DownCast(AnObject)
Handle_TColGeom_HArray1OfBezierCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfBezierCurve_DownCast

class TColGeom_HArray1OfCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom_Curve &
        :rtype: None

        """
        _TColGeom.TColGeom_HArray1OfCurve_swiginit(self, _TColGeom.new_TColGeom_HArray1OfCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_HArray1OfCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom_Array1OfCurve const &":
        """
        :rtype: TColGeom_Array1OfCurve

        """
        return _TColGeom.TColGeom_HArray1OfCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom_Array1OfCurve &":
        """
        :rtype: TColGeom_Array1OfCurve

        """
        return _TColGeom.TColGeom_HArray1OfCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HArray1OfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfCurve
TColGeom_HArray1OfCurve.Init = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Init, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.Length = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Length, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.Lower = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Lower, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.Upper = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Upper, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_SetValue, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.Value = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Value, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_ChangeValue, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.Array1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_Array1, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve.ChangeArray1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfCurve_ChangeArray1, None, TColGeom_HArray1OfCurve)
TColGeom_HArray1OfCurve_swigregister = _TColGeom.TColGeom_HArray1OfCurve_swigregister
TColGeom_HArray1OfCurve_swigregister(TColGeom_HArray1OfCurve)

class Handle_TColGeom_HArray1OfCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HArray1OfCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_HArray1OfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HArray1OfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HArray1OfCurve
Handle_TColGeom_HArray1OfCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfCurve_Nullify, None, Handle_TColGeom_HArray1OfCurve)
Handle_TColGeom_HArray1OfCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfCurve_IsNull, None, Handle_TColGeom_HArray1OfCurve)
Handle_TColGeom_HArray1OfCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfCurve__get_reference, None, Handle_TColGeom_HArray1OfCurve)
Handle_TColGeom_HArray1OfCurve_swigregister = _TColGeom.Handle_TColGeom_HArray1OfCurve_swigregister
Handle_TColGeom_HArray1OfCurve_swigregister(Handle_TColGeom_HArray1OfCurve)

def Handle_TColGeom_HArray1OfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HArray1OfCurve const":
    return _TColGeom.Handle_TColGeom_HArray1OfCurve_DownCast(AnObject)
Handle_TColGeom_HArray1OfCurve_DownCast = _TColGeom.Handle_TColGeom_HArray1OfCurve_DownCast

class TColGeom_HArray1OfSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        _TColGeom.TColGeom_HArray1OfSurface_swiginit(self, _TColGeom.new_TColGeom_HArray1OfSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray1OfSurface_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_HArray1OfSurface_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom_Array1OfSurface const &":
        """
        :rtype: TColGeom_Array1OfSurface

        """
        return _TColGeom.TColGeom_HArray1OfSurface_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom_Array1OfSurface &":
        """
        :rtype: TColGeom_Array1OfSurface

        """
        return _TColGeom.TColGeom_HArray1OfSurface_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HArray1OfSurface(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray1OfSurface
TColGeom_HArray1OfSurface.Init = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Init, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.Length = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Length, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.Lower = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Lower, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.Upper = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Upper, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_SetValue, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.Value = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Value, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_ChangeValue, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.Array1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_Array1, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface.ChangeArray1 = new_instancemethod(_TColGeom.TColGeom_HArray1OfSurface_ChangeArray1, None, TColGeom_HArray1OfSurface)
TColGeom_HArray1OfSurface_swigregister = _TColGeom.TColGeom_HArray1OfSurface_swigregister
TColGeom_HArray1OfSurface_swigregister(TColGeom_HArray1OfSurface)

class Handle_TColGeom_HArray1OfSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HArray1OfSurface_swiginit(self, _TColGeom.new_Handle_TColGeom_HArray1OfSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HArray1OfSurface_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HArray1OfSurface
Handle_TColGeom_HArray1OfSurface.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfSurface_Nullify, None, Handle_TColGeom_HArray1OfSurface)
Handle_TColGeom_HArray1OfSurface.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfSurface_IsNull, None, Handle_TColGeom_HArray1OfSurface)
Handle_TColGeom_HArray1OfSurface._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HArray1OfSurface__get_reference, None, Handle_TColGeom_HArray1OfSurface)
Handle_TColGeom_HArray1OfSurface_swigregister = _TColGeom.Handle_TColGeom_HArray1OfSurface_swigregister
Handle_TColGeom_HArray1OfSurface_swigregister(Handle_TColGeom_HArray1OfSurface)

def Handle_TColGeom_HArray1OfSurface_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HArray1OfSurface const":
    return _TColGeom.Handle_TColGeom_HArray1OfSurface_DownCast(AnObject)
Handle_TColGeom_HArray1OfSurface_DownCast = _TColGeom.Handle_TColGeom_HArray1OfSurface_DownCast

class TColGeom_HArray2OfSurface(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        _TColGeom.TColGeom_HArray2OfSurface_swiginit(self, _TColGeom.new_TColGeom_HArray2OfSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray2OfSurface_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HArray2OfSurface_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_HArray2OfSurface_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_HArray2OfSurface_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Surface":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_HArray2OfSurface_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColGeom_Array2OfSurface const &":
        """
        :rtype: TColGeom_Array2OfSurface

        """
        return _TColGeom.TColGeom_HArray2OfSurface_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColGeom_Array2OfSurface &":
        """
        :rtype: TColGeom_Array2OfSurface

        """
        return _TColGeom.TColGeom_HArray2OfSurface_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HArray2OfSurface(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HArray2OfSurface
TColGeom_HArray2OfSurface.Init = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_Init, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.ColLength = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_ColLength, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.RowLength = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_RowLength, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.LowerCol = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_LowerCol, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.LowerRow = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_LowerRow, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.UpperCol = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_UpperCol, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.UpperRow = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_UpperRow, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_SetValue, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.Value = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_Value, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_ChangeValue, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.Array2 = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_Array2, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface.ChangeArray2 = new_instancemethod(_TColGeom.TColGeom_HArray2OfSurface_ChangeArray2, None, TColGeom_HArray2OfSurface)
TColGeom_HArray2OfSurface_swigregister = _TColGeom.TColGeom_HArray2OfSurface_swigregister
TColGeom_HArray2OfSurface_swigregister(TColGeom_HArray2OfSurface)

class Handle_TColGeom_HArray2OfSurface(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HArray2OfSurface_swiginit(self, _TColGeom.new_Handle_TColGeom_HArray2OfSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HArray2OfSurface_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HArray2OfSurface
Handle_TColGeom_HArray2OfSurface.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HArray2OfSurface_Nullify, None, Handle_TColGeom_HArray2OfSurface)
Handle_TColGeom_HArray2OfSurface.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HArray2OfSurface_IsNull, None, Handle_TColGeom_HArray2OfSurface)
Handle_TColGeom_HArray2OfSurface._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HArray2OfSurface__get_reference, None, Handle_TColGeom_HArray2OfSurface)
Handle_TColGeom_HArray2OfSurface_swigregister = _TColGeom.Handle_TColGeom_HArray2OfSurface_swigregister
Handle_TColGeom_HArray2OfSurface_swigregister(Handle_TColGeom_HArray2OfSurface)

def Handle_TColGeom_HArray2OfSurface_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HArray2OfSurface const":
    return _TColGeom.Handle_TColGeom_HArray2OfSurface_DownCast(AnObject)
Handle_TColGeom_HArray2OfSurface_DownCast = _TColGeom.Handle_TColGeom_HArray2OfSurface_DownCast

class TColGeom_HSequenceOfBoundedCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColGeom.TColGeom_HSequenceOfBoundedCurve_swiginit(self, _TColGeom.new_TColGeom_HSequenceOfBoundedCurve(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom_BoundedCurve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom_BoundedCurve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BoundedCurve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BoundedCurve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColGeom_HSequenceOfBoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColGeom_HSequenceOfBoundedCurve

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_BoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Remove(self, *args)


    def Sequence(self, *args) -> "TColGeom_SequenceOfBoundedCurve const &":
        """
        :rtype: TColGeom_SequenceOfBoundedCurve

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColGeom_SequenceOfBoundedCurve &":
        """
        :rtype: TColGeom_SequenceOfBoundedCurve

        """
        return _TColGeom.TColGeom_HSequenceOfBoundedCurve_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HSequenceOfBoundedCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HSequenceOfBoundedCurve
TColGeom_HSequenceOfBoundedCurve.IsEmpty = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_IsEmpty, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Length = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Length, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Clear = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Clear, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Append = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Append, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Prepend = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Prepend, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Reverse = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Reverse, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.InsertBefore = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_InsertBefore, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.InsertAfter = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_InsertAfter, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Exchange = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Exchange, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Split = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Split, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_SetValue, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Value, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_ChangeValue, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Remove = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Remove, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.Sequence = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_Sequence, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve.ChangeSequence = new_instancemethod(_TColGeom.TColGeom_HSequenceOfBoundedCurve_ChangeSequence, None, TColGeom_HSequenceOfBoundedCurve)
TColGeom_HSequenceOfBoundedCurve_swigregister = _TColGeom.TColGeom_HSequenceOfBoundedCurve_swigregister
TColGeom_HSequenceOfBoundedCurve_swigregister(TColGeom_HSequenceOfBoundedCurve)

class Handle_TColGeom_HSequenceOfBoundedCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_HSequenceOfBoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HSequenceOfBoundedCurve
Handle_TColGeom_HSequenceOfBoundedCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_Nullify, None, Handle_TColGeom_HSequenceOfBoundedCurve)
Handle_TColGeom_HSequenceOfBoundedCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_IsNull, None, Handle_TColGeom_HSequenceOfBoundedCurve)
Handle_TColGeom_HSequenceOfBoundedCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve__get_reference, None, Handle_TColGeom_HSequenceOfBoundedCurve)
Handle_TColGeom_HSequenceOfBoundedCurve_swigregister = _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_swigregister
Handle_TColGeom_HSequenceOfBoundedCurve_swigregister(Handle_TColGeom_HSequenceOfBoundedCurve)

def Handle_TColGeom_HSequenceOfBoundedCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HSequenceOfBoundedCurve const":
    return _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_DownCast(AnObject)
Handle_TColGeom_HSequenceOfBoundedCurve_DownCast = _TColGeom.Handle_TColGeom_HSequenceOfBoundedCurve_DownCast

class TColGeom_HSequenceOfCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColGeom.TColGeom_HSequenceOfCurve_swiginit(self, _TColGeom.new_TColGeom_HSequenceOfCurve(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom_Curve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom_Curve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Curve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Curve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColGeom_HSequenceOfCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColGeom_HSequenceOfCurve

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom_Curve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Curve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Remove(self, *args)


    def Sequence(self, *args) -> "TColGeom_SequenceOfCurve const &":
        """
        :rtype: TColGeom_SequenceOfCurve

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColGeom_SequenceOfCurve &":
        """
        :rtype: TColGeom_SequenceOfCurve

        """
        return _TColGeom.TColGeom_HSequenceOfCurve_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_HSequenceOfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_HSequenceOfCurve
TColGeom_HSequenceOfCurve.IsEmpty = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_IsEmpty, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Length = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Length, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Clear = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Clear, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Append = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Append, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Prepend = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Prepend, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Reverse = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Reverse, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.InsertBefore = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_InsertBefore, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.InsertAfter = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_InsertAfter, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Exchange = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Exchange, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Split = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Split, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_SetValue, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Value = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Value, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_ChangeValue, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Remove = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Remove, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.Sequence = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_Sequence, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve.ChangeSequence = new_instancemethod(_TColGeom.TColGeom_HSequenceOfCurve_ChangeSequence, None, TColGeom_HSequenceOfCurve)
TColGeom_HSequenceOfCurve_swigregister = _TColGeom.TColGeom_HSequenceOfCurve_swigregister
TColGeom_HSequenceOfCurve_swigregister(TColGeom_HSequenceOfCurve)

class Handle_TColGeom_HSequenceOfCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_HSequenceOfCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_HSequenceOfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_HSequenceOfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_HSequenceOfCurve
Handle_TColGeom_HSequenceOfCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfCurve_Nullify, None, Handle_TColGeom_HSequenceOfCurve)
Handle_TColGeom_HSequenceOfCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfCurve_IsNull, None, Handle_TColGeom_HSequenceOfCurve)
Handle_TColGeom_HSequenceOfCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_HSequenceOfCurve__get_reference, None, Handle_TColGeom_HSequenceOfCurve)
Handle_TColGeom_HSequenceOfCurve_swigregister = _TColGeom.Handle_TColGeom_HSequenceOfCurve_swigregister
Handle_TColGeom_HSequenceOfCurve_swigregister(Handle_TColGeom_HSequenceOfCurve)

def Handle_TColGeom_HSequenceOfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_HSequenceOfCurve const":
    return _TColGeom.Handle_TColGeom_HSequenceOfCurve_DownCast(AnObject)
Handle_TColGeom_HSequenceOfCurve_DownCast = _TColGeom.Handle_TColGeom_HSequenceOfCurve_DownCast

class TColGeom_SequenceNodeOfSequenceOfBoundedCurve(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom_BoundedCurve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swiginit(self, _TColGeom.new_TColGeom_SequenceNodeOfSequenceOfBoundedCurve(*args))

    def Value(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_SequenceNodeOfSequenceOfBoundedCurve_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceNodeOfSequenceOfBoundedCurve
TColGeom_SequenceNodeOfSequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom.TColGeom_SequenceNodeOfSequenceOfBoundedCurve_Value, None, TColGeom_SequenceNodeOfSequenceOfBoundedCurve)
TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister = _TColGeom.TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister
TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister(TColGeom_SequenceNodeOfSequenceOfBoundedCurve)

class Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_Nullify, None, Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_IsNull, None, Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve__get_reference, None, Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_swigregister(Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve)

def Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve const":
    return _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_DownCast(AnObject)
Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_DownCast = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfBoundedCurve_DownCast

class TColGeom_SequenceNodeOfSequenceOfCurve(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom_Curve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceNodeOfSequenceOfCurve_swiginit(self, _TColGeom.new_TColGeom_SequenceNodeOfSequenceOfCurve(*args))

    def Value(self, *args) -> "Handle_Geom_Curve":
        """
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_SequenceNodeOfSequenceOfCurve_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_SequenceNodeOfSequenceOfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceNodeOfSequenceOfCurve
TColGeom_SequenceNodeOfSequenceOfCurve.Value = new_instancemethod(_TColGeom.TColGeom_SequenceNodeOfSequenceOfCurve_Value, None, TColGeom_SequenceNodeOfSequenceOfCurve)
TColGeom_SequenceNodeOfSequenceOfCurve_swigregister = _TColGeom.TColGeom_SequenceNodeOfSequenceOfCurve_swigregister
TColGeom_SequenceNodeOfSequenceOfCurve_swigregister(TColGeom_SequenceNodeOfSequenceOfCurve)

class Handle_TColGeom_SequenceNodeOfSequenceOfCurve(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_swiginit(self, _TColGeom.new_Handle_TColGeom_SequenceNodeOfSequenceOfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_SequenceNodeOfSequenceOfCurve
Handle_TColGeom_SequenceNodeOfSequenceOfCurve.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_Nullify, None, Handle_TColGeom_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfCurve.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_IsNull, None, Handle_TColGeom_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfCurve._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve__get_reference, None, Handle_TColGeom_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom_SequenceNodeOfSequenceOfCurve_swigregister = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_swigregister
Handle_TColGeom_SequenceNodeOfSequenceOfCurve_swigregister(Handle_TColGeom_SequenceNodeOfSequenceOfCurve)

def Handle_TColGeom_SequenceNodeOfSequenceOfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_SequenceNodeOfSequenceOfCurve const":
    return _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_DownCast(AnObject)
Handle_TColGeom_SequenceNodeOfSequenceOfCurve_DownCast = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfCurve_DownCast

class TColGeom_SequenceNodeOfSequenceOfSurface(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom_Surface &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceNodeOfSequenceOfSurface_swiginit(self, _TColGeom.new_TColGeom_SequenceNodeOfSequenceOfSurface(*args))

    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_SequenceNodeOfSequenceOfSurface_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom_SequenceNodeOfSequenceOfSurface(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceNodeOfSequenceOfSurface
TColGeom_SequenceNodeOfSequenceOfSurface.Value = new_instancemethod(_TColGeom.TColGeom_SequenceNodeOfSequenceOfSurface_Value, None, TColGeom_SequenceNodeOfSequenceOfSurface)
TColGeom_SequenceNodeOfSequenceOfSurface_swigregister = _TColGeom.TColGeom_SequenceNodeOfSequenceOfSurface_swigregister
TColGeom_SequenceNodeOfSequenceOfSurface_swigregister(TColGeom_SequenceNodeOfSequenceOfSurface)

class Handle_TColGeom_SequenceNodeOfSequenceOfSurface(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_swiginit(self, _TColGeom.new_Handle_TColGeom_SequenceNodeOfSequenceOfSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom.delete_Handle_TColGeom_SequenceNodeOfSequenceOfSurface
Handle_TColGeom_SequenceNodeOfSequenceOfSurface.Nullify = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_Nullify, None, Handle_TColGeom_SequenceNodeOfSequenceOfSurface)
Handle_TColGeom_SequenceNodeOfSequenceOfSurface.IsNull = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_IsNull, None, Handle_TColGeom_SequenceNodeOfSequenceOfSurface)
Handle_TColGeom_SequenceNodeOfSequenceOfSurface._get_reference = new_instancemethod(_TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface__get_reference, None, Handle_TColGeom_SequenceNodeOfSequenceOfSurface)
Handle_TColGeom_SequenceNodeOfSequenceOfSurface_swigregister = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_swigregister
Handle_TColGeom_SequenceNodeOfSequenceOfSurface_swigregister(Handle_TColGeom_SequenceNodeOfSequenceOfSurface)

def Handle_TColGeom_SequenceNodeOfSequenceOfSurface_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom_SequenceNodeOfSequenceOfSurface const":
    return _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_DownCast(AnObject)
Handle_TColGeom_SequenceNodeOfSequenceOfSurface_DownCast = _TColGeom.Handle_TColGeom_SequenceNodeOfSequenceOfSurface_DownCast

class TColGeom_SequenceOfBoundedCurve(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceOfBoundedCurve_swiginit(self, _TColGeom.new_TColGeom_SequenceOfBoundedCurve(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom_SequenceOfBoundedCurve const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfBoundedCurve &
        :rtype: TColGeom_SequenceOfBoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_SequenceOfBoundedCurve const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfBoundedCurve &
        :rtype: TColGeom_SequenceOfBoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_BoundedCurve &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_BoundedCurve &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_BoundedCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_BoundedCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_First(self, *args)


    def Last(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom_BoundedCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_BoundedCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_BoundedCurve

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfBoundedCurve_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfBoundedCurve
TColGeom_SequenceOfBoundedCurve.Clear = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Clear, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Assign = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Assign, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Set = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Set, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Append = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Append, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Prepend = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Prepend, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.InsertBefore = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_InsertBefore, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.InsertAfter = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_InsertAfter, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.First = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_First, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Last = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Last, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Split = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Split, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Value, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_SetValue, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_ChangeValue, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve.Remove = new_instancemethod(_TColGeom.TColGeom_SequenceOfBoundedCurve_Remove, None, TColGeom_SequenceOfBoundedCurve)
TColGeom_SequenceOfBoundedCurve_swigregister = _TColGeom.TColGeom_SequenceOfBoundedCurve_swigregister
TColGeom_SequenceOfBoundedCurve_swigregister(TColGeom_SequenceOfBoundedCurve)

class TColGeom_SequenceOfCurve(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceOfCurve_swiginit(self, _TColGeom.new_TColGeom_SequenceOfCurve(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom_SequenceOfCurve const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfCurve &
        :rtype: TColGeom_SequenceOfCurve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_SequenceOfCurve const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfCurve &
        :rtype: TColGeom_SequenceOfCurve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_Curve &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_Curve &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom_Curve":
        """
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_First(self, *args)


    def Last(self, *args) -> "Handle_Geom_Curve":
        """
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom_Curve &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _TColGeom.TColGeom_SequenceOfCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfCurve_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfCurve
TColGeom_SequenceOfCurve.Clear = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Clear, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Assign = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Assign, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Set = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Set, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Append = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Append, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Prepend = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Prepend, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.InsertBefore = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_InsertBefore, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.InsertAfter = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_InsertAfter, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.First = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_First, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Last = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Last, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Split = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Split, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Value = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Value, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.SetValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_SetValue, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.ChangeValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_ChangeValue, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve.Remove = new_instancemethod(_TColGeom.TColGeom_SequenceOfCurve_Remove, None, TColGeom_SequenceOfCurve)
TColGeom_SequenceOfCurve_swigregister = _TColGeom.TColGeom_SequenceOfCurve_swigregister
TColGeom_SequenceOfCurve_swigregister(TColGeom_SequenceOfCurve)

class TColGeom_SequenceOfSurface(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        _TColGeom.TColGeom_SequenceOfSurface_swiginit(self, _TColGeom.new_TColGeom_SequenceOfSurface(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom_SequenceOfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfSurface &
        :rtype: TColGeom_SequenceOfSurface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Assign(self, *args)


    def Set(self, *args) -> "TColGeom_SequenceOfSurface const &":
        """
        :param Other:
        :type Other: TColGeom_SequenceOfSurface &
        :rtype: TColGeom_SequenceOfSurface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param S:
        :type S: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom_Surface &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom_Surface":
        """
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_First(self, *args)


    def Last(self, *args) -> "Handle_Geom_Surface":
        """
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom_SequenceOfSurface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom_Surface &
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom_Surface":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Surface

        """
        return _TColGeom.TColGeom_SequenceOfSurface_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom.TColGeom_SequenceOfSurface_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom.delete_TColGeom_SequenceOfSurface
TColGeom_SequenceOfSurface.Clear = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Clear, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Assign = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Assign, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Set = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Set, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Append = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Append, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Prepend = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Prepend, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.InsertBefore = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_InsertBefore, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.InsertAfter = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_InsertAfter, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.First = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_First, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Last = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Last, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Split = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Split, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Value = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Value, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.SetValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_SetValue, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.ChangeValue = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_ChangeValue, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface.Remove = new_instancemethod(_TColGeom.TColGeom_SequenceOfSurface_Remove, None, TColGeom_SequenceOfSurface)
TColGeom_SequenceOfSurface_swigregister = _TColGeom.TColGeom_SequenceOfSurface_swigregister
TColGeom_SequenceOfSurface_swigregister(TColGeom_SequenceOfSurface)



