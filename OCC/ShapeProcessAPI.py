# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ShapeProcessAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ShapeProcessAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ShapeProcessAPI')
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ShapeProcessAPI', [dirname(__file__)])
        except ImportError:
            import _ShapeProcessAPI
            return _ShapeProcessAPI
        try:
            _mod = imp.load_module('_ShapeProcessAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ShapeProcessAPI = swig_import_helper()
    del swig_import_helper
else:
    import _ShapeProcessAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ShapeProcessAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ShapeProcessAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ShapeProcessAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ShapeProcessAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.ShapeProcess
import OCC.Standard
import OCC.MMgt
import OCC.Resource
import OCC.TCollection
import OCC.TColStd
import OCC.Message
import OCC.TopoDS
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs
import OCC.BRepTools
import OCC.Bnd
import OCC.TopTools
import OCC.BRep
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.ShapeExtend
import OCC.TColGeom
import OCC.ShapeBuild

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class ShapeProcessAPI_ApplySequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an object and loads resource file and sequence of operators given by their names.

        :param rscName:
        :type rscName: char *
        :param seqName: default value is 
        :type seqName: char *
        :rtype: None

        """
        _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swiginit(self, _ShapeProcessAPI.new_ShapeProcessAPI_ApplySequence(*args))

    def Context(self, *args) -> "Handle_ShapeProcess_ShapeContext":
        """
        * Returns object for managing resource file and sequence of operators.

        :rtype: Handle_ShapeProcess_ShapeContext

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Context(self, *args)


    def PrepareShape(self, *args) -> "TopoDS_Shape":
        """
        * Performs sequence of operators stored in myRsc. If <fillmap> is True adds history 'shape-shape' into myMap for shape and its subshapes until level <until> (included). If <until> is TopAbs_SHAPE, all the subshapes are considered.

        :param shape:
        :type shape: TopoDS_Shape &
        :param fillmap: default value is Standard_False
        :type fillmap: bool
        :param until: default value is TopAbs_SHAPE
        :type until: TopAbs_ShapeEnum
        :rtype: TopoDS_Shape

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrepareShape(self, *args)


    def ClearMap(self, *args) -> "void":
        """
        * Clears myMap with accumulated history.

        :rtype: None

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_ClearMap(self, *args)


    def Map(self, *args) -> "TopTools_DataMapOfShapeShape const &":
        """
        * Returns myMap with accumulated history.

        :rtype: TopTools_DataMapOfShapeShape

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Map(self, *args)


    def PrintPreparationResult(self, *args) -> "void":
        """
        * Prints result of preparation onto the messenger of the context. Note that results can be accumulated from previous preparations it method ClearMap was not called before PrepareShape.

        :rtype: None

        """
        return _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrintPreparationResult(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ShapeProcessAPI.delete_ShapeProcessAPI_ApplySequence
ShapeProcessAPI_ApplySequence.Context = new_instancemethod(_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Context, None, ShapeProcessAPI_ApplySequence)
ShapeProcessAPI_ApplySequence.PrepareShape = new_instancemethod(_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrepareShape, None, ShapeProcessAPI_ApplySequence)
ShapeProcessAPI_ApplySequence.ClearMap = new_instancemethod(_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_ClearMap, None, ShapeProcessAPI_ApplySequence)
ShapeProcessAPI_ApplySequence.Map = new_instancemethod(_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_Map, None, ShapeProcessAPI_ApplySequence)
ShapeProcessAPI_ApplySequence.PrintPreparationResult = new_instancemethod(_ShapeProcessAPI.ShapeProcessAPI_ApplySequence_PrintPreparationResult, None, ShapeProcessAPI_ApplySequence)
ShapeProcessAPI_ApplySequence_swigregister = _ShapeProcessAPI.ShapeProcessAPI_ApplySequence_swigregister
ShapeProcessAPI_ApplySequence_swigregister(ShapeProcessAPI_ApplySequence)



