# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Select3D.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Select3D')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Select3D')
    _Select3D = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Select3D', [dirname(__file__)])
        except ImportError:
            import _Select3D
            return _Select3D
        try:
            _mod = imp.load_module('_Select3D', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Select3D = swig_import_helper()
    del swig_import_helper
else:
    import _Select3D
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Select3D.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Select3D.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Select3D.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Select3D.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Select3D.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Select3D.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Select3D.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Select3D.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Select3D.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Select3D.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Select3D.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Select3D.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Select3D.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Select3D.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Select3D.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Select3D.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Select3D.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Select3D.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Bnd
import OCC.Standard
import OCC.gp
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.V3d
import OCC.Graphic3d
import OCC.Quantity
import OCC.Aspect
import OCC.Image
import OCC.NCollection
import OCC.OSD
import OCC.Visual3d
import OCC.SelectBasics
import OCC.TColgp
import OCC.TopLoc
import OCC.Geom
import OCC.GeomAbs

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

Select3D_TOS_INTERIOR = _Select3D.Select3D_TOS_INTERIOR
Select3D_TOS_BOUNDARY = _Select3D.Select3D_TOS_BOUNDARY
class Select3D_Box2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    xmin = _swig_property(_Select3D.Select3D_Box2d_xmin_get, _Select3D.Select3D_Box2d_xmin_set)
    ymin = _swig_property(_Select3D.Select3D_Box2d_ymin_get, _Select3D.Select3D_Box2d_ymin_set)
    xmax = _swig_property(_Select3D.Select3D_Box2d_xmax_get, _Select3D.Select3D_Box2d_xmax_set)
    ymax = _swig_property(_Select3D.Select3D_Box2d_ymax_get, _Select3D.Select3D_Box2d_ymax_set)

    def __init__(self, *args):
        """
        :rtype: None

        :param theBox:
        :type theBox: Bnd_Box2d &
        :rtype: None

        """
        _Select3D.Select3D_Box2d_swiginit(self, _Select3D.new_Select3D_Box2d(*args))

    def Set(self, *args) -> "Select3D_Box2d":
        """
        :param theBox:
        :type theBox: Bnd_Box2d &
        :rtype: inline Select3D_Box2d

        """
        return _Select3D.Select3D_Box2d_Set(self, *args)


    def Update(self, *args) -> "void":
        """
        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: inline void

        """
        return _Select3D.Select3D_Box2d_Update(self, *args)


    def SetVoid(self, *args) -> "void":
        """
        :rtype: inline void

        """
        return _Select3D.Select3D_Box2d_SetVoid(self, *args)


    def IsVoid(self, *args) -> "Standard_Boolean":
        """
        :rtype: inline bool

        """
        return _Select3D.Select3D_Box2d_IsVoid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_Box2d
Select3D_Box2d.Set = new_instancemethod(_Select3D.Select3D_Box2d_Set, None, Select3D_Box2d)
Select3D_Box2d.Update = new_instancemethod(_Select3D.Select3D_Box2d_Update, None, Select3D_Box2d)
Select3D_Box2d.SetVoid = new_instancemethod(_Select3D.Select3D_Box2d_SetVoid, None, Select3D_Box2d)
Select3D_Box2d.IsVoid = new_instancemethod(_Select3D.Select3D_Box2d_IsVoid, None, Select3D_Box2d)
Select3D_Box2d_swigregister = _Select3D.Select3D_Box2d_swigregister
Select3D_Box2d_swigregister(Select3D_Box2d)

class Select3D_ListIteratorOfListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Select3D_ListOfSensitive &
        :rtype: None

        """
        _Select3D.Select3D_ListIteratorOfListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListIteratorOfListOfSensitive(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Next(self, *args)


    def Value(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitive_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListIteratorOfListOfSensitive
Select3D_ListIteratorOfListOfSensitive.Initialize = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Initialize, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.More = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_More, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.Next = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Next, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive.Value = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitive_Value, None, Select3D_ListIteratorOfListOfSensitive)
Select3D_ListIteratorOfListOfSensitive_swigregister = _Select3D.Select3D_ListIteratorOfListOfSensitive_swigregister
Select3D_ListIteratorOfListOfSensitive_swigregister(Select3D_ListIteratorOfListOfSensitive)

class Select3D_ListIteratorOfListOfSensitiveTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListIteratorOfListOfSensitiveTriangle(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Next(self, *args)


    def Value(self, *args) -> "Handle_Select3D_SensitiveTriangle":
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListIteratorOfListOfSensitiveTriangle
Select3D_ListIteratorOfListOfSensitiveTriangle.Initialize = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Initialize, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.More = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_More, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.Next = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Next, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle.Value = new_instancemethod(_Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_Value, None, Select3D_ListIteratorOfListOfSensitiveTriangle)
Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister
Select3D_ListIteratorOfListOfSensitiveTriangle_swigregister(Select3D_ListIteratorOfListOfSensitiveTriangle)

class Select3D_ListNodeOfListOfSensitive(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_ListNodeOfListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListNodeOfListOfSensitive(*args))

    def Value(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListNodeOfListOfSensitive_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_ListNodeOfListOfSensitive(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListNodeOfListOfSensitive
Select3D_ListNodeOfListOfSensitive.Value = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitive_Value, None, Select3D_ListNodeOfListOfSensitive)
Select3D_ListNodeOfListOfSensitive_swigregister = _Select3D.Select3D_ListNodeOfListOfSensitive_swigregister
Select3D_ListNodeOfListOfSensitive_swigregister(Select3D_ListNodeOfListOfSensitive)

class Handle_Select3D_ListNodeOfListOfSensitive(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_swiginit(self, _Select3D.new_Handle_Select3D_ListNodeOfListOfSensitive(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_ListNodeOfListOfSensitive
Handle_Select3D_ListNodeOfListOfSensitive.Nullify = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_Nullify, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive.IsNull = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive_IsNull, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive._get_reference = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitive__get_reference, None, Handle_Select3D_ListNodeOfListOfSensitive)
Handle_Select3D_ListNodeOfListOfSensitive_swigregister = _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_swigregister
Handle_Select3D_ListNodeOfListOfSensitive_swigregister(Handle_Select3D_ListNodeOfListOfSensitive)

def Handle_Select3D_ListNodeOfListOfSensitive_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_ListNodeOfListOfSensitive const":
    return _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast(AnObject)
Handle_Select3D_ListNodeOfListOfSensitive_DownCast = _Select3D.Handle_Select3D_ListNodeOfListOfSensitive_DownCast

class Select3D_ListNodeOfListOfSensitiveTriangle(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListNodeOfListOfSensitiveTriangle(*args))

    def Value(self, *args) -> "Handle_Select3D_SensitiveTriangle":
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_ListNodeOfListOfSensitiveTriangle(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListNodeOfListOfSensitiveTriangle
Select3D_ListNodeOfListOfSensitiveTriangle.Value = new_instancemethod(_Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_Value, None, Select3D_ListNodeOfListOfSensitiveTriangle)
Select3D_ListNodeOfListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListNodeOfListOfSensitiveTriangle_swigregister
Select3D_ListNodeOfListOfSensitiveTriangle_swigregister(Select3D_ListNodeOfListOfSensitiveTriangle)

class Handle_Select3D_ListNodeOfListOfSensitiveTriangle(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swiginit(self, _Select3D.new_Handle_Select3D_ListNodeOfListOfSensitiveTriangle(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_ListNodeOfListOfSensitiveTriangle
Handle_Select3D_ListNodeOfListOfSensitiveTriangle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_Nullify, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_IsNull, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle._get_reference = new_instancemethod(_Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle__get_reference, None, Handle_Select3D_ListNodeOfListOfSensitiveTriangle)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister = _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_swigregister(Handle_Select3D_ListNodeOfListOfSensitiveTriangle)

def Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_ListNodeOfListOfSensitiveTriangle const":
    return _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast(AnObject)
Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast = _Select3D.Handle_Select3D_ListNodeOfListOfSensitiveTriangle_DownCast

class Select3D_ListOfSensitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        _Select3D.Select3D_ListOfSensitive_swiginit(self, _Select3D.new_Select3D_ListOfSensitive(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Select3D.Select3D_ListOfSensitive_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListOfSensitive_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Append(self, *args)


    def First(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListOfSensitive_First(self, *args)


    def Last(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_ListOfSensitive_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitive &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitive &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitive_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListOfSensitive
Select3D_ListOfSensitive.Assign = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Assign, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Set = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Set, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Extent = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Extent, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Clear = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Clear, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.IsEmpty = new_instancemethod(_Select3D.Select3D_ListOfSensitive_IsEmpty, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Prepend = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Prepend, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Append = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Append, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.First = new_instancemethod(_Select3D.Select3D_ListOfSensitive_First, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Last = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Last, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.RemoveFirst = new_instancemethod(_Select3D.Select3D_ListOfSensitive_RemoveFirst, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.Remove = new_instancemethod(_Select3D.Select3D_ListOfSensitive_Remove, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.InsertBefore = new_instancemethod(_Select3D.Select3D_ListOfSensitive_InsertBefore, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive.InsertAfter = new_instancemethod(_Select3D.Select3D_ListOfSensitive_InsertAfter, None, Select3D_ListOfSensitive)
Select3D_ListOfSensitive_swigregister = _Select3D.Select3D_ListOfSensitive_swigregister
Select3D_ListOfSensitive_swigregister(Select3D_ListOfSensitive)

class Select3D_ListOfSensitiveTriangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        _Select3D.Select3D_ListOfSensitiveTriangle_swiginit(self, _Select3D.new_Select3D_ListOfSensitiveTriangle(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :rtype: None

        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param theIt:
        :type theIt: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Append(self, *args)


    def First(self, *args) -> "Handle_Select3D_SensitiveTriangle":
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_First(self, *args)


    def Last(self, *args) -> "Handle_Select3D_SensitiveTriangle":
        """
        :rtype: Handle_Select3D_SensitiveTriangle

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Select3D_SensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        :param Other:
        :type Other: Select3D_ListOfSensitiveTriangle &
        :param It:
        :type It: Select3D_ListIteratorOfListOfSensitiveTriangle &
        :rtype: None

        """
        return _Select3D.Select3D_ListOfSensitiveTriangle_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_ListOfSensitiveTriangle
Select3D_ListOfSensitiveTriangle.Assign = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Assign, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Set = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Set, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Extent = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Extent, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Clear = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Clear, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.IsEmpty = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_IsEmpty, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Prepend = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Prepend, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Append = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Append, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.First = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_First, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Last = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Last, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.RemoveFirst = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_RemoveFirst, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.Remove = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_Remove, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.InsertBefore = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_InsertBefore, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle.InsertAfter = new_instancemethod(_Select3D.Select3D_ListOfSensitiveTriangle_InsertAfter, None, Select3D_ListOfSensitiveTriangle)
Select3D_ListOfSensitiveTriangle_swigregister = _Select3D.Select3D_ListOfSensitiveTriangle_swigregister
Select3D_ListOfSensitiveTriangle_swigregister(Select3D_ListOfSensitiveTriangle)

class Select3D_Pnt(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    x = _swig_property(_Select3D.Select3D_Pnt_x_get, _Select3D.Select3D_Pnt_x_set)
    y = _swig_property(_Select3D.Select3D_Pnt_y_get, _Select3D.Select3D_Pnt_y_set)
    z = _swig_property(_Select3D.Select3D_Pnt_z_get, _Select3D.Select3D_Pnt_z_set)

    def Set(self, *args) -> "gp_Pnt":
        """
        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: inline gp_Pnt

        """
        return _Select3D.Select3D_Pnt_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_Pnt
Select3D_Pnt.Set = new_instancemethod(_Select3D.Select3D_Pnt_Set, None, Select3D_Pnt)
Select3D_Pnt_swigregister = _Select3D.Select3D_Pnt_swigregister
Select3D_Pnt_swigregister(Select3D_Pnt)

class Select3D_Pnt2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    x = _swig_property(_Select3D.Select3D_Pnt2d_x_get, _Select3D.Select3D_Pnt2d_x_set)
    y = _swig_property(_Select3D.Select3D_Pnt2d_y_get, _Select3D.Select3D_Pnt2d_y_set)

    def Set(self, *args) -> "gp_Pnt2d":
        """
        :param thePnt:
        :type thePnt: gp_Pnt2d
        :rtype: inline gp_Pnt2d

        """
        return _Select3D.Select3D_Pnt2d_Set(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_Pnt2d
Select3D_Pnt2d.Set = new_instancemethod(_Select3D.Select3D_Pnt2d_Set, None, Select3D_Pnt2d)
Select3D_Pnt2d_swigregister = _Select3D.Select3D_Pnt2d_swigregister
Select3D_Pnt2d_swigregister(Select3D_Pnt2d)

class Select3D_PointData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theNbPoints:
        :type theNbPoints: int
        :rtype: None

        """
        _Select3D.Select3D_PointData_swiginit(self, _Select3D.new_Select3D_PointData(*args))

    def SetPnt(self, *args) -> "void":
        """
        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: Select3D_Pnt &
        :rtype: None

        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: gp_Pnt
        :rtype: None

        """
        return _Select3D.Select3D_PointData_SetPnt(self, *args)


    def SetPnt2d(self, *args) -> "void":
        """
        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: Select3D_Pnt2d &
        :rtype: None

        :param theIndex:
        :type theIndex: int
        :param theValue:
        :type theValue: gp_Pnt2d
        :rtype: None

        """
        return _Select3D.Select3D_PointData_SetPnt2d(self, *args)


    def Pnt(self, *args) -> "Select3D_Pnt":
        """
        :param theIndex:
        :type theIndex: int
        :rtype: Select3D_Pnt

        """
        return _Select3D.Select3D_PointData_Pnt(self, *args)


    def Pnt2d(self, *args) -> "Select3D_Pnt2d":
        """
        :param theIndex:
        :type theIndex: int
        :rtype: Select3D_Pnt2d

        """
        return _Select3D.Select3D_PointData_Pnt2d(self, *args)


    def Size(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Select3D.Select3D_PointData_Size(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_PointData
Select3D_PointData.SetPnt = new_instancemethod(_Select3D.Select3D_PointData_SetPnt, None, Select3D_PointData)
Select3D_PointData.SetPnt2d = new_instancemethod(_Select3D.Select3D_PointData_SetPnt2d, None, Select3D_PointData)
Select3D_PointData.Pnt = new_instancemethod(_Select3D.Select3D_PointData_Pnt, None, Select3D_PointData)
Select3D_PointData.Pnt2d = new_instancemethod(_Select3D.Select3D_PointData_Pnt2d, None, Select3D_PointData)
Select3D_PointData.Size = new_instancemethod(_Select3D.Select3D_PointData_Size, None, Select3D_PointData)
Select3D_PointData_swigregister = _Select3D.Select3D_PointData_swigregister
Select3D_PointData_swigregister(Select3D_PointData)

class Select3D_Projector(OCC.Standard.Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the 3D projector object from the passed view. The projector captures current model-view and projection transformation of the passed view.

        :param theView:
        :type theView: Handle_V3d_View &
        :rtype: None

        * Constructs identity projector.

        :rtype: None

        * Builds the Projector from the model-view transformation specified by the passed viewing coordinate system <theCS>. The Projector has identity projection transformation, is orthogonal. The viewing coordinate system could be constructed from x direction, view plane normal direction, and view point location in world-coordinate space.

        :param theCS:
        :type theCS: gp_Ax2
        :rtype: None

        * Builds the Projector from the model-view transformation specified by the passed view coordinate system <theCS> and simplified perspective projection transformation defined by <theFocus> parameter. The viewing coordinate system could be constructed from x direction, view plane normal direction, and focal point location in world-coordinate space. <theFocus> should represent distance of an eye from view plane in world-coordinate space (focal distance).

        :param theCS:
        :type theCS: gp_Ax2
        :param theFocus:
        :type theFocus: float
        :rtype: None

        * Build the Projector from the model-view transformation passed as <theViewTrsf> and simplified perspective projection transformation parameters passed as <theIsPersp> and <theFocus>. In case, when <theViewTrsf> transformation should represent custom view projection, it could be constructed from two separate components: transposed view orientation matrix and translation of focal point in view-coordinate system. <theViewTrsf> could be built up from x direction, up direction, view plane normal direction vectors and translation with SetValues(...) method, where first row arguments (a11, a12, a13, a14) are x, y, z component of x direction vector, and x value of reversed translation vector. Second row arguments, are x y z for up direction and y value of reversed translation, and the third row defined in the same manner. This also suits for simple perspective view, where <theFocus> is the focale distance of an eye from view plane in world-space coordinates. Note, that in that case amount of perspective distortion (perspective angle) should be defined through focal distance.

        :param theViewTrsf:
        :type theViewTrsf: gp_Trsf
        :param theIsPersp:
        :type theIsPersp: bool
        :param theFocus:
        :type theFocus: float
        :rtype: None

        * Builds the Projector from the model-view transformation passed as <theViewTrsf> and projection transformation for <theIsPersp> and <theFocus> parameters. In case, when <theViewTrsf> transformation should represent custom view projection, it could be constructed from two separate components: transposed view orientation matrix and translation of a focal point in view-coordinate system. This also suits for perspective view, with <theFocus> that could be equal to distance from an eye to a view plane in world-coordinates (focal distance). The 3x3 transformation matrix is built up from three vectors: x direction, up direction and view plane normal vectors, where each vector is a matrix row. Then <theViewTrsf> is constructed from matrix and reversed translation with methods SetTranslationPart(..) and SetVectorialPart(..). Note, that in that case amount of perspective distortion (perspective angle) should be defined through focal distance.

        :param theViewTrsf:
        :type theViewTrsf: gp_GTrsf
        :param theIsPersp:
        :type theIsPersp: bool
        :param theFocus:
        :type theFocus: float
        :rtype: None

        * Builds the Projector from the passed model-view <theViewTrsf> and projection <theProjTrsf> transformation matrices.

        :param theViewTrsf:
        :type theViewTrsf: Graphic3d_Mat4d &
        :param theProjTrsf:
        :type theProjTrsf: Graphic3d_Mat4d &
        :rtype: None

        """
        _Select3D.Select3D_Projector_swiginit(self, _Select3D.new_Select3D_Projector(*args))

    def Set(self, *args) -> "void":
        """
        * Sets new parameters for the Projector.

        :param theViewTrsf:
        :type theViewTrsf: gp_Trsf
        :param theIsPersp:
        :type theIsPersp: bool
        :param theFocus:
        :type theFocus: float
        :rtype: None

        * Sets new parameters for the Projector.

        :param theViewTrsf:
        :type theViewTrsf: Graphic3d_Mat4d &
        :param theProjTrsf:
        :type theProjTrsf: Graphic3d_Mat4d &
        :rtype: None

        """
        return _Select3D.Select3D_Projector_Set(self, *args)


    def SetView(self, *args) -> "void":
        """
        * Sets new parameters for the Projector captured from the passed view.

        :param theView:
        :type theView: Handle_V3d_View &
        :rtype: None

        """
        return _Select3D.Select3D_Projector_SetView(self, *args)


    def Scaled(self, *args) -> "void":
        """
        * Pre-compute inverse transformation and ensure whether it is possible to use optimized transformation for the common view-orientation type or not if <theToCheckOptimized> is True.

        :param theToCheckOptimized: default value is Standard_False
        :type theToCheckOptimized: bool
        :rtype: void

        """
        return _Select3D.Select3D_Projector_Scaled(self, *args)


    def Perspective(self, *args) -> "Standard_Boolean":
        """
        * Returns True if there is simplified perspective projection approach is used. Distortion defined by Focus.

        :rtype: bool

        """
        return _Select3D.Select3D_Projector_Perspective(self, *args)


    def Focus(self, *args) -> "Standard_Real":
        """
        * Returns the focal length of simplified perspective projection approach. Raises program error exception if the the projection transformation is not specified as simplified Perspective (for example, custom projection transformation is defined or the orthogonal Projector is defined).

        :rtype: float

        """
        return _Select3D.Select3D_Projector_Focus(self, *args)


    def Projection(self, *args) -> "Graphic3d_Mat4d const &":
        """
        * Returns projection transformation. Please note that for simplified perspective projection approach, defined by Focus, the returned transformation is identity.

        :rtype: Graphic3d_Mat4d

        """
        return _Select3D.Select3D_Projector_Projection(self, *args)


    def Transformation(self, *args) -> "gp_GTrsf const":
        """
        * Returns the view transformation.

        :rtype: gp_GTrsf

        """
        return _Select3D.Select3D_Projector_Transformation(self, *args)


    def InvertedTransformation(self, *args) -> "gp_GTrsf const":
        """
        * Returns the inverted view transformation.

        :rtype: gp_GTrsf

        """
        return _Select3D.Select3D_Projector_InvertedTransformation(self, *args)


    def FullTransformation(self, *args) -> "gp_Trsf const":
        """
        * Returns the uniform-scaled view transformation.

        :rtype: gp_Trsf

        """
        return _Select3D.Select3D_Projector_FullTransformation(self, *args)


    def Project(self, *args) -> "void":
        """
        * Transforms the point into view-coordinate space and applies projection transformation.

        :param theP:
        :type theP: gp_Pnt
        :param thePout:
        :type thePout: gp_Pnt2d
        :rtype: void

        * Transforms the point into view-coordinate space and applies projection transformation.

        :param theP:
        :type theP: gp_Pnt
        :param theX:
        :type theX: float &
        :param theY:
        :type theY: float &
        :param theZ:
        :type theZ: float &
        :rtype: None

        * Transforms the point and vector passed from its location into view-coordinate space and applies projection transformation.

        :param theP:
        :type theP: gp_Pnt
        :param theD1:
        :type theD1: gp_Vec
        :param thePout:
        :type thePout: gp_Pnt2d
        :param theD1out:
        :type theD1out: gp_Vec2d
        :rtype: void

        """
        return _Select3D.Select3D_Projector_Project(self, *args)


    def Shoot(self, *args) -> "gp_Lin":
        """
        * Return projection line going through the 2d point <theX, theY>

        :param theX:
        :type theX: float
        :param theY:
        :type theY: float
        :rtype: gp_Lin

        """
        return _Select3D.Select3D_Projector_Shoot(self, *args)


    def Transform(self, *args) -> "void":
        """
        * Transforms the vector into view-coordinate space.

        :param theD:
        :type theD: gp_Vec
        :rtype: None

        * Transforms the point into view-coordinate space.

        :param thePnt:
        :type thePnt: gp_Pnt
        :rtype: None

        :param thePnt:
        :type thePnt: gp_Pnt
        :param theTrsf:
        :type theTrsf: gp_GTrsf
        :rtype: None

        :param theLin:
        :type theLin: gp_Lin
        :param theTrsf:
        :type theTrsf: gp_GTrsf
        :rtype: None

        """
        return _Select3D.Select3D_Projector_Transform(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_Projector(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_Projector
Select3D_Projector.Set = new_instancemethod(_Select3D.Select3D_Projector_Set, None, Select3D_Projector)
Select3D_Projector.SetView = new_instancemethod(_Select3D.Select3D_Projector_SetView, None, Select3D_Projector)
Select3D_Projector.Scaled = new_instancemethod(_Select3D.Select3D_Projector_Scaled, None, Select3D_Projector)
Select3D_Projector.Perspective = new_instancemethod(_Select3D.Select3D_Projector_Perspective, None, Select3D_Projector)
Select3D_Projector.Focus = new_instancemethod(_Select3D.Select3D_Projector_Focus, None, Select3D_Projector)
Select3D_Projector.Projection = new_instancemethod(_Select3D.Select3D_Projector_Projection, None, Select3D_Projector)
Select3D_Projector.Transformation = new_instancemethod(_Select3D.Select3D_Projector_Transformation, None, Select3D_Projector)
Select3D_Projector.InvertedTransformation = new_instancemethod(_Select3D.Select3D_Projector_InvertedTransformation, None, Select3D_Projector)
Select3D_Projector.FullTransformation = new_instancemethod(_Select3D.Select3D_Projector_FullTransformation, None, Select3D_Projector)
Select3D_Projector.Project = new_instancemethod(_Select3D.Select3D_Projector_Project, None, Select3D_Projector)
Select3D_Projector.Shoot = new_instancemethod(_Select3D.Select3D_Projector_Shoot, None, Select3D_Projector)
Select3D_Projector.Transform = new_instancemethod(_Select3D.Select3D_Projector_Transform, None, Select3D_Projector)
Select3D_Projector_swigregister = _Select3D.Select3D_Projector_swigregister
Select3D_Projector_swigregister(Select3D_Projector)

class Handle_Select3D_Projector(OCC.Standard.Handle_Standard_Transient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_Projector_swiginit(self, _Select3D.new_Handle_Select3D_Projector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_Projector_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_Projector
Handle_Select3D_Projector.Nullify = new_instancemethod(_Select3D.Handle_Select3D_Projector_Nullify, None, Handle_Select3D_Projector)
Handle_Select3D_Projector.IsNull = new_instancemethod(_Select3D.Handle_Select3D_Projector_IsNull, None, Handle_Select3D_Projector)
Handle_Select3D_Projector._get_reference = new_instancemethod(_Select3D.Handle_Select3D_Projector__get_reference, None, Handle_Select3D_Projector)
Handle_Select3D_Projector_swigregister = _Select3D.Handle_Select3D_Projector_swigregister
Handle_Select3D_Projector_swigregister(Handle_Select3D_Projector)

def Handle_Select3D_Projector_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_Projector const":
    return _Select3D.Handle_Select3D_Projector_DownCast(AnObject)
Handle_Select3D_Projector_DownCast = _Select3D.Handle_Select3D_Projector_DownCast

class Select3D_SensitiveEntity(OCC.SelectBasics.SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Project(self, *args) -> "void":
        """
        * In classes inheriting this framework, you must redefine this function in order to get a sensitive 2D rectangle from a 3D entity. This rectangle is the sensitive zone which makes the 3D entity selectable.

        :param aProjector:
        :type aProjector: Handle_Select3D_Projector &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_Project(self, *args)


    def GetConnected(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        * Originally this method intended to return sensitive entity with new location aLocation, but currently sensitive entities do not hold a location, instead HasLocation() and Location() methods call corresponding entity owner's methods. Thus all entities returned by GetConnected() share the same location propagated from corresponding selectable object. You must redefine this function for any type of sensitive entity which can accept another connected sensitive entity.//can be connected to another sensitive entity.

        :param aLocation:
        :type aLocation: TopLoc_Location &
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntity_GetConnected(self, *args)


    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Matches the box defined by the coordinates Xmin, Ymin, Xmax, Ymax with the entity found at that point within the tolerance aTol. Xmin, YMin define the minimum point in the lower left hand corner of the box, and XMax, YMax define the maximum point in the upper right hand corner of the box. You must redefine this function for every inheriting entity. You will have to call this framework inside the redefined function.

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        * prevents from hiding virtual methods...

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveEntity_Matches(self, *args)


    def HasLocation(self, *args) -> "Standard_Boolean":
        """
        * Returns true if this framework has a location defined.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveEntity_HasLocation(self, *args)


    def Location(self, *args) -> "TopLoc_Location const":
        """
        :rtype: TopLoc_Location

        """
        return _Select3D.Select3D_SensitiveEntity_Location(self, *args)


    def ResetLocation(self, *args) -> "void":
        """
        * sets the location to Identity

        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_ResetLocation(self, *args)


    def SetLocation(self, *args) -> "void":
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_SetLocation(self, *args)


    def Dump(self, *args) -> "void":
        """
        * 2 options : <FullDump> = False -> general information <FullDump> = True -> whole informtion 3D +2d ...

        :param S:
        :type S: Standard_OStream &
        :param FullDump: default value is Standard_True
        :type FullDump: bool
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_Dump(self, *args)


    def DumpBox(*args) -> "void":
        """
        :param S:
        :type S: Standard_OStream &
        :param abox:
        :type abox: Bnd_Box2d &
        :rtype: void

        """
        return _Select3D.Select3D_SensitiveEntity_DumpBox(*args)

    DumpBox = staticmethod(DumpBox)

    def UpdateLocation(self, *args) -> "void":
        """
        :param aLoc:
        :type aLoc: TopLoc_Location &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntity_UpdateLocation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveEntity(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveEntity
Select3D_SensitiveEntity.Project = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Project, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.GetConnected = new_instancemethod(_Select3D.Select3D_SensitiveEntity_GetConnected, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Matches = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Matches, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.HasLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_HasLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Location = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Location, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.ResetLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_ResetLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.SetLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_SetLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.Dump = new_instancemethod(_Select3D.Select3D_SensitiveEntity_Dump, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity.UpdateLocation = new_instancemethod(_Select3D.Select3D_SensitiveEntity_UpdateLocation, None, Select3D_SensitiveEntity)
Select3D_SensitiveEntity_swigregister = _Select3D.Select3D_SensitiveEntity_swigregister
Select3D_SensitiveEntity_swigregister(Select3D_SensitiveEntity)

def Select3D_SensitiveEntity_DumpBox(*args) -> "void":
    """
    :param S:
    :type S: Standard_OStream &
    :param abox:
    :type abox: Bnd_Box2d &
    :rtype: void

    """
    return _Select3D.Select3D_SensitiveEntity_DumpBox(*args)

class Handle_Select3D_SensitiveEntity(OCC.SelectBasics.Handle_SelectBasics_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveEntity_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveEntity(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveEntity_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveEntity
Handle_Select3D_SensitiveEntity.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity_Nullify, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity_IsNull, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveEntity__get_reference, None, Handle_Select3D_SensitiveEntity)
Handle_Select3D_SensitiveEntity_swigregister = _Select3D.Handle_Select3D_SensitiveEntity_swigregister
Handle_Select3D_SensitiveEntity_swigregister(Handle_Select3D_SensitiveEntity)

def Handle_Select3D_SensitiveEntity_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveEntity const":
    return _Select3D.Handle_Select3D_SensitiveEntity_DownCast(AnObject)
Handle_Select3D_SensitiveEntity_DownCast = _Select3D.Handle_Select3D_SensitiveEntity_DownCast

class Select3D_SensitiveEntitySequence(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        _Select3D.Select3D_SensitiveEntitySequence_swiginit(self, _Select3D.new_Select3D_SensitiveEntitySequence(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Clear(self, *args)


    def Assign(self, *args) -> "Select3D_SensitiveEntitySequence const &":
        """
        :param Other:
        :type Other: Select3D_SensitiveEntitySequence &
        :rtype: Select3D_SensitiveEntitySequence

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Assign(self, *args)


    def Set(self, *args) -> "Select3D_SensitiveEntitySequence const &":
        """
        :param Other:
        :type Other: Select3D_SensitiveEntitySequence &
        :rtype: Select3D_SensitiveEntitySequence

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Select3D_SensitiveEntity &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_First(self, *args)


    def Last(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Split(self, *args)


    def Value(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveEntitySequence_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveEntitySequence_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveEntitySequence
Select3D_SensitiveEntitySequence.Clear = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Clear, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Assign = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Assign, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Set = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Set, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Append = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Append, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Prepend = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Prepend, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.InsertBefore = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_InsertBefore, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.InsertAfter = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_InsertAfter, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.First = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_First, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Last = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Last, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Split = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Split, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Value = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Value, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.SetValue = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_SetValue, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.ChangeValue = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_ChangeValue, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence.Remove = new_instancemethod(_Select3D.Select3D_SensitiveEntitySequence_Remove, None, Select3D_SensitiveEntitySequence)
Select3D_SensitiveEntitySequence_swigregister = _Select3D.Select3D_SensitiveEntitySequence_swigregister
Select3D_SensitiveEntitySequence_swigregister(Select3D_SensitiveEntitySequence)

class Select3D_SequenceNodeOfSensitiveEntitySequence(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Select3D_SensitiveEntity &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_swiginit(self, _Select3D.new_Select3D_SequenceNodeOfSensitiveEntitySequence(*args))

    def Value(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SequenceNodeOfSensitiveEntitySequence(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SequenceNodeOfSensitiveEntitySequence
Select3D_SequenceNodeOfSensitiveEntitySequence.Value = new_instancemethod(_Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_Value, None, Select3D_SequenceNodeOfSensitiveEntitySequence)
Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister = _Select3D.Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister
Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister(Select3D_SequenceNodeOfSensitiveEntitySequence)

class Handle_Select3D_SequenceNodeOfSensitiveEntitySequence(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swiginit(self, _Select3D.new_Handle_Select3D_SequenceNodeOfSensitiveEntitySequence(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SequenceNodeOfSensitiveEntitySequence
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_Nullify, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_IsNull, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence__get_reference, None, Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister = _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_swigregister(Handle_Select3D_SequenceNodeOfSensitiveEntitySequence)

def Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SequenceNodeOfSensitiveEntitySequence const":
    return _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast(AnObject)
Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast = _Select3D.Handle_Select3D_SequenceNodeOfSensitiveEntitySequence_DownCast

class Select3D_SensitiveBox(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive box object defined by the owner OwnerId, and the bounding box BoundingBox.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param BoundingBox:
        :type BoundingBox: Bnd_Box &
        :rtype: None

        * Constructs a sensitive box object defined by the owner OwnerId, and the coordinates Xmin, YMin, ZMin, XMax, YMax, ZMax. Xmin, YMin and ZMin define the minimum point in the front lower left hand corner of the box, and XMax, YMax and ZMax define the maximum point in the back upper right hand corner of the box.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param ZMin:
        :type ZMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param ZMax:
        :type ZMax: float
        :rtype: None

        """
        _Select3D.Select3D_SensitiveBox_swiginit(self, _Select3D.new_Select3D_SensitiveBox(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveBox_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveBox_ComputeDepth(self, *args)


    def Box(self, *args) -> "Bnd_Box const &":
        """
        * Returns the sensitive 3D box used at the time of construction.

        :rtype: Bnd_Box

        """
        return _Select3D.Select3D_SensitiveBox_Box(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveBox(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveBox
Select3D_SensitiveBox.Matches = new_instancemethod(_Select3D.Select3D_SensitiveBox_Matches, None, Select3D_SensitiveBox)
Select3D_SensitiveBox.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveBox_ComputeDepth, None, Select3D_SensitiveBox)
Select3D_SensitiveBox.Box = new_instancemethod(_Select3D.Select3D_SensitiveBox_Box, None, Select3D_SensitiveBox)
Select3D_SensitiveBox_swigregister = _Select3D.Select3D_SensitiveBox_swigregister
Select3D_SensitiveBox_swigregister(Select3D_SensitiveBox)

class Handle_Select3D_SensitiveBox(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveBox_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveBox(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveBox_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveBox
Handle_Select3D_SensitiveBox.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox_Nullify, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox_IsNull, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveBox__get_reference, None, Handle_Select3D_SensitiveBox)
Handle_Select3D_SensitiveBox_swigregister = _Select3D.Handle_Select3D_SensitiveBox_swigregister
Handle_Select3D_SensitiveBox_swigregister(Handle_Select3D_SensitiveBox)

def Handle_Select3D_SensitiveBox_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveBox const":
    return _Select3D.Handle_Select3D_SensitiveBox_DownCast(AnObject)
Handle_Select3D_SensitiveBox_DownCast = _Select3D.Handle_Select3D_SensitiveBox_DownCast

class Select3D_SensitiveGroup(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs an empty sensitive group object. This is a set of sensitive 3D entities. The sensitive entities will be defined using the function Add to fill the entity owner OwnerId. If MatchAll is false, nothing can be added.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param MatchAll: default value is Standard_True
        :type MatchAll: bool
        :rtype: None

        * Constructs a sensitive group object defined by the list TheList and the entity owner OwnerId. If MatchAll is false, nothing is done.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheList:
        :type TheList: Select3D_ListOfSensitive &
        :param MatchAll: default value is Standard_True
        :type MatchAll: bool
        :rtype: None

        """
        _Select3D.Select3D_SensitiveGroup_swiginit(self, _Select3D.new_Select3D_SensitiveGroup(*args))

    def Add(self, *args) -> "void":
        """
        * Adds the list of sensitive entities LL to the empty sensitive group object created at construction time.

        :param LL:
        :type LL: Select3D_ListOfSensitive &
        :rtype: None

        * Adds the sensitive entity aSensitive to the non-empty sensitive group object created at construction time.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Add(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Remove(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all sensitive entities from the list used at the time of construction, or added using the function Add.

        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Clear(self, *args)


    def IsIn(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the sensitive entity aSensitive is in the list used at the time of construction, or added using the function Add.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_IsIn(self, *args)


    def MustMatchAll(self, *args) -> "Standard_Boolean":
        """
        * Returns true if all sensitive entities in the list used at the time of construction, or added using the function Add must be matched.

        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_MustMatchAll(self, *args)


    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveGroup_Matches(self, *args)


    def Set(self, *args) -> "void":
        """
        * Sets the requirement that all sensitive entities in the list used at the time of construction, or added using the function Add must be matched.

        :param MustMatchAllEntities:
        :type MustMatchAllEntities: bool
        :rtype: None

        * Sets the owner for all entities in group

        :param TheOwnerId:
        :type TheOwnerId: Handle_SelectBasics_EntityOwner &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveGroup_Set(self, *args)


    def GetEntities(self, *args) -> "Select3D_ListOfSensitive const &":
        """
        * Gets group content

        :rtype: Select3D_ListOfSensitive

        """
        return _Select3D.Select3D_SensitiveGroup_GetEntities(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveGroup(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveGroup
Select3D_SensitiveGroup.Add = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Add, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Remove = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Remove, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Clear = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Clear, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.IsIn = new_instancemethod(_Select3D.Select3D_SensitiveGroup_IsIn, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.MustMatchAll = new_instancemethod(_Select3D.Select3D_SensitiveGroup_MustMatchAll, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Matches = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Matches, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.Set = new_instancemethod(_Select3D.Select3D_SensitiveGroup_Set, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup.GetEntities = new_instancemethod(_Select3D.Select3D_SensitiveGroup_GetEntities, None, Select3D_SensitiveGroup)
Select3D_SensitiveGroup_swigregister = _Select3D.Select3D_SensitiveGroup_swigregister
Select3D_SensitiveGroup_swigregister(Select3D_SensitiveGroup)

class Handle_Select3D_SensitiveGroup(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveGroup_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveGroup(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveGroup_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveGroup
Handle_Select3D_SensitiveGroup.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup_Nullify, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup_IsNull, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveGroup__get_reference, None, Handle_Select3D_SensitiveGroup)
Handle_Select3D_SensitiveGroup_swigregister = _Select3D.Handle_Select3D_SensitiveGroup_swigregister
Handle_Select3D_SensitiveGroup_swigregister(Handle_Select3D_SensitiveGroup)

def Handle_Select3D_SensitiveGroup_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveGroup const":
    return _Select3D.Handle_Select3D_SensitiveGroup_DownCast(AnObject)
Handle_Select3D_SensitiveGroup_DownCast = _Select3D.Handle_Select3D_SensitiveGroup_DownCast

class Select3D_SensitivePoint(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive point object defined by the owner OwnerId and the point Point.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param Point:
        :type Point: gp_Pnt
        :rtype: None

        """
        _Select3D.Select3D_SensitivePoint_swiginit(self, _Select3D.new_Select3D_SensitivePoint(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitivePoint_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitivePoint_ComputeDepth(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        * Returns the point used at the time of construction.

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitivePoint_Point(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitivePoint(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitivePoint
Select3D_SensitivePoint.Matches = new_instancemethod(_Select3D.Select3D_SensitivePoint_Matches, None, Select3D_SensitivePoint)
Select3D_SensitivePoint.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitivePoint_ComputeDepth, None, Select3D_SensitivePoint)
Select3D_SensitivePoint.Point = new_instancemethod(_Select3D.Select3D_SensitivePoint_Point, None, Select3D_SensitivePoint)
Select3D_SensitivePoint_swigregister = _Select3D.Select3D_SensitivePoint_swigregister
Select3D_SensitivePoint_swigregister(Select3D_SensitivePoint)

class Handle_Select3D_SensitivePoint(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitivePoint_swiginit(self, _Select3D.new_Handle_Select3D_SensitivePoint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoint_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitivePoint
Handle_Select3D_SensitivePoint.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint_Nullify, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint_IsNull, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoint__get_reference, None, Handle_Select3D_SensitivePoint)
Handle_Select3D_SensitivePoint_swigregister = _Select3D.Handle_Select3D_SensitivePoint_swigregister
Handle_Select3D_SensitivePoint_swigregister(Handle_Select3D_SensitivePoint)

def Handle_Select3D_SensitivePoint_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitivePoint const":
    return _Select3D.Handle_Select3D_SensitivePoint_DownCast(AnObject)
Handle_Select3D_SensitivePoint_DownCast = _Select3D.Handle_Select3D_SensitivePoint_DownCast

class Select3D_SensitivePoly(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Points3D(self, *args) -> "void":
        """
        * Returns the 3D points of the array used at construction time.

        :param theHArrayOfPnt:
        :type theHArrayOfPnt: Handle_TColgp_HArray1OfPnt
        :rtype: None

        """
        return _Select3D.Select3D_SensitivePoly_Points3D(self, *args)


    def Points2D(self, *args) -> "void":
        """
        * Returns the 2D points of the array used at construction time.

        :param theArrayOfPnt2d:
        :type theArrayOfPnt2d: TColgp_Array1OfPnt2d
        :rtype: None

        """
        return _Select3D.Select3D_SensitivePoly_Points2D(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitivePoly(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitivePoly
Select3D_SensitivePoly.Points3D = new_instancemethod(_Select3D.Select3D_SensitivePoly_Points3D, None, Select3D_SensitivePoly)
Select3D_SensitivePoly.Points2D = new_instancemethod(_Select3D.Select3D_SensitivePoly_Points2D, None, Select3D_SensitivePoly)
Select3D_SensitivePoly_swigregister = _Select3D.Select3D_SensitivePoly_swigregister
Select3D_SensitivePoly_swigregister(Select3D_SensitivePoly)

class Handle_Select3D_SensitivePoly(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitivePoly_swiginit(self, _Select3D.new_Handle_Select3D_SensitivePoly(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitivePoly_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitivePoly
Handle_Select3D_SensitivePoly.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly_Nullify, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly_IsNull, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitivePoly__get_reference, None, Handle_Select3D_SensitivePoly)
Handle_Select3D_SensitivePoly_swigregister = _Select3D.Handle_Select3D_SensitivePoly_swigregister
Handle_Select3D_SensitivePoly_swigregister(Handle_Select3D_SensitivePoly)

def Handle_Select3D_SensitivePoly_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitivePoly const":
    return _Select3D.Handle_Select3D_SensitivePoly_DownCast(AnObject)
Handle_Select3D_SensitivePoly_DownCast = _Select3D.Handle_Select3D_SensitivePoly_DownCast

class Select3D_SensitiveSegment(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the sensitive segment object defined by the owner OwnerId, the points FirstP, LastP and the maximum number of sensitive bounding boxes MaxRect.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param FirstP:
        :type FirstP: gp_Pnt
        :param LastP:
        :type LastP: gp_Pnt
        :param MaxRect: default value is 1
        :type MaxRect: int
        :rtype: None

        """
        _Select3D.Select3D_SensitiveSegment_swiginit(self, _Select3D.new_Select3D_SensitiveSegment(*args))

    def Set(self, *args) -> "void":
        """
        * Sets the maximum number of sensitive rectangles MaxRect.

        :param MaxRect:
        :type MaxRect: int
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveSegment_Set(self, *args)


    def StartPoint(self, *args) -> "gp_Pnt":
        """
        * changes the start Point of the Segment;

        :param aPt:
        :type aPt: gp_Pnt
        :rtype: None

        * gives the 3D start Point of the Segment

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_StartPoint(self, *args)


    def EndPoint(self, *args) -> "gp_Pnt":
        """
        * changes the end point of the segment

        :param aPt:
        :type aPt: gp_Pnt
        :rtype: None

        * gives the 3D End Point of the Segment

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveSegment_EndPoint(self, *args)


    def StartPoint2d(self, *args) -> "gp_Pnt2d":
        """
        * gives the 3D start Point of the Segment

        :rtype: gp_Pnt2d

        """
        return _Select3D.Select3D_SensitiveSegment_StartPoint2d(self, *args)


    def EndPoint2d(self, *args) -> "gp_Pnt2d":
        """
        * gives the 3D End Point of the Segment

        :rtype: gp_Pnt2d

        """
        return _Select3D.Select3D_SensitiveSegment_EndPoint2d(self, *args)


    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveSegment_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveSegment_ComputeDepth(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveSegment(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveSegment
Select3D_SensitiveSegment.Set = new_instancemethod(_Select3D.Select3D_SensitiveSegment_Set, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.StartPoint = new_instancemethod(_Select3D.Select3D_SensitiveSegment_StartPoint, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.EndPoint = new_instancemethod(_Select3D.Select3D_SensitiveSegment_EndPoint, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.StartPoint2d = new_instancemethod(_Select3D.Select3D_SensitiveSegment_StartPoint2d, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.EndPoint2d = new_instancemethod(_Select3D.Select3D_SensitiveSegment_EndPoint2d, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.Matches = new_instancemethod(_Select3D.Select3D_SensitiveSegment_Matches, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveSegment_ComputeDepth, None, Select3D_SensitiveSegment)
Select3D_SensitiveSegment_swigregister = _Select3D.Select3D_SensitiveSegment_swigregister
Select3D_SensitiveSegment_swigregister(Select3D_SensitiveSegment)

class Handle_Select3D_SensitiveSegment(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveSegment_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveSegment(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveSegment_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveSegment
Handle_Select3D_SensitiveSegment.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment_Nullify, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment_IsNull, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveSegment__get_reference, None, Handle_Select3D_SensitiveSegment)
Handle_Select3D_SensitiveSegment_swigregister = _Select3D.Handle_Select3D_SensitiveSegment_swigregister
Handle_Select3D_SensitiveSegment_swigregister(Handle_Select3D_SensitiveSegment)

def Handle_Select3D_SensitiveSegment_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveSegment const":
    return _Select3D.Handle_Select3D_SensitiveSegment_DownCast(AnObject)
Handle_Select3D_SensitiveSegment_DownCast = _Select3D.Handle_Select3D_SensitiveSegment_DownCast

class Select3D_SensitiveWire(Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive wire object defined by the owner OwnerId, and the maximum number of sensitive rectangles MaxRect.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param MaxRect: default value is 1
        :type MaxRect: int
        :rtype: None

        """
        _Select3D.Select3D_SensitiveWire_swiginit(self, _Select3D.new_Select3D_SensitiveWire(*args))

    def Add(self, *args) -> "void":
        """
        * Adds the sensitive entity aSensitive to this framework.

        :param aSensitive:
        :type aSensitive: Handle_Select3D_SensitiveEntity &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveWire_Add(self, *args)


    def GetEdges(self, *args) -> "void":
        """
        * returns the sensitive edges stored in this wire

        :param theEdges:
        :type theEdges: Select3D_SensitiveEntitySequence &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveWire_GetEdges(self, *args)


    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveWire_Matches(self, *args)


    def GetLastDetected(self, *args) -> "Handle_Select3D_SensitiveEntity":
        """
        * returns <mymaxrect>

        :rtype: Handle_Select3D_SensitiveEntity

        """
        return _Select3D.Select3D_SensitiveWire_GetLastDetected(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveWire(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveWire
Select3D_SensitiveWire.Add = new_instancemethod(_Select3D.Select3D_SensitiveWire_Add, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.GetEdges = new_instancemethod(_Select3D.Select3D_SensitiveWire_GetEdges, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.Matches = new_instancemethod(_Select3D.Select3D_SensitiveWire_Matches, None, Select3D_SensitiveWire)
Select3D_SensitiveWire.GetLastDetected = new_instancemethod(_Select3D.Select3D_SensitiveWire_GetLastDetected, None, Select3D_SensitiveWire)
Select3D_SensitiveWire_swigregister = _Select3D.Select3D_SensitiveWire_swigregister
Select3D_SensitiveWire_swigregister(Select3D_SensitiveWire)

class Handle_Select3D_SensitiveWire(Handle_Select3D_SensitiveEntity):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveWire_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveWire(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveWire_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveWire
Handle_Select3D_SensitiveWire.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire_Nullify, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire_IsNull, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveWire__get_reference, None, Handle_Select3D_SensitiveWire)
Handle_Select3D_SensitiveWire_swigregister = _Select3D.Handle_Select3D_SensitiveWire_swigregister
Handle_Select3D_SensitiveWire_swigregister(Handle_Select3D_SensitiveWire)

def Handle_Select3D_SensitiveWire_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveWire const":
    return _Select3D.Handle_Select3D_SensitiveWire_DownCast(AnObject)
Handle_Select3D_SensitiveWire_DownCast = _Select3D.Handle_Select3D_SensitiveWire_DownCast

class Select3D_SensitiveCircle(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs the sensitive circle object defined by the owner OwnerId, the circle Circle, the Boolean FilledCircle and the number of points NbOfPoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCircle:
        :type TheCircle: Handle_Geom_Circle &
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :param NbOfPoints: default value is 6
        :type NbOfPoints: int
        :rtype: None

        * Constructs the sensitive arc object defined by the owner OwnerId, the circle Circle, the parameters u1 and u2, the Boolean FilledCircle and the number of points NbOfPoints. u1 and u2 define the first and last points of the arc on Circle.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCircle:
        :type TheCircle: Handle_Geom_Circle &
        :param u1:
        :type u1: float
        :param u2:
        :type u2: float
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :param NbOfPoints: default value is 6
        :type NbOfPoints: int
        :rtype: None

        * Constructs the sensitive circle object defined by the owner OwnerId, the array of triangles apolyg3d, and the Boolean FilledCircle. apolyg3d is an array of consecutive triangles on the circle. The triangle i+1 lies on the intersection of the tangents to the circle of i and i+2. Note, that the first point of apolyg3d must be equal to the last point of apolyg3d.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param apolyg3d:
        :type apolyg3d: Handle_TColgp_HArray1OfPnt
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :rtype: None

        * Constructs the sensitive circle object defined by the owner OwnerId, the array of points apolyg3d, and the Boolean FilledCircle. If the length of apolyg3d is more then 1, the first point of apolyg3d must be equal to the last point of apolyg3d.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param apolyg3d:
        :type apolyg3d: TColgp_Array1OfPnt
        :param FilledCircle: default value is Standard_False
        :type FilledCircle: bool
        :rtype: None

        """
        _Select3D.Select3D_SensitiveCircle_swiginit(self, _Select3D.new_Select3D_SensitiveCircle(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveCircle_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        * Compute depth of sensitive circle for the detected sub-part. @param thePickLine [in] the picking line. @param theDetectedIndex [in] index of the detected sub-part. returns depth on the picking line.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDetectedIndex:
        :type theDetectedIndex: int
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveCircle_ComputeDepth(self, *args)


    def ArrayBounds(self, *args) -> "void":
        """
        :param Low:
        :type Low: int &
        :param Up:
        :type Up: int &
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveCircle_ArrayBounds(self, *args)


    def GetPoint3d(self, *args) -> "gp_Pnt":
        """
        :param rank:
        :type rank: int
        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveCircle_GetPoint3d(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveCircle(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveCircle
Select3D_SensitiveCircle.Matches = new_instancemethod(_Select3D.Select3D_SensitiveCircle_Matches, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveCircle_ComputeDepth, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.ArrayBounds = new_instancemethod(_Select3D.Select3D_SensitiveCircle_ArrayBounds, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle.GetPoint3d = new_instancemethod(_Select3D.Select3D_SensitiveCircle_GetPoint3d, None, Select3D_SensitiveCircle)
Select3D_SensitiveCircle_swigregister = _Select3D.Select3D_SensitiveCircle_swigregister
Select3D_SensitiveCircle_swigregister(Select3D_SensitiveCircle)

class Handle_Select3D_SensitiveCircle(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveCircle_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveCircle(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCircle_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveCircle
Handle_Select3D_SensitiveCircle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle_Nullify, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle_IsNull, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCircle__get_reference, None, Handle_Select3D_SensitiveCircle)
Handle_Select3D_SensitiveCircle_swigregister = _Select3D.Handle_Select3D_SensitiveCircle_swigregister
Handle_Select3D_SensitiveCircle_swigregister(Handle_Select3D_SensitiveCircle)

def Handle_Select3D_SensitiveCircle_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveCircle const":
    return _Select3D.Handle_Select3D_SensitiveCircle_DownCast(AnObject)
Handle_Select3D_SensitiveCircle_DownCast = _Select3D.Handle_Select3D_SensitiveCircle_DownCast

class Select3D_SensitiveCurve(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive curve object defined by the owner OwnerId, the curve TheCurve, and the maximum number of points on the curve: MaxPoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param TheCurve:
        :type TheCurve: Handle_Geom_Curve &
        :param MaxPoints: default value is 17
        :type MaxPoints: int
        :rtype: None

        * Constructs a sensitive curve object defined by the owner OwnerId and the set of points ThePoints.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: Handle_TColgp_HArray1OfPnt
        :rtype: None

        * Creation of Sensitive Curve from Points. Warning : This Method should disappear in the next version...

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: TColgp_Array1OfPnt
        :rtype: None

        """
        _Select3D.Select3D_SensitiveCurve_swiginit(self, _Select3D.new_Select3D_SensitiveCurve(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveCurve_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        * Compute depth of sensitive circle for the detected sub-part. @param thePickLine [in] the picking line. @param theDetectedIndex [in] index of the detected sub-part. returns depth on the picking line.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDetectedIndex:
        :type theDetectedIndex: int
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveCurve_ComputeDepth(self, *args)


    def GetLastDetected(self, *args) -> "Standard_Integer":
        """
        * Gets index of last detected segment

        :rtype: int

        """
        return _Select3D.Select3D_SensitiveCurve_GetLastDetected(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveCurve
Select3D_SensitiveCurve.Matches = new_instancemethod(_Select3D.Select3D_SensitiveCurve_Matches, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveCurve_ComputeDepth, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve.GetLastDetected = new_instancemethod(_Select3D.Select3D_SensitiveCurve_GetLastDetected, None, Select3D_SensitiveCurve)
Select3D_SensitiveCurve_swigregister = _Select3D.Select3D_SensitiveCurve_swigregister
Select3D_SensitiveCurve_swigregister(Select3D_SensitiveCurve)

class Handle_Select3D_SensitiveCurve(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveCurve_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveCurve
Handle_Select3D_SensitiveCurve.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve_Nullify, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve_IsNull, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveCurve__get_reference, None, Handle_Select3D_SensitiveCurve)
Handle_Select3D_SensitiveCurve_swigregister = _Select3D.Handle_Select3D_SensitiveCurve_swigregister
Handle_Select3D_SensitiveCurve_swigregister(Handle_Select3D_SensitiveCurve)

def Handle_Select3D_SensitiveCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveCurve const":
    return _Select3D.Handle_Select3D_SensitiveCurve_DownCast(AnObject)
Handle_Select3D_SensitiveCurve_DownCast = _Select3D.Handle_Select3D_SensitiveCurve_DownCast

class Select3D_SensitiveFace(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive face object defined by the owner OwnerId, the array of points ThePoints, and the sensitivity type Sensitivity. The array of points is the outer polygon of the geometric face.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: TColgp_Array1OfPnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        * Constructs a sensitive face object defined by the owner OwnerId, the array of points ThePoints, and the sensitivity type Sensitivity. The array of points is the outer polygon of the geometric face.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param ThePoints:
        :type ThePoints: Handle_TColgp_HArray1OfPnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        """
        _Select3D.Select3D_SensitiveFace_swiginit(self, _Select3D.new_Select3D_SensitiveFace(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveFace_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        * Computes the depth values for all 3D points defining this face and returns the minimal value among them. If the 'minimal depth' approach is not suitable and gives wrong detection results in some particular case, a custom sensitive face class can redefine this method.

        :param thePickLine:
        :type thePickLine: gp_Lin
        :param theDepthMin:
        :type theDepthMin: float
        :param theDepthMax:
        :type theDepthMax: float
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveFace_ComputeDepth(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveFace(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveFace
Select3D_SensitiveFace.Matches = new_instancemethod(_Select3D.Select3D_SensitiveFace_Matches, None, Select3D_SensitiveFace)
Select3D_SensitiveFace.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveFace_ComputeDepth, None, Select3D_SensitiveFace)
Select3D_SensitiveFace_swigregister = _Select3D.Select3D_SensitiveFace_swigregister
Select3D_SensitiveFace_swigregister(Select3D_SensitiveFace)

class Handle_Select3D_SensitiveFace(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveFace_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveFace(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveFace_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveFace
Handle_Select3D_SensitiveFace.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace_Nullify, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace_IsNull, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveFace__get_reference, None, Handle_Select3D_SensitiveFace)
Handle_Select3D_SensitiveFace_swigregister = _Select3D.Handle_Select3D_SensitiveFace_swigregister
Handle_Select3D_SensitiveFace_swigregister(Handle_Select3D_SensitiveFace)

def Handle_Select3D_SensitiveFace_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveFace const":
    return _Select3D.Handle_Select3D_SensitiveFace_DownCast(AnObject)
Handle_Select3D_SensitiveFace_DownCast = _Select3D.Handle_Select3D_SensitiveFace_DownCast

class Select3D_SensitiveTriangle(Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructs a sensitive triangle object defined by the owner OwnerId, the points P1, P2, P3, and the type of sensitivity Sensitivity.

        :param OwnerId:
        :type OwnerId: Handle_SelectBasics_EntityOwner &
        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :param Sensitivity: default value is Select3D_TOS_INTERIOR
        :type Sensitivity: Select3D_TypeOfSensitivity
        :rtype: None

        """
        _Select3D.Select3D_SensitiveTriangle_swiginit(self, _Select3D.new_Select3D_SensitiveTriangle(*args))

    def Matches(self, *args) -> "Standard_Boolean":
        """
        * Checks whether the sensitive entity matches the picking detection area (close to the picking line). For details please refer to base class declaration.

        :param thePickArgs:
        :type thePickArgs: SelectBasics_PickArgs &
        :param theMatchDMin:
        :type theMatchDMin: float &
        :param theMatchDepth:
        :type theMatchDepth: float &
        :rtype: bool

        :param XMin:
        :type XMin: float
        :param YMin:
        :type YMin: float
        :param XMax:
        :type XMax: float
        :param YMax:
        :type YMax: float
        :param aTol:
        :type aTol: float
        :rtype: bool

        :param Polyline:
        :type Polyline: TColgp_Array1OfPnt2d
        :param aBox:
        :type aBox: Bnd_Box2d &
        :param aTol:
        :type aTol: float
        :rtype: bool

        """
        return _Select3D.Select3D_SensitiveTriangle_Matches(self, *args)


    def ComputeDepth(self, *args) -> "Standard_Real":
        """
        :param EyeLine:
        :type EyeLine: gp_Lin
        :rtype: float

        """
        return _Select3D.Select3D_SensitiveTriangle_ComputeDepth(self, *args)


    def Points3D(self, *args) -> "void":
        """
        * Returns the 3D points P1, P2, P3 used at the time of construction.

        :param P1:
        :type P1: gp_Pnt
        :param P2:
        :type P2: gp_Pnt
        :param P3:
        :type P3: gp_Pnt
        :rtype: None

        """
        return _Select3D.Select3D_SensitiveTriangle_Points3D(self, *args)


    def Center3D(self, *args) -> "gp_Pnt":
        """
        * Returns the center point of the sensitive triangle created at construction time.

        :rtype: gp_Pnt

        """
        return _Select3D.Select3D_SensitiveTriangle_Center3D(self, *args)


    def Center2D(self, *args) -> "gp_XY":
        """
        * WARNING : the returned Values are the original values without the stored location (if there's one). To get the genuine value, One must apply this location (Method Location() )

        :rtype: gp_XY

        """
        return _Select3D.Select3D_SensitiveTriangle_Center2D(self, *args)


    def Status(*args) -> "Standard_Real &":
        """
        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param aTol:
        :type aTol: float
        :param Dmin:
        :type Dmin: float &
        :rtype: int

        * Dmin gives the distance between the cdg and aPoint return

        :param p0:
        :type p0: gp_XY
        :param p1:
        :type p1: gp_XY
        :param p2:
        :type p2: gp_XY
        :param aPoint:
        :type aPoint: gp_XY
        :param aTol:
        :type aTol: float
        :param Dmin:
        :type Dmin: float &
        :rtype: int

        """
        return _Select3D.Select3D_SensitiveTriangle_Status(*args)

    Status = staticmethod(Status)

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Select3D_SensitiveTriangle(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Select3D.delete_Select3D_SensitiveTriangle
Select3D_SensitiveTriangle.Matches = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Matches, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.ComputeDepth = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_ComputeDepth, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Points3D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Points3D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Center3D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Center3D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle.Center2D = new_instancemethod(_Select3D.Select3D_SensitiveTriangle_Center2D, None, Select3D_SensitiveTriangle)
Select3D_SensitiveTriangle_swigregister = _Select3D.Select3D_SensitiveTriangle_swigregister
Select3D_SensitiveTriangle_swigregister(Select3D_SensitiveTriangle)

def Select3D_SensitiveTriangle_Status(*args) -> "Standard_Real &":
    """
    :param X:
    :type X: float
    :param Y:
    :type Y: float
    :param aTol:
    :type aTol: float
    :param Dmin:
    :type Dmin: float &
    :rtype: int

    * Dmin gives the distance between the cdg and aPoint return

    :param p0:
    :type p0: gp_XY
    :param p1:
    :type p1: gp_XY
    :param p2:
    :type p2: gp_XY
    :param aPoint:
    :type aPoint: gp_XY
    :param aTol:
    :type aTol: float
    :param Dmin:
    :type Dmin: float &
    :rtype: int

    """
    return _Select3D.Select3D_SensitiveTriangle_Status(*args)

class Handle_Select3D_SensitiveTriangle(Handle_Select3D_SensitivePoly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Select3D.Handle_Select3D_SensitiveTriangle_swiginit(self, _Select3D.new_Handle_Select3D_SensitiveTriangle(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Select3D.Handle_Select3D_SensitiveTriangle_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Select3D.delete_Handle_Select3D_SensitiveTriangle
Handle_Select3D_SensitiveTriangle.Nullify = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle_Nullify, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle.IsNull = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle_IsNull, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle._get_reference = new_instancemethod(_Select3D.Handle_Select3D_SensitiveTriangle__get_reference, None, Handle_Select3D_SensitiveTriangle)
Handle_Select3D_SensitiveTriangle_swigregister = _Select3D.Handle_Select3D_SensitiveTriangle_swigregister
Handle_Select3D_SensitiveTriangle_swigregister(Handle_Select3D_SensitiveTriangle)

def Handle_Select3D_SensitiveTriangle_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Select3D_SensitiveTriangle const":
    return _Select3D.Handle_Select3D_SensitiveTriangle_DownCast(AnObject)
Handle_Select3D_SensitiveTriangle_DownCast = _Select3D.Handle_Select3D_SensitiveTriangle_DownCast



