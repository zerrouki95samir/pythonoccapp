# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ExprIntrp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ExprIntrp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ExprIntrp')
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ExprIntrp', [dirname(__file__)])
        except ImportError:
            import _ExprIntrp
            return _ExprIntrp
        try:
            _mod = imp.load_module('_ExprIntrp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ExprIntrp = swig_import_helper()
    del swig_import_helper
else:
    import _ExprIntrp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ExprIntrp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_ExprIntrp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_ExprIntrp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_ExprIntrp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_ExprIntrp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_ExprIntrp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_ExprIntrp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_ExprIntrp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_ExprIntrp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_ExprIntrp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_ExprIntrp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_ExprIntrp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_ExprIntrp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_ExprIntrp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_ExprIntrp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_ExprIntrp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _ExprIntrp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Expr
import OCC.Standard
import OCC.MMgt
import OCC.TColStd
import OCC.TCollection

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class exprintrp(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_exprintrp
exprintrp_swigregister = _ExprIntrp.exprintrp_swigregister
exprintrp_swigregister(exprintrp)

class ExprIntrp_Analysis(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_Analysis_swiginit(self, _ExprIntrp.new_ExprIntrp_Analysis(*args))

    def SetMaster(self, *args) -> "void":
        """
        :param agen:
        :type agen: Handle_ExprIntrp_Generator &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_SetMaster(self, *args)


    def Push(self, *args) -> "void":
        """
        :param exp:
        :type exp: Handle_Expr_GeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Push(self, *args)


    def PushRelation(self, *args) -> "void":
        """
        :param rel:
        :type rel: Handle_Expr_GeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushRelation(self, *args)


    def PushName(self, *args) -> "void":
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushName(self, *args)


    def PushValue(self, *args) -> "void":
        """
        :param degree:
        :type degree: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushValue(self, *args)


    def PushFunction(self, *args) -> "void":
        """
        :param func:
        :type func: Handle_Expr_GeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_PushFunction(self, *args)


    def Pop(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_Analysis_Pop(self, *args)


    def PopRelation(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopRelation(self, *args)


    def PopName(self, *args) -> "TCollection_AsciiString":
        """
        :rtype: TCollection_AsciiString

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopName(self, *args)


    def PopValue(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopValue(self, *args)


    def PopFunction(self, *args) -> "Handle_Expr_GeneralFunction":
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_Analysis_PopFunction(self, *args)


    def IsExpStackEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty(self, *args)


    def IsRelStackEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty(self, *args)


    def ResetAll(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_ResetAll(self, *args)


    def Use(self, *args) -> "void":
        """
        :param func:
        :type func: Handle_Expr_NamedFunction &
        :rtype: None

        :param named:
        :type named: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Analysis_Use(self, *args)


    def GetNamed(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetNamed(self, *args)


    def GetFunction(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_Analysis_GetFunction(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Analysis
ExprIntrp_Analysis.SetMaster = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_SetMaster, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Push = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Push, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PushFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PushFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Pop = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Pop, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopRelation = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopRelation, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopName = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopName, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopValue = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopValue, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.PopFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_PopFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsExpStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsExpStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.IsRelStackEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_IsRelStackEmpty, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.ResetAll = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_ResetAll, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_Use, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetNamed, None, ExprIntrp_Analysis)
ExprIntrp_Analysis.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Analysis_GetFunction, None, ExprIntrp_Analysis)
ExprIntrp_Analysis_swigregister = _ExprIntrp.ExprIntrp_Analysis_swigregister
ExprIntrp_Analysis_swigregister(ExprIntrp_Analysis)

class ExprIntrp_Generator(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Use(self, *args) -> "void":
        """
        :param func:
        :type func: Handle_Expr_NamedFunction &
        :rtype: None

        :param named:
        :type named: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_Generator_Use(self, *args)


    def GetFunctions(self, *args) -> "ExprIntrp_SequenceOfNamedFunction const &":
        """
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunctions(self, *args)


    def GetNamed(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :rtype: ExprIntrp_SequenceOfNamedExpression

        * Returns NamedExpression with name <name> already interpreted if it exists. Returns a null handle if not.

        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_Generator_GetNamed(self, *args)


    def GetFunction(self, *args) -> "Handle_Expr_NamedFunction":
        """
        * Returns NamedFunction with name <name> already interpreted if it exists. Returns a null handle if not.

        :param name:
        :type name: TCollection_AsciiString &
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_Generator_GetFunction(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_Generator(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_Generator
ExprIntrp_Generator.Use = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_Use, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetFunctions = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunctions, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetNamed = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetNamed, None, ExprIntrp_Generator)
ExprIntrp_Generator.GetFunction = new_instancemethod(_ExprIntrp.ExprIntrp_Generator_GetFunction, None, ExprIntrp_Generator)
ExprIntrp_Generator_swigregister = _ExprIntrp.ExprIntrp_Generator_swigregister
ExprIntrp_Generator_swigregister(ExprIntrp_Generator)

class Handle_ExprIntrp_Generator(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_Generator_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_Generator(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_Generator_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_Generator
Handle_ExprIntrp_Generator.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator_Nullify, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator_IsNull, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_Generator__get_reference, None, Handle_ExprIntrp_Generator)
Handle_ExprIntrp_Generator_swigregister = _ExprIntrp.Handle_ExprIntrp_Generator_swigregister
Handle_ExprIntrp_Generator_swigregister(Handle_ExprIntrp_Generator)

def Handle_ExprIntrp_Generator_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_Generator const":
    return _ExprIntrp.Handle_ExprIntrp_Generator_DownCast(AnObject)
Handle_ExprIntrp_Generator_DownCast = _ExprIntrp.Handle_ExprIntrp_Generator_DownCast

class ExprIntrp_ListIteratorOfStackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralExpression(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Next(self, *args)


    def Value(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralExpression
ExprIntrp_ListIteratorOfStackOfGeneralExpression.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Initialize, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_More, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralExpression)
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralExpression_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralExpression)

class ExprIntrp_ListIteratorOfStackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralFunction(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Next(self, *args)


    def Value(self, *args) -> "Handle_Expr_GeneralFunction":
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralFunction
ExprIntrp_ListIteratorOfStackOfGeneralFunction.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Initialize, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_More, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralFunction)
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralFunction_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralFunction)

class ExprIntrp_ListIteratorOfStackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_ListIteratorOfStackOfGeneralRelation(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Next(self, *args)


    def Value(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListIteratorOfStackOfGeneralRelation
ExprIntrp_ListIteratorOfStackOfGeneralRelation.Initialize = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Initialize, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.More = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_More, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.Next = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Next, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_Value, None, ExprIntrp_ListIteratorOfStackOfGeneralRelation)
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister
ExprIntrp_ListIteratorOfStackOfGeneralRelation_swigregister(ExprIntrp_ListIteratorOfStackOfGeneralRelation)

class ExprIntrp_ListNodeOfStackOfGeneralExpression(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_ListNodeOfStackOfGeneralExpression(*args))

    def Value(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralExpression_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListNodeOfStackOfGeneralExpression
ExprIntrp_ListNodeOfStackOfGeneralExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralExpression_Value, None, ExprIntrp_ListNodeOfStackOfGeneralExpression)
ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister
ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister(ExprIntrp_ListNodeOfStackOfGeneralExpression)

class Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_Nullify, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_IsNull, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression__get_reference, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression)
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_swigregister(Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression)

def Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression const":
    return _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_DownCast(AnObject)
Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_DownCast = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralExpression_DownCast

class ExprIntrp_ListNodeOfStackOfGeneralFunction(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_ListNodeOfStackOfGeneralFunction(*args))

    def Value(self, *args) -> "Handle_Expr_GeneralFunction":
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralFunction_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListNodeOfStackOfGeneralFunction
ExprIntrp_ListNodeOfStackOfGeneralFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralFunction_Value, None, ExprIntrp_ListNodeOfStackOfGeneralFunction)
ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister
ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister(ExprIntrp_ListNodeOfStackOfGeneralFunction)

class Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_Nullify, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_IsNull, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction__get_reference, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction)
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_swigregister(Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction)

def Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction const":
    return _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_DownCast(AnObject)
Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_DownCast = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralFunction_DownCast

class ExprIntrp_ListNodeOfStackOfGeneralRelation(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_ListNodeOfStackOfGeneralRelation(*args))

    def Value(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralRelation_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_ListNodeOfStackOfGeneralRelation
ExprIntrp_ListNodeOfStackOfGeneralRelation.Value = new_instancemethod(_ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralRelation_Value, None, ExprIntrp_ListNodeOfStackOfGeneralRelation)
ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister
ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister(ExprIntrp_ListNodeOfStackOfGeneralRelation)

class Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_Nullify, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_IsNull, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation__get_reference, None, Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation)
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_swigregister(Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation)

def Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation const":
    return _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_DownCast(AnObject)
Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_DownCast = _ExprIntrp.Handle_ExprIntrp_ListNodeOfStackOfGeneralRelation_DownCast

class ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_NamedExpression &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(*args))

    def Value(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Value, None, ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister
ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister(ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)

class Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_Nullify, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_IsNull, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression__get_reference, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_swigregister(Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression)

def Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression const":
    return _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast(AnObject)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedExpression_DownCast

class ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Expr_NamedFunction &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(*args))

    def Value(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Value, None, ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister
ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister(ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)

class Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_Nullify, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_IsNull, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction__get_reference, None, Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_swigregister(Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction)

def Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction const":
    return _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast(AnObject)
Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast = _ExprIntrp.Handle_ExprIntrp_SequenceNodeOfSequenceOfNamedFunction_DownCast

class ExprIntrp_SequenceOfNamedExpression(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedExpression(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear(self, *args)


    def Assign(self, *args) -> "ExprIntrp_SequenceOfNamedExpression const &":
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedExpression &
        :rtype: ExprIntrp_SequenceOfNamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign(self, *args)


    def Set(self, *args) -> "ExprIntrp_SequenceOfNamedExpression const &":
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedExpression &
        :rtype: ExprIntrp_SequenceOfNamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedExpression &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First(self, *args)


    def Last(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: ExprIntrp_SequenceOfNamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split(self, *args)


    def Value(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_NamedExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Expr_NamedExpression":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedExpression

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedExpression
ExprIntrp_SequenceOfNamedExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Clear, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Assign, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Set, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Append, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Prepend, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertBefore, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_InsertAfter, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_First, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Last, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Split, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Value, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_SetValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_ChangeValue, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedExpression_Remove, None, ExprIntrp_SequenceOfNamedExpression)
ExprIntrp_SequenceOfNamedExpression_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedExpression_swigregister
ExprIntrp_SequenceOfNamedExpression_swigregister(ExprIntrp_SequenceOfNamedExpression)

class ExprIntrp_SequenceOfNamedFunction(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_SequenceOfNamedFunction(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear(self, *args)


    def Assign(self, *args) -> "ExprIntrp_SequenceOfNamedFunction const &":
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedFunction &
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign(self, *args)


    def Set(self, *args) -> "ExprIntrp_SequenceOfNamedFunction const &":
        """
        :param Other:
        :type Other: ExprIntrp_SequenceOfNamedFunction &
        :rtype: ExprIntrp_SequenceOfNamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Expr_NamedFunction &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First(self, *args)


    def Last(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: ExprIntrp_SequenceOfNamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split(self, *args)


    def Value(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Expr_NamedFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Expr_NamedFunction":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Expr_NamedFunction

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_SequenceOfNamedFunction
ExprIntrp_SequenceOfNamedFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Clear, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Assign, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Set, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Append = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Append, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Prepend, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertBefore, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_InsertAfter, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.First = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_First, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Last = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Last, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Split = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Split, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Value = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Value, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.SetValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_SetValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.ChangeValue = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_ChangeValue, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_SequenceOfNamedFunction_Remove, None, ExprIntrp_SequenceOfNamedFunction)
ExprIntrp_SequenceOfNamedFunction_swigregister = _ExprIntrp.ExprIntrp_SequenceOfNamedFunction_swigregister
ExprIntrp_SequenceOfNamedFunction_swigregister(ExprIntrp_SequenceOfNamedFunction)

class ExprIntrp_StackOfGeneralExpression(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralExpression(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Append(self, *args)


    def First(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_First(self, *args)


    def Last(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralExpression &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralExpression &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralExpression &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralExpression
ExprIntrp_StackOfGeneralExpression.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Assign, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Set, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Extent = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Extent, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Clear, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_IsEmpty, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Prepend, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Append, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_First, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Last, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_RemoveFirst, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_Remove, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertBefore, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralExpression_InsertAfter, None, ExprIntrp_StackOfGeneralExpression)
ExprIntrp_StackOfGeneralExpression_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralExpression_swigregister
ExprIntrp_StackOfGeneralExpression_swigregister(ExprIntrp_StackOfGeneralExpression)

class ExprIntrp_StackOfGeneralFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralFunction(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Append(self, *args)


    def First(self, *args) -> "Handle_Expr_GeneralFunction":
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_First(self, *args)


    def Last(self, *args) -> "Handle_Expr_GeneralFunction":
        """
        :rtype: Handle_Expr_GeneralFunction

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralFunction &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralFunction &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralFunction &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralFunction
ExprIntrp_StackOfGeneralFunction.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Assign, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Set, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Extent = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Extent, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Clear, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_IsEmpty, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Prepend, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Append, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_First, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Last, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_RemoveFirst, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_Remove, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertBefore, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralFunction_InsertAfter, None, ExprIntrp_StackOfGeneralFunction)
ExprIntrp_StackOfGeneralFunction_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralFunction_swigregister
ExprIntrp_StackOfGeneralFunction_swigregister(ExprIntrp_StackOfGeneralFunction)

class ExprIntrp_StackOfGeneralRelation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swiginit(self, _ExprIntrp.new_ExprIntrp_StackOfGeneralRelation(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :rtype: None

        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param theIt:
        :type theIt: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Append(self, *args)


    def First(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_First(self, *args)


    def Last(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Expr_GeneralRelation &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        :param Other:
        :type Other: ExprIntrp_StackOfGeneralRelation &
        :param It:
        :type It: ExprIntrp_ListIteratorOfStackOfGeneralRelation &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_StackOfGeneralRelation
ExprIntrp_StackOfGeneralRelation.Assign = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Assign, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Set = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Set, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Extent = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Extent, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Clear = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Clear, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.IsEmpty = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_IsEmpty, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Prepend = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Prepend, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Append = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Append, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.First = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_First, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Last = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Last, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.RemoveFirst = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_RemoveFirst, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.Remove = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_Remove, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.InsertBefore = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertBefore, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation.InsertAfter = new_instancemethod(_ExprIntrp.ExprIntrp_StackOfGeneralRelation_InsertAfter, None, ExprIntrp_StackOfGeneralRelation)
ExprIntrp_StackOfGeneralRelation_swigregister = _ExprIntrp.ExprIntrp_StackOfGeneralRelation_swigregister
ExprIntrp_StackOfGeneralRelation_swigregister(ExprIntrp_StackOfGeneralRelation)

class ExprIntrp_GenExp(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "Handle_ExprIntrp_GenExp":
        """
        :rtype: Handle_ExprIntrp_GenExp

        """
        return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args) -> "void":
        """
        * Processes given string.

        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenExp_Process(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns false if any syntax error has occurred during process.

        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenExp_IsDone(self, *args)


    def Expression(self, *args) -> "Handle_Expr_GeneralExpression":
        """
        * Returns expression generated. Raises an exception if IsDone answers false.

        :rtype: Handle_Expr_GeneralExpression

        """
        return _ExprIntrp.ExprIntrp_GenExp_Expression(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_GenExp(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenExp
ExprIntrp_GenExp.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Process, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_IsDone, None, ExprIntrp_GenExp)
ExprIntrp_GenExp.Expression = new_instancemethod(_ExprIntrp.ExprIntrp_GenExp_Expression, None, ExprIntrp_GenExp)
ExprIntrp_GenExp_swigregister = _ExprIntrp.ExprIntrp_GenExp_swigregister
ExprIntrp_GenExp_swigregister(ExprIntrp_GenExp)

def ExprIntrp_GenExp_Create(*args) -> "Handle_ExprIntrp_GenExp":
    """
    :rtype: Handle_ExprIntrp_GenExp

    """
    return _ExprIntrp.ExprIntrp_GenExp_Create(*args)

class Handle_ExprIntrp_GenExp(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenExp_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenExp(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenExp_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_GenExp
Handle_ExprIntrp_GenExp.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp_Nullify, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp_IsNull, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenExp__get_reference, None, Handle_ExprIntrp_GenExp)
Handle_ExprIntrp_GenExp_swigregister = _ExprIntrp.Handle_ExprIntrp_GenExp_swigregister
Handle_ExprIntrp_GenExp_swigregister(Handle_ExprIntrp_GenExp)

def Handle_ExprIntrp_GenExp_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_GenExp const":
    return _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast(AnObject)
Handle_ExprIntrp_GenExp_DownCast = _ExprIntrp.Handle_ExprIntrp_GenExp_DownCast

class ExprIntrp_GenFct(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "Handle_ExprIntrp_GenFct":
        """
        :rtype: Handle_ExprIntrp_GenFct

        """
        return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args) -> "void":
        """
        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenFct_Process(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenFct_IsDone(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_GenFct(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenFct
ExprIntrp_GenFct.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_Process, None, ExprIntrp_GenFct)
ExprIntrp_GenFct.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenFct_IsDone, None, ExprIntrp_GenFct)
ExprIntrp_GenFct_swigregister = _ExprIntrp.ExprIntrp_GenFct_swigregister
ExprIntrp_GenFct_swigregister(ExprIntrp_GenFct)

def ExprIntrp_GenFct_Create(*args) -> "Handle_ExprIntrp_GenFct":
    """
    :rtype: Handle_ExprIntrp_GenFct

    """
    return _ExprIntrp.ExprIntrp_GenFct_Create(*args)

class Handle_ExprIntrp_GenFct(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenFct_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenFct(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenFct_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_GenFct
Handle_ExprIntrp_GenFct.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct_Nullify, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct_IsNull, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenFct__get_reference, None, Handle_ExprIntrp_GenFct)
Handle_ExprIntrp_GenFct_swigregister = _ExprIntrp.Handle_ExprIntrp_GenFct_swigregister
Handle_ExprIntrp_GenFct_swigregister(Handle_ExprIntrp_GenFct)

def Handle_ExprIntrp_GenFct_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_GenFct const":
    return _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast(AnObject)
Handle_ExprIntrp_GenFct_DownCast = _ExprIntrp.Handle_ExprIntrp_GenFct_DownCast

class ExprIntrp_GenRel(ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Create(*args) -> "Handle_ExprIntrp_GenRel":
        """
        :rtype: Handle_ExprIntrp_GenRel

        """
        return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

    Create = staticmethod(Create)

    def Process(self, *args) -> "void":
        """
        * Processes given string.

        :param str:
        :type str: TCollection_AsciiString &
        :rtype: None

        """
        return _ExprIntrp.ExprIntrp_GenRel_Process(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns false if any syntax error has occurred during process.

        :rtype: bool

        """
        return _ExprIntrp.ExprIntrp_GenRel_IsDone(self, *args)


    def Relation(self, *args) -> "Handle_Expr_GeneralRelation":
        """
        * Returns relation generated. Raises an exception if IsDone answers false.

        :rtype: Handle_Expr_GeneralRelation

        """
        return _ExprIntrp.ExprIntrp_GenRel_Relation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_ExprIntrp_GenRel(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _ExprIntrp.delete_ExprIntrp_GenRel
ExprIntrp_GenRel.Process = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Process, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.IsDone = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_IsDone, None, ExprIntrp_GenRel)
ExprIntrp_GenRel.Relation = new_instancemethod(_ExprIntrp.ExprIntrp_GenRel_Relation, None, ExprIntrp_GenRel)
ExprIntrp_GenRel_swigregister = _ExprIntrp.ExprIntrp_GenRel_swigregister
ExprIntrp_GenRel_swigregister(ExprIntrp_GenRel)

def ExprIntrp_GenRel_Create(*args) -> "Handle_ExprIntrp_GenRel":
    """
    :rtype: Handle_ExprIntrp_GenRel

    """
    return _ExprIntrp.ExprIntrp_GenRel_Create(*args)

class Handle_ExprIntrp_GenRel(Handle_ExprIntrp_Generator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ExprIntrp.Handle_ExprIntrp_GenRel_swiginit(self, _ExprIntrp.new_Handle_ExprIntrp_GenRel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_ExprIntrp.Handle_ExprIntrp_GenRel_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _ExprIntrp.delete_Handle_ExprIntrp_GenRel
Handle_ExprIntrp_GenRel.Nullify = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel_Nullify, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel.IsNull = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel_IsNull, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel._get_reference = new_instancemethod(_ExprIntrp.Handle_ExprIntrp_GenRel__get_reference, None, Handle_ExprIntrp_GenRel)
Handle_ExprIntrp_GenRel_swigregister = _ExprIntrp.Handle_ExprIntrp_GenRel_swigregister
Handle_ExprIntrp_GenRel_swigregister(Handle_ExprIntrp_GenRel)

def Handle_ExprIntrp_GenRel_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_ExprIntrp_GenRel const":
    return _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast(AnObject)
Handle_ExprIntrp_GenRel_DownCast = _ExprIntrp.Handle_ExprIntrp_GenRel_DownCast



