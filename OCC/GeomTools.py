# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomTools.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomTools')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomTools')
    _GeomTools = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomTools', [dirname(__file__)])
        except ImportError:
            import _GeomTools
            return _GeomTools
        try:
            _mod = imp.load_module('_GeomTools', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomTools = swig_import_helper()
    del swig_import_helper
else:
    import _GeomTools
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomTools.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomTools.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomTools.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomTools.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomTools.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomTools.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomTools.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomTools.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomTools.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomTools.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomTools.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomTools.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomTools.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomTools.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomTools.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomTools.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomTools.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomTools.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.Geom2d
import OCC.Message

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class geomtools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Dump(*args) -> "void":
        """
        * A set of Curves from Geom2d. Dumps the surface on the stream.

        :param S:
        :type S: Handle_Geom_Surface &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        * Dumps the Curve on the stream.

        :param C:
        :type C: Handle_Geom_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        * Dumps the Curve on the stream.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        """
        return _GeomTools.geomtools_Dump(*args)

    Dump = staticmethod(Dump)

    def Write(*args) -> "void":
        """
        * Writes the surface on the stream.

        :param S:
        :type S: Handle_Geom_Surface &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        * Writes the Curve on the stream.

        :param C:
        :type C: Handle_Geom_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        * Writes the Curve on the stream.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :rtype: void

        """
        return _GeomTools.geomtools_Write(*args)

    Write = staticmethod(Write)

    def Read(*args) -> "void":
        """
        * Reads the surface from the stream.

        :param S:
        :type S: Handle_Geom_Surface &
        :param IS:
        :type IS: Standard_IStream &
        :rtype: void

        * Reads the Curve from the stream.

        :param C:
        :type C: Handle_Geom_Curve &
        :param IS:
        :type IS: Standard_IStream &
        :rtype: void

        * Reads the Curve from the stream.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param IS:
        :type IS: Standard_IStream &
        :rtype: void

        """
        return _GeomTools.geomtools_Read(*args)

    Read = staticmethod(Read)

    def SetUndefinedTypeHandler(*args) -> "void":
        """
        :param aHandler:
        :type aHandler: Handle_GeomTools_UndefinedTypeHandler &
        :rtype: void

        """
        return _GeomTools.geomtools_SetUndefinedTypeHandler(*args)

    SetUndefinedTypeHandler = staticmethod(SetUndefinedTypeHandler)

    def GetUndefinedTypeHandler(*args) -> "Handle_GeomTools_UndefinedTypeHandler":
        """
        :rtype: Handle_GeomTools_UndefinedTypeHandler

        """
        return _GeomTools.geomtools_GetUndefinedTypeHandler(*args)

    GetUndefinedTypeHandler = staticmethod(GetUndefinedTypeHandler)

    def GetReal(*args) -> "Standard_Real &":
        """
        * Reads the Standard_Real value from the stream. Zero is read in case of error

        :param IS:
        :type IS: Standard_IStream &
        :param theValue:
        :type theValue: float &
        :rtype: void

        """
        return _GeomTools.geomtools_GetReal(*args)

    GetReal = staticmethod(GetReal)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomTools.geomtools_swiginit(self, _GeomTools.new_geomtools())
    __swig_destroy__ = _GeomTools.delete_geomtools
geomtools_swigregister = _GeomTools.geomtools_swigregister
geomtools_swigregister(geomtools)

def geomtools_Dump(*args) -> "void":
    """
    * A set of Curves from Geom2d. Dumps the surface on the stream.

    :param S:
    :type S: Handle_Geom_Surface &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    * Dumps the Curve on the stream.

    :param C:
    :type C: Handle_Geom_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    * Dumps the Curve on the stream.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    """
    return _GeomTools.geomtools_Dump(*args)

def geomtools_Write(*args) -> "void":
    """
    * Writes the surface on the stream.

    :param S:
    :type S: Handle_Geom_Surface &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    * Writes the Curve on the stream.

    :param C:
    :type C: Handle_Geom_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    * Writes the Curve on the stream.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :rtype: void

    """
    return _GeomTools.geomtools_Write(*args)

def geomtools_Read(*args) -> "void":
    """
    * Reads the surface from the stream.

    :param S:
    :type S: Handle_Geom_Surface &
    :param IS:
    :type IS: Standard_IStream &
    :rtype: void

    * Reads the Curve from the stream.

    :param C:
    :type C: Handle_Geom_Curve &
    :param IS:
    :type IS: Standard_IStream &
    :rtype: void

    * Reads the Curve from the stream.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param IS:
    :type IS: Standard_IStream &
    :rtype: void

    """
    return _GeomTools.geomtools_Read(*args)

def geomtools_SetUndefinedTypeHandler(*args) -> "void":
    """
    :param aHandler:
    :type aHandler: Handle_GeomTools_UndefinedTypeHandler &
    :rtype: void

    """
    return _GeomTools.geomtools_SetUndefinedTypeHandler(*args)

def geomtools_GetUndefinedTypeHandler(*args) -> "Handle_GeomTools_UndefinedTypeHandler":
    """
    :rtype: Handle_GeomTools_UndefinedTypeHandler

    """
    return _GeomTools.geomtools_GetUndefinedTypeHandler(*args)

def geomtools_GetReal(*args) -> "Standard_Real &":
    """
    * Reads the Standard_Real value from the stream. Zero is read in case of error

    :param IS:
    :type IS: Standard_IStream &
    :param theValue:
    :type theValue: float &
    :rtype: void

    """
    return _GeomTools.geomtools_GetReal(*args)

class GeomTools_Curve2dSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns an empty set of Curves.

        :rtype: None

        """
        _GeomTools.GeomTools_Curve2dSet_swiginit(self, _GeomTools.new_GeomTools_Curve2dSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.

        :rtype: None

        """
        return _GeomTools.GeomTools_Curve2dSet_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Curve in the set and returns its index.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: int

        """
        return _GeomTools.GeomTools_Curve2dSet_Add(self, *args)


    def Curve2d(self, *args) -> "Handle_Geom2d_Curve":
        """
        * Returns the Curve of index <I>.

        :param I:
        :type I: int
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomTools.GeomTools_Curve2dSet_Curve2d(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: int

        """
        return _GeomTools.GeomTools_Curve2dSet_Index(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(GeomTools_Curve2dSet self) -> std::string"""
        return _GeomTools.GeomTools_Curve2dSet_DumpToString(self)


    def WriteToString(self) -> "std::string":
        """WriteToString(GeomTools_Curve2dSet self) -> std::string"""
        return _GeomTools.GeomTools_Curve2dSet_WriteToString(self)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(GeomTools_Curve2dSet self, std::string src)"""
        return _GeomTools.GeomTools_Curve2dSet_ReadFromString(self, src)


    def PrintCurve2d(*args) -> "void":
        """
        * Dumps the curve on the stream, if compact is True use the compact format that can be read back.

        :param C:
        :type C: Handle_Geom2d_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_Curve2dSet_PrintCurve2d(*args)

    PrintCurve2d = staticmethod(PrintCurve2d)

    def ReadCurve2d(*args) -> "Standard_IStream &":
        """
        * Reads the curve from the stream. The curve is assumed to have been writtent with the Print method (compact = True).

        :param IS:
        :type IS: Standard_IStream &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_Curve2dSet_ReadCurve2d(*args)

    ReadCurve2d = staticmethod(ReadCurve2d)

    def SetProgress(self, *args) -> "void":
        """
        :param PR:
        :type PR: Handle_Message_ProgressIndicator &
        :rtype: None

        """
        return _GeomTools.GeomTools_Curve2dSet_SetProgress(self, *args)


    def GetProgress(self, *args) -> "Handle_Message_ProgressIndicator":
        """
        :rtype: Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_Curve2dSet_GetProgress(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_Curve2dSet
GeomTools_Curve2dSet.Clear = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_Clear, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.Add = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_Add, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.Curve2d = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_Curve2d, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.Index = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_Index, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.DumpToString = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_DumpToString, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.WriteToString = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_WriteToString, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.ReadFromString = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_ReadFromString, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.SetProgress = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_SetProgress, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet.GetProgress = new_instancemethod(_GeomTools.GeomTools_Curve2dSet_GetProgress, None, GeomTools_Curve2dSet)
GeomTools_Curve2dSet_swigregister = _GeomTools.GeomTools_Curve2dSet_swigregister
GeomTools_Curve2dSet_swigregister(GeomTools_Curve2dSet)

def GeomTools_Curve2dSet_PrintCurve2d(*args) -> "void":
    """
    * Dumps the curve on the stream, if compact is True use the compact format that can be read back.

    :param C:
    :type C: Handle_Geom2d_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :param compact: default value is Standard_False
    :type compact: bool
    :rtype: void

    """
    return _GeomTools.GeomTools_Curve2dSet_PrintCurve2d(*args)

def GeomTools_Curve2dSet_ReadCurve2d(*args) -> "Standard_IStream &":
    """
    * Reads the curve from the stream. The curve is assumed to have been writtent with the Print method (compact = True).

    :param IS:
    :type IS: Standard_IStream &
    :param C:
    :type C: Handle_Geom2d_Curve &
    :rtype: Standard_IStream

    """
    return _GeomTools.GeomTools_Curve2dSet_ReadCurve2d(*args)

class GeomTools_CurveSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns an empty set of Curves.

        :rtype: None

        """
        _GeomTools.GeomTools_CurveSet_swiginit(self, _GeomTools.new_GeomTools_CurveSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.

        :rtype: None

        """
        return _GeomTools.GeomTools_CurveSet_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Curve in the set and returns its index.

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: int

        """
        return _GeomTools.GeomTools_CurveSet_Add(self, *args)


    def Curve(self, *args) -> "Handle_Geom_Curve":
        """
        * Returns the Curve of index <I>.

        :param I:
        :type I: int
        :rtype: Handle_Geom_Curve

        """
        return _GeomTools.GeomTools_CurveSet_Curve(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.

        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: int

        """
        return _GeomTools.GeomTools_CurveSet_Index(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(GeomTools_CurveSet self) -> std::string"""
        return _GeomTools.GeomTools_CurveSet_DumpToString(self)


    def WriteToString(self) -> "std::string":
        """WriteToString(GeomTools_CurveSet self) -> std::string"""
        return _GeomTools.GeomTools_CurveSet_WriteToString(self)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(GeomTools_CurveSet self, std::string src)"""
        return _GeomTools.GeomTools_CurveSet_ReadFromString(self, src)


    def PrintCurve(*args) -> "void":
        """
        * Dumps the curve on the stream, if compact is True use the compact format that can be read back.

        :param C:
        :type C: Handle_Geom_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_CurveSet_PrintCurve(*args)

    PrintCurve = staticmethod(PrintCurve)

    def ReadCurve(*args) -> "Standard_IStream &":
        """
        * Reads the curve from the stream. The curve is assumed to have been writtent with the Print method (compact = True).

        :param IS:
        :type IS: Standard_IStream &
        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_CurveSet_ReadCurve(*args)

    ReadCurve = staticmethod(ReadCurve)

    def SetProgress(self, *args) -> "void":
        """
        :param PR:
        :type PR: Handle_Message_ProgressIndicator &
        :rtype: None

        """
        return _GeomTools.GeomTools_CurveSet_SetProgress(self, *args)


    def GetProgress(self, *args) -> "Handle_Message_ProgressIndicator":
        """
        :rtype: Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_CurveSet_GetProgress(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_CurveSet
GeomTools_CurveSet.Clear = new_instancemethod(_GeomTools.GeomTools_CurveSet_Clear, None, GeomTools_CurveSet)
GeomTools_CurveSet.Add = new_instancemethod(_GeomTools.GeomTools_CurveSet_Add, None, GeomTools_CurveSet)
GeomTools_CurveSet.Curve = new_instancemethod(_GeomTools.GeomTools_CurveSet_Curve, None, GeomTools_CurveSet)
GeomTools_CurveSet.Index = new_instancemethod(_GeomTools.GeomTools_CurveSet_Index, None, GeomTools_CurveSet)
GeomTools_CurveSet.DumpToString = new_instancemethod(_GeomTools.GeomTools_CurveSet_DumpToString, None, GeomTools_CurveSet)
GeomTools_CurveSet.WriteToString = new_instancemethod(_GeomTools.GeomTools_CurveSet_WriteToString, None, GeomTools_CurveSet)
GeomTools_CurveSet.ReadFromString = new_instancemethod(_GeomTools.GeomTools_CurveSet_ReadFromString, None, GeomTools_CurveSet)
GeomTools_CurveSet.SetProgress = new_instancemethod(_GeomTools.GeomTools_CurveSet_SetProgress, None, GeomTools_CurveSet)
GeomTools_CurveSet.GetProgress = new_instancemethod(_GeomTools.GeomTools_CurveSet_GetProgress, None, GeomTools_CurveSet)
GeomTools_CurveSet_swigregister = _GeomTools.GeomTools_CurveSet_swigregister
GeomTools_CurveSet_swigregister(GeomTools_CurveSet)

def GeomTools_CurveSet_PrintCurve(*args) -> "void":
    """
    * Dumps the curve on the stream, if compact is True use the compact format that can be read back.

    :param C:
    :type C: Handle_Geom_Curve &
    :param OS:
    :type OS: Standard_OStream &
    :param compact: default value is Standard_False
    :type compact: bool
    :rtype: void

    """
    return _GeomTools.GeomTools_CurveSet_PrintCurve(*args)

def GeomTools_CurveSet_ReadCurve(*args) -> "Standard_IStream &":
    """
    * Reads the curve from the stream. The curve is assumed to have been writtent with the Print method (compact = True).

    :param IS:
    :type IS: Standard_IStream &
    :param C:
    :type C: Handle_Geom_Curve &
    :rtype: Standard_IStream

    """
    return _GeomTools.GeomTools_CurveSet_ReadCurve(*args)

class GeomTools_SurfaceSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns an empty set of Surfaces.

        :rtype: None

        """
        _GeomTools.GeomTools_SurfaceSet_swiginit(self, _GeomTools.new_GeomTools_SurfaceSet(*args))

    def Clear(self, *args) -> "void":
        """
        * Clears the content of the set.

        :rtype: None

        """
        return _GeomTools.GeomTools_SurfaceSet_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        * Incorporate a new Surface in the set and returns its index.

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: int

        """
        return _GeomTools.GeomTools_SurfaceSet_Add(self, *args)


    def Surface(self, *args) -> "Handle_Geom_Surface":
        """
        * Returns the Surface of index <I>.

        :param I:
        :type I: int
        :rtype: Handle_Geom_Surface

        """
        return _GeomTools.GeomTools_SurfaceSet_Surface(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <L>.

        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: int

        """
        return _GeomTools.GeomTools_SurfaceSet_Index(self, *args)


    def DumpToString(self) -> "std::string":
        """DumpToString(GeomTools_SurfaceSet self) -> std::string"""
        return _GeomTools.GeomTools_SurfaceSet_DumpToString(self)


    def WriteToString(self) -> "std::string":
        """WriteToString(GeomTools_SurfaceSet self) -> std::string"""
        return _GeomTools.GeomTools_SurfaceSet_WriteToString(self)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(GeomTools_SurfaceSet self, std::string src)"""
        return _GeomTools.GeomTools_SurfaceSet_ReadFromString(self, src)


    def PrintSurface(*args) -> "void":
        """
        * Dumps the surface on the stream, if compact is True use the compact format that can be read back.

        :param S:
        :type S: Handle_Geom_Surface &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_SurfaceSet_PrintSurface(*args)

    PrintSurface = staticmethod(PrintSurface)

    def ReadSurface(*args) -> "Standard_IStream &":
        """
        * Reads the surface from the stream. The surface is assumed to have been writtent with the Print method (compact = True).

        :param IS:
        :type IS: Standard_IStream &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_SurfaceSet_ReadSurface(*args)

    ReadSurface = staticmethod(ReadSurface)

    def SetProgress(self, *args) -> "void":
        """
        :param PR:
        :type PR: Handle_Message_ProgressIndicator &
        :rtype: None

        """
        return _GeomTools.GeomTools_SurfaceSet_SetProgress(self, *args)


    def GetProgress(self, *args) -> "Handle_Message_ProgressIndicator":
        """
        :rtype: Handle_Message_ProgressIndicator

        """
        return _GeomTools.GeomTools_SurfaceSet_GetProgress(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_SurfaceSet
GeomTools_SurfaceSet.Clear = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_Clear, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.Add = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_Add, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.Surface = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_Surface, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.Index = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_Index, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.DumpToString = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_DumpToString, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.WriteToString = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_WriteToString, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.ReadFromString = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_ReadFromString, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.SetProgress = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_SetProgress, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet.GetProgress = new_instancemethod(_GeomTools.GeomTools_SurfaceSet_GetProgress, None, GeomTools_SurfaceSet)
GeomTools_SurfaceSet_swigregister = _GeomTools.GeomTools_SurfaceSet_swigregister
GeomTools_SurfaceSet_swigregister(GeomTools_SurfaceSet)

def GeomTools_SurfaceSet_PrintSurface(*args) -> "void":
    """
    * Dumps the surface on the stream, if compact is True use the compact format that can be read back.

    :param S:
    :type S: Handle_Geom_Surface &
    :param OS:
    :type OS: Standard_OStream &
    :param compact: default value is Standard_False
    :type compact: bool
    :rtype: void

    """
    return _GeomTools.GeomTools_SurfaceSet_PrintSurface(*args)

def GeomTools_SurfaceSet_ReadSurface(*args) -> "Standard_IStream &":
    """
    * Reads the surface from the stream. The surface is assumed to have been writtent with the Print method (compact = True).

    :param IS:
    :type IS: Standard_IStream &
    :param S:
    :type S: Handle_Geom_Surface &
    :rtype: Standard_IStream

    """
    return _GeomTools.GeomTools_SurfaceSet_ReadSurface(*args)

class GeomTools_UndefinedTypeHandler(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _GeomTools.GeomTools_UndefinedTypeHandler_swiginit(self, _GeomTools.new_GeomTools_UndefinedTypeHandler(*args))

    def PrintCurve(self, *args) -> "void":
        """
        :param C:
        :type C: Handle_Geom_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve(self, *args)


    def ReadCurve(self, *args) -> "Standard_IStream &":
        """
        :param ctype:
        :type ctype: int
        :param IS:
        :type IS: Standard_IStream &
        :param C:
        :type C: Handle_Geom_Curve &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve(self, *args)


    def PrintCurve2d(self, *args) -> "void":
        """
        :param C:
        :type C: Handle_Geom2d_Curve &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve2d(self, *args)


    def ReadCurve2d(self, *args) -> "Standard_IStream &":
        """
        :param ctype:
        :type ctype: int
        :param IS:
        :type IS: Standard_IStream &
        :param C:
        :type C: Handle_Geom2d_Curve &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve2d(self, *args)


    def PrintSurface(self, *args) -> "void":
        """
        :param S:
        :type S: Handle_Geom_Surface &
        :param OS:
        :type OS: Standard_OStream &
        :param compact: default value is Standard_False
        :type compact: bool
        :rtype: void

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_PrintSurface(self, *args)


    def ReadSurface(self, *args) -> "Standard_IStream &":
        """
        :param ctype:
        :type ctype: int
        :param IS:
        :type IS: Standard_IStream &
        :param S:
        :type S: Handle_Geom_Surface &
        :rtype: Standard_IStream

        """
        return _GeomTools.GeomTools_UndefinedTypeHandler_ReadSurface(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_GeomTools_UndefinedTypeHandler(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomTools.delete_GeomTools_UndefinedTypeHandler
GeomTools_UndefinedTypeHandler.PrintCurve = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler.ReadCurve = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler.PrintCurve2d = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_PrintCurve2d, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler.ReadCurve2d = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_ReadCurve2d, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler.PrintSurface = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_PrintSurface, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler.ReadSurface = new_instancemethod(_GeomTools.GeomTools_UndefinedTypeHandler_ReadSurface, None, GeomTools_UndefinedTypeHandler)
GeomTools_UndefinedTypeHandler_swigregister = _GeomTools.GeomTools_UndefinedTypeHandler_swigregister
GeomTools_UndefinedTypeHandler_swigregister(GeomTools_UndefinedTypeHandler)

class Handle_GeomTools_UndefinedTypeHandler(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomTools.Handle_GeomTools_UndefinedTypeHandler_swiginit(self, _GeomTools.new_Handle_GeomTools_UndefinedTypeHandler(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _GeomTools.delete_Handle_GeomTools_UndefinedTypeHandler
Handle_GeomTools_UndefinedTypeHandler.Nullify = new_instancemethod(_GeomTools.Handle_GeomTools_UndefinedTypeHandler_Nullify, None, Handle_GeomTools_UndefinedTypeHandler)
Handle_GeomTools_UndefinedTypeHandler.IsNull = new_instancemethod(_GeomTools.Handle_GeomTools_UndefinedTypeHandler_IsNull, None, Handle_GeomTools_UndefinedTypeHandler)
Handle_GeomTools_UndefinedTypeHandler._get_reference = new_instancemethod(_GeomTools.Handle_GeomTools_UndefinedTypeHandler__get_reference, None, Handle_GeomTools_UndefinedTypeHandler)
Handle_GeomTools_UndefinedTypeHandler_swigregister = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_swigregister
Handle_GeomTools_UndefinedTypeHandler_swigregister(Handle_GeomTools_UndefinedTypeHandler)

def Handle_GeomTools_UndefinedTypeHandler_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_GeomTools_UndefinedTypeHandler const":
    return _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast(AnObject)
Handle_GeomTools_UndefinedTypeHandler_DownCast = _GeomTools.Handle_GeomTools_UndefinedTypeHandler_DownCast



