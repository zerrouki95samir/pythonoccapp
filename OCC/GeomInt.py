# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GeomInt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GeomInt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GeomInt')
    _GeomInt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GeomInt', [dirname(__file__)])
        except ImportError:
            import _GeomInt
            return _GeomInt
        try:
            _mod = imp.load_module('_GeomInt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GeomInt = swig_import_helper()
    del swig_import_helper
else:
    import _GeomInt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomInt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GeomInt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GeomInt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GeomInt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GeomInt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GeomInt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GeomInt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GeomInt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GeomInt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GeomInt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GeomInt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GeomInt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GeomInt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GeomInt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GeomInt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GeomInt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GeomInt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GeomInt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.math
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.AppParCurves
import OCC.TColgp
import OCC.gp
import OCC.Geom
import OCC.GeomAbs
import OCC.GeomAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.TopAbs
import OCC.IntPatch
import OCC.IntSurf
import OCC.Intf
import OCC.Bnd
import OCC.IntAna
import OCC.Approx
import OCC.AppCont
import OCC.IntImp
import OCC.ApproxInt

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class geomint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def AdjustPeriodic(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Adjusts the parameter <thePar> to the range [theParMin, theParMax]

        :param thePar:
        :type thePar: float
        :param theParMin:
        :type theParMin: float
        :param theParMax:
        :type theParMax: float
        :param thePeriod:
        :type thePeriod: float
        :param theNewPar:
        :type theNewPar: float &
        :param theOffset:
        :type theOffset: float &
        :param theEps: default value is 0.0
        :type theEps: float
        :rtype: bool

        """
        return _GeomInt.geomint_AdjustPeriodic(*args)

    AdjustPeriodic = staticmethod(AdjustPeriodic)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomInt.geomint_swiginit(self, _GeomInt.new_geomint())
    __swig_destroy__ = _GeomInt.delete_geomint
geomint_swigregister = _GeomInt.geomint_swigregister
geomint_swigregister(geomint)

def geomint_AdjustPeriodic(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Adjusts the parameter <thePar> to the range [theParMin, theParMax]

    :param thePar:
    :type thePar: float
    :param theParMin:
    :type theParMin: float
    :param theParMax:
    :type theParMax: float
    :param thePeriod:
    :type thePeriod: float
    :param theNewPar:
    :type theNewPar: float &
    :param theOffset:
    :type theOffset: float &
    :param theEps: default value is 0.0
    :type theEps: float
    :rtype: bool

    """
    return _GeomInt.geomint_AdjustPeriodic(*args)

class GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox(OCC.math.math_BFGS):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _GeomInt.GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox
GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister
GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister(GeomInt_BSpGradient_BFGSOfMyBSplGradientOfTheComputeLineOfWLApprox)

class GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox(OCC.math.math_MultipleVarFunctionWithGradient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox(*args))

    def NewParameters(self, *args) -> "math_Vector const &":
        """
        :rtype: math_Vector

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_NewParameters(self, *args)


    def CurveValue(self, *args) -> "AppParCurves_MultiBSpCurve":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_CurveValue(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_MaxError2d(self, *args)


    def FunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix(self, *args)


    def Index(self, *args) -> "math_IntegerVector const &":
        """
        :rtype: math_IntegerVector

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_Index(self, *args)


    def FirstConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_LastConstraint(self, *args)


    def SetFirstLambda(self, *args) -> "void":
        """
        :param l1:
        :type l1: float
        :rtype: None

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_SetFirstLambda(self, *args)


    def SetLastLambda(self, *args) -> "void":
        """
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_SetLastLambda(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.NewParameters = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_NewParameters, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.CurveValue = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_CurveValue, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_Error, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_MaxError3d, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_MaxError2d, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.FunctionMatrix = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_FunctionMatrix, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.DerivativeFunctionMatrix = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.Index = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_Index, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.FirstConstraint = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_FirstConstraint, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.LastConstraint = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_LastConstraint, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.SetFirstLambda = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_SetFirstLambda, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox.SetLastLambda = new_instancemethod(_GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_SetLastLambda, None, GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister
GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister(GeomInt_BSpParFunctionOfMyBSplGradientOfTheComputeLineOfWLApprox)

class GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox(*args))

    def Perform(self, *args) -> "void":
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_IsDone(self, *args)


    def BezierValue(self, *args) -> "AppParCurves_MultiCurve":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_BezierValue(self, *args)


    def BSplineValue(self, *args) -> "AppParCurves_MultiBSpCurve const &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args) -> "void":
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_ErrorGradient(self, *args)


    def Distance(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Distance(self, *args)


    def Error(self, *args) -> "void":
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Error(self, *args)


    def FirstLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_FirstLambda(self, *args)


    def LastLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_LastLambda(self, *args)


    def Points(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Points(self, *args)


    def Poles(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Poles(self, *args)


    def KIndex(self, *args) -> "math_IntegerVector const &":
        """
        :rtype: math_IntegerVector

        """
        return _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_KIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Perform, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_IsDone, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.BezierValue = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_BezierValue, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.BSplineValue = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_BSplineValue, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.FunctionMatrix = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_FunctionMatrix, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.DerivativeFunctionMatrix = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.ErrorGradient = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_ErrorGradient, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.Distance = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Distance, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Error, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.FirstLambda = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_FirstLambda, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.LastLambda = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_LastLambda, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.Points = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Points, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.Poles = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_Poles, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox.KIndex = new_instancemethod(_GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_KIndex, None, GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister
GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox_swigregister(GeomInt_BSpParLeastSquareOfMyBSplGradientOfTheComputeLineOfWLApprox)

class GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox(OCC.math.math_BFGS):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _GeomInt.GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox
GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister
GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister(GeomInt_Gradient_BFGSOfMyGradientOfTheComputeLineBezierOfWLApprox)

class GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox(OCC.math.math_BFGS):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param F:
        :type F: math_MultipleVarFunctionWithGradient &
        :param StartingPoint:
        :type StartingPoint: math_Vector &
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :param Eps:
        :type Eps: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _GeomInt.GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox
GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister
GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister(GeomInt_Gradient_BFGSOfMyGradientbisOfTheComputeLineOfWLApprox)

class GeomInt_IntSS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * performs general intersection of two surfaces just now

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :param Approx: default value is Standard_True
        :type Approx: bool
        :param ApproxS1: default value is Standard_False
        :type ApproxS1: bool
        :param ApproxS2: default value is Standard_False
        :type ApproxS2: bool
        :rtype: None

        """
        _GeomInt.GeomInt_IntSS_swiginit(self, _GeomInt.new_GeomInt_IntSS(*args))

    def Perform(self, *args) -> "void":
        """
        * general intersection of two surfaces

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :param Approx: default value is Standard_True
        :type Approx: bool
        :param ApproxS1: default value is Standard_False
        :type ApproxS1: bool
        :param ApproxS2: default value is Standard_False
        :type ApproxS2: bool
        :rtype: None

        * intersection of adapted surfaces

        :param HS1:
        :type HS1: Handle_GeomAdaptor_HSurface &
        :param HS2:
        :type HS2: Handle_GeomAdaptor_HSurface &
        :param Tol:
        :type Tol: float
        :param Approx: default value is Standard_True
        :type Approx: bool
        :param ApproxS1: default value is Standard_False
        :type ApproxS1: bool
        :param ApproxS2: default value is Standard_False
        :type ApproxS2: bool
        :rtype: None

        * general intersection using a starting point

        :param S1:
        :type S1: Handle_Geom_Surface &
        :param S2:
        :type S2: Handle_Geom_Surface &
        :param Tol:
        :type Tol: float
        :param U1:
        :type U1: float
        :param V1:
        :type V1: float
        :param U2:
        :type U2: float
        :param V2:
        :type V2: float
        :param Approx: default value is Standard_True
        :type Approx: bool
        :param ApproxS1: default value is Standard_False
        :type ApproxS1: bool
        :param ApproxS2: default value is Standard_False
        :type ApproxS2: bool
        :rtype: None

        * intersection of adapted surfaces using a starting point

        :param HS1:
        :type HS1: Handle_GeomAdaptor_HSurface &
        :param HS2:
        :type HS2: Handle_GeomAdaptor_HSurface &
        :param Tol:
        :type Tol: float
        :param U1:
        :type U1: float
        :param V1:
        :type V1: float
        :param U2:
        :type U2: float
        :param V2:
        :type V2: float
        :param Approx: default value is Standard_True
        :type Approx: bool
        :param ApproxS1: default value is Standard_False
        :type ApproxS1: bool
        :param ApproxS2: default value is Standard_False
        :type ApproxS2: bool
        :rtype: None

        """
        return _GeomInt.GeomInt_IntSS_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_IntSS_IsDone(self, *args)


    def TolReached3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_IntSS_TolReached3d(self, *args)


    def TolReached2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_IntSS_TolReached2d(self, *args)


    def NbLines(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_IntSS_NbLines(self, *args)


    def Line(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _GeomInt.GeomInt_IntSS_Line(self, *args)


    def HasLineOnS1(self, *args) -> "Standard_Boolean":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _GeomInt.GeomInt_IntSS_HasLineOnS1(self, *args)


    def LineOnS1(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomInt.GeomInt_IntSS_LineOnS1(self, *args)


    def HasLineOnS2(self, *args) -> "Standard_Boolean":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _GeomInt.GeomInt_IntSS_HasLineOnS2(self, *args)


    def LineOnS2(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _GeomInt.GeomInt_IntSS_LineOnS2(self, *args)


    def NbBoundaries(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_IntSS_NbBoundaries(self, *args)


    def Boundary(self, *args) -> "Handle_Geom_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom_Curve

        """
        return _GeomInt.GeomInt_IntSS_Boundary(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_IntSS_NbPoints(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        :param Index:
        :type Index: int
        :rtype: gp_Pnt

        """
        return _GeomInt.GeomInt_IntSS_Point(self, *args)


    def Pnt2d(self, *args) -> "gp_Pnt2d":
        """
        :param Index:
        :type Index: int
        :param OnFirst:
        :type OnFirst: bool
        :rtype: gp_Pnt2d

        """
        return _GeomInt.GeomInt_IntSS_Pnt2d(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_IntSS
GeomInt_IntSS.Perform = new_instancemethod(_GeomInt.GeomInt_IntSS_Perform, None, GeomInt_IntSS)
GeomInt_IntSS.IsDone = new_instancemethod(_GeomInt.GeomInt_IntSS_IsDone, None, GeomInt_IntSS)
GeomInt_IntSS.TolReached3d = new_instancemethod(_GeomInt.GeomInt_IntSS_TolReached3d, None, GeomInt_IntSS)
GeomInt_IntSS.TolReached2d = new_instancemethod(_GeomInt.GeomInt_IntSS_TolReached2d, None, GeomInt_IntSS)
GeomInt_IntSS.NbLines = new_instancemethod(_GeomInt.GeomInt_IntSS_NbLines, None, GeomInt_IntSS)
GeomInt_IntSS.Line = new_instancemethod(_GeomInt.GeomInt_IntSS_Line, None, GeomInt_IntSS)
GeomInt_IntSS.HasLineOnS1 = new_instancemethod(_GeomInt.GeomInt_IntSS_HasLineOnS1, None, GeomInt_IntSS)
GeomInt_IntSS.LineOnS1 = new_instancemethod(_GeomInt.GeomInt_IntSS_LineOnS1, None, GeomInt_IntSS)
GeomInt_IntSS.HasLineOnS2 = new_instancemethod(_GeomInt.GeomInt_IntSS_HasLineOnS2, None, GeomInt_IntSS)
GeomInt_IntSS.LineOnS2 = new_instancemethod(_GeomInt.GeomInt_IntSS_LineOnS2, None, GeomInt_IntSS)
GeomInt_IntSS.NbBoundaries = new_instancemethod(_GeomInt.GeomInt_IntSS_NbBoundaries, None, GeomInt_IntSS)
GeomInt_IntSS.Boundary = new_instancemethod(_GeomInt.GeomInt_IntSS_Boundary, None, GeomInt_IntSS)
GeomInt_IntSS.NbPoints = new_instancemethod(_GeomInt.GeomInt_IntSS_NbPoints, None, GeomInt_IntSS)
GeomInt_IntSS.Point = new_instancemethod(_GeomInt.GeomInt_IntSS_Point, None, GeomInt_IntSS)
GeomInt_IntSS.Pnt2d = new_instancemethod(_GeomInt.GeomInt_IntSS_Pnt2d, None, GeomInt_IntSS)
GeomInt_IntSS_swigregister = _GeomInt.GeomInt_IntSS_swigregister
GeomInt_IntSS_swigregister(GeomInt_IntSS)

class GeomInt_LineConstructor(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _GeomInt.GeomInt_LineConstructor_swiginit(self, _GeomInt.new_GeomInt_LineConstructor(*args))

    def Load(self, *args) -> "void":
        """
        * Initializes me by two surfaces and corresponding tools which represent boundaries of surfaces

        :param D1:
        :type D1: Handle_Adaptor3d_TopolTool &
        :param D2:
        :type D2: Handle_Adaptor3d_TopolTool &
        :param S1:
        :type S1: Handle_GeomAdaptor_HSurface &
        :param S2:
        :type S2: Handle_GeomAdaptor_HSurface &
        :rtype: None

        """
        return _GeomInt.GeomInt_LineConstructor_Load(self, *args)


    def Perform(self, *args) -> "void":
        """
        * Splits line

        :param L:
        :type L: Handle_IntPatch_Line &
        :rtype: None

        """
        return _GeomInt.GeomInt_LineConstructor_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        * Returns True if splitting was successful

        :rtype: bool

        """
        return _GeomInt.GeomInt_LineConstructor_IsDone(self, *args)


    def NbParts(self, *args) -> "Standard_Integer":
        """
        * Returns number of splits

        :rtype: int

        """
        return _GeomInt.GeomInt_LineConstructor_NbParts(self, *args)


    def Part(self, *args) -> "void":
        """
        * Return first and last parameters for given index of split

        :param I:
        :type I: int
        :param WFirst:
        :type WFirst: float &
        :param WLast:
        :type WLast: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_LineConstructor_Part(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_LineConstructor
GeomInt_LineConstructor.Load = new_instancemethod(_GeomInt.GeomInt_LineConstructor_Load, None, GeomInt_LineConstructor)
GeomInt_LineConstructor.Perform = new_instancemethod(_GeomInt.GeomInt_LineConstructor_Perform, None, GeomInt_LineConstructor)
GeomInt_LineConstructor.IsDone = new_instancemethod(_GeomInt.GeomInt_LineConstructor_IsDone, None, GeomInt_LineConstructor)
GeomInt_LineConstructor.NbParts = new_instancemethod(_GeomInt.GeomInt_LineConstructor_NbParts, None, GeomInt_LineConstructor)
GeomInt_LineConstructor.Part = new_instancemethod(_GeomInt.GeomInt_LineConstructor_Part, None, GeomInt_LineConstructor)
GeomInt_LineConstructor_swigregister = _GeomInt.GeomInt_LineConstructor_swigregister
GeomInt_LineConstructor_swigregister(GeomInt_LineConstructor)

class GeomInt_LineTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NbVertex(*args) -> "Standard_Integer":
        """
        :param L:
        :type L: Handle_IntPatch_Line &
        :rtype: int

        """
        return _GeomInt.GeomInt_LineTool_NbVertex(*args)

    NbVertex = staticmethod(NbVertex)

    def Vertex(*args) -> "IntPatch_Point const &":
        """
        :param L:
        :type L: Handle_IntPatch_Line &
        :param I:
        :type I: int
        :rtype: IntPatch_Point

        """
        return _GeomInt.GeomInt_LineTool_Vertex(*args)

    Vertex = staticmethod(Vertex)

    def FirstParameter(*args) -> "Standard_Real":
        """
        :param L:
        :type L: Handle_IntPatch_Line &
        :rtype: float

        """
        return _GeomInt.GeomInt_LineTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args) -> "Standard_Real":
        """
        :param L:
        :type L: Handle_IntPatch_Line &
        :rtype: float

        """
        return _GeomInt.GeomInt_LineTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomInt.GeomInt_LineTool_swiginit(self, _GeomInt.new_GeomInt_LineTool())
    __swig_destroy__ = _GeomInt.delete_GeomInt_LineTool
GeomInt_LineTool_swigregister = _GeomInt.GeomInt_LineTool_swigregister
GeomInt_LineTool_swigregister(GeomInt_LineTool)

def GeomInt_LineTool_NbVertex(*args) -> "Standard_Integer":
    """
    :param L:
    :type L: Handle_IntPatch_Line &
    :rtype: int

    """
    return _GeomInt.GeomInt_LineTool_NbVertex(*args)

def GeomInt_LineTool_Vertex(*args) -> "IntPatch_Point const &":
    """
    :param L:
    :type L: Handle_IntPatch_Line &
    :param I:
    :type I: int
    :rtype: IntPatch_Point

    """
    return _GeomInt.GeomInt_LineTool_Vertex(*args)

def GeomInt_LineTool_FirstParameter(*args) -> "Standard_Real":
    """
    :param L:
    :type L: Handle_IntPatch_Line &
    :rtype: float

    """
    return _GeomInt.GeomInt_LineTool_FirstParameter(*args)

def GeomInt_LineTool_LastParameter(*args) -> "Standard_Real":
    """
    :param L:
    :type L: Handle_IntPatch_Line &
    :rtype: float

    """
    return _GeomInt.GeomInt_LineTool_LastParameter(*args)

class GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 1
        :type NbIterations: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations:
        :type NbIterations: int
        :param lambda1:
        :type lambda1: float
        :param lambda2:
        :type lambda2: float
        :rtype: None

        """
        _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiBSpCurve":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_Value(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_MaxError2d(self, *args)


    def AverageError(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_AverageError(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_IsDone, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_Value, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_Error, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_MaxError3d, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_MaxError2d, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox.AverageError = new_instancemethod(_GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_AverageError, None, GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_swigregister
GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox_swigregister(GeomInt_MyBSplGradientOfTheComputeLineOfWLApprox)

class GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_Value(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_MaxError2d(self, *args)


    def AverageError(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_AverageError(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_IsDone, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_Value, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_Error, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_MaxError3d, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_MaxError2d, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox.AverageError = new_instancemethod(_GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_AverageError, None, GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_swigregister
GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox_swigregister(GeomInt_MyGradientOfTheComputeLineBezierOfWLApprox)

class GeomInt_MyGradientbisOfTheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param Tol3d:
        :type Tol3d: float
        :param Tol2d:
        :type Tol2d: float
        :param NbIterations: default value is 200
        :type NbIterations: int
        :rtype: None

        """
        _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_MyGradientbisOfTheComputeLineOfWLApprox(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_Value(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_MaxError2d(self, *args)


    def AverageError(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_AverageError(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_MyGradientbisOfTheComputeLineOfWLApprox
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_IsDone, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_Value, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_Error, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_MaxError3d, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_MaxError2d, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox.AverageError = new_instancemethod(_GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_AverageError, None, GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_swigregister
GeomInt_MyGradientbisOfTheComputeLineOfWLApprox_swigregister(GeomInt_MyGradientbisOfTheComputeLineOfWLApprox)

class GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox(OCC.math.math_MultipleVarFunctionWithGradient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :rtype: None

        """
        _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox(*args))

    def NewParameters(self, *args) -> "math_Vector const &":
        """
        :rtype: math_Vector

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_NewParameters(self, *args)


    def CurveValue(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_CurveValue(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_MaxError2d(self, *args)


    def FirstConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_LastConstraint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.NewParameters = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_NewParameters, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.CurveValue = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_CurveValue, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_Error, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_MaxError3d, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_MaxError2d, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.FirstConstraint = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_FirstConstraint, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox.LastConstraint = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_LastConstraint, None, GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister
GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister(GeomInt_ParFunctionOfMyGradientOfTheComputeLineBezierOfWLApprox)

class GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox(OCC.math.math_MultipleVarFunctionWithGradient):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :rtype: None

        """
        _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox(*args))

    def NewParameters(self, *args) -> "math_Vector const &":
        """
        :rtype: math_Vector

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_NewParameters(self, *args)


    def CurveValue(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_CurveValue(self, *args)


    def Error(self, *args) -> "Standard_Real":
        """
        :param IPoint:
        :type IPoint: int
        :param CurveIndex:
        :type CurveIndex: int
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_Error(self, *args)


    def MaxError3d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_MaxError3d(self, *args)


    def MaxError2d(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_MaxError2d(self, *args)


    def FirstConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param FirstPoint:
        :type FirstPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_FirstConstraint(self, *args)


    def LastConstraint(self, *args) -> "AppParCurves_Constraint":
        """
        :param TheConstraints:
        :type TheConstraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param LastPoint:
        :type LastPoint: int
        :rtype: AppParCurves_Constraint

        """
        return _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_LastConstraint(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.NewParameters = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_NewParameters, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.CurveValue = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_CurveValue, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_Error, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.MaxError3d = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_MaxError3d, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.MaxError2d = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_MaxError2d, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.FirstConstraint = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_FirstConstraint, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox.LastConstraint = new_instancemethod(_GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_LastConstraint, None, GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister
GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister(GeomInt_ParFunctionOfMyGradientbisOfTheComputeLineOfWLApprox)

class GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox(*args))

    def Perform(self, *args) -> "void":
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_IsDone(self, *args)


    def BezierValue(self, *args) -> "AppParCurves_MultiCurve":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_BezierValue(self, *args)


    def BSplineValue(self, *args) -> "AppParCurves_MultiBSpCurve const &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args) -> "void":
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_ErrorGradient(self, *args)


    def Distance(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Distance(self, *args)


    def Error(self, *args) -> "void":
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Error(self, *args)


    def FirstLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_FirstLambda(self, *args)


    def LastLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_LastLambda(self, *args)


    def Points(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Points(self, *args)


    def Poles(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Poles(self, *args)


    def KIndex(self, *args) -> "math_IntegerVector const &":
        """
        :rtype: math_IntegerVector

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_KIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Perform, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_IsDone, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.BezierValue = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_BezierValue, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.BSplineValue = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_BSplineValue, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.FunctionMatrix = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_FunctionMatrix, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.DerivativeFunctionMatrix = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_DerivativeFunctionMatrix, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.ErrorGradient = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_ErrorGradient, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.Distance = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Distance, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Error, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.FirstLambda = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_FirstLambda, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.LastLambda = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_LastLambda, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.Points = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Points, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.Poles = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_Poles, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox.KIndex = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_KIndex, None, GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister
GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister(GeomInt_ParLeastSquareOfMyGradientOfTheComputeLineBezierOfWLApprox)

class GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Parameters:
        :type Parameters: math_Vector &
        :param NbPol:
        :type NbPol: int
        :rtype: None

        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param NbPol:
        :type NbPol: int
        :rtype: None

        """
        _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox(*args))

    def Perform(self, *args) -> "void":
        """
        :param Parameters:
        :type Parameters: math_Vector &
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param V1t:
        :type V1t: math_Vector &
        :param V2t:
        :type V2t: math_Vector &
        :param V1c:
        :type V1c: math_Vector &
        :param V2c:
        :type V2c: math_Vector &
        :param l1:
        :type l1: float
        :param l2:
        :type l2: float
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_IsDone(self, *args)


    def BezierValue(self, *args) -> "AppParCurves_MultiCurve":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_BezierValue(self, *args)


    def BSplineValue(self, *args) -> "AppParCurves_MultiBSpCurve const &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_BSplineValue(self, *args)


    def FunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_FunctionMatrix(self, *args)


    def DerivativeFunctionMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix(self, *args)


    def ErrorGradient(self, *args) -> "void":
        """
        :param Grad:
        :type Grad: math_Vector &
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_ErrorGradient(self, *args)


    def Distance(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Distance(self, *args)


    def Error(self, *args) -> "void":
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Error(self, *args)


    def FirstLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_FirstLambda(self, *args)


    def LastLambda(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_LastLambda(self, *args)


    def Points(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Points(self, *args)


    def Poles(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Poles(self, *args)


    def KIndex(self, *args) -> "math_IntegerVector const &":
        """
        :rtype: math_IntegerVector

        """
        return _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_KIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Perform, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_IsDone, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.BezierValue = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_BezierValue, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.BSplineValue = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_BSplineValue, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.FunctionMatrix = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_FunctionMatrix, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.DerivativeFunctionMatrix = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_DerivativeFunctionMatrix, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.ErrorGradient = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_ErrorGradient, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.Distance = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Distance, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Error, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.FirstLambda = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_FirstLambda, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.LastLambda = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_LastLambda, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.Points = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Points, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.Poles = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_Poles, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox.KIndex = new_instancemethod(_GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_KIndex, None, GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister
GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister(GeomInt_ParLeastSquareOfMyGradientbisOfTheComputeLineOfWLApprox)

class GeomInt_ParameterAndOrientation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param P:
        :type P: float
        :param Or1:
        :type Or1: TopAbs_Orientation
        :param Or2:
        :type Or2: TopAbs_Orientation
        :rtype: None

        """
        _GeomInt.GeomInt_ParameterAndOrientation_swiginit(self, _GeomInt.new_GeomInt_ParameterAndOrientation(*args))

    def SetOrientation1(self, *args) -> "void":
        """
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        """
        return _GeomInt.GeomInt_ParameterAndOrientation_SetOrientation1(self, *args)


    def SetOrientation2(self, *args) -> "void":
        """
        :param Or:
        :type Or: TopAbs_Orientation
        :rtype: None

        """
        return _GeomInt.GeomInt_ParameterAndOrientation_SetOrientation2(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_ParameterAndOrientation_Parameter(self, *args)


    def Orientation1(self, *args) -> "TopAbs_Orientation":
        """
        :rtype: TopAbs_Orientation

        """
        return _GeomInt.GeomInt_ParameterAndOrientation_Orientation1(self, *args)


    def Orientation2(self, *args) -> "TopAbs_Orientation":
        """
        :rtype: TopAbs_Orientation

        """
        return _GeomInt.GeomInt_ParameterAndOrientation_Orientation2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ParameterAndOrientation
GeomInt_ParameterAndOrientation.SetOrientation1 = new_instancemethod(_GeomInt.GeomInt_ParameterAndOrientation_SetOrientation1, None, GeomInt_ParameterAndOrientation)
GeomInt_ParameterAndOrientation.SetOrientation2 = new_instancemethod(_GeomInt.GeomInt_ParameterAndOrientation_SetOrientation2, None, GeomInt_ParameterAndOrientation)
GeomInt_ParameterAndOrientation.Parameter = new_instancemethod(_GeomInt.GeomInt_ParameterAndOrientation_Parameter, None, GeomInt_ParameterAndOrientation)
GeomInt_ParameterAndOrientation.Orientation1 = new_instancemethod(_GeomInt.GeomInt_ParameterAndOrientation_Orientation1, None, GeomInt_ParameterAndOrientation)
GeomInt_ParameterAndOrientation.Orientation2 = new_instancemethod(_GeomInt.GeomInt_ParameterAndOrientation_Orientation2, None, GeomInt_ParameterAndOrientation)
GeomInt_ParameterAndOrientation_swigregister = _GeomInt.GeomInt_ParameterAndOrientation_swigregister
GeomInt_ParameterAndOrientation_swigregister(GeomInt_ParameterAndOrientation)

class GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param SCurv:
        :type SCurv: AppParCurves_MultiCurve &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param Constraints:
        :type Constraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Bern:
        :type Bern: math_Matrix &
        :param DerivativeBern:
        :type DerivativeBern: math_Matrix &
        :param Tolerance: default value is 1.0e-10
        :type Tolerance: float
        :rtype: None

        """
        _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_IsDone(self, *args)


    def ConstraintMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_ConstraintMatrix(self, *args)


    def Duale(self, *args) -> "math_Vector const &":
        """
        :rtype: math_Vector

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_Duale(self, *args)


    def ConstraintDerivative(self, *args) -> "math_Matrix const &":
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param DA:
        :type DA: math_Matrix &
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_ConstraintDerivative(self, *args)


    def InverseMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_InverseMatrix(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_IsDone, None, GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox.ConstraintMatrix = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_ConstraintMatrix, None, GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox.Duale = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_Duale, None, GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox.ConstraintDerivative = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_ConstraintDerivative, None, GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox.InverseMatrix = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_InverseMatrix, None, GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister
GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox_swigregister(GeomInt_ResConstraintOfMyGradientOfTheComputeLineBezierOfWLApprox)

class GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param SCurv:
        :type SCurv: AppParCurves_MultiCurve &
        :param FirstPoint:
        :type FirstPoint: int
        :param LastPoint:
        :type LastPoint: int
        :param Constraints:
        :type Constraints: Handle_AppParCurves_HArray1OfConstraintCouple &
        :param Bern:
        :type Bern: math_Matrix &
        :param DerivativeBern:
        :type DerivativeBern: math_Matrix &
        :param Tolerance: default value is 1.0e-10
        :type Tolerance: float
        :rtype: None

        """
        _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_IsDone(self, *args)


    def ConstraintMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_ConstraintMatrix(self, *args)


    def Duale(self, *args) -> "math_Vector const &":
        """
        :rtype: math_Vector

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_Duale(self, *args)


    def ConstraintDerivative(self, *args) -> "math_Matrix const &":
        """
        :param SSP:
        :type SSP: GeomInt_TheMultiLineOfWLApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param Deg:
        :type Deg: int
        :param DA:
        :type DA: math_Matrix &
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_ConstraintDerivative(self, *args)


    def InverseMatrix(self, *args) -> "math_Matrix const &":
        """
        :rtype: math_Matrix

        """
        return _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_InverseMatrix(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_IsDone, None, GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox.ConstraintMatrix = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_ConstraintMatrix, None, GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox.Duale = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_Duale, None, GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox.ConstraintDerivative = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_ConstraintDerivative, None, GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox.InverseMatrix = new_instancemethod(_GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_InverseMatrix, None, GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister
GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox_swigregister(GeomInt_ResConstraintOfMyGradientbisOfTheComputeLineOfWLApprox)

class GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: GeomInt_ParameterAndOrientation &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _GeomInt.GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swiginit(self, _GeomInt.new_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation(*args))

    def Value(self, *args) -> "GeomInt_ParameterAndOrientation &":
        """
        :rtype: GeomInt_ParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation
GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation.Value = new_instancemethod(_GeomInt.GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_Value, None, GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)
GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister = _GeomInt.GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister
GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister(GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)

class Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swiginit(self, _GeomInt.new_Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _GeomInt.delete_Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation.Nullify = new_instancemethod(_GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_Nullify, None, Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation.IsNull = new_instancemethod(_GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_IsNull, None, Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation._get_reference = new_instancemethod(_GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation__get_reference, None, Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister = _GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_swigregister(Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation)

def Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation const":
    return _GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_DownCast(AnObject)
Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_DownCast = _GeomInt.Handle_GeomInt_SequenceNodeOfSequenceOfParameterAndOrientation_DownCast

class GeomInt_SequenceOfParameterAndOrientation(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        _GeomInt.GeomInt_SequenceOfParameterAndOrientation_swiginit(self, _GeomInt.new_GeomInt_SequenceOfParameterAndOrientation(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Clear(self, *args)


    def Assign(self, *args) -> "GeomInt_SequenceOfParameterAndOrientation const &":
        """
        :param Other:
        :type Other: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: GeomInt_SequenceOfParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Assign(self, *args)


    def Set(self, *args) -> "GeomInt_SequenceOfParameterAndOrientation const &":
        """
        :param Other:
        :type Other: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: GeomInt_SequenceOfParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: GeomInt_ParameterAndOrientation &
        :rtype: None

        :param S:
        :type S: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: GeomInt_ParameterAndOrientation &
        :rtype: None

        :param S:
        :type S: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: GeomInt_ParameterAndOrientation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: GeomInt_ParameterAndOrientation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_InsertAfter(self, *args)


    def First(self, *args) -> "GeomInt_ParameterAndOrientation const &":
        """
        :rtype: GeomInt_ParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_First(self, *args)


    def Last(self, *args) -> "GeomInt_ParameterAndOrientation const &":
        """
        :rtype: GeomInt_ParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: GeomInt_SequenceOfParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Split(self, *args)


    def Value(self, *args) -> "GeomInt_ParameterAndOrientation const &":
        """
        :param Index:
        :type Index: int
        :rtype: GeomInt_ParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: GeomInt_ParameterAndOrientation &
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_SetValue(self, *args)


    def ChangeValue(self, *args) -> "GeomInt_ParameterAndOrientation &":
        """
        :param Index:
        :type Index: int
        :rtype: GeomInt_ParameterAndOrientation

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _GeomInt.GeomInt_SequenceOfParameterAndOrientation_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_SequenceOfParameterAndOrientation
GeomInt_SequenceOfParameterAndOrientation.Clear = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Clear, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Assign = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Assign, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Set = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Set, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Append = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Append, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Prepend = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Prepend, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.InsertBefore = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_InsertBefore, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.InsertAfter = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_InsertAfter, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.First = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_First, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Last = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Last, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Split = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Split, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Value = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Value, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.SetValue = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_SetValue, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.ChangeValue = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_ChangeValue, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation.Remove = new_instancemethod(_GeomInt.GeomInt_SequenceOfParameterAndOrientation_Remove, None, GeomInt_SequenceOfParameterAndOrientation)
GeomInt_SequenceOfParameterAndOrientation_swigregister = _GeomInt.GeomInt_SequenceOfParameterAndOrientation_swigregister
GeomInt_SequenceOfParameterAndOrientation_swigregister(GeomInt_SequenceOfParameterAndOrientation)

class GeomInt_TheComputeLineBezierOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-3
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-6
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheComputeLineBezierOfWLApprox(*args))

    def Init(self, *args) -> "void":
        """
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Perform(self, *args)


    def SetDegrees(self, *args) -> "void":
        """
        :param degreemin:
        :type degreemin: int
        :param degreemax:
        :type degreemax: int
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetDegrees(self, *args)


    def SetTolerances(self, *args) -> "void":
        """
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetTolerances(self, *args)


    def SetConstraints(self, *args) -> "void":
        """
        :param firstC:
        :type firstC: AppParCurves_Constraint
        :param lastC:
        :type lastC: AppParCurves_Constraint
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetConstraints(self, *args)


    def IsAllApproximated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_IsToleranceReached(self, *args)


    def Error(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param tol3d:
        :type tol3d: float &
        :param tol2d:
        :type tol2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Error(self, *args)


    def NbMultiCurves(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_NbMultiCurves(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Value(self, *args)


    def ChangeValue(self, *args) -> "AppParCurves_MultiCurve &":
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: AppParCurves_MultiCurve

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_ChangeValue(self, *args)


    def SplineValue(self, *args) -> "AppParCurves_MultiBSpCurve const &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SplineValue(self, *args)


    def Parametrization(self, *args) -> "void":
        """
        :param partype:
        :type partype: Approx_ParametrizationType &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Parametrization(self, *args)


    def Parameters(self, *args) -> "TColStd_Array1OfReal const &":
        """
        :param Index: default value is 1
        :type Index: int
        :rtype: TColStd_Array1OfReal

        """
        return _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Parameters(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheComputeLineBezierOfWLApprox
GeomInt_TheComputeLineBezierOfWLApprox.Init = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Init, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Perform, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.SetDegrees = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetDegrees, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.SetTolerances = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetTolerances, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.SetConstraints = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SetConstraints, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.IsAllApproximated = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_IsAllApproximated, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.IsToleranceReached = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_IsToleranceReached, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Error, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.NbMultiCurves = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_NbMultiCurves, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Value, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.ChangeValue = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_ChangeValue, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.SplineValue = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_SplineValue, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.Parametrization = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Parametrization, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox.Parameters = new_instancemethod(_GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_Parameters, None, GeomInt_TheComputeLineBezierOfWLApprox)
GeomInt_TheComputeLineBezierOfWLApprox_swigregister = _GeomInt.GeomInt_TheComputeLineBezierOfWLApprox_swigregister
GeomInt_TheComputeLineBezierOfWLApprox_swigregister(GeomInt_TheComputeLineBezierOfWLApprox)

class GeomInt_TheComputeLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-3
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-6
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param Parameters:
        :type Parameters: math_Vector &
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        _GeomInt.GeomInt_TheComputeLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheComputeLineOfWLApprox(*args))

    def Interpol(self, *args) -> "void":
        """
        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Interpol(self, *args)


    def Init(self, *args) -> "void":
        """
        :param degreemin: default value is 4
        :type degreemin: int
        :param degreemax: default value is 8
        :type degreemax: int
        :param Tolerance3d: default value is 1.0e-03
        :type Tolerance3d: float
        :param Tolerance2d: default value is 1.0e-06
        :type Tolerance2d: float
        :param NbIterations: default value is 5
        :type NbIterations: int
        :param cutting: default value is Standard_True
        :type cutting: bool
        :param parametrization: default value is Approx_ChordLength
        :type parametrization: Approx_ParametrizationType
        :param Squares: default value is Standard_False
        :type Squares: bool
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Init(self, *args)


    def Perform(self, *args) -> "void":
        """
        :param Line:
        :type Line: GeomInt_TheMultiLineOfWLApprox &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Perform(self, *args)


    def SetParameters(self, *args) -> "void":
        """
        :param ThePar:
        :type ThePar: math_Vector &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetParameters(self, *args)


    def SetKnots(self, *args) -> "void":
        """
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetKnots(self, *args)


    def SetKnotsAndMultiplicities(self, *args) -> "void":
        """
        :param Knots:
        :type Knots: TColStd_Array1OfReal &
        :param Mults:
        :type Mults: TColStd_Array1OfInteger &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetKnotsAndMultiplicities(self, *args)


    def SetDegrees(self, *args) -> "void":
        """
        :param degreemin:
        :type degreemin: int
        :param degreemax:
        :type degreemax: int
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetDegrees(self, *args)


    def SetTolerances(self, *args) -> "void":
        """
        :param Tolerance3d:
        :type Tolerance3d: float
        :param Tolerance2d:
        :type Tolerance2d: float
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetTolerances(self, *args)


    def SetContinuity(self, *args) -> "void":
        """
        :param C:
        :type C: int
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetContinuity(self, *args)


    def SetConstraints(self, *args) -> "void":
        """
        :param firstC:
        :type firstC: AppParCurves_Constraint
        :param lastC:
        :type lastC: AppParCurves_Constraint
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_SetConstraints(self, *args)


    def IsAllApproximated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_IsAllApproximated(self, *args)


    def IsToleranceReached(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_IsToleranceReached(self, *args)


    def Error(self, *args) -> "void":
        """
        :param tol3d:
        :type tol3d: float &
        :param tol2d:
        :type tol2d: float &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Error(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiBSpCurve const &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Value(self, *args)


    def ChangeValue(self, *args) -> "AppParCurves_MultiBSpCurve &":
        """
        :rtype: AppParCurves_MultiBSpCurve

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_ChangeValue(self, *args)


    def Parameters(self, *args) -> "TColStd_Array1OfReal const &":
        """
        :rtype: TColStd_Array1OfReal

        """
        return _GeomInt.GeomInt_TheComputeLineOfWLApprox_Parameters(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheComputeLineOfWLApprox
GeomInt_TheComputeLineOfWLApprox.Interpol = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Interpol, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.Init = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Init, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Perform, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetParameters = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetParameters, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetKnots = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetKnots, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetKnotsAndMultiplicities = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetKnotsAndMultiplicities, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetDegrees = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetDegrees, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetTolerances = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetTolerances, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetContinuity = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetContinuity, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.SetConstraints = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_SetConstraints, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.IsAllApproximated = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_IsAllApproximated, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.IsToleranceReached = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_IsToleranceReached, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.Error = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Error, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Value, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.ChangeValue = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_ChangeValue, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox.Parameters = new_instancemethod(_GeomInt.GeomInt_TheComputeLineOfWLApprox_Parameters, None, GeomInt_TheComputeLineOfWLApprox)
GeomInt_TheComputeLineOfWLApprox_swigregister = _GeomInt.GeomInt_TheComputeLineOfWLApprox_swigregister
GeomInt_TheComputeLineOfWLApprox_swigregister(GeomInt_TheComputeLineOfWLApprox)

class GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox(OCC.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox(*args))

    def ComputeParameters(self, *args) -> "void":
        """
        :param ChoixIso:
        :type ChoixIso: IntImp_ConstIsoparametric
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param UVap:
        :type UVap: math_Vector &
        :param BornInf:
        :type BornInf: math_Vector &
        :param BornSup:
        :type BornSup: math_Vector &
        :param Tolerance:
        :type Tolerance: math_Vector &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_ComputeParameters(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Root(self, *args)


    def Point(self, *args) -> "gp_Pnt":
        """
        :rtype: gp_Pnt

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Point(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        :param UVap:
        :type UVap: math_Vector &
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param BestChoix:
        :type BestChoix: IntImp_ConstIsoparametric &
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsTangent(self, *args)


    def Direction(self, *args) -> "gp_Dir":
        """
        :rtype: gp_Dir

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d":
        """
        :rtype: gp_Dir2d

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d":
        """
        :rtype: gp_Dir2d

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS2(self, *args)


    def AuxillarSurface1(self, *args) -> "Handle_Adaptor3d_HSurface":
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_AuxillarSurface1(self, *args)


    def AuxillarSurface2(self, *args) -> "Handle_Adaptor3d_HSurface":
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_AuxillarSurface2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.ComputeParameters = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_ComputeParameters, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Root = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Root, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Point = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Point, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.IsTangent = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsTangent, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Direction = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Direction, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.DirectionOnS1 = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS1, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.DirectionOnS2 = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS2, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.AuxillarSurface1 = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_AuxillarSurface1, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox.AuxillarSurface2 = new_instancemethod(_GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_AuxillarSurface2, None, GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister = _GeomInt.GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister
GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister(GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox)

class GeomInt_TheImpPrmSvSurfacesOfWLApprox(OCC.ApproxInt.ApproxInt_SvSurfaces):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Surf2:
        :type Surf2: IntSurf_Quadric &
        :rtype: None

        :param Surf1:
        :type Surf1: IntSurf_Quadric &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _GeomInt.GeomInt_TheImpPrmSvSurfacesOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheImpPrmSvSurfacesOfWLApprox(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheImpPrmSvSurfacesOfWLApprox
GeomInt_TheImpPrmSvSurfacesOfWLApprox_swigregister = _GeomInt.GeomInt_TheImpPrmSvSurfacesOfWLApprox_swigregister
GeomInt_TheImpPrmSvSurfacesOfWLApprox_swigregister(GeomInt_TheImpPrmSvSurfacesOfWLApprox)

class GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :param TolTangency:
        :type TolTangency: float
        :rtype: None

        :param S1:
        :type S1: Handle_Adaptor3d_HSurface &
        :param S2:
        :type S2: Handle_Adaptor3d_HSurface &
        :param TolTangency:
        :type TolTangency: float
        :rtype: None

        """
        _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox(*args))

    def Perform(self, *args) -> "IntImp_ConstIsoparametric":
        """
        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param Rsnld:
        :type Rsnld: math_FunctionSetRoot &
        :rtype: IntImp_ConstIsoparametric

        :param Param:
        :type Param: TColStd_Array1OfReal &
        :param Rsnld:
        :type Rsnld: math_FunctionSetRoot &
        :param ChoixIso:
        :type ChoixIso: IntImp_ConstIsoparametric
        :rtype: IntImp_ConstIsoparametric

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsDone(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsEmpty(self, *args)


    def Point(self, *args) -> "IntSurf_PntOn2S const &":
        """
        :rtype: IntSurf_PntOn2S

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Point(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsTangent(self, *args)


    def Direction(self, *args) -> "gp_Dir const":
        """
        :rtype: gp_Dir

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Direction(self, *args)


    def DirectionOnS1(self, *args) -> "gp_Dir2d const":
        """
        :rtype: gp_Dir2d

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS1(self, *args)


    def DirectionOnS2(self, *args) -> "gp_Dir2d const":
        """
        :rtype: gp_Dir2d

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS2(self, *args)


    def Function(self, *args) -> "GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox &":
        """
        :rtype: GeomInt_TheFunctionOfTheInt2SOfThePrmPrmSvSurfacesOfWLApprox

        """
        return _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Function(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Perform = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Perform, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.IsDone = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsDone, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.IsEmpty = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsEmpty, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Point = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Point, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.IsTangent = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_IsTangent, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Direction = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Direction, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.DirectionOnS1 = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS1, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.DirectionOnS2 = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_DirectionOnS2, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox.Function = new_instancemethod(_GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_Function, None, GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister = _GeomInt.GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister
GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox_swigregister(GeomInt_TheInt2SOfThePrmPrmSvSurfacesOfWLApprox)

class GeomInt_TheMultiLineOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param line:
        :type line: Handle_IntPatch_WLine &
        :param PtrSvSurfaces:
        :type PtrSvSurfaces: Standard_Address
        :param NbP3d:
        :type NbP3d: int
        :param NbP2d:
        :type NbP2d: int
        :param xo:
        :type xo: float
        :param ax:
        :type ax: float
        :param yo:
        :type yo: float
        :param ay:
        :type ay: float
        :param zo:
        :type zo: float
        :param az:
        :type az: float
        :param u1o:
        :type u1o: float
        :param a1u:
        :type a1u: float
        :param v1o:
        :type v1o: float
        :param a1v:
        :type a1v: float
        :param u2o:
        :type u2o: float
        :param a2u:
        :type a2u: float
        :param v2o:
        :type v2o: float
        :param a2v:
        :type a2v: float
        :param P2DOnFirst:
        :type P2DOnFirst: bool
        :param IndMin: default value is 0
        :type IndMin: int
        :param IndMax: default value is 0
        :type IndMax: int
        :rtype: None

        :param line:
        :type line: Handle_IntPatch_WLine &
        :param NbP3d:
        :type NbP3d: int
        :param NbP2d:
        :type NbP2d: int
        :param xo:
        :type xo: float
        :param ax:
        :type ax: float
        :param yo:
        :type yo: float
        :param ay:
        :type ay: float
        :param zo:
        :type zo: float
        :param az:
        :type az: float
        :param u1o:
        :type u1o: float
        :param a1u:
        :type a1u: float
        :param v1o:
        :type v1o: float
        :param a1v:
        :type a1v: float
        :param u2o:
        :type u2o: float
        :param a2u:
        :type a2u: float
        :param v2o:
        :type v2o: float
        :param a2v:
        :type a2v: float
        :param P2DOnFirst:
        :type P2DOnFirst: bool
        :param IndMin: default value is 0
        :type IndMin: int
        :param IndMax: default value is 0
        :type IndMax: int
        :rtype: None

        """
        _GeomInt.GeomInt_TheMultiLineOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheMultiLineOfWLApprox(*args))

    def FirstPoint(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_FirstPoint(self, *args)


    def LastPoint(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_LastPoint(self, *args)


    def NbP2d(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_NbP2d(self, *args)


    def NbP3d(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_NbP3d(self, *args)


    def WhatStatus(self, *args) -> "Approx_Status":
        """
        :rtype: Approx_Status

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_WhatStatus(self, *args)


    def Value(self, *args) -> "void":
        """
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: None

        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: None

        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: None

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_Value(self, *args)


    def Tangency(self, *args) -> "Standard_Boolean":
        """
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_Tangency(self, *args)


    def MakeMLBetween(self, *args) -> "GeomInt_TheMultiLineOfWLApprox":
        """
        :param Low:
        :type Low: int
        :param High:
        :type High: int
        :param NbPointsToInsert:
        :type NbPointsToInsert: int
        :rtype: GeomInt_TheMultiLineOfWLApprox

        """
        return _GeomInt.GeomInt_TheMultiLineOfWLApprox_MakeMLBetween(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheMultiLineOfWLApprox
GeomInt_TheMultiLineOfWLApprox.FirstPoint = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_FirstPoint, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.LastPoint = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_LastPoint, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.NbP2d = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_NbP2d, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.NbP3d = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_NbP3d, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.WhatStatus = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_WhatStatus, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.Value = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_Value, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.Tangency = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_Tangency, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox.MakeMLBetween = new_instancemethod(_GeomInt.GeomInt_TheMultiLineOfWLApprox_MakeMLBetween, None, GeomInt_TheMultiLineOfWLApprox)
GeomInt_TheMultiLineOfWLApprox_swigregister = _GeomInt.GeomInt_TheMultiLineOfWLApprox_swigregister
GeomInt_TheMultiLineOfWLApprox_swigregister(GeomInt_TheMultiLineOfWLApprox)

class GeomInt_TheMultiLineToolOfWLApprox(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstPoint(*args) -> "Standard_Integer":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_FirstPoint(*args)

    FirstPoint = staticmethod(FirstPoint)

    def LastPoint(*args) -> "Standard_Integer":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_LastPoint(*args)

    LastPoint = staticmethod(LastPoint)

    def NbP2d(*args) -> "Standard_Integer":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_NbP2d(*args)

    NbP2d = staticmethod(NbP2d)

    def NbP3d(*args) -> "Standard_Integer":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :rtype: int

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_NbP3d(*args)

    NbP3d = staticmethod(NbP3d)

    def Value(*args) -> "void":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: void

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Value(*args)

    Value = staticmethod(Value)

    def Tangency(*args) -> "Standard_Boolean":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Tangency(*args)

    Tangency = staticmethod(Tangency)

    def Curvature(*args) -> "Standard_Boolean":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param MPointIndex:
        :type MPointIndex: int
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Curvature(*args)

    Curvature = staticmethod(Curvature)

    def MakeMLBetween(*args) -> "GeomInt_TheMultiLineOfWLApprox":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :param NbPMin:
        :type NbPMin: int
        :rtype: GeomInt_TheMultiLineOfWLApprox

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_MakeMLBetween(*args)

    MakeMLBetween = staticmethod(MakeMLBetween)

    def WhatStatus(*args) -> "Approx_Status":
        """
        :param ML:
        :type ML: GeomInt_TheMultiLineOfWLApprox &
        :param I1:
        :type I1: int
        :param I2:
        :type I2: int
        :rtype: Approx_Status

        """
        return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_WhatStatus(*args)

    WhatStatus = staticmethod(WhatStatus)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheMultiLineToolOfWLApprox())
    __swig_destroy__ = _GeomInt.delete_GeomInt_TheMultiLineToolOfWLApprox
GeomInt_TheMultiLineToolOfWLApprox_swigregister = _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_swigregister
GeomInt_TheMultiLineToolOfWLApprox_swigregister(GeomInt_TheMultiLineToolOfWLApprox)

def GeomInt_TheMultiLineToolOfWLApprox_FirstPoint(*args) -> "Standard_Integer":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :rtype: int

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_FirstPoint(*args)

def GeomInt_TheMultiLineToolOfWLApprox_LastPoint(*args) -> "Standard_Integer":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :rtype: int

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_LastPoint(*args)

def GeomInt_TheMultiLineToolOfWLApprox_NbP2d(*args) -> "Standard_Integer":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :rtype: int

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_NbP2d(*args)

def GeomInt_TheMultiLineToolOfWLApprox_NbP3d(*args) -> "Standard_Integer":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :rtype: int

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_NbP3d(*args)

def GeomInt_TheMultiLineToolOfWLApprox_Value(*args) -> "void":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :rtype: void

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Value(*args)

def GeomInt_TheMultiLineToolOfWLApprox_Tangency(*args) -> "Standard_Boolean":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Tangency(*args)

def GeomInt_TheMultiLineToolOfWLApprox_Curvature(*args) -> "Standard_Boolean":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param MPointIndex:
    :type MPointIndex: int
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_Curvature(*args)

def GeomInt_TheMultiLineToolOfWLApprox_MakeMLBetween(*args) -> "GeomInt_TheMultiLineOfWLApprox":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param I1:
    :type I1: int
    :param I2:
    :type I2: int
    :param NbPMin:
    :type NbPMin: int
    :rtype: GeomInt_TheMultiLineOfWLApprox

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_MakeMLBetween(*args)

def GeomInt_TheMultiLineToolOfWLApprox_WhatStatus(*args) -> "Approx_Status":
    """
    :param ML:
    :type ML: GeomInt_TheMultiLineOfWLApprox &
    :param I1:
    :type I1: int
    :param I2:
    :type I2: int
    :rtype: Approx_Status

    """
    return _GeomInt.GeomInt_TheMultiLineToolOfWLApprox_WhatStatus(*args)

class GeomInt_ThePrmPrmSvSurfacesOfWLApprox(OCC.ApproxInt.ApproxInt_SvSurfaces):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Surf1:
        :type Surf1: Handle_Adaptor3d_HSurface &
        :param Surf2:
        :type Surf2: Handle_Adaptor3d_HSurface &
        :rtype: None

        """
        _GeomInt.GeomInt_ThePrmPrmSvSurfacesOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_ThePrmPrmSvSurfacesOfWLApprox(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_ThePrmPrmSvSurfacesOfWLApprox
GeomInt_ThePrmPrmSvSurfacesOfWLApprox_swigregister = _GeomInt.GeomInt_ThePrmPrmSvSurfacesOfWLApprox_swigregister
GeomInt_ThePrmPrmSvSurfacesOfWLApprox_swigregister(GeomInt_ThePrmPrmSvSurfacesOfWLApprox)

class GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox(OCC.math.math_FunctionSetWithDerivatives):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param PS:
        :type PS: Handle_Adaptor3d_HSurface &
        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        """
        _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_swiginit(self, _GeomInt.new_GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox(*args))

    def SetImplicitSurface(self, *args) -> "void":
        """
        :param IS:
        :type IS: IntSurf_Quadric &
        :rtype: None

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_SetImplicitSurface(self, *args)


    def Set(self, *args) -> "void":
        """
        :param PS:
        :type PS: Handle_Adaptor3d_HSurface &
        :rtype: None

        :param Tolerance:
        :type Tolerance: float
        :rtype: None

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Set(self, *args)


    def Root(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Root(self, *args)


    def Tolerance(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Tolerance(self, *args)


    def Point(self, *args) -> "gp_Pnt const":
        """
        :rtype: gp_Pnt

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Point(self, *args)


    def IsTangent(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_IsTangent(self, *args)


    def Direction3d(self, *args) -> "gp_Vec const":
        """
        :rtype: gp_Vec

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Direction3d(self, *args)


    def Direction2d(self, *args) -> "gp_Dir2d const":
        """
        :rtype: gp_Dir2d

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Direction2d(self, *args)


    def PSurface(self, *args) -> "Handle_Adaptor3d_HSurface":
        """
        :rtype: Handle_Adaptor3d_HSurface

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_PSurface(self, *args)


    def ISurface(self, *args) -> "IntSurf_Quadric const &":
        """
        :rtype: IntSurf_Quadric

        """
        return _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_ISurface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomInt.delete_GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.SetImplicitSurface = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_SetImplicitSurface, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Set = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Set, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Root = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Root, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Tolerance = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Tolerance, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Point = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Point, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.IsTangent = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_IsTangent, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Direction3d = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Direction3d, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.Direction2d = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_Direction2d, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.PSurface = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_PSurface, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox.ISurface = new_instancemethod(_GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_ISurface, None, GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_swigregister = _GeomInt.GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_swigregister
GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox_swigregister(GeomInt_TheZerImpFuncOfTheImpPrmSvSurfacesOfWLApprox)



