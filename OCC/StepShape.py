# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StepShape.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StepShape')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StepShape')
    _StepShape = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StepShape', [dirname(__file__)])
        except ImportError:
            import _StepShape
            return _StepShape
        try:
            _mod = imp.load_module('_StepShape', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StepShape = swig_import_helper()
    del swig_import_helper
else:
    import _StepShape
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StepShape.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StepShape.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StepShape.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StepShape.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StepShape.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StepShape.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StepShape.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StepShape.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StepShape.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StepShape.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StepShape.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StepShape.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StepShape.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StepShape.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StepShape.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StepShape.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StepShape.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StepShape.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.StepGeom
import OCC.MMgt
import OCC.StepRepr
import OCC.TCollection
import OCC.StepBasic
import OCC.TColStd
import OCC.Interface
import OCC.Message

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

StepShape_Equal = _StepShape.StepShape_Equal
StepShape_Large = _StepShape.StepShape_Large
StepShape_Small = _StepShape.StepShape_Small
StepShape_boDifference = _StepShape.StepShape_boDifference
StepShape_boIntersection = _StepShape.StepShape_boIntersection
StepShape_boUnion = _StepShape.StepShape_boUnion
class StepShape_Array1OfConnectedEdgeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_ConnectedEdgeSet &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfConnectedEdgeSet_swiginit(self, _StepShape.new_StepShape_Array1OfConnectedEdgeSet(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_ConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfConnectedEdgeSet const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfConnectedEdgeSet &
        :rtype: StepShape_Array1OfConnectedEdgeSet

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfConnectedEdgeSet const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfConnectedEdgeSet &
        :rtype: StepShape_Array1OfConnectedEdgeSet

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_ConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_ConnectedEdgeSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedEdgeSet

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_ConnectedEdgeSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedEdgeSet

        """
        return _StepShape.StepShape_Array1OfConnectedEdgeSet_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfConnectedEdgeSet
StepShape_Array1OfConnectedEdgeSet.Init = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Init, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Destroy, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_IsAllocated, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Assign = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Assign, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Set = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Set, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Length = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Length, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Lower = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Lower, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Upper = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Upper, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_SetValue, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.Value = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_Value, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfConnectedEdgeSet_ChangeValue, None, StepShape_Array1OfConnectedEdgeSet)
StepShape_Array1OfConnectedEdgeSet_swigregister = _StepShape.StepShape_Array1OfConnectedEdgeSet_swigregister
StepShape_Array1OfConnectedEdgeSet_swigregister(StepShape_Array1OfConnectedEdgeSet)

class StepShape_Array1OfConnectedFaceSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_ConnectedFaceSet &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfConnectedFaceSet_swiginit(self, _StepShape.new_StepShape_Array1OfConnectedFaceSet(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfConnectedFaceSet const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfConnectedFaceSet &
        :rtype: StepShape_Array1OfConnectedFaceSet

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfConnectedFaceSet const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfConnectedFaceSet &
        :rtype: StepShape_Array1OfConnectedFaceSet

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_Array1OfConnectedFaceSet_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfConnectedFaceSet
StepShape_Array1OfConnectedFaceSet.Init = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Init, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Destroy, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_IsAllocated, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Assign = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Assign, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Set = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Set, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Length = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Length, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Lower = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Lower, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Upper = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Upper, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_SetValue, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.Value = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_Value, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfConnectedFaceSet_ChangeValue, None, StepShape_Array1OfConnectedFaceSet)
StepShape_Array1OfConnectedFaceSet_swigregister = _StepShape.StepShape_Array1OfConnectedFaceSet_swigregister
StepShape_Array1OfConnectedFaceSet_swigregister(StepShape_Array1OfConnectedFaceSet)

class StepShape_Array1OfEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_Edge &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfEdge_swiginit(self, _StepShape.new_StepShape_Array1OfEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfEdge_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfEdge_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfEdge_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfEdge const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfEdge &
        :rtype: StepShape_Array1OfEdge

        """
        return _StepShape.StepShape_Array1OfEdge_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfEdge const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfEdge &
        :rtype: StepShape_Array1OfEdge

        """
        return _StepShape.StepShape_Array1OfEdge_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfEdge_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfEdge_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfEdge_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfEdge_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_Edge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_Array1OfEdge_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_Edge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_Array1OfEdge_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfEdge
StepShape_Array1OfEdge.Init = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Init, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Destroy, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfEdge_IsAllocated, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Assign = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Assign, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Set = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Set, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Length = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Length, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Lower = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Lower, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Upper = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Upper, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfEdge_SetValue, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.Value = new_instancemethod(_StepShape.StepShape_Array1OfEdge_Value, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfEdge_ChangeValue, None, StepShape_Array1OfEdge)
StepShape_Array1OfEdge_swigregister = _StepShape.StepShape_Array1OfEdge_swigregister
StepShape_Array1OfEdge_swigregister(StepShape_Array1OfEdge)

class StepShape_Array1OfFace(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_Face &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfFace_swiginit(self, _StepShape.new_StepShape_Array1OfFace(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFace_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFace_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfFace_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfFace const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfFace &
        :rtype: StepShape_Array1OfFace

        """
        return _StepShape.StepShape_Array1OfFace_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfFace const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfFace &
        :rtype: StepShape_Array1OfFace

        """
        return _StepShape.StepShape_Array1OfFace_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFace_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFace_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFace_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFace_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_Face":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_Array1OfFace_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_Face":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_Array1OfFace_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfFace
StepShape_Array1OfFace.Init = new_instancemethod(_StepShape.StepShape_Array1OfFace_Init, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfFace_Destroy, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfFace_IsAllocated, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Assign = new_instancemethod(_StepShape.StepShape_Array1OfFace_Assign, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Set = new_instancemethod(_StepShape.StepShape_Array1OfFace_Set, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Length = new_instancemethod(_StepShape.StepShape_Array1OfFace_Length, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Lower = new_instancemethod(_StepShape.StepShape_Array1OfFace_Lower, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Upper = new_instancemethod(_StepShape.StepShape_Array1OfFace_Upper, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfFace_SetValue, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.Value = new_instancemethod(_StepShape.StepShape_Array1OfFace_Value, None, StepShape_Array1OfFace)
StepShape_Array1OfFace.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfFace_ChangeValue, None, StepShape_Array1OfFace)
StepShape_Array1OfFace_swigregister = _StepShape.StepShape_Array1OfFace_swigregister
StepShape_Array1OfFace_swigregister(StepShape_Array1OfFace)

class StepShape_Array1OfFaceBound(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_FaceBound &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfFaceBound_swiginit(self, _StepShape.new_StepShape_Array1OfFaceBound(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_FaceBound &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFaceBound_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFaceBound_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfFaceBound_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfFaceBound const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfFaceBound &
        :rtype: StepShape_Array1OfFaceBound

        """
        return _StepShape.StepShape_Array1OfFaceBound_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfFaceBound const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfFaceBound &
        :rtype: StepShape_Array1OfFaceBound

        """
        return _StepShape.StepShape_Array1OfFaceBound_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFaceBound_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFaceBound_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfFaceBound_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_FaceBound &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfFaceBound_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_FaceBound":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_Array1OfFaceBound_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_FaceBound":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_Array1OfFaceBound_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfFaceBound
StepShape_Array1OfFaceBound.Init = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Init, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Destroy, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_IsAllocated, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Assign = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Assign, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Set = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Set, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Length = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Length, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Lower = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Lower, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Upper = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Upper, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_SetValue, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.Value = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_Value, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfFaceBound_ChangeValue, None, StepShape_Array1OfFaceBound)
StepShape_Array1OfFaceBound_swigregister = _StepShape.StepShape_Array1OfFaceBound_swigregister
StepShape_Array1OfFaceBound_swigregister(StepShape_Array1OfFaceBound)

class StepShape_Array1OfGeometricSetSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepShape_GeometricSetSelect &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfGeometricSetSelect_swiginit(self, _StepShape.new_StepShape_Array1OfGeometricSetSelect(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_GeometricSetSelect &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfGeometricSetSelect const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfGeometricSetSelect &
        :rtype: StepShape_Array1OfGeometricSetSelect

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfGeometricSetSelect const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfGeometricSetSelect &
        :rtype: StepShape_Array1OfGeometricSetSelect

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_GeometricSetSelect &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_GeometricSetSelect const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_GeometricSetSelect &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_Array1OfGeometricSetSelect_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfGeometricSetSelect
StepShape_Array1OfGeometricSetSelect.Init = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Init, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Destroy, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_IsAllocated, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Assign = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Assign, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Set = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Set, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Length = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Length, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Lower = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Lower, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Upper = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Upper, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_SetValue, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.Value = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_Value, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfGeometricSetSelect_ChangeValue, None, StepShape_Array1OfGeometricSetSelect)
StepShape_Array1OfGeometricSetSelect_swigregister = _StepShape.StepShape_Array1OfGeometricSetSelect_swigregister
StepShape_Array1OfGeometricSetSelect_swigregister(StepShape_Array1OfGeometricSetSelect)

class StepShape_Array1OfOrientedClosedShell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_OrientedClosedShell &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfOrientedClosedShell_swiginit(self, _StepShape.new_StepShape_Array1OfOrientedClosedShell(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_OrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfOrientedClosedShell const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfOrientedClosedShell &
        :rtype: StepShape_Array1OfOrientedClosedShell

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfOrientedClosedShell const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfOrientedClosedShell &
        :rtype: StepShape_Array1OfOrientedClosedShell

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_OrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_Array1OfOrientedClosedShell_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfOrientedClosedShell
StepShape_Array1OfOrientedClosedShell.Init = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Init, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Destroy, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_IsAllocated, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Assign = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Assign, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Set = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Set, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Length = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Length, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Lower = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Lower, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Upper = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Upper, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_SetValue, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.Value = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_Value, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfOrientedClosedShell_ChangeValue, None, StepShape_Array1OfOrientedClosedShell)
StepShape_Array1OfOrientedClosedShell_swigregister = _StepShape.StepShape_Array1OfOrientedClosedShell_swigregister
StepShape_Array1OfOrientedClosedShell_swigregister(StepShape_Array1OfOrientedClosedShell)

class StepShape_Array1OfOrientedEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_StepShape_OrientedEdge &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfOrientedEdge_swiginit(self, _StepShape.new_StepShape_Array1OfOrientedEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_OrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfOrientedEdge const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfOrientedEdge &
        :rtype: StepShape_Array1OfOrientedEdge

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfOrientedEdge const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfOrientedEdge &
        :rtype: StepShape_Array1OfOrientedEdge

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_OrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_Array1OfOrientedEdge_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfOrientedEdge
StepShape_Array1OfOrientedEdge.Init = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Init, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Destroy, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_IsAllocated, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Assign = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Assign, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Set = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Set, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Length = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Length, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Lower = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Lower, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Upper = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Upper, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_SetValue, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.Value = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_Value, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfOrientedEdge_ChangeValue, None, StepShape_Array1OfOrientedEdge)
StepShape_Array1OfOrientedEdge_swigregister = _StepShape.StepShape_Array1OfOrientedEdge_swigregister
StepShape_Array1OfOrientedEdge_swigregister(StepShape_Array1OfOrientedEdge)

class StepShape_Array1OfShell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepShape_Shell &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfShell_swiginit(self, _StepShape.new_StepShape_Array1OfShell(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_Shell &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfShell_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfShell_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfShell_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfShell const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfShell &
        :rtype: StepShape_Array1OfShell

        """
        return _StepShape.StepShape_Array1OfShell_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfShell const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfShell &
        :rtype: StepShape_Array1OfShell

        """
        return _StepShape.StepShape_Array1OfShell_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfShell_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfShell_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfShell_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_Shell &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfShell_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_Shell const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_Shell

        """
        return _StepShape.StepShape_Array1OfShell_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_Shell &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_Shell

        """
        return _StepShape.StepShape_Array1OfShell_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfShell
StepShape_Array1OfShell.Init = new_instancemethod(_StepShape.StepShape_Array1OfShell_Init, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfShell_Destroy, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfShell_IsAllocated, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Assign = new_instancemethod(_StepShape.StepShape_Array1OfShell_Assign, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Set = new_instancemethod(_StepShape.StepShape_Array1OfShell_Set, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Length = new_instancemethod(_StepShape.StepShape_Array1OfShell_Length, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Lower = new_instancemethod(_StepShape.StepShape_Array1OfShell_Lower, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Upper = new_instancemethod(_StepShape.StepShape_Array1OfShell_Upper, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfShell_SetValue, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.Value = new_instancemethod(_StepShape.StepShape_Array1OfShell_Value, None, StepShape_Array1OfShell)
StepShape_Array1OfShell.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfShell_ChangeValue, None, StepShape_Array1OfShell)
StepShape_Array1OfShell_swigregister = _StepShape.StepShape_Array1OfShell_swigregister
StepShape_Array1OfShell_swigregister(StepShape_Array1OfShell)

class StepShape_Array1OfValueQualifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: StepShape_ValueQualifier &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _StepShape.StepShape_Array1OfValueQualifier_swiginit(self, _StepShape.new_StepShape_Array1OfValueQualifier(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_Array1OfValueQualifier_IsAllocated(self, *args)


    def Assign(self, *args) -> "StepShape_Array1OfValueQualifier const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfValueQualifier &
        :rtype: StepShape_Array1OfValueQualifier

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Assign(self, *args)


    def Set(self, *args) -> "StepShape_Array1OfValueQualifier const &":
        """
        :param Other:
        :type Other: StepShape_Array1OfValueQualifier &
        :rtype: StepShape_Array1OfValueQualifier

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_Array1OfValueQualifier_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_ValueQualifier const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_Array1OfValueQualifier_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_ValueQualifier &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_Array1OfValueQualifier_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Array1OfValueQualifier
StepShape_Array1OfValueQualifier.Init = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Init, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Destroy = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Destroy, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.IsAllocated = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_IsAllocated, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Assign = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Assign, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Set = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Set, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Length = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Length, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Lower = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Lower, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Upper = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Upper, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.SetValue = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_SetValue, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.Value = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_Value, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier.ChangeValue = new_instancemethod(_StepShape.StepShape_Array1OfValueQualifier_ChangeValue, None, StepShape_Array1OfValueQualifier)
StepShape_Array1OfValueQualifier_swigregister = _StepShape.StepShape_Array1OfValueQualifier_swigregister
StepShape_Array1OfValueQualifier_swigregister(StepShape_Array1OfValueQualifier)

class StepShape_Block(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Block

        :rtype: None

        """
        _StepShape.StepShape_Block_swiginit(self, _StepShape.new_StepShape_Block(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aX:
        :type aX: float
        :param aY:
        :type aY: float
        :param aZ:
        :type aZ: float
        :rtype: void

        """
        return _StepShape.StepShape_Block_Init(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: None

        """
        return _StepShape.StepShape_Block_SetPosition(self, *args)


    def Position(self, *args) -> "Handle_StepGeom_Axis2Placement3d":
        """
        :rtype: Handle_StepGeom_Axis2Placement3d

        """
        return _StepShape.StepShape_Block_Position(self, *args)


    def SetX(self, *args) -> "void":
        """
        :param aX:
        :type aX: float
        :rtype: None

        """
        return _StepShape.StepShape_Block_SetX(self, *args)


    def X(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Block_X(self, *args)


    def SetY(self, *args) -> "void":
        """
        :param aY:
        :type aY: float
        :rtype: None

        """
        return _StepShape.StepShape_Block_SetY(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Block_Y(self, *args)


    def SetZ(self, *args) -> "void":
        """
        :param aZ:
        :type aZ: float
        :rtype: None

        """
        return _StepShape.StepShape_Block_SetZ(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Block_Z(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Block(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Block
StepShape_Block.Init = new_instancemethod(_StepShape.StepShape_Block_Init, None, StepShape_Block)
StepShape_Block.SetPosition = new_instancemethod(_StepShape.StepShape_Block_SetPosition, None, StepShape_Block)
StepShape_Block.Position = new_instancemethod(_StepShape.StepShape_Block_Position, None, StepShape_Block)
StepShape_Block.SetX = new_instancemethod(_StepShape.StepShape_Block_SetX, None, StepShape_Block)
StepShape_Block.X = new_instancemethod(_StepShape.StepShape_Block_X, None, StepShape_Block)
StepShape_Block.SetY = new_instancemethod(_StepShape.StepShape_Block_SetY, None, StepShape_Block)
StepShape_Block.Y = new_instancemethod(_StepShape.StepShape_Block_Y, None, StepShape_Block)
StepShape_Block.SetZ = new_instancemethod(_StepShape.StepShape_Block_SetZ, None, StepShape_Block)
StepShape_Block.Z = new_instancemethod(_StepShape.StepShape_Block_Z, None, StepShape_Block)
StepShape_Block_swigregister = _StepShape.StepShape_Block_swigregister
StepShape_Block_swigregister(StepShape_Block)

class Handle_StepShape_Block(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Block_swiginit(self, _StepShape.new_Handle_StepShape_Block(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Block_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Block
Handle_StepShape_Block.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Block_Nullify, None, Handle_StepShape_Block)
Handle_StepShape_Block.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Block_IsNull, None, Handle_StepShape_Block)
Handle_StepShape_Block._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Block__get_reference, None, Handle_StepShape_Block)
Handle_StepShape_Block_swigregister = _StepShape.Handle_StepShape_Block_swigregister
Handle_StepShape_Block_swigregister(Handle_StepShape_Block)

def Handle_StepShape_Block_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Block const":
    return _StepShape.Handle_StepShape_Block_DownCast(AnObject)
Handle_StepShape_Block_DownCast = _StepShape.Handle_StepShape_Block_DownCast

class StepShape_BooleanOperand(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BooleanOperand SelectType

        :rtype: None

        """
        _StepShape.StepShape_BooleanOperand_swiginit(self, _StepShape.new_StepShape_BooleanOperand(*args))

    def SetTypeOfContent(self, *args) -> "void":
        """
        :param aTypeOfContent:
        :type aTypeOfContent: int
        :rtype: None

        """
        return _StepShape.StepShape_BooleanOperand_SetTypeOfContent(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_BooleanOperand_TypeOfContent(self, *args)


    def SolidModel(self, *args) -> "Handle_StepShape_SolidModel":
        """
        * returns Value as a SolidModel (Null if another type)

        :rtype: Handle_StepShape_SolidModel

        """
        return _StepShape.StepShape_BooleanOperand_SolidModel(self, *args)


    def SetSolidModel(self, *args) -> "void":
        """
        :param aSolidModel:
        :type aSolidModel: Handle_StepShape_SolidModel &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanOperand_SetSolidModel(self, *args)


    def HalfSpaceSolid(self, *args) -> "Handle_StepShape_HalfSpaceSolid":
        """
        * returns Value as a HalfSpaceSolid (Null if another type)

        :rtype: Handle_StepShape_HalfSpaceSolid

        """
        return _StepShape.StepShape_BooleanOperand_HalfSpaceSolid(self, *args)


    def SetHalfSpaceSolid(self, *args) -> "void":
        """
        :param aHalfSpaceSolid:
        :type aHalfSpaceSolid: Handle_StepShape_HalfSpaceSolid &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanOperand_SetHalfSpaceSolid(self, *args)


    def CsgPrimitive(self, *args) -> "StepShape_CsgPrimitive":
        """
        * returns Value as a CsgPrimitive (Null if another type) CsgPrimitive is another Select Type

        :rtype: StepShape_CsgPrimitive

        """
        return _StepShape.StepShape_BooleanOperand_CsgPrimitive(self, *args)


    def SetCsgPrimitive(self, *args) -> "void":
        """
        :param aCsgPrimitive:
        :type aCsgPrimitive: StepShape_CsgPrimitive &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanOperand_SetCsgPrimitive(self, *args)


    def BooleanResult(self, *args) -> "Handle_StepShape_BooleanResult":
        """
        * returns Value as a BooleanResult (Null if another type)

        :rtype: Handle_StepShape_BooleanResult

        """
        return _StepShape.StepShape_BooleanOperand_BooleanResult(self, *args)


    def SetBooleanResult(self, *args) -> "void":
        """
        :param aBooleanResult:
        :type aBooleanResult: Handle_StepShape_BooleanResult &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanOperand_SetBooleanResult(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BooleanOperand
StepShape_BooleanOperand.SetTypeOfContent = new_instancemethod(_StepShape.StepShape_BooleanOperand_SetTypeOfContent, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.TypeOfContent = new_instancemethod(_StepShape.StepShape_BooleanOperand_TypeOfContent, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.SolidModel = new_instancemethod(_StepShape.StepShape_BooleanOperand_SolidModel, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.SetSolidModel = new_instancemethod(_StepShape.StepShape_BooleanOperand_SetSolidModel, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.HalfSpaceSolid = new_instancemethod(_StepShape.StepShape_BooleanOperand_HalfSpaceSolid, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.SetHalfSpaceSolid = new_instancemethod(_StepShape.StepShape_BooleanOperand_SetHalfSpaceSolid, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.CsgPrimitive = new_instancemethod(_StepShape.StepShape_BooleanOperand_CsgPrimitive, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.SetCsgPrimitive = new_instancemethod(_StepShape.StepShape_BooleanOperand_SetCsgPrimitive, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.BooleanResult = new_instancemethod(_StepShape.StepShape_BooleanOperand_BooleanResult, None, StepShape_BooleanOperand)
StepShape_BooleanOperand.SetBooleanResult = new_instancemethod(_StepShape.StepShape_BooleanOperand_SetBooleanResult, None, StepShape_BooleanOperand)
StepShape_BooleanOperand_swigregister = _StepShape.StepShape_BooleanOperand_swigregister
StepShape_BooleanOperand_swigregister(StepShape_BooleanOperand)

class StepShape_BooleanResult(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BooleanResult

        :rtype: None

        """
        _StepShape.StepShape_BooleanResult_swiginit(self, _StepShape.new_StepShape_BooleanResult(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOperator:
        :type aOperator: StepShape_BooleanOperator
        :param aFirstOperand:
        :type aFirstOperand: StepShape_BooleanOperand &
        :param aSecondOperand:
        :type aSecondOperand: StepShape_BooleanOperand &
        :rtype: void

        """
        return _StepShape.StepShape_BooleanResult_Init(self, *args)


    def SetOperator(self, *args) -> "void":
        """
        :param aOperator:
        :type aOperator: StepShape_BooleanOperator
        :rtype: None

        """
        return _StepShape.StepShape_BooleanResult_SetOperator(self, *args)


    def Operator(self, *args) -> "StepShape_BooleanOperator":
        """
        :rtype: StepShape_BooleanOperator

        """
        return _StepShape.StepShape_BooleanResult_Operator(self, *args)


    def SetFirstOperand(self, *args) -> "void":
        """
        :param aFirstOperand:
        :type aFirstOperand: StepShape_BooleanOperand &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanResult_SetFirstOperand(self, *args)


    def FirstOperand(self, *args) -> "StepShape_BooleanOperand":
        """
        :rtype: StepShape_BooleanOperand

        """
        return _StepShape.StepShape_BooleanResult_FirstOperand(self, *args)


    def SetSecondOperand(self, *args) -> "void":
        """
        :param aSecondOperand:
        :type aSecondOperand: StepShape_BooleanOperand &
        :rtype: None

        """
        return _StepShape.StepShape_BooleanResult_SetSecondOperand(self, *args)


    def SecondOperand(self, *args) -> "StepShape_BooleanOperand":
        """
        :rtype: StepShape_BooleanOperand

        """
        return _StepShape.StepShape_BooleanResult_SecondOperand(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_BooleanResult(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BooleanResult
StepShape_BooleanResult.Init = new_instancemethod(_StepShape.StepShape_BooleanResult_Init, None, StepShape_BooleanResult)
StepShape_BooleanResult.SetOperator = new_instancemethod(_StepShape.StepShape_BooleanResult_SetOperator, None, StepShape_BooleanResult)
StepShape_BooleanResult.Operator = new_instancemethod(_StepShape.StepShape_BooleanResult_Operator, None, StepShape_BooleanResult)
StepShape_BooleanResult.SetFirstOperand = new_instancemethod(_StepShape.StepShape_BooleanResult_SetFirstOperand, None, StepShape_BooleanResult)
StepShape_BooleanResult.FirstOperand = new_instancemethod(_StepShape.StepShape_BooleanResult_FirstOperand, None, StepShape_BooleanResult)
StepShape_BooleanResult.SetSecondOperand = new_instancemethod(_StepShape.StepShape_BooleanResult_SetSecondOperand, None, StepShape_BooleanResult)
StepShape_BooleanResult.SecondOperand = new_instancemethod(_StepShape.StepShape_BooleanResult_SecondOperand, None, StepShape_BooleanResult)
StepShape_BooleanResult_swigregister = _StepShape.StepShape_BooleanResult_swigregister
StepShape_BooleanResult_swigregister(StepShape_BooleanResult)

class Handle_StepShape_BooleanResult(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_BooleanResult_swiginit(self, _StepShape.new_Handle_StepShape_BooleanResult(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_BooleanResult_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_BooleanResult
Handle_StepShape_BooleanResult.Nullify = new_instancemethod(_StepShape.Handle_StepShape_BooleanResult_Nullify, None, Handle_StepShape_BooleanResult)
Handle_StepShape_BooleanResult.IsNull = new_instancemethod(_StepShape.Handle_StepShape_BooleanResult_IsNull, None, Handle_StepShape_BooleanResult)
Handle_StepShape_BooleanResult._get_reference = new_instancemethod(_StepShape.Handle_StepShape_BooleanResult__get_reference, None, Handle_StepShape_BooleanResult)
Handle_StepShape_BooleanResult_swigregister = _StepShape.Handle_StepShape_BooleanResult_swigregister
Handle_StepShape_BooleanResult_swigregister(Handle_StepShape_BooleanResult)

def Handle_StepShape_BooleanResult_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_BooleanResult const":
    return _StepShape.Handle_StepShape_BooleanResult_DownCast(AnObject)
Handle_StepShape_BooleanResult_DownCast = _StepShape.Handle_StepShape_BooleanResult_DownCast

class StepShape_BoxDomain(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BoxDomain

        :rtype: None

        """
        _StepShape.StepShape_BoxDomain_swiginit(self, _StepShape.new_StepShape_BoxDomain(*args))

    def Init(self, *args) -> "void":
        """
        :param aCorner:
        :type aCorner: Handle_StepGeom_CartesianPoint &
        :param aXlength:
        :type aXlength: float
        :param aYlength:
        :type aYlength: float
        :param aZlength:
        :type aZlength: float
        :rtype: void

        """
        return _StepShape.StepShape_BoxDomain_Init(self, *args)


    def SetCorner(self, *args) -> "void":
        """
        :param aCorner:
        :type aCorner: Handle_StepGeom_CartesianPoint &
        :rtype: None

        """
        return _StepShape.StepShape_BoxDomain_SetCorner(self, *args)


    def Corner(self, *args) -> "Handle_StepGeom_CartesianPoint":
        """
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepShape.StepShape_BoxDomain_Corner(self, *args)


    def SetXlength(self, *args) -> "void":
        """
        :param aXlength:
        :type aXlength: float
        :rtype: None

        """
        return _StepShape.StepShape_BoxDomain_SetXlength(self, *args)


    def Xlength(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_BoxDomain_Xlength(self, *args)


    def SetYlength(self, *args) -> "void":
        """
        :param aYlength:
        :type aYlength: float
        :rtype: None

        """
        return _StepShape.StepShape_BoxDomain_SetYlength(self, *args)


    def Ylength(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_BoxDomain_Ylength(self, *args)


    def SetZlength(self, *args) -> "void":
        """
        :param aZlength:
        :type aZlength: float
        :rtype: None

        """
        return _StepShape.StepShape_BoxDomain_SetZlength(self, *args)


    def Zlength(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_BoxDomain_Zlength(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_BoxDomain(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BoxDomain
StepShape_BoxDomain.Init = new_instancemethod(_StepShape.StepShape_BoxDomain_Init, None, StepShape_BoxDomain)
StepShape_BoxDomain.SetCorner = new_instancemethod(_StepShape.StepShape_BoxDomain_SetCorner, None, StepShape_BoxDomain)
StepShape_BoxDomain.Corner = new_instancemethod(_StepShape.StepShape_BoxDomain_Corner, None, StepShape_BoxDomain)
StepShape_BoxDomain.SetXlength = new_instancemethod(_StepShape.StepShape_BoxDomain_SetXlength, None, StepShape_BoxDomain)
StepShape_BoxDomain.Xlength = new_instancemethod(_StepShape.StepShape_BoxDomain_Xlength, None, StepShape_BoxDomain)
StepShape_BoxDomain.SetYlength = new_instancemethod(_StepShape.StepShape_BoxDomain_SetYlength, None, StepShape_BoxDomain)
StepShape_BoxDomain.Ylength = new_instancemethod(_StepShape.StepShape_BoxDomain_Ylength, None, StepShape_BoxDomain)
StepShape_BoxDomain.SetZlength = new_instancemethod(_StepShape.StepShape_BoxDomain_SetZlength, None, StepShape_BoxDomain)
StepShape_BoxDomain.Zlength = new_instancemethod(_StepShape.StepShape_BoxDomain_Zlength, None, StepShape_BoxDomain)
StepShape_BoxDomain_swigregister = _StepShape.StepShape_BoxDomain_swigregister
StepShape_BoxDomain_swigregister(StepShape_BoxDomain)

class Handle_StepShape_BoxDomain(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_BoxDomain_swiginit(self, _StepShape.new_Handle_StepShape_BoxDomain(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_BoxDomain_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_BoxDomain
Handle_StepShape_BoxDomain.Nullify = new_instancemethod(_StepShape.Handle_StepShape_BoxDomain_Nullify, None, Handle_StepShape_BoxDomain)
Handle_StepShape_BoxDomain.IsNull = new_instancemethod(_StepShape.Handle_StepShape_BoxDomain_IsNull, None, Handle_StepShape_BoxDomain)
Handle_StepShape_BoxDomain._get_reference = new_instancemethod(_StepShape.Handle_StepShape_BoxDomain__get_reference, None, Handle_StepShape_BoxDomain)
Handle_StepShape_BoxDomain_swigregister = _StepShape.Handle_StepShape_BoxDomain_swigregister
Handle_StepShape_BoxDomain_swigregister(Handle_StepShape_BoxDomain)

def Handle_StepShape_BoxDomain_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_BoxDomain const":
    return _StepShape.Handle_StepShape_BoxDomain_DownCast(AnObject)
Handle_StepShape_BoxDomain_DownCast = _StepShape.Handle_StepShape_BoxDomain_DownCast

class StepShape_ConnectedFaceShapeRepresentation(OCC.StepRepr.StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ConnectedFaceShapeRepresentation_swiginit(self, _StepShape.new_StepShape_ConnectedFaceShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ConnectedFaceShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceShapeRepresentation
StepShape_ConnectedFaceShapeRepresentation_swigregister = _StepShape.StepShape_ConnectedFaceShapeRepresentation_swigregister
StepShape_ConnectedFaceShapeRepresentation_swigregister(StepShape_ConnectedFaceShapeRepresentation)

class Handle_StepShape_ConnectedFaceShapeRepresentation(OCC.StepRepr.Handle_StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ConnectedFaceShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ConnectedFaceShapeRepresentation
Handle_StepShape_ConnectedFaceShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_Nullify, None, Handle_StepShape_ConnectedFaceShapeRepresentation)
Handle_StepShape_ConnectedFaceShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_IsNull, None, Handle_StepShape_ConnectedFaceShapeRepresentation)
Handle_StepShape_ConnectedFaceShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation__get_reference, None, Handle_StepShape_ConnectedFaceShapeRepresentation)
Handle_StepShape_ConnectedFaceShapeRepresentation_swigregister = _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_swigregister
Handle_StepShape_ConnectedFaceShapeRepresentation_swigregister(Handle_StepShape_ConnectedFaceShapeRepresentation)

def Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ConnectedFaceShapeRepresentation const":
    return _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast(AnObject)
Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ConnectedFaceShapeRepresentation_DownCast

class StepShape_ContextDependentShapeRepresentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_ContextDependentShapeRepresentation_swiginit(self, _StepShape.new_StepShape_ContextDependentShapeRepresentation(*args))

    def Init(self, *args) -> "void":
        """
        :param aRepRel:
        :type aRepRel: Handle_StepRepr_ShapeRepresentationRelationship &
        :param aProRel:
        :type aProRel: Handle_StepRepr_ProductDefinitionShape &
        :rtype: None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_Init(self, *args)


    def RepresentationRelation(self, *args) -> "Handle_StepRepr_ShapeRepresentationRelationship":
        """
        :rtype: Handle_StepRepr_ShapeRepresentationRelationship

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_RepresentationRelation(self, *args)


    def SetRepresentationRelation(self, *args) -> "void":
        """
        :param aRepRel:
        :type aRepRel: Handle_StepRepr_ShapeRepresentationRelationship &
        :rtype: None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentationRelation(self, *args)


    def RepresentedProductRelation(self, *args) -> "Handle_StepRepr_ProductDefinitionShape":
        """
        :rtype: Handle_StepRepr_ProductDefinitionShape

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_RepresentedProductRelation(self, *args)


    def SetRepresentedProductRelation(self, *args) -> "void":
        """
        :param aProRel:
        :type aProRel: Handle_StepRepr_ProductDefinitionShape &
        :rtype: None

        """
        return _StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentedProductRelation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ContextDependentShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ContextDependentShapeRepresentation
StepShape_ContextDependentShapeRepresentation.Init = new_instancemethod(_StepShape.StepShape_ContextDependentShapeRepresentation_Init, None, StepShape_ContextDependentShapeRepresentation)
StepShape_ContextDependentShapeRepresentation.RepresentationRelation = new_instancemethod(_StepShape.StepShape_ContextDependentShapeRepresentation_RepresentationRelation, None, StepShape_ContextDependentShapeRepresentation)
StepShape_ContextDependentShapeRepresentation.SetRepresentationRelation = new_instancemethod(_StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentationRelation, None, StepShape_ContextDependentShapeRepresentation)
StepShape_ContextDependentShapeRepresentation.RepresentedProductRelation = new_instancemethod(_StepShape.StepShape_ContextDependentShapeRepresentation_RepresentedProductRelation, None, StepShape_ContextDependentShapeRepresentation)
StepShape_ContextDependentShapeRepresentation.SetRepresentedProductRelation = new_instancemethod(_StepShape.StepShape_ContextDependentShapeRepresentation_SetRepresentedProductRelation, None, StepShape_ContextDependentShapeRepresentation)
StepShape_ContextDependentShapeRepresentation_swigregister = _StepShape.StepShape_ContextDependentShapeRepresentation_swigregister
StepShape_ContextDependentShapeRepresentation_swigregister(StepShape_ContextDependentShapeRepresentation)

class Handle_StepShape_ContextDependentShapeRepresentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ContextDependentShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ContextDependentShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ContextDependentShapeRepresentation
Handle_StepShape_ContextDependentShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ContextDependentShapeRepresentation_Nullify, None, Handle_StepShape_ContextDependentShapeRepresentation)
Handle_StepShape_ContextDependentShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ContextDependentShapeRepresentation_IsNull, None, Handle_StepShape_ContextDependentShapeRepresentation)
Handle_StepShape_ContextDependentShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ContextDependentShapeRepresentation__get_reference, None, Handle_StepShape_ContextDependentShapeRepresentation)
Handle_StepShape_ContextDependentShapeRepresentation_swigregister = _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_swigregister
Handle_StepShape_ContextDependentShapeRepresentation_swigregister(Handle_StepShape_ContextDependentShapeRepresentation)

def Handle_StepShape_ContextDependentShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ContextDependentShapeRepresentation const":
    return _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_DownCast(AnObject)
Handle_StepShape_ContextDependentShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ContextDependentShapeRepresentation_DownCast

class StepShape_CsgPrimitive(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CsgPrimitive SelectType

        :rtype: None

        """
        _StepShape.StepShape_CsgPrimitive_swiginit(self, _StepShape.new_StepShape_CsgPrimitive(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a CsgPrimitive Kind Entity that is : 1 -> Sphere 2 -> Block 3 -> RightAngularWedge 4 -> Torus 5 -> RightCircularCone 6 -> RightCircularCylinder 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_CsgPrimitive_CaseNum(self, *args)


    def Sphere(self, *args) -> "Handle_StepShape_Sphere":
        """
        * returns Value as a Sphere (Null if another type)

        :rtype: Handle_StepShape_Sphere

        """
        return _StepShape.StepShape_CsgPrimitive_Sphere(self, *args)


    def Block(self, *args) -> "Handle_StepShape_Block":
        """
        * returns Value as a Block (Null if another type)

        :rtype: Handle_StepShape_Block

        """
        return _StepShape.StepShape_CsgPrimitive_Block(self, *args)


    def RightAngularWedge(self, *args) -> "Handle_StepShape_RightAngularWedge":
        """
        * returns Value as a RightAngularWedge (Null if another type)

        :rtype: Handle_StepShape_RightAngularWedge

        """
        return _StepShape.StepShape_CsgPrimitive_RightAngularWedge(self, *args)


    def Torus(self, *args) -> "Handle_StepShape_Torus":
        """
        * returns Value as a Torus (Null if another type)

        :rtype: Handle_StepShape_Torus

        """
        return _StepShape.StepShape_CsgPrimitive_Torus(self, *args)


    def RightCircularCone(self, *args) -> "Handle_StepShape_RightCircularCone":
        """
        * returns Value as a RightCircularCone (Null if another type)

        :rtype: Handle_StepShape_RightCircularCone

        """
        return _StepShape.StepShape_CsgPrimitive_RightCircularCone(self, *args)


    def RightCircularCylinder(self, *args) -> "Handle_StepShape_RightCircularCylinder":
        """
        * returns Value as a RightCircularCylinder (Null if another type)

        :rtype: Handle_StepShape_RightCircularCylinder

        """
        return _StepShape.StepShape_CsgPrimitive_RightCircularCylinder(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgPrimitive
StepShape_CsgPrimitive.CaseNum = new_instancemethod(_StepShape.StepShape_CsgPrimitive_CaseNum, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.Sphere = new_instancemethod(_StepShape.StepShape_CsgPrimitive_Sphere, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.Block = new_instancemethod(_StepShape.StepShape_CsgPrimitive_Block, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.RightAngularWedge = new_instancemethod(_StepShape.StepShape_CsgPrimitive_RightAngularWedge, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.Torus = new_instancemethod(_StepShape.StepShape_CsgPrimitive_Torus, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.RightCircularCone = new_instancemethod(_StepShape.StepShape_CsgPrimitive_RightCircularCone, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive.RightCircularCylinder = new_instancemethod(_StepShape.StepShape_CsgPrimitive_RightCircularCylinder, None, StepShape_CsgPrimitive)
StepShape_CsgPrimitive_swigregister = _StepShape.StepShape_CsgPrimitive_swigregister
StepShape_CsgPrimitive_swigregister(StepShape_CsgPrimitive)

class StepShape_CsgSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CsgSelect SelectType

        :rtype: None

        """
        _StepShape.StepShape_CsgSelect_swiginit(self, _StepShape.new_StepShape_CsgSelect(*args))

    def SetTypeOfContent(self, *args) -> "void":
        """
        :param aTypeOfContent:
        :type aTypeOfContent: int
        :rtype: None

        """
        return _StepShape.StepShape_CsgSelect_SetTypeOfContent(self, *args)


    def TypeOfContent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_CsgSelect_TypeOfContent(self, *args)


    def BooleanResult(self, *args) -> "Handle_StepShape_BooleanResult":
        """
        * returns Value as a BooleanResult (Null if another type)

        :rtype: Handle_StepShape_BooleanResult

        """
        return _StepShape.StepShape_CsgSelect_BooleanResult(self, *args)


    def SetBooleanResult(self, *args) -> "void":
        """
        :param aBooleanResult:
        :type aBooleanResult: Handle_StepShape_BooleanResult &
        :rtype: None

        """
        return _StepShape.StepShape_CsgSelect_SetBooleanResult(self, *args)


    def CsgPrimitive(self, *args) -> "StepShape_CsgPrimitive":
        """
        * returns Value as a CsgPrimitive (Null if another type)

        :rtype: StepShape_CsgPrimitive

        """
        return _StepShape.StepShape_CsgSelect_CsgPrimitive(self, *args)


    def SetCsgPrimitive(self, *args) -> "void":
        """
        :param aCsgPrimitive:
        :type aCsgPrimitive: StepShape_CsgPrimitive &
        :rtype: None

        """
        return _StepShape.StepShape_CsgSelect_SetCsgPrimitive(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgSelect
StepShape_CsgSelect.SetTypeOfContent = new_instancemethod(_StepShape.StepShape_CsgSelect_SetTypeOfContent, None, StepShape_CsgSelect)
StepShape_CsgSelect.TypeOfContent = new_instancemethod(_StepShape.StepShape_CsgSelect_TypeOfContent, None, StepShape_CsgSelect)
StepShape_CsgSelect.BooleanResult = new_instancemethod(_StepShape.StepShape_CsgSelect_BooleanResult, None, StepShape_CsgSelect)
StepShape_CsgSelect.SetBooleanResult = new_instancemethod(_StepShape.StepShape_CsgSelect_SetBooleanResult, None, StepShape_CsgSelect)
StepShape_CsgSelect.CsgPrimitive = new_instancemethod(_StepShape.StepShape_CsgSelect_CsgPrimitive, None, StepShape_CsgSelect)
StepShape_CsgSelect.SetCsgPrimitive = new_instancemethod(_StepShape.StepShape_CsgSelect_SetCsgPrimitive, None, StepShape_CsgSelect)
StepShape_CsgSelect_swigregister = _StepShape.StepShape_CsgSelect_swigregister
StepShape_CsgSelect_swigregister(StepShape_CsgSelect)

class StepShape_DefinitionalRepresentationAndShapeRepresentation(OCC.StepRepr.StepRepr_DefinitionalRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_DefinitionalRepresentationAndShapeRepresentation_swiginit(self, _StepShape.new_StepShape_DefinitionalRepresentationAndShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DefinitionalRepresentationAndShapeRepresentation
StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister = _StepShape.StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister
StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister(StepShape_DefinitionalRepresentationAndShapeRepresentation)

class Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation(OCC.StepRepr.Handle_StepRepr_DefinitionalRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_Nullify, None, Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_IsNull, None, Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation__get_reference, None, Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister = _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_swigregister(Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation)

def Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation const":
    return _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast(AnObject)
Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast = _StepShape.Handle_StepShape_DefinitionalRepresentationAndShapeRepresentation_DownCast

class StepShape_DimensionalCharacteristic(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalCharacteristic_swiginit(self, _StepShape.new_StepShape_DimensionalCharacteristic(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a kind of DimensionalCharacteristic select type 1 -> DimensionalLocation from StepShape 2 -> DimensionalSize from StepShape 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_DimensionalCharacteristic_CaseNum(self, *args)


    def DimensionalLocation(self, *args) -> "Handle_StepShape_DimensionalLocation":
        """
        * Returns Value as DimensionalLocation (or Null if another type)

        :rtype: Handle_StepShape_DimensionalLocation

        """
        return _StepShape.StepShape_DimensionalCharacteristic_DimensionalLocation(self, *args)


    def DimensionalSize(self, *args) -> "Handle_StepShape_DimensionalSize":
        """
        * Returns Value as DimensionalSize (or Null if another type)

        :rtype: Handle_StepShape_DimensionalSize

        """
        return _StepShape.StepShape_DimensionalCharacteristic_DimensionalSize(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalCharacteristic
StepShape_DimensionalCharacteristic.CaseNum = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristic_CaseNum, None, StepShape_DimensionalCharacteristic)
StepShape_DimensionalCharacteristic.DimensionalLocation = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristic_DimensionalLocation, None, StepShape_DimensionalCharacteristic)
StepShape_DimensionalCharacteristic.DimensionalSize = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristic_DimensionalSize, None, StepShape_DimensionalCharacteristic)
StepShape_DimensionalCharacteristic_swigregister = _StepShape.StepShape_DimensionalCharacteristic_swigregister
StepShape_DimensionalCharacteristic_swigregister(StepShape_DimensionalCharacteristic)

class StepShape_DimensionalCharacteristicRepresentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalCharacteristicRepresentation_swiginit(self, _StepShape.new_StepShape_DimensionalCharacteristicRepresentation(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aDimension:
        :type aDimension: StepShape_DimensionalCharacteristic &
        :param aRepresentation:
        :type aRepresentation: Handle_StepShape_ShapeDimensionRepresentation &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Init(self, *args)


    def Dimension(self, *args) -> "StepShape_DimensionalCharacteristic":
        """
        * Returns field Dimension

        :rtype: StepShape_DimensionalCharacteristic

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Dimension(self, *args)


    def SetDimension(self, *args) -> "void":
        """
        * Set field Dimension

        :param Dimension:
        :type Dimension: StepShape_DimensionalCharacteristic &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_SetDimension(self, *args)


    def Representation(self, *args) -> "Handle_StepShape_ShapeDimensionRepresentation":
        """
        * Returns field Representation

        :rtype: Handle_StepShape_ShapeDimensionRepresentation

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_Representation(self, *args)


    def SetRepresentation(self, *args) -> "void":
        """
        * Set field Representation

        :param Representation:
        :type Representation: Handle_StepShape_ShapeDimensionRepresentation &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalCharacteristicRepresentation_SetRepresentation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DimensionalCharacteristicRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalCharacteristicRepresentation
StepShape_DimensionalCharacteristicRepresentation.Init = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristicRepresentation_Init, None, StepShape_DimensionalCharacteristicRepresentation)
StepShape_DimensionalCharacteristicRepresentation.Dimension = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristicRepresentation_Dimension, None, StepShape_DimensionalCharacteristicRepresentation)
StepShape_DimensionalCharacteristicRepresentation.SetDimension = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristicRepresentation_SetDimension, None, StepShape_DimensionalCharacteristicRepresentation)
StepShape_DimensionalCharacteristicRepresentation.Representation = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristicRepresentation_Representation, None, StepShape_DimensionalCharacteristicRepresentation)
StepShape_DimensionalCharacteristicRepresentation.SetRepresentation = new_instancemethod(_StepShape.StepShape_DimensionalCharacteristicRepresentation_SetRepresentation, None, StepShape_DimensionalCharacteristicRepresentation)
StepShape_DimensionalCharacteristicRepresentation_swigregister = _StepShape.StepShape_DimensionalCharacteristicRepresentation_swigregister
StepShape_DimensionalCharacteristicRepresentation_swigregister(StepShape_DimensionalCharacteristicRepresentation)

class Handle_StepShape_DimensionalCharacteristicRepresentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_DimensionalCharacteristicRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DimensionalCharacteristicRepresentation
Handle_StepShape_DimensionalCharacteristicRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_Nullify, None, Handle_StepShape_DimensionalCharacteristicRepresentation)
Handle_StepShape_DimensionalCharacteristicRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_IsNull, None, Handle_StepShape_DimensionalCharacteristicRepresentation)
Handle_StepShape_DimensionalCharacteristicRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation__get_reference, None, Handle_StepShape_DimensionalCharacteristicRepresentation)
Handle_StepShape_DimensionalCharacteristicRepresentation_swigregister = _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_swigregister
Handle_StepShape_DimensionalCharacteristicRepresentation_swigregister(Handle_StepShape_DimensionalCharacteristicRepresentation)

def Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DimensionalCharacteristicRepresentation const":
    return _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast(AnObject)
Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast = _StepShape.Handle_StepShape_DimensionalCharacteristicRepresentation_DownCast

class StepShape_DimensionalLocation(OCC.StepRepr.StepRepr_ShapeAspectRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalLocation_swiginit(self, _StepShape.new_StepShape_DimensionalLocation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DimensionalLocation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalLocation
StepShape_DimensionalLocation_swigregister = _StepShape.StepShape_DimensionalLocation_swigregister
StepShape_DimensionalLocation_swigregister(StepShape_DimensionalLocation)

class Handle_StepShape_DimensionalLocation(OCC.StepRepr.Handle_StepRepr_ShapeAspectRelationship):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DimensionalLocation_swiginit(self, _StepShape.new_Handle_StepShape_DimensionalLocation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DimensionalLocation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DimensionalLocation
Handle_StepShape_DimensionalLocation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocation_Nullify, None, Handle_StepShape_DimensionalLocation)
Handle_StepShape_DimensionalLocation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocation_IsNull, None, Handle_StepShape_DimensionalLocation)
Handle_StepShape_DimensionalLocation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocation__get_reference, None, Handle_StepShape_DimensionalLocation)
Handle_StepShape_DimensionalLocation_swigregister = _StepShape.Handle_StepShape_DimensionalLocation_swigregister
Handle_StepShape_DimensionalLocation_swigregister(Handle_StepShape_DimensionalLocation)

def Handle_StepShape_DimensionalLocation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DimensionalLocation const":
    return _StepShape.Handle_StepShape_DimensionalLocation_DownCast(AnObject)
Handle_StepShape_DimensionalLocation_DownCast = _StepShape.Handle_StepShape_DimensionalLocation_DownCast

class StepShape_DimensionalSize(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalSize_swiginit(self, _StepShape.new_StepShape_DimensionalSize(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aAppliesTo:
        :type aAppliesTo: Handle_StepRepr_ShapeAspect &
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalSize_Init(self, *args)


    def AppliesTo(self, *args) -> "Handle_StepRepr_ShapeAspect":
        """
        * Returns field AppliesTo

        :rtype: Handle_StepRepr_ShapeAspect

        """
        return _StepShape.StepShape_DimensionalSize_AppliesTo(self, *args)


    def SetAppliesTo(self, *args) -> "void":
        """
        * Set field AppliesTo

        :param AppliesTo:
        :type AppliesTo: Handle_StepRepr_ShapeAspect &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalSize_SetAppliesTo(self, *args)


    def Name(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        * Returns field Name

        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_DimensionalSize_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        * Set field Name

        :param Name:
        :type Name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalSize_SetName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DimensionalSize(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalSize
StepShape_DimensionalSize.Init = new_instancemethod(_StepShape.StepShape_DimensionalSize_Init, None, StepShape_DimensionalSize)
StepShape_DimensionalSize.AppliesTo = new_instancemethod(_StepShape.StepShape_DimensionalSize_AppliesTo, None, StepShape_DimensionalSize)
StepShape_DimensionalSize.SetAppliesTo = new_instancemethod(_StepShape.StepShape_DimensionalSize_SetAppliesTo, None, StepShape_DimensionalSize)
StepShape_DimensionalSize.Name = new_instancemethod(_StepShape.StepShape_DimensionalSize_Name, None, StepShape_DimensionalSize)
StepShape_DimensionalSize.SetName = new_instancemethod(_StepShape.StepShape_DimensionalSize_SetName, None, StepShape_DimensionalSize)
StepShape_DimensionalSize_swigregister = _StepShape.StepShape_DimensionalSize_swigregister
StepShape_DimensionalSize_swigregister(StepShape_DimensionalSize)

class Handle_StepShape_DimensionalSize(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DimensionalSize_swiginit(self, _StepShape.new_Handle_StepShape_DimensionalSize(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DimensionalSize_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DimensionalSize
Handle_StepShape_DimensionalSize.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSize_Nullify, None, Handle_StepShape_DimensionalSize)
Handle_StepShape_DimensionalSize.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSize_IsNull, None, Handle_StepShape_DimensionalSize)
Handle_StepShape_DimensionalSize._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSize__get_reference, None, Handle_StepShape_DimensionalSize)
Handle_StepShape_DimensionalSize_swigregister = _StepShape.Handle_StepShape_DimensionalSize_swigregister
Handle_StepShape_DimensionalSize_swigregister(Handle_StepShape_DimensionalSize)

def Handle_StepShape_DimensionalSize_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DimensionalSize const":
    return _StepShape.Handle_StepShape_DimensionalSize_DownCast(AnObject)
Handle_StepShape_DimensionalSize_DownCast = _StepShape.Handle_StepShape_DimensionalSize_DownCast

class StepShape_EdgeBasedWireframeModel(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_EdgeBasedWireframeModel_swiginit(self, _StepShape.new_StepShape_EdgeBasedWireframeModel(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aEbwmBoundary:
        :type aEbwmBoundary: Handle_StepShape_HArray1OfConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_Init(self, *args)


    def EbwmBoundary(self, *args) -> "Handle_StepShape_HArray1OfConnectedEdgeSet":
        """
        * Returns field EbwmBoundary

        :rtype: Handle_StepShape_HArray1OfConnectedEdgeSet

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_EbwmBoundary(self, *args)


    def SetEbwmBoundary(self, *args) -> "void":
        """
        * Set field EbwmBoundary

        :param EbwmBoundary:
        :type EbwmBoundary: Handle_StepShape_HArray1OfConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_EdgeBasedWireframeModel_SetEbwmBoundary(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_EdgeBasedWireframeModel(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeBasedWireframeModel
StepShape_EdgeBasedWireframeModel.Init = new_instancemethod(_StepShape.StepShape_EdgeBasedWireframeModel_Init, None, StepShape_EdgeBasedWireframeModel)
StepShape_EdgeBasedWireframeModel.EbwmBoundary = new_instancemethod(_StepShape.StepShape_EdgeBasedWireframeModel_EbwmBoundary, None, StepShape_EdgeBasedWireframeModel)
StepShape_EdgeBasedWireframeModel.SetEbwmBoundary = new_instancemethod(_StepShape.StepShape_EdgeBasedWireframeModel_SetEbwmBoundary, None, StepShape_EdgeBasedWireframeModel)
StepShape_EdgeBasedWireframeModel_swigregister = _StepShape.StepShape_EdgeBasedWireframeModel_swigregister
StepShape_EdgeBasedWireframeModel_swigregister(StepShape_EdgeBasedWireframeModel)

class Handle_StepShape_EdgeBasedWireframeModel(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_EdgeBasedWireframeModel_swiginit(self, _StepShape.new_Handle_StepShape_EdgeBasedWireframeModel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_EdgeBasedWireframeModel_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_EdgeBasedWireframeModel
Handle_StepShape_EdgeBasedWireframeModel.Nullify = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeModel_Nullify, None, Handle_StepShape_EdgeBasedWireframeModel)
Handle_StepShape_EdgeBasedWireframeModel.IsNull = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeModel_IsNull, None, Handle_StepShape_EdgeBasedWireframeModel)
Handle_StepShape_EdgeBasedWireframeModel._get_reference = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeModel__get_reference, None, Handle_StepShape_EdgeBasedWireframeModel)
Handle_StepShape_EdgeBasedWireframeModel_swigregister = _StepShape.Handle_StepShape_EdgeBasedWireframeModel_swigregister
Handle_StepShape_EdgeBasedWireframeModel_swigregister(Handle_StepShape_EdgeBasedWireframeModel)

def Handle_StepShape_EdgeBasedWireframeModel_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_EdgeBasedWireframeModel const":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeModel_DownCast(AnObject)
Handle_StepShape_EdgeBasedWireframeModel_DownCast = _StepShape.Handle_StepShape_EdgeBasedWireframeModel_DownCast

class StepShape_FaceBasedSurfaceModel(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_FaceBasedSurfaceModel_swiginit(self, _StepShape.new_StepShape_FaceBasedSurfaceModel(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aFbsmFaces:
        :type aFbsmFaces: Handle_StepShape_HArray1OfConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_Init(self, *args)


    def FbsmFaces(self, *args) -> "Handle_StepShape_HArray1OfConnectedFaceSet":
        """
        * Returns field FbsmFaces

        :rtype: Handle_StepShape_HArray1OfConnectedFaceSet

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_FbsmFaces(self, *args)


    def SetFbsmFaces(self, *args) -> "void":
        """
        * Set field FbsmFaces

        :param FbsmFaces:
        :type FbsmFaces: Handle_StepShape_HArray1OfConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_FaceBasedSurfaceModel_SetFbsmFaces(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FaceBasedSurfaceModel(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceBasedSurfaceModel
StepShape_FaceBasedSurfaceModel.Init = new_instancemethod(_StepShape.StepShape_FaceBasedSurfaceModel_Init, None, StepShape_FaceBasedSurfaceModel)
StepShape_FaceBasedSurfaceModel.FbsmFaces = new_instancemethod(_StepShape.StepShape_FaceBasedSurfaceModel_FbsmFaces, None, StepShape_FaceBasedSurfaceModel)
StepShape_FaceBasedSurfaceModel.SetFbsmFaces = new_instancemethod(_StepShape.StepShape_FaceBasedSurfaceModel_SetFbsmFaces, None, StepShape_FaceBasedSurfaceModel)
StepShape_FaceBasedSurfaceModel_swigregister = _StepShape.StepShape_FaceBasedSurfaceModel_swigregister
StepShape_FaceBasedSurfaceModel_swigregister(StepShape_FaceBasedSurfaceModel)

class Handle_StepShape_FaceBasedSurfaceModel(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FaceBasedSurfaceModel_swiginit(self, _StepShape.new_Handle_StepShape_FaceBasedSurfaceModel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FaceBasedSurfaceModel_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FaceBasedSurfaceModel
Handle_StepShape_FaceBasedSurfaceModel.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FaceBasedSurfaceModel_Nullify, None, Handle_StepShape_FaceBasedSurfaceModel)
Handle_StepShape_FaceBasedSurfaceModel.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FaceBasedSurfaceModel_IsNull, None, Handle_StepShape_FaceBasedSurfaceModel)
Handle_StepShape_FaceBasedSurfaceModel._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FaceBasedSurfaceModel__get_reference, None, Handle_StepShape_FaceBasedSurfaceModel)
Handle_StepShape_FaceBasedSurfaceModel_swigregister = _StepShape.Handle_StepShape_FaceBasedSurfaceModel_swigregister
Handle_StepShape_FaceBasedSurfaceModel_swigregister(Handle_StepShape_FaceBasedSurfaceModel)

def Handle_StepShape_FaceBasedSurfaceModel_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FaceBasedSurfaceModel const":
    return _StepShape.Handle_StepShape_FaceBasedSurfaceModel_DownCast(AnObject)
Handle_StepShape_FaceBasedSurfaceModel_DownCast = _StepShape.Handle_StepShape_FaceBasedSurfaceModel_DownCast

class StepShape_GeometricSet(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricSet

        :rtype: None

        """
        _StepShape.StepShape_GeometricSet_swiginit(self, _StepShape.new_StepShape_GeometricSet(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aElements:
        :type aElements: Handle_StepShape_HArray1OfGeometricSetSelect &
        :rtype: void

        """
        return _StepShape.StepShape_GeometricSet_Init(self, *args)


    def SetElements(self, *args) -> "void":
        """
        :param aElements:
        :type aElements: Handle_StepShape_HArray1OfGeometricSetSelect &
        :rtype: None

        """
        return _StepShape.StepShape_GeometricSet_SetElements(self, *args)


    def Elements(self, *args) -> "Handle_StepShape_HArray1OfGeometricSetSelect":
        """
        :rtype: Handle_StepShape_HArray1OfGeometricSetSelect

        """
        return _StepShape.StepShape_GeometricSet_Elements(self, *args)


    def ElementsValue(self, *args) -> "StepShape_GeometricSetSelect":
        """
        :param num:
        :type num: int
        :rtype: StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_GeometricSet_ElementsValue(self, *args)


    def NbElements(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_GeometricSet_NbElements(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_GeometricSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricSet
StepShape_GeometricSet.Init = new_instancemethod(_StepShape.StepShape_GeometricSet_Init, None, StepShape_GeometricSet)
StepShape_GeometricSet.SetElements = new_instancemethod(_StepShape.StepShape_GeometricSet_SetElements, None, StepShape_GeometricSet)
StepShape_GeometricSet.Elements = new_instancemethod(_StepShape.StepShape_GeometricSet_Elements, None, StepShape_GeometricSet)
StepShape_GeometricSet.ElementsValue = new_instancemethod(_StepShape.StepShape_GeometricSet_ElementsValue, None, StepShape_GeometricSet)
StepShape_GeometricSet.NbElements = new_instancemethod(_StepShape.StepShape_GeometricSet_NbElements, None, StepShape_GeometricSet)
StepShape_GeometricSet_swigregister = _StepShape.StepShape_GeometricSet_swigregister
StepShape_GeometricSet_swigregister(StepShape_GeometricSet)

class Handle_StepShape_GeometricSet(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_GeometricSet_swiginit(self, _StepShape.new_Handle_StepShape_GeometricSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_GeometricSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_GeometricSet
Handle_StepShape_GeometricSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_GeometricSet_Nullify, None, Handle_StepShape_GeometricSet)
Handle_StepShape_GeometricSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_GeometricSet_IsNull, None, Handle_StepShape_GeometricSet)
Handle_StepShape_GeometricSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_GeometricSet__get_reference, None, Handle_StepShape_GeometricSet)
Handle_StepShape_GeometricSet_swigregister = _StepShape.Handle_StepShape_GeometricSet_swigregister
Handle_StepShape_GeometricSet_swigregister(Handle_StepShape_GeometricSet)

def Handle_StepShape_GeometricSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_GeometricSet const":
    return _StepShape.Handle_StepShape_GeometricSet_DownCast(AnObject)
Handle_StepShape_GeometricSet_DownCast = _StepShape.Handle_StepShape_GeometricSet_DownCast

class StepShape_GeometricSetSelect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricSetSelect SelectType

        :rtype: None

        """
        _StepShape.StepShape_GeometricSetSelect_swiginit(self, _StepShape.new_StepShape_GeometricSetSelect(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a GeometricSetSelect Kind Entity that is : 1 -> Point 2 -> Curve 3 -> Surface 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_GeometricSetSelect_CaseNum(self, *args)


    def Point(self, *args) -> "Handle_StepGeom_Point":
        """
        * returns Value as a Point (Null if another type)

        :rtype: Handle_StepGeom_Point

        """
        return _StepShape.StepShape_GeometricSetSelect_Point(self, *args)


    def Curve(self, *args) -> "Handle_StepGeom_Curve":
        """
        * returns Value as a Curve (Null if another type)

        :rtype: Handle_StepGeom_Curve

        """
        return _StepShape.StepShape_GeometricSetSelect_Curve(self, *args)


    def Surface(self, *args) -> "Handle_StepGeom_Surface":
        """
        * returns Value as a Surface (Null if another type)

        :rtype: Handle_StepGeom_Surface

        """
        return _StepShape.StepShape_GeometricSetSelect_Surface(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricSetSelect
StepShape_GeometricSetSelect.CaseNum = new_instancemethod(_StepShape.StepShape_GeometricSetSelect_CaseNum, None, StepShape_GeometricSetSelect)
StepShape_GeometricSetSelect.Point = new_instancemethod(_StepShape.StepShape_GeometricSetSelect_Point, None, StepShape_GeometricSetSelect)
StepShape_GeometricSetSelect.Curve = new_instancemethod(_StepShape.StepShape_GeometricSetSelect_Curve, None, StepShape_GeometricSetSelect)
StepShape_GeometricSetSelect.Surface = new_instancemethod(_StepShape.StepShape_GeometricSetSelect_Surface, None, StepShape_GeometricSetSelect)
StepShape_GeometricSetSelect_swigregister = _StepShape.StepShape_GeometricSetSelect_swigregister
StepShape_GeometricSetSelect_swigregister(StepShape_GeometricSetSelect)

class StepShape_HArray1OfConnectedEdgeSet(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_ConnectedEdgeSet &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfConnectedEdgeSet_swiginit(self, _StepShape.new_StepShape_HArray1OfConnectedEdgeSet(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_ConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_ConnectedEdgeSet &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_ConnectedEdgeSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedEdgeSet

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_ConnectedEdgeSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedEdgeSet

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfConnectedEdgeSet const &":
        """
        :rtype: StepShape_Array1OfConnectedEdgeSet

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfConnectedEdgeSet &":
        """
        :rtype: StepShape_Array1OfConnectedEdgeSet

        """
        return _StepShape.StepShape_HArray1OfConnectedEdgeSet_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfConnectedEdgeSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfConnectedEdgeSet
StepShape_HArray1OfConnectedEdgeSet.Init = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Init, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.Length = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Length, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Lower, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Upper, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_SetValue, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.Value = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Value, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_ChangeValue, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_Array1, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedEdgeSet_ChangeArray1, None, StepShape_HArray1OfConnectedEdgeSet)
StepShape_HArray1OfConnectedEdgeSet_swigregister = _StepShape.StepShape_HArray1OfConnectedEdgeSet_swigregister
StepShape_HArray1OfConnectedEdgeSet_swigregister(StepShape_HArray1OfConnectedEdgeSet)

class Handle_StepShape_HArray1OfConnectedEdgeSet(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfConnectedEdgeSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfConnectedEdgeSet
Handle_StepShape_HArray1OfConnectedEdgeSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_Nullify, None, Handle_StepShape_HArray1OfConnectedEdgeSet)
Handle_StepShape_HArray1OfConnectedEdgeSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_IsNull, None, Handle_StepShape_HArray1OfConnectedEdgeSet)
Handle_StepShape_HArray1OfConnectedEdgeSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet__get_reference, None, Handle_StepShape_HArray1OfConnectedEdgeSet)
Handle_StepShape_HArray1OfConnectedEdgeSet_swigregister = _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_swigregister
Handle_StepShape_HArray1OfConnectedEdgeSet_swigregister(Handle_StepShape_HArray1OfConnectedEdgeSet)

def Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfConnectedEdgeSet const":
    return _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast(AnObject)
Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast = _StepShape.Handle_StepShape_HArray1OfConnectedEdgeSet_DownCast

class StepShape_HArray1OfConnectedFaceSet(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfConnectedFaceSet_swiginit(self, _StepShape.new_StepShape_HArray1OfConnectedFaceSet(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfConnectedFaceSet const &":
        """
        :rtype: StepShape_Array1OfConnectedFaceSet

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfConnectedFaceSet &":
        """
        :rtype: StepShape_Array1OfConnectedFaceSet

        """
        return _StepShape.StepShape_HArray1OfConnectedFaceSet_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfConnectedFaceSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfConnectedFaceSet
StepShape_HArray1OfConnectedFaceSet.Init = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Init, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.Length = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Length, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Lower, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Upper, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_SetValue, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.Value = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Value, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_ChangeValue, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_Array1, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfConnectedFaceSet_ChangeArray1, None, StepShape_HArray1OfConnectedFaceSet)
StepShape_HArray1OfConnectedFaceSet_swigregister = _StepShape.StepShape_HArray1OfConnectedFaceSet_swigregister
StepShape_HArray1OfConnectedFaceSet_swigregister(StepShape_HArray1OfConnectedFaceSet)

class Handle_StepShape_HArray1OfConnectedFaceSet(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfConnectedFaceSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfConnectedFaceSet
Handle_StepShape_HArray1OfConnectedFaceSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_Nullify, None, Handle_StepShape_HArray1OfConnectedFaceSet)
Handle_StepShape_HArray1OfConnectedFaceSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_IsNull, None, Handle_StepShape_HArray1OfConnectedFaceSet)
Handle_StepShape_HArray1OfConnectedFaceSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfConnectedFaceSet__get_reference, None, Handle_StepShape_HArray1OfConnectedFaceSet)
Handle_StepShape_HArray1OfConnectedFaceSet_swigregister = _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_swigregister
Handle_StepShape_HArray1OfConnectedFaceSet_swigregister(Handle_StepShape_HArray1OfConnectedFaceSet)

def Handle_StepShape_HArray1OfConnectedFaceSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfConnectedFaceSet const":
    return _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_DownCast(AnObject)
Handle_StepShape_HArray1OfConnectedFaceSet_DownCast = _StepShape.Handle_StepShape_HArray1OfConnectedFaceSet_DownCast

class StepShape_HArray1OfEdge(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_Edge &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfEdge_swiginit(self, _StepShape.new_StepShape_HArray1OfEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfEdge_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfEdge_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfEdge_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfEdge_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfEdge_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_Edge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_HArray1OfEdge_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_Edge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_HArray1OfEdge_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfEdge const &":
        """
        :rtype: StepShape_Array1OfEdge

        """
        return _StepShape.StepShape_HArray1OfEdge_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfEdge &":
        """
        :rtype: StepShape_Array1OfEdge

        """
        return _StepShape.StepShape_HArray1OfEdge_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfEdge
StepShape_HArray1OfEdge.Init = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Init, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.Length = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Length, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Lower, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Upper, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_SetValue, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.Value = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Value, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_ChangeValue, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_Array1, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfEdge_ChangeArray1, None, StepShape_HArray1OfEdge)
StepShape_HArray1OfEdge_swigregister = _StepShape.StepShape_HArray1OfEdge_swigregister
StepShape_HArray1OfEdge_swigregister(StepShape_HArray1OfEdge)

class Handle_StepShape_HArray1OfEdge(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfEdge_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfEdge
Handle_StepShape_HArray1OfEdge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfEdge_Nullify, None, Handle_StepShape_HArray1OfEdge)
Handle_StepShape_HArray1OfEdge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfEdge_IsNull, None, Handle_StepShape_HArray1OfEdge)
Handle_StepShape_HArray1OfEdge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfEdge__get_reference, None, Handle_StepShape_HArray1OfEdge)
Handle_StepShape_HArray1OfEdge_swigregister = _StepShape.Handle_StepShape_HArray1OfEdge_swigregister
Handle_StepShape_HArray1OfEdge_swigregister(Handle_StepShape_HArray1OfEdge)

def Handle_StepShape_HArray1OfEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfEdge const":
    return _StepShape.Handle_StepShape_HArray1OfEdge_DownCast(AnObject)
Handle_StepShape_HArray1OfEdge_DownCast = _StepShape.Handle_StepShape_HArray1OfEdge_DownCast

class StepShape_HArray1OfFace(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_Face &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfFace_swiginit(self, _StepShape.new_StepShape_HArray1OfFace(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfFace_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFace_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFace_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFace_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfFace_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_Face":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_HArray1OfFace_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_Face":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_HArray1OfFace_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfFace const &":
        """
        :rtype: StepShape_Array1OfFace

        """
        return _StepShape.StepShape_HArray1OfFace_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfFace &":
        """
        :rtype: StepShape_Array1OfFace

        """
        return _StepShape.StepShape_HArray1OfFace_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfFace(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfFace
StepShape_HArray1OfFace.Init = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Init, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.Length = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Length, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Lower, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Upper, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfFace_SetValue, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.Value = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Value, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfFace_ChangeValue, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfFace_Array1, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfFace_ChangeArray1, None, StepShape_HArray1OfFace)
StepShape_HArray1OfFace_swigregister = _StepShape.StepShape_HArray1OfFace_swigregister
StepShape_HArray1OfFace_swigregister(StepShape_HArray1OfFace)

class Handle_StepShape_HArray1OfFace(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfFace_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfFace(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfFace_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfFace
Handle_StepShape_HArray1OfFace.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFace_Nullify, None, Handle_StepShape_HArray1OfFace)
Handle_StepShape_HArray1OfFace.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFace_IsNull, None, Handle_StepShape_HArray1OfFace)
Handle_StepShape_HArray1OfFace._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFace__get_reference, None, Handle_StepShape_HArray1OfFace)
Handle_StepShape_HArray1OfFace_swigregister = _StepShape.Handle_StepShape_HArray1OfFace_swigregister
Handle_StepShape_HArray1OfFace_swigregister(Handle_StepShape_HArray1OfFace)

def Handle_StepShape_HArray1OfFace_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfFace const":
    return _StepShape.Handle_StepShape_HArray1OfFace_DownCast(AnObject)
Handle_StepShape_HArray1OfFace_DownCast = _StepShape.Handle_StepShape_HArray1OfFace_DownCast

class StepShape_HArray1OfFaceBound(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_FaceBound &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfFaceBound_swiginit(self, _StepShape.new_StepShape_HArray1OfFaceBound(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_FaceBound &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_FaceBound &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfFaceBound_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_FaceBound":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_FaceBound":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_HArray1OfFaceBound_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfFaceBound const &":
        """
        :rtype: StepShape_Array1OfFaceBound

        """
        return _StepShape.StepShape_HArray1OfFaceBound_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfFaceBound &":
        """
        :rtype: StepShape_Array1OfFaceBound

        """
        return _StepShape.StepShape_HArray1OfFaceBound_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfFaceBound(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfFaceBound
StepShape_HArray1OfFaceBound.Init = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Init, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.Length = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Length, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Lower, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Upper, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_SetValue, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.Value = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Value, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_ChangeValue, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_Array1, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfFaceBound_ChangeArray1, None, StepShape_HArray1OfFaceBound)
StepShape_HArray1OfFaceBound_swigregister = _StepShape.StepShape_HArray1OfFaceBound_swigregister
StepShape_HArray1OfFaceBound_swigregister(StepShape_HArray1OfFaceBound)

class Handle_StepShape_HArray1OfFaceBound(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfFaceBound_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfFaceBound(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfFaceBound_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfFaceBound
Handle_StepShape_HArray1OfFaceBound.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFaceBound_Nullify, None, Handle_StepShape_HArray1OfFaceBound)
Handle_StepShape_HArray1OfFaceBound.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFaceBound_IsNull, None, Handle_StepShape_HArray1OfFaceBound)
Handle_StepShape_HArray1OfFaceBound._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfFaceBound__get_reference, None, Handle_StepShape_HArray1OfFaceBound)
Handle_StepShape_HArray1OfFaceBound_swigregister = _StepShape.Handle_StepShape_HArray1OfFaceBound_swigregister
Handle_StepShape_HArray1OfFaceBound_swigregister(Handle_StepShape_HArray1OfFaceBound)

def Handle_StepShape_HArray1OfFaceBound_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfFaceBound const":
    return _StepShape.Handle_StepShape_HArray1OfFaceBound_DownCast(AnObject)
Handle_StepShape_HArray1OfFaceBound_DownCast = _StepShape.Handle_StepShape_HArray1OfFaceBound_DownCast

class StepShape_HArray1OfGeometricSetSelect(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepShape_GeometricSetSelect &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfGeometricSetSelect_swiginit(self, _StepShape.new_StepShape_HArray1OfGeometricSetSelect(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_GeometricSetSelect &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_GeometricSetSelect &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_GeometricSetSelect const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_GeometricSetSelect &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_GeometricSetSelect

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfGeometricSetSelect const &":
        """
        :rtype: StepShape_Array1OfGeometricSetSelect

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfGeometricSetSelect &":
        """
        :rtype: StepShape_Array1OfGeometricSetSelect

        """
        return _StepShape.StepShape_HArray1OfGeometricSetSelect_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfGeometricSetSelect(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfGeometricSetSelect
StepShape_HArray1OfGeometricSetSelect.Init = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Init, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.Length = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Length, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Lower, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Upper, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_SetValue, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.Value = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Value, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_ChangeValue, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_Array1, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfGeometricSetSelect_ChangeArray1, None, StepShape_HArray1OfGeometricSetSelect)
StepShape_HArray1OfGeometricSetSelect_swigregister = _StepShape.StepShape_HArray1OfGeometricSetSelect_swigregister
StepShape_HArray1OfGeometricSetSelect_swigregister(StepShape_HArray1OfGeometricSetSelect)

class Handle_StepShape_HArray1OfGeometricSetSelect(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfGeometricSetSelect(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfGeometricSetSelect
Handle_StepShape_HArray1OfGeometricSetSelect.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_Nullify, None, Handle_StepShape_HArray1OfGeometricSetSelect)
Handle_StepShape_HArray1OfGeometricSetSelect.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_IsNull, None, Handle_StepShape_HArray1OfGeometricSetSelect)
Handle_StepShape_HArray1OfGeometricSetSelect._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfGeometricSetSelect__get_reference, None, Handle_StepShape_HArray1OfGeometricSetSelect)
Handle_StepShape_HArray1OfGeometricSetSelect_swigregister = _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_swigregister
Handle_StepShape_HArray1OfGeometricSetSelect_swigregister(Handle_StepShape_HArray1OfGeometricSetSelect)

def Handle_StepShape_HArray1OfGeometricSetSelect_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfGeometricSetSelect const":
    return _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_DownCast(AnObject)
Handle_StepShape_HArray1OfGeometricSetSelect_DownCast = _StepShape.Handle_StepShape_HArray1OfGeometricSetSelect_DownCast

class StepShape_HArray1OfOrientedClosedShell(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_OrientedClosedShell &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfOrientedClosedShell_swiginit(self, _StepShape.new_StepShape_HArray1OfOrientedClosedShell(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_OrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_OrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfOrientedClosedShell const &":
        """
        :rtype: StepShape_Array1OfOrientedClosedShell

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfOrientedClosedShell &":
        """
        :rtype: StepShape_Array1OfOrientedClosedShell

        """
        return _StepShape.StepShape_HArray1OfOrientedClosedShell_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfOrientedClosedShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfOrientedClosedShell
StepShape_HArray1OfOrientedClosedShell.Init = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Init, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.Length = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Length, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Lower, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Upper, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_SetValue, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.Value = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Value, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_ChangeValue, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_Array1, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedClosedShell_ChangeArray1, None, StepShape_HArray1OfOrientedClosedShell)
StepShape_HArray1OfOrientedClosedShell_swigregister = _StepShape.StepShape_HArray1OfOrientedClosedShell_swigregister
StepShape_HArray1OfOrientedClosedShell_swigregister(StepShape_HArray1OfOrientedClosedShell)

class Handle_StepShape_HArray1OfOrientedClosedShell(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfOrientedClosedShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfOrientedClosedShell
Handle_StepShape_HArray1OfOrientedClosedShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_Nullify, None, Handle_StepShape_HArray1OfOrientedClosedShell)
Handle_StepShape_HArray1OfOrientedClosedShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_IsNull, None, Handle_StepShape_HArray1OfOrientedClosedShell)
Handle_StepShape_HArray1OfOrientedClosedShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedClosedShell__get_reference, None, Handle_StepShape_HArray1OfOrientedClosedShell)
Handle_StepShape_HArray1OfOrientedClosedShell_swigregister = _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_swigregister
Handle_StepShape_HArray1OfOrientedClosedShell_swigregister(Handle_StepShape_HArray1OfOrientedClosedShell)

def Handle_StepShape_HArray1OfOrientedClosedShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfOrientedClosedShell const":
    return _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_DownCast(AnObject)
Handle_StepShape_HArray1OfOrientedClosedShell_DownCast = _StepShape.Handle_StepShape_HArray1OfOrientedClosedShell_DownCast

class StepShape_HArray1OfOrientedEdge(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_StepShape_OrientedEdge &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfOrientedEdge_swiginit(self, _StepShape.new_StepShape_HArray1OfOrientedEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_StepShape_OrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_StepShape_OrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_SetValue(self, *args)


    def Value(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfOrientedEdge const &":
        """
        :rtype: StepShape_Array1OfOrientedEdge

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfOrientedEdge &":
        """
        :rtype: StepShape_Array1OfOrientedEdge

        """
        return _StepShape.StepShape_HArray1OfOrientedEdge_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfOrientedEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfOrientedEdge
StepShape_HArray1OfOrientedEdge.Init = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Init, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.Length = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Length, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Lower, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Upper, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_SetValue, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.Value = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Value, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_ChangeValue, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_Array1, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfOrientedEdge_ChangeArray1, None, StepShape_HArray1OfOrientedEdge)
StepShape_HArray1OfOrientedEdge_swigregister = _StepShape.StepShape_HArray1OfOrientedEdge_swigregister
StepShape_HArray1OfOrientedEdge_swigregister(StepShape_HArray1OfOrientedEdge)

class Handle_StepShape_HArray1OfOrientedEdge(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfOrientedEdge_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfOrientedEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfOrientedEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfOrientedEdge
Handle_StepShape_HArray1OfOrientedEdge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedEdge_Nullify, None, Handle_StepShape_HArray1OfOrientedEdge)
Handle_StepShape_HArray1OfOrientedEdge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedEdge_IsNull, None, Handle_StepShape_HArray1OfOrientedEdge)
Handle_StepShape_HArray1OfOrientedEdge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfOrientedEdge__get_reference, None, Handle_StepShape_HArray1OfOrientedEdge)
Handle_StepShape_HArray1OfOrientedEdge_swigregister = _StepShape.Handle_StepShape_HArray1OfOrientedEdge_swigregister
Handle_StepShape_HArray1OfOrientedEdge_swigregister(Handle_StepShape_HArray1OfOrientedEdge)

def Handle_StepShape_HArray1OfOrientedEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfOrientedEdge const":
    return _StepShape.Handle_StepShape_HArray1OfOrientedEdge_DownCast(AnObject)
Handle_StepShape_HArray1OfOrientedEdge_DownCast = _StepShape.Handle_StepShape_HArray1OfOrientedEdge_DownCast

class StepShape_HArray1OfShell(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepShape_Shell &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfShell_swiginit(self, _StepShape.new_StepShape_HArray1OfShell(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_Shell &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfShell_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfShell_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfShell_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfShell_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_Shell &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfShell_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_Shell const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_Shell

        """
        return _StepShape.StepShape_HArray1OfShell_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_Shell &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_Shell

        """
        return _StepShape.StepShape_HArray1OfShell_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfShell const &":
        """
        :rtype: StepShape_Array1OfShell

        """
        return _StepShape.StepShape_HArray1OfShell_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfShell &":
        """
        :rtype: StepShape_Array1OfShell

        """
        return _StepShape.StepShape_HArray1OfShell_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfShell
StepShape_HArray1OfShell.Init = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Init, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.Length = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Length, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Lower, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Upper, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfShell_SetValue, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.Value = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Value, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfShell_ChangeValue, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfShell_Array1, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfShell_ChangeArray1, None, StepShape_HArray1OfShell)
StepShape_HArray1OfShell_swigregister = _StepShape.StepShape_HArray1OfShell_swigregister
StepShape_HArray1OfShell_swigregister(StepShape_HArray1OfShell)

class Handle_StepShape_HArray1OfShell(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfShell_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfShell
Handle_StepShape_HArray1OfShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfShell_Nullify, None, Handle_StepShape_HArray1OfShell)
Handle_StepShape_HArray1OfShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfShell_IsNull, None, Handle_StepShape_HArray1OfShell)
Handle_StepShape_HArray1OfShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfShell__get_reference, None, Handle_StepShape_HArray1OfShell)
Handle_StepShape_HArray1OfShell_swigregister = _StepShape.Handle_StepShape_HArray1OfShell_swigregister
Handle_StepShape_HArray1OfShell_swigregister(Handle_StepShape_HArray1OfShell)

def Handle_StepShape_HArray1OfShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfShell const":
    return _StepShape.Handle_StepShape_HArray1OfShell_DownCast(AnObject)
Handle_StepShape_HArray1OfShell_DownCast = _StepShape.Handle_StepShape_HArray1OfShell_DownCast

class StepShape_HArray1OfValueQualifier(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: StepShape_ValueQualifier &
        :rtype: None

        """
        _StepShape.StepShape_HArray1OfValueQualifier_swiginit(self, _StepShape.new_StepShape_HArray1OfValueQualifier(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_SetValue(self, *args)


    def Value(self, *args) -> "StepShape_ValueQualifier const &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Value(self, *args)


    def ChangeValue(self, *args) -> "StepShape_ValueQualifier &":
        """
        :param Index:
        :type Index: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_ChangeValue(self, *args)


    def Array1(self, *args) -> "StepShape_Array1OfValueQualifier const &":
        """
        :rtype: StepShape_Array1OfValueQualifier

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_Array1(self, *args)


    def ChangeArray1(self, *args) -> "StepShape_Array1OfValueQualifier &":
        """
        :rtype: StepShape_Array1OfValueQualifier

        """
        return _StepShape.StepShape_HArray1OfValueQualifier_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HArray1OfValueQualifier(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HArray1OfValueQualifier
StepShape_HArray1OfValueQualifier.Init = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Init, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.Length = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Length, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.Lower = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Lower, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.Upper = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Upper, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.SetValue = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_SetValue, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.Value = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Value, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.ChangeValue = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_ChangeValue, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.Array1 = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_Array1, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier.ChangeArray1 = new_instancemethod(_StepShape.StepShape_HArray1OfValueQualifier_ChangeArray1, None, StepShape_HArray1OfValueQualifier)
StepShape_HArray1OfValueQualifier_swigregister = _StepShape.StepShape_HArray1OfValueQualifier_swigregister
StepShape_HArray1OfValueQualifier_swigregister(StepShape_HArray1OfValueQualifier)

class Handle_StepShape_HArray1OfValueQualifier(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HArray1OfValueQualifier_swiginit(self, _StepShape.new_Handle_StepShape_HArray1OfValueQualifier(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HArray1OfValueQualifier_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HArray1OfValueQualifier
Handle_StepShape_HArray1OfValueQualifier.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfValueQualifier_Nullify, None, Handle_StepShape_HArray1OfValueQualifier)
Handle_StepShape_HArray1OfValueQualifier.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfValueQualifier_IsNull, None, Handle_StepShape_HArray1OfValueQualifier)
Handle_StepShape_HArray1OfValueQualifier._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HArray1OfValueQualifier__get_reference, None, Handle_StepShape_HArray1OfValueQualifier)
Handle_StepShape_HArray1OfValueQualifier_swigregister = _StepShape.Handle_StepShape_HArray1OfValueQualifier_swigregister
Handle_StepShape_HArray1OfValueQualifier_swigregister(Handle_StepShape_HArray1OfValueQualifier)

def Handle_StepShape_HArray1OfValueQualifier_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HArray1OfValueQualifier const":
    return _StepShape.Handle_StepShape_HArray1OfValueQualifier_DownCast(AnObject)
Handle_StepShape_HArray1OfValueQualifier_DownCast = _StepShape.Handle_StepShape_HArray1OfValueQualifier_DownCast

class StepShape_HalfSpaceSolid(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a HalfSpaceSolid

        :rtype: None

        """
        _StepShape.StepShape_HalfSpaceSolid_swiginit(self, _StepShape.new_StepShape_HalfSpaceSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBaseSurface:
        :type aBaseSurface: Handle_StepGeom_Surface &
        :param aAgreementFlag:
        :type aAgreementFlag: bool
        :rtype: void

        """
        return _StepShape.StepShape_HalfSpaceSolid_Init(self, *args)


    def SetBaseSurface(self, *args) -> "void":
        """
        :param aBaseSurface:
        :type aBaseSurface: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepShape.StepShape_HalfSpaceSolid_SetBaseSurface(self, *args)


    def BaseSurface(self, *args) -> "Handle_StepGeom_Surface":
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepShape.StepShape_HalfSpaceSolid_BaseSurface(self, *args)


    def SetAgreementFlag(self, *args) -> "void":
        """
        :param aAgreementFlag:
        :type aAgreementFlag: bool
        :rtype: None

        """
        return _StepShape.StepShape_HalfSpaceSolid_SetAgreementFlag(self, *args)


    def AgreementFlag(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_HalfSpaceSolid_AgreementFlag(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_HalfSpaceSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_HalfSpaceSolid
StepShape_HalfSpaceSolid.Init = new_instancemethod(_StepShape.StepShape_HalfSpaceSolid_Init, None, StepShape_HalfSpaceSolid)
StepShape_HalfSpaceSolid.SetBaseSurface = new_instancemethod(_StepShape.StepShape_HalfSpaceSolid_SetBaseSurface, None, StepShape_HalfSpaceSolid)
StepShape_HalfSpaceSolid.BaseSurface = new_instancemethod(_StepShape.StepShape_HalfSpaceSolid_BaseSurface, None, StepShape_HalfSpaceSolid)
StepShape_HalfSpaceSolid.SetAgreementFlag = new_instancemethod(_StepShape.StepShape_HalfSpaceSolid_SetAgreementFlag, None, StepShape_HalfSpaceSolid)
StepShape_HalfSpaceSolid.AgreementFlag = new_instancemethod(_StepShape.StepShape_HalfSpaceSolid_AgreementFlag, None, StepShape_HalfSpaceSolid)
StepShape_HalfSpaceSolid_swigregister = _StepShape.StepShape_HalfSpaceSolid_swigregister
StepShape_HalfSpaceSolid_swigregister(StepShape_HalfSpaceSolid)

class Handle_StepShape_HalfSpaceSolid(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_HalfSpaceSolid_swiginit(self, _StepShape.new_Handle_StepShape_HalfSpaceSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_HalfSpaceSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_HalfSpaceSolid
Handle_StepShape_HalfSpaceSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_HalfSpaceSolid_Nullify, None, Handle_StepShape_HalfSpaceSolid)
Handle_StepShape_HalfSpaceSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_HalfSpaceSolid_IsNull, None, Handle_StepShape_HalfSpaceSolid)
Handle_StepShape_HalfSpaceSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_HalfSpaceSolid__get_reference, None, Handle_StepShape_HalfSpaceSolid)
Handle_StepShape_HalfSpaceSolid_swigregister = _StepShape.Handle_StepShape_HalfSpaceSolid_swigregister
Handle_StepShape_HalfSpaceSolid_swigregister(Handle_StepShape_HalfSpaceSolid)

def Handle_StepShape_HalfSpaceSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_HalfSpaceSolid const":
    return _StepShape.Handle_StepShape_HalfSpaceSolid_DownCast(AnObject)
Handle_StepShape_HalfSpaceSolid_DownCast = _StepShape.Handle_StepShape_HalfSpaceSolid_DownCast

class StepShape_LimitsAndFits(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_LimitsAndFits_swiginit(self, _StepShape.new_StepShape_LimitsAndFits(*args))

    def Init(self, *args) -> "void":
        """
        :param form_variance:
        :type form_variance: Handle_TCollection_HAsciiString &
        :param zone_variance:
        :type zone_variance: Handle_TCollection_HAsciiString &
        :param grade:
        :type grade: Handle_TCollection_HAsciiString &
        :param source:
        :type source: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_LimitsAndFits_Init(self, *args)


    def FormVariance(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_LimitsAndFits_FormVariance(self, *args)


    def SetFormVariance(self, *args) -> "void":
        """
        :param form_variance:
        :type form_variance: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_LimitsAndFits_SetFormVariance(self, *args)


    def ZoneVariance(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_LimitsAndFits_ZoneVariance(self, *args)


    def SetZoneVariance(self, *args) -> "void":
        """
        :param zone_variance:
        :type zone_variance: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_LimitsAndFits_SetZoneVariance(self, *args)


    def Grade(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_LimitsAndFits_Grade(self, *args)


    def SetGrade(self, *args) -> "void":
        """
        :param grade:
        :type grade: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_LimitsAndFits_SetGrade(self, *args)


    def Source(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_LimitsAndFits_Source(self, *args)


    def SetSource(self, *args) -> "void":
        """
        :param source:
        :type source: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_LimitsAndFits_SetSource(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_LimitsAndFits(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_LimitsAndFits
StepShape_LimitsAndFits.Init = new_instancemethod(_StepShape.StepShape_LimitsAndFits_Init, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.FormVariance = new_instancemethod(_StepShape.StepShape_LimitsAndFits_FormVariance, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.SetFormVariance = new_instancemethod(_StepShape.StepShape_LimitsAndFits_SetFormVariance, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.ZoneVariance = new_instancemethod(_StepShape.StepShape_LimitsAndFits_ZoneVariance, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.SetZoneVariance = new_instancemethod(_StepShape.StepShape_LimitsAndFits_SetZoneVariance, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.Grade = new_instancemethod(_StepShape.StepShape_LimitsAndFits_Grade, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.SetGrade = new_instancemethod(_StepShape.StepShape_LimitsAndFits_SetGrade, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.Source = new_instancemethod(_StepShape.StepShape_LimitsAndFits_Source, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits.SetSource = new_instancemethod(_StepShape.StepShape_LimitsAndFits_SetSource, None, StepShape_LimitsAndFits)
StepShape_LimitsAndFits_swigregister = _StepShape.StepShape_LimitsAndFits_swigregister
StepShape_LimitsAndFits_swigregister(StepShape_LimitsAndFits)

class Handle_StepShape_LimitsAndFits(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_LimitsAndFits_swiginit(self, _StepShape.new_Handle_StepShape_LimitsAndFits(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_LimitsAndFits_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_LimitsAndFits
Handle_StepShape_LimitsAndFits.Nullify = new_instancemethod(_StepShape.Handle_StepShape_LimitsAndFits_Nullify, None, Handle_StepShape_LimitsAndFits)
Handle_StepShape_LimitsAndFits.IsNull = new_instancemethod(_StepShape.Handle_StepShape_LimitsAndFits_IsNull, None, Handle_StepShape_LimitsAndFits)
Handle_StepShape_LimitsAndFits._get_reference = new_instancemethod(_StepShape.Handle_StepShape_LimitsAndFits__get_reference, None, Handle_StepShape_LimitsAndFits)
Handle_StepShape_LimitsAndFits_swigregister = _StepShape.Handle_StepShape_LimitsAndFits_swigregister
Handle_StepShape_LimitsAndFits_swigregister(Handle_StepShape_LimitsAndFits)

def Handle_StepShape_LimitsAndFits_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_LimitsAndFits const":
    return _StepShape.Handle_StepShape_LimitsAndFits_DownCast(AnObject)
Handle_StepShape_LimitsAndFits_DownCast = _StepShape.Handle_StepShape_LimitsAndFits_DownCast

class StepShape_MeasureQualification(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_MeasureQualification_swiginit(self, _StepShape.new_StepShape_MeasureQualification(*args))

    def Init(self, *args) -> "void":
        """
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :param description:
        :type description: Handle_TCollection_HAsciiString &
        :param qualified_measure:
        :type qualified_measure: Handle_StepBasic_MeasureWithUnit &
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_Init(self, *args)


    def Name(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_MeasureQualification_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_SetName(self, *args)


    def Description(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_MeasureQualification_Description(self, *args)


    def SetDescription(self, *args) -> "void":
        """
        :param description:
        :type description: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_SetDescription(self, *args)


    def QualifiedMeasure(self, *args) -> "Handle_StepBasic_MeasureWithUnit":
        """
        :rtype: Handle_StepBasic_MeasureWithUnit

        """
        return _StepShape.StepShape_MeasureQualification_QualifiedMeasure(self, *args)


    def SetQualifiedMeasure(self, *args) -> "void":
        """
        :param qualified_measure:
        :type qualified_measure: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiedMeasure(self, *args)


    def Qualifiers(self, *args) -> "Handle_StepShape_HArray1OfValueQualifier":
        """
        :rtype: Handle_StepShape_HArray1OfValueQualifier

        """
        return _StepShape.StepShape_MeasureQualification_Qualifiers(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_MeasureQualification_NbQualifiers(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        :param num:
        :type num: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_MeasureQualification_QualifiersValue(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        :param num:
        :type num: int
        :param aqualifier:
        :type aqualifier: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureQualification_SetQualifiersValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_MeasureQualification(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_MeasureQualification
StepShape_MeasureQualification.Init = new_instancemethod(_StepShape.StepShape_MeasureQualification_Init, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.Name = new_instancemethod(_StepShape.StepShape_MeasureQualification_Name, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.SetName = new_instancemethod(_StepShape.StepShape_MeasureQualification_SetName, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.Description = new_instancemethod(_StepShape.StepShape_MeasureQualification_Description, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.SetDescription = new_instancemethod(_StepShape.StepShape_MeasureQualification_SetDescription, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.QualifiedMeasure = new_instancemethod(_StepShape.StepShape_MeasureQualification_QualifiedMeasure, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.SetQualifiedMeasure = new_instancemethod(_StepShape.StepShape_MeasureQualification_SetQualifiedMeasure, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.Qualifiers = new_instancemethod(_StepShape.StepShape_MeasureQualification_Qualifiers, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.NbQualifiers = new_instancemethod(_StepShape.StepShape_MeasureQualification_NbQualifiers, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.SetQualifiers = new_instancemethod(_StepShape.StepShape_MeasureQualification_SetQualifiers, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.QualifiersValue = new_instancemethod(_StepShape.StepShape_MeasureQualification_QualifiersValue, None, StepShape_MeasureQualification)
StepShape_MeasureQualification.SetQualifiersValue = new_instancemethod(_StepShape.StepShape_MeasureQualification_SetQualifiersValue, None, StepShape_MeasureQualification)
StepShape_MeasureQualification_swigregister = _StepShape.StepShape_MeasureQualification_swigregister
StepShape_MeasureQualification_swigregister(StepShape_MeasureQualification)

class Handle_StepShape_MeasureQualification(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_MeasureQualification_swiginit(self, _StepShape.new_Handle_StepShape_MeasureQualification(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_MeasureQualification_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_MeasureQualification
Handle_StepShape_MeasureQualification.Nullify = new_instancemethod(_StepShape.Handle_StepShape_MeasureQualification_Nullify, None, Handle_StepShape_MeasureQualification)
Handle_StepShape_MeasureQualification.IsNull = new_instancemethod(_StepShape.Handle_StepShape_MeasureQualification_IsNull, None, Handle_StepShape_MeasureQualification)
Handle_StepShape_MeasureQualification._get_reference = new_instancemethod(_StepShape.Handle_StepShape_MeasureQualification__get_reference, None, Handle_StepShape_MeasureQualification)
Handle_StepShape_MeasureQualification_swigregister = _StepShape.Handle_StepShape_MeasureQualification_swigregister
Handle_StepShape_MeasureQualification_swigregister(Handle_StepShape_MeasureQualification)

def Handle_StepShape_MeasureQualification_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_MeasureQualification const":
    return _StepShape.Handle_StepShape_MeasureQualification_DownCast(AnObject)
Handle_StepShape_MeasureQualification_DownCast = _StepShape.Handle_StepShape_MeasureQualification_DownCast

class StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(OCC.StepRepr.StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swiginit(self, _StepShape.new_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aValueComponent:
        :type aValueComponent: Handle_StepBasic_MeasureValueMember &
        :param aUnitComponent:
        :type aUnitComponent: StepBasic_Unit &
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Init(self, *args)


    def SetMeasure(self, *args) -> "void":
        """
        :param Measure:
        :type Measure: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetMeasure(self, *args)


    def Measure(self, *args) -> "Handle_StepBasic_MeasureWithUnit":
        """
        :rtype: Handle_StepBasic_MeasureWithUnit

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Measure(self, *args)


    def Qualifiers(self, *args) -> "Handle_StepShape_HArray1OfValueQualifier":
        """
        :rtype: Handle_StepShape_HArray1OfValueQualifier

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Qualifiers(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_NbQualifiers(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        :param num:
        :type num: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_QualifiersValue(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        :param num:
        :type num: int
        :param aqualifier:
        :type aqualifier: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiersValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.Init = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Init, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.SetMeasure = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetMeasure, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.Measure = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Measure, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.Qualifiers = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Qualifiers, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.NbQualifiers = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_NbQualifiers, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.SetQualifiers = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiers, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.QualifiersValue = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_QualifiersValue, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.SetQualifiersValue = new_instancemethod(_StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_SetQualifiersValue, None, StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister = _StepShape.StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister
StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister(StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)

class Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(OCC.StepRepr.Handle_StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swiginit(self, _StepShape.new_Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.Nullify = new_instancemethod(_StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_Nullify, None, Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem.IsNull = new_instancemethod(_StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_IsNull, None, Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem._get_reference = new_instancemethod(_StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem__get_reference, None, Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister = _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_swigregister(Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem)

def Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem const":
    return _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast(AnObject)
Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast = _StepShape.Handle_StepShape_MeasureRepresentationItemAndQualifiedRepresentationItem_DownCast

class StepShape_PlusMinusTolerance(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_PlusMinusTolerance_swiginit(self, _StepShape.new_StepShape_PlusMinusTolerance(*args))

    def Init(self, *args) -> "void":
        """
        :param range:
        :type range: StepShape_ToleranceMethodDefinition &
        :param toleranced_dimension:
        :type toleranced_dimension: StepShape_DimensionalCharacteristic &
        :rtype: None

        """
        return _StepShape.StepShape_PlusMinusTolerance_Init(self, *args)


    def Range(self, *args) -> "StepShape_ToleranceMethodDefinition":
        """
        :rtype: StepShape_ToleranceMethodDefinition

        """
        return _StepShape.StepShape_PlusMinusTolerance_Range(self, *args)


    def SetRange(self, *args) -> "void":
        """
        :param range:
        :type range: StepShape_ToleranceMethodDefinition &
        :rtype: None

        """
        return _StepShape.StepShape_PlusMinusTolerance_SetRange(self, *args)


    def TolerancedDimension(self, *args) -> "StepShape_DimensionalCharacteristic":
        """
        :rtype: StepShape_DimensionalCharacteristic

        """
        return _StepShape.StepShape_PlusMinusTolerance_TolerancedDimension(self, *args)


    def SetTolerancedDimension(self, *args) -> "void":
        """
        :param toleranced_dimension:
        :type toleranced_dimension: StepShape_DimensionalCharacteristic &
        :rtype: None

        """
        return _StepShape.StepShape_PlusMinusTolerance_SetTolerancedDimension(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_PlusMinusTolerance(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PlusMinusTolerance
StepShape_PlusMinusTolerance.Init = new_instancemethod(_StepShape.StepShape_PlusMinusTolerance_Init, None, StepShape_PlusMinusTolerance)
StepShape_PlusMinusTolerance.Range = new_instancemethod(_StepShape.StepShape_PlusMinusTolerance_Range, None, StepShape_PlusMinusTolerance)
StepShape_PlusMinusTolerance.SetRange = new_instancemethod(_StepShape.StepShape_PlusMinusTolerance_SetRange, None, StepShape_PlusMinusTolerance)
StepShape_PlusMinusTolerance.TolerancedDimension = new_instancemethod(_StepShape.StepShape_PlusMinusTolerance_TolerancedDimension, None, StepShape_PlusMinusTolerance)
StepShape_PlusMinusTolerance.SetTolerancedDimension = new_instancemethod(_StepShape.StepShape_PlusMinusTolerance_SetTolerancedDimension, None, StepShape_PlusMinusTolerance)
StepShape_PlusMinusTolerance_swigregister = _StepShape.StepShape_PlusMinusTolerance_swigregister
StepShape_PlusMinusTolerance_swigregister(StepShape_PlusMinusTolerance)

class Handle_StepShape_PlusMinusTolerance(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_PlusMinusTolerance_swiginit(self, _StepShape.new_Handle_StepShape_PlusMinusTolerance(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_PlusMinusTolerance_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_PlusMinusTolerance
Handle_StepShape_PlusMinusTolerance.Nullify = new_instancemethod(_StepShape.Handle_StepShape_PlusMinusTolerance_Nullify, None, Handle_StepShape_PlusMinusTolerance)
Handle_StepShape_PlusMinusTolerance.IsNull = new_instancemethod(_StepShape.Handle_StepShape_PlusMinusTolerance_IsNull, None, Handle_StepShape_PlusMinusTolerance)
Handle_StepShape_PlusMinusTolerance._get_reference = new_instancemethod(_StepShape.Handle_StepShape_PlusMinusTolerance__get_reference, None, Handle_StepShape_PlusMinusTolerance)
Handle_StepShape_PlusMinusTolerance_swigregister = _StepShape.Handle_StepShape_PlusMinusTolerance_swigregister
Handle_StepShape_PlusMinusTolerance_swigregister(Handle_StepShape_PlusMinusTolerance)

def Handle_StepShape_PlusMinusTolerance_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_PlusMinusTolerance const":
    return _StepShape.Handle_StepShape_PlusMinusTolerance_DownCast(AnObject)
Handle_StepShape_PlusMinusTolerance_DownCast = _StepShape.Handle_StepShape_PlusMinusTolerance_DownCast

class StepShape_PrecisionQualifier(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_PrecisionQualifier_swiginit(self, _StepShape.new_StepShape_PrecisionQualifier(*args))

    def Init(self, *args) -> "void":
        """
        :param precision_value:
        :type precision_value: int
        :rtype: None

        """
        return _StepShape.StepShape_PrecisionQualifier_Init(self, *args)


    def PrecisionValue(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_PrecisionQualifier_PrecisionValue(self, *args)


    def SetPrecisionValue(self, *args) -> "void":
        """
        :param precision_value:
        :type precision_value: int
        :rtype: None

        """
        return _StepShape.StepShape_PrecisionQualifier_SetPrecisionValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_PrecisionQualifier(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PrecisionQualifier
StepShape_PrecisionQualifier.Init = new_instancemethod(_StepShape.StepShape_PrecisionQualifier_Init, None, StepShape_PrecisionQualifier)
StepShape_PrecisionQualifier.PrecisionValue = new_instancemethod(_StepShape.StepShape_PrecisionQualifier_PrecisionValue, None, StepShape_PrecisionQualifier)
StepShape_PrecisionQualifier.SetPrecisionValue = new_instancemethod(_StepShape.StepShape_PrecisionQualifier_SetPrecisionValue, None, StepShape_PrecisionQualifier)
StepShape_PrecisionQualifier_swigregister = _StepShape.StepShape_PrecisionQualifier_swigregister
StepShape_PrecisionQualifier_swigregister(StepShape_PrecisionQualifier)

class Handle_StepShape_PrecisionQualifier(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_PrecisionQualifier_swiginit(self, _StepShape.new_Handle_StepShape_PrecisionQualifier(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_PrecisionQualifier_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_PrecisionQualifier
Handle_StepShape_PrecisionQualifier.Nullify = new_instancemethod(_StepShape.Handle_StepShape_PrecisionQualifier_Nullify, None, Handle_StepShape_PrecisionQualifier)
Handle_StepShape_PrecisionQualifier.IsNull = new_instancemethod(_StepShape.Handle_StepShape_PrecisionQualifier_IsNull, None, Handle_StepShape_PrecisionQualifier)
Handle_StepShape_PrecisionQualifier._get_reference = new_instancemethod(_StepShape.Handle_StepShape_PrecisionQualifier__get_reference, None, Handle_StepShape_PrecisionQualifier)
Handle_StepShape_PrecisionQualifier_swigregister = _StepShape.Handle_StepShape_PrecisionQualifier_swigregister
Handle_StepShape_PrecisionQualifier_swigregister(Handle_StepShape_PrecisionQualifier)

def Handle_StepShape_PrecisionQualifier_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_PrecisionQualifier const":
    return _StepShape.Handle_StepShape_PrecisionQualifier_DownCast(AnObject)
Handle_StepShape_PrecisionQualifier_DownCast = _StepShape.Handle_StepShape_PrecisionQualifier_DownCast

class StepShape_QualifiedRepresentationItem(OCC.StepRepr.StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_QualifiedRepresentationItem_swiginit(self, _StepShape.new_StepShape_QualifiedRepresentationItem(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_Init(self, *args)


    def Qualifiers(self, *args) -> "Handle_StepShape_HArray1OfValueQualifier":
        """
        :rtype: Handle_StepShape_HArray1OfValueQualifier

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_Qualifiers(self, *args)


    def NbQualifiers(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_NbQualifiers(self, *args)


    def SetQualifiers(self, *args) -> "void":
        """
        :param qualifiers:
        :type qualifiers: Handle_StepShape_HArray1OfValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_SetQualifiers(self, *args)


    def QualifiersValue(self, *args) -> "StepShape_ValueQualifier":
        """
        :param num:
        :type num: int
        :rtype: StepShape_ValueQualifier

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_QualifiersValue(self, *args)


    def SetQualifiersValue(self, *args) -> "void":
        """
        :param num:
        :type num: int
        :param aqualifier:
        :type aqualifier: StepShape_ValueQualifier &
        :rtype: None

        """
        return _StepShape.StepShape_QualifiedRepresentationItem_SetQualifiersValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_QualifiedRepresentationItem(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_QualifiedRepresentationItem
StepShape_QualifiedRepresentationItem.Init = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_Init, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem.Qualifiers = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_Qualifiers, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem.NbQualifiers = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_NbQualifiers, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem.SetQualifiers = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_SetQualifiers, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem.QualifiersValue = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_QualifiersValue, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem.SetQualifiersValue = new_instancemethod(_StepShape.StepShape_QualifiedRepresentationItem_SetQualifiersValue, None, StepShape_QualifiedRepresentationItem)
StepShape_QualifiedRepresentationItem_swigregister = _StepShape.StepShape_QualifiedRepresentationItem_swigregister
StepShape_QualifiedRepresentationItem_swigregister(StepShape_QualifiedRepresentationItem)

class Handle_StepShape_QualifiedRepresentationItem(OCC.StepRepr.Handle_StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_QualifiedRepresentationItem_swiginit(self, _StepShape.new_Handle_StepShape_QualifiedRepresentationItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_QualifiedRepresentationItem_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_QualifiedRepresentationItem
Handle_StepShape_QualifiedRepresentationItem.Nullify = new_instancemethod(_StepShape.Handle_StepShape_QualifiedRepresentationItem_Nullify, None, Handle_StepShape_QualifiedRepresentationItem)
Handle_StepShape_QualifiedRepresentationItem.IsNull = new_instancemethod(_StepShape.Handle_StepShape_QualifiedRepresentationItem_IsNull, None, Handle_StepShape_QualifiedRepresentationItem)
Handle_StepShape_QualifiedRepresentationItem._get_reference = new_instancemethod(_StepShape.Handle_StepShape_QualifiedRepresentationItem__get_reference, None, Handle_StepShape_QualifiedRepresentationItem)
Handle_StepShape_QualifiedRepresentationItem_swigregister = _StepShape.Handle_StepShape_QualifiedRepresentationItem_swigregister
Handle_StepShape_QualifiedRepresentationItem_swigregister(Handle_StepShape_QualifiedRepresentationItem)

def Handle_StepShape_QualifiedRepresentationItem_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_QualifiedRepresentationItem const":
    return _StepShape.Handle_StepShape_QualifiedRepresentationItem_DownCast(AnObject)
Handle_StepShape_QualifiedRepresentationItem_DownCast = _StepShape.Handle_StepShape_QualifiedRepresentationItem_DownCast

class StepShape_ReversibleTopologyItem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ReversibleTopologyItem SelectType

        :rtype: None

        """
        _StepShape.StepShape_ReversibleTopologyItem_swiginit(self, _StepShape.new_StepShape_ReversibleTopologyItem(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a ReversibleTopologyItem Kind Entity that is : 1 -> Edge 2 -> Path 3 -> Face 4 -> FaceBound 5 -> ClosedShell 6 -> OpenShell 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_ReversibleTopologyItem_CaseNum(self, *args)


    def Edge(self, *args) -> "Handle_StepShape_Edge":
        """
        * returns Value as a Edge (Null if another type)

        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Edge(self, *args)


    def Path(self, *args) -> "Handle_StepShape_Path":
        """
        * returns Value as a Path (Null if another type)

        :rtype: Handle_StepShape_Path

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Path(self, *args)


    def Face(self, *args) -> "Handle_StepShape_Face":
        """
        * returns Value as a Face (Null if another type)

        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_ReversibleTopologyItem_Face(self, *args)


    def FaceBound(self, *args) -> "Handle_StepShape_FaceBound":
        """
        * returns Value as a FaceBound (Null if another type)

        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_ReversibleTopologyItem_FaceBound(self, *args)


    def ClosedShell(self, *args) -> "Handle_StepShape_ClosedShell":
        """
        * returns Value as a ClosedShell (Null if another type)

        :rtype: Handle_StepShape_ClosedShell

        """
        return _StepShape.StepShape_ReversibleTopologyItem_ClosedShell(self, *args)


    def OpenShell(self, *args) -> "Handle_StepShape_OpenShell":
        """
        * returns Value as a OpenShell (Null if another type)

        :rtype: Handle_StepShape_OpenShell

        """
        return _StepShape.StepShape_ReversibleTopologyItem_OpenShell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ReversibleTopologyItem
StepShape_ReversibleTopologyItem.CaseNum = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_CaseNum, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.Edge = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_Edge, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.Path = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_Path, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.Face = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_Face, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.FaceBound = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_FaceBound, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.ClosedShell = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_ClosedShell, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem.OpenShell = new_instancemethod(_StepShape.StepShape_ReversibleTopologyItem_OpenShell, None, StepShape_ReversibleTopologyItem)
StepShape_ReversibleTopologyItem_swigregister = _StepShape.StepShape_ReversibleTopologyItem_swigregister
StepShape_ReversibleTopologyItem_swigregister(StepShape_ReversibleTopologyItem)

class StepShape_RightAngularWedge(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RightAngularWedge

        :rtype: None

        """
        _StepShape.StepShape_RightAngularWedge_swiginit(self, _StepShape.new_StepShape_RightAngularWedge(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :param aX:
        :type aX: float
        :param aY:
        :type aY: float
        :param aZ:
        :type aZ: float
        :param aLtx:
        :type aLtx: float
        :rtype: void

        """
        return _StepShape.StepShape_RightAngularWedge_Init(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis2Placement3d &
        :rtype: None

        """
        return _StepShape.StepShape_RightAngularWedge_SetPosition(self, *args)


    def Position(self, *args) -> "Handle_StepGeom_Axis2Placement3d":
        """
        :rtype: Handle_StepGeom_Axis2Placement3d

        """
        return _StepShape.StepShape_RightAngularWedge_Position(self, *args)


    def SetX(self, *args) -> "void":
        """
        :param aX:
        :type aX: float
        :rtype: None

        """
        return _StepShape.StepShape_RightAngularWedge_SetX(self, *args)


    def X(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightAngularWedge_X(self, *args)


    def SetY(self, *args) -> "void":
        """
        :param aY:
        :type aY: float
        :rtype: None

        """
        return _StepShape.StepShape_RightAngularWedge_SetY(self, *args)


    def Y(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightAngularWedge_Y(self, *args)


    def SetZ(self, *args) -> "void":
        """
        :param aZ:
        :type aZ: float
        :rtype: None

        """
        return _StepShape.StepShape_RightAngularWedge_SetZ(self, *args)


    def Z(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightAngularWedge_Z(self, *args)


    def SetLtx(self, *args) -> "void":
        """
        :param aLtx:
        :type aLtx: float
        :rtype: None

        """
        return _StepShape.StepShape_RightAngularWedge_SetLtx(self, *args)


    def Ltx(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightAngularWedge_Ltx(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_RightAngularWedge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightAngularWedge
StepShape_RightAngularWedge.Init = new_instancemethod(_StepShape.StepShape_RightAngularWedge_Init, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.SetPosition = new_instancemethod(_StepShape.StepShape_RightAngularWedge_SetPosition, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.Position = new_instancemethod(_StepShape.StepShape_RightAngularWedge_Position, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.SetX = new_instancemethod(_StepShape.StepShape_RightAngularWedge_SetX, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.X = new_instancemethod(_StepShape.StepShape_RightAngularWedge_X, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.SetY = new_instancemethod(_StepShape.StepShape_RightAngularWedge_SetY, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.Y = new_instancemethod(_StepShape.StepShape_RightAngularWedge_Y, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.SetZ = new_instancemethod(_StepShape.StepShape_RightAngularWedge_SetZ, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.Z = new_instancemethod(_StepShape.StepShape_RightAngularWedge_Z, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.SetLtx = new_instancemethod(_StepShape.StepShape_RightAngularWedge_SetLtx, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge.Ltx = new_instancemethod(_StepShape.StepShape_RightAngularWedge_Ltx, None, StepShape_RightAngularWedge)
StepShape_RightAngularWedge_swigregister = _StepShape.StepShape_RightAngularWedge_swigregister
StepShape_RightAngularWedge_swigregister(StepShape_RightAngularWedge)

class Handle_StepShape_RightAngularWedge(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_RightAngularWedge_swiginit(self, _StepShape.new_Handle_StepShape_RightAngularWedge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_RightAngularWedge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_RightAngularWedge
Handle_StepShape_RightAngularWedge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_RightAngularWedge_Nullify, None, Handle_StepShape_RightAngularWedge)
Handle_StepShape_RightAngularWedge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_RightAngularWedge_IsNull, None, Handle_StepShape_RightAngularWedge)
Handle_StepShape_RightAngularWedge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_RightAngularWedge__get_reference, None, Handle_StepShape_RightAngularWedge)
Handle_StepShape_RightAngularWedge_swigregister = _StepShape.Handle_StepShape_RightAngularWedge_swigregister
Handle_StepShape_RightAngularWedge_swigregister(Handle_StepShape_RightAngularWedge)

def Handle_StepShape_RightAngularWedge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_RightAngularWedge const":
    return _StepShape.Handle_StepShape_RightAngularWedge_DownCast(AnObject)
Handle_StepShape_RightAngularWedge_DownCast = _StepShape.Handle_StepShape_RightAngularWedge_DownCast

class StepShape_RightCircularCone(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RightCircularCone

        :rtype: None

        """
        _StepShape.StepShape_RightCircularCone_swiginit(self, _StepShape.new_StepShape_RightCircularCone(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :param aHeight:
        :type aHeight: float
        :param aRadius:
        :type aRadius: float
        :param aSemiAngle:
        :type aSemiAngle: float
        :rtype: void

        """
        return _StepShape.StepShape_RightCircularCone_Init(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCone_SetPosition(self, *args)


    def Position(self, *args) -> "Handle_StepGeom_Axis1Placement":
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepShape.StepShape_RightCircularCone_Position(self, *args)


    def SetHeight(self, *args) -> "void":
        """
        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCone_SetHeight(self, *args)


    def Height(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightCircularCone_Height(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCone_SetRadius(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightCircularCone_Radius(self, *args)


    def SetSemiAngle(self, *args) -> "void":
        """
        :param aSemiAngle:
        :type aSemiAngle: float
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCone_SetSemiAngle(self, *args)


    def SemiAngle(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightCircularCone_SemiAngle(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_RightCircularCone(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightCircularCone
StepShape_RightCircularCone.Init = new_instancemethod(_StepShape.StepShape_RightCircularCone_Init, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.SetPosition = new_instancemethod(_StepShape.StepShape_RightCircularCone_SetPosition, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.Position = new_instancemethod(_StepShape.StepShape_RightCircularCone_Position, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.SetHeight = new_instancemethod(_StepShape.StepShape_RightCircularCone_SetHeight, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.Height = new_instancemethod(_StepShape.StepShape_RightCircularCone_Height, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.SetRadius = new_instancemethod(_StepShape.StepShape_RightCircularCone_SetRadius, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.Radius = new_instancemethod(_StepShape.StepShape_RightCircularCone_Radius, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.SetSemiAngle = new_instancemethod(_StepShape.StepShape_RightCircularCone_SetSemiAngle, None, StepShape_RightCircularCone)
StepShape_RightCircularCone.SemiAngle = new_instancemethod(_StepShape.StepShape_RightCircularCone_SemiAngle, None, StepShape_RightCircularCone)
StepShape_RightCircularCone_swigregister = _StepShape.StepShape_RightCircularCone_swigregister
StepShape_RightCircularCone_swigregister(StepShape_RightCircularCone)

class Handle_StepShape_RightCircularCone(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_RightCircularCone_swiginit(self, _StepShape.new_Handle_StepShape_RightCircularCone(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_RightCircularCone_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_RightCircularCone
Handle_StepShape_RightCircularCone.Nullify = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCone_Nullify, None, Handle_StepShape_RightCircularCone)
Handle_StepShape_RightCircularCone.IsNull = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCone_IsNull, None, Handle_StepShape_RightCircularCone)
Handle_StepShape_RightCircularCone._get_reference = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCone__get_reference, None, Handle_StepShape_RightCircularCone)
Handle_StepShape_RightCircularCone_swigregister = _StepShape.Handle_StepShape_RightCircularCone_swigregister
Handle_StepShape_RightCircularCone_swigregister(Handle_StepShape_RightCircularCone)

def Handle_StepShape_RightCircularCone_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_RightCircularCone const":
    return _StepShape.Handle_StepShape_RightCircularCone_DownCast(AnObject)
Handle_StepShape_RightCircularCone_DownCast = _StepShape.Handle_StepShape_RightCircularCone_DownCast

class StepShape_RightCircularCylinder(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RightCircularCylinder

        :rtype: None

        """
        _StepShape.StepShape_RightCircularCylinder_swiginit(self, _StepShape.new_StepShape_RightCircularCylinder(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :param aHeight:
        :type aHeight: float
        :param aRadius:
        :type aRadius: float
        :rtype: void

        """
        return _StepShape.StepShape_RightCircularCylinder_Init(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetPosition(self, *args)


    def Position(self, *args) -> "Handle_StepGeom_Axis1Placement":
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepShape.StepShape_RightCircularCylinder_Position(self, *args)


    def SetHeight(self, *args) -> "void":
        """
        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetHeight(self, *args)


    def Height(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightCircularCylinder_Height(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepShape.StepShape_RightCircularCylinder_SetRadius(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RightCircularCylinder_Radius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_RightCircularCylinder(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RightCircularCylinder
StepShape_RightCircularCylinder.Init = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_Init, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.SetPosition = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_SetPosition, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.Position = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_Position, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.SetHeight = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_SetHeight, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.Height = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_Height, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.SetRadius = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_SetRadius, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder.Radius = new_instancemethod(_StepShape.StepShape_RightCircularCylinder_Radius, None, StepShape_RightCircularCylinder)
StepShape_RightCircularCylinder_swigregister = _StepShape.StepShape_RightCircularCylinder_swigregister
StepShape_RightCircularCylinder_swigregister(StepShape_RightCircularCylinder)

class Handle_StepShape_RightCircularCylinder(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_RightCircularCylinder_swiginit(self, _StepShape.new_Handle_StepShape_RightCircularCylinder(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_RightCircularCylinder_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_RightCircularCylinder
Handle_StepShape_RightCircularCylinder.Nullify = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCylinder_Nullify, None, Handle_StepShape_RightCircularCylinder)
Handle_StepShape_RightCircularCylinder.IsNull = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCylinder_IsNull, None, Handle_StepShape_RightCircularCylinder)
Handle_StepShape_RightCircularCylinder._get_reference = new_instancemethod(_StepShape.Handle_StepShape_RightCircularCylinder__get_reference, None, Handle_StepShape_RightCircularCylinder)
Handle_StepShape_RightCircularCylinder_swigregister = _StepShape.Handle_StepShape_RightCircularCylinder_swigregister
Handle_StepShape_RightCircularCylinder_swigregister(Handle_StepShape_RightCircularCylinder)

def Handle_StepShape_RightCircularCylinder_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_RightCircularCylinder const":
    return _StepShape.Handle_StepShape_RightCircularCylinder_DownCast(AnObject)
Handle_StepShape_RightCircularCylinder_DownCast = _StepShape.Handle_StepShape_RightCircularCylinder_DownCast

class StepShape_ShapeDefinitionRepresentation(OCC.StepRepr.StepRepr_PropertyDefinitionRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ShapeDefinitionRepresentation_swiginit(self, _StepShape.new_StepShape_ShapeDefinitionRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ShapeDefinitionRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeDefinitionRepresentation
StepShape_ShapeDefinitionRepresentation_swigregister = _StepShape.StepShape_ShapeDefinitionRepresentation_swigregister
StepShape_ShapeDefinitionRepresentation_swigregister(StepShape_ShapeDefinitionRepresentation)

class Handle_StepShape_ShapeDefinitionRepresentation(OCC.StepRepr.Handle_StepRepr_PropertyDefinitionRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ShapeDefinitionRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ShapeDefinitionRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ShapeDefinitionRepresentation
Handle_StepShape_ShapeDefinitionRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ShapeDefinitionRepresentation_Nullify, None, Handle_StepShape_ShapeDefinitionRepresentation)
Handle_StepShape_ShapeDefinitionRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ShapeDefinitionRepresentation_IsNull, None, Handle_StepShape_ShapeDefinitionRepresentation)
Handle_StepShape_ShapeDefinitionRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ShapeDefinitionRepresentation__get_reference, None, Handle_StepShape_ShapeDefinitionRepresentation)
Handle_StepShape_ShapeDefinitionRepresentation_swigregister = _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_swigregister
Handle_StepShape_ShapeDefinitionRepresentation_swigregister(Handle_StepShape_ShapeDefinitionRepresentation)

def Handle_StepShape_ShapeDefinitionRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ShapeDefinitionRepresentation const":
    return _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_DownCast(AnObject)
Handle_StepShape_ShapeDefinitionRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeDefinitionRepresentation_DownCast

class StepShape_ShapeRepresentation(OCC.StepRepr.StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_ShapeRepresentation_swiginit(self, _StepShape.new_StepShape_ShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeRepresentation
StepShape_ShapeRepresentation_swigregister = _StepShape.StepShape_ShapeRepresentation_swigregister
StepShape_ShapeRepresentation_swigregister(StepShape_ShapeRepresentation)

class Handle_StepShape_ShapeRepresentation(OCC.StepRepr.Handle_StepRepr_Representation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ShapeRepresentation
Handle_StepShape_ShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentation_Nullify, None, Handle_StepShape_ShapeRepresentation)
Handle_StepShape_ShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentation_IsNull, None, Handle_StepShape_ShapeRepresentation)
Handle_StepShape_ShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentation__get_reference, None, Handle_StepShape_ShapeRepresentation)
Handle_StepShape_ShapeRepresentation_swigregister = _StepShape.Handle_StepShape_ShapeRepresentation_swigregister
Handle_StepShape_ShapeRepresentation_swigregister(Handle_StepShape_ShapeRepresentation)

def Handle_StepShape_ShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ShapeRepresentation const":
    return _StepShape.Handle_StepShape_ShapeRepresentation_DownCast(AnObject)
Handle_StepShape_ShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeRepresentation_DownCast

class StepShape_Shell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Shell SelectType

        :rtype: None

        """
        _StepShape.StepShape_Shell_swiginit(self, _StepShape.new_StepShape_Shell(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a Shell Kind Entity that is : 1 -> OpenShell 2 -> ClosedShell 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_Shell_CaseNum(self, *args)


    def OpenShell(self, *args) -> "Handle_StepShape_OpenShell":
        """
        * returns Value as a OpenShell (Null if another type)

        :rtype: Handle_StepShape_OpenShell

        """
        return _StepShape.StepShape_Shell_OpenShell(self, *args)


    def ClosedShell(self, *args) -> "Handle_StepShape_ClosedShell":
        """
        * returns Value as a ClosedShell (Null if another type)

        :rtype: Handle_StepShape_ClosedShell

        """
        return _StepShape.StepShape_Shell_ClosedShell(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Shell
StepShape_Shell.CaseNum = new_instancemethod(_StepShape.StepShape_Shell_CaseNum, None, StepShape_Shell)
StepShape_Shell.OpenShell = new_instancemethod(_StepShape.StepShape_Shell_OpenShell, None, StepShape_Shell)
StepShape_Shell.ClosedShell = new_instancemethod(_StepShape.StepShape_Shell_ClosedShell, None, StepShape_Shell)
StepShape_Shell_swigregister = _StepShape.StepShape_Shell_swigregister
StepShape_Shell_swigregister(StepShape_Shell)

class StepShape_ShellBasedSurfaceModel(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ShellBasedSurfaceModel

        :rtype: None

        """
        _StepShape.StepShape_ShellBasedSurfaceModel_swiginit(self, _StepShape.new_StepShape_ShellBasedSurfaceModel(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSbsmBoundary:
        :type aSbsmBoundary: Handle_StepShape_HArray1OfShell &
        :rtype: void

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_Init(self, *args)


    def SetSbsmBoundary(self, *args) -> "void":
        """
        :param aSbsmBoundary:
        :type aSbsmBoundary: Handle_StepShape_HArray1OfShell &
        :rtype: None

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SetSbsmBoundary(self, *args)


    def SbsmBoundary(self, *args) -> "Handle_StepShape_HArray1OfShell":
        """
        :rtype: Handle_StepShape_HArray1OfShell

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundary(self, *args)


    def SbsmBoundaryValue(self, *args) -> "StepShape_Shell":
        """
        :param num:
        :type num: int
        :rtype: StepShape_Shell

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundaryValue(self, *args)


    def NbSbsmBoundary(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_ShellBasedSurfaceModel_NbSbsmBoundary(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ShellBasedSurfaceModel(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShellBasedSurfaceModel
StepShape_ShellBasedSurfaceModel.Init = new_instancemethod(_StepShape.StepShape_ShellBasedSurfaceModel_Init, None, StepShape_ShellBasedSurfaceModel)
StepShape_ShellBasedSurfaceModel.SetSbsmBoundary = new_instancemethod(_StepShape.StepShape_ShellBasedSurfaceModel_SetSbsmBoundary, None, StepShape_ShellBasedSurfaceModel)
StepShape_ShellBasedSurfaceModel.SbsmBoundary = new_instancemethod(_StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundary, None, StepShape_ShellBasedSurfaceModel)
StepShape_ShellBasedSurfaceModel.SbsmBoundaryValue = new_instancemethod(_StepShape.StepShape_ShellBasedSurfaceModel_SbsmBoundaryValue, None, StepShape_ShellBasedSurfaceModel)
StepShape_ShellBasedSurfaceModel.NbSbsmBoundary = new_instancemethod(_StepShape.StepShape_ShellBasedSurfaceModel_NbSbsmBoundary, None, StepShape_ShellBasedSurfaceModel)
StepShape_ShellBasedSurfaceModel_swigregister = _StepShape.StepShape_ShellBasedSurfaceModel_swigregister
StepShape_ShellBasedSurfaceModel_swigregister(StepShape_ShellBasedSurfaceModel)

class Handle_StepShape_ShellBasedSurfaceModel(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ShellBasedSurfaceModel_swiginit(self, _StepShape.new_Handle_StepShape_ShellBasedSurfaceModel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ShellBasedSurfaceModel_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ShellBasedSurfaceModel
Handle_StepShape_ShellBasedSurfaceModel.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ShellBasedSurfaceModel_Nullify, None, Handle_StepShape_ShellBasedSurfaceModel)
Handle_StepShape_ShellBasedSurfaceModel.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ShellBasedSurfaceModel_IsNull, None, Handle_StepShape_ShellBasedSurfaceModel)
Handle_StepShape_ShellBasedSurfaceModel._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ShellBasedSurfaceModel__get_reference, None, Handle_StepShape_ShellBasedSurfaceModel)
Handle_StepShape_ShellBasedSurfaceModel_swigregister = _StepShape.Handle_StepShape_ShellBasedSurfaceModel_swigregister
Handle_StepShape_ShellBasedSurfaceModel_swigregister(Handle_StepShape_ShellBasedSurfaceModel)

def Handle_StepShape_ShellBasedSurfaceModel_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ShellBasedSurfaceModel const":
    return _StepShape.Handle_StepShape_ShellBasedSurfaceModel_DownCast(AnObject)
Handle_StepShape_ShellBasedSurfaceModel_DownCast = _StepShape.Handle_StepShape_ShellBasedSurfaceModel_DownCast

class StepShape_SolidModel(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SolidModel

        :rtype: None

        """
        _StepShape.StepShape_SolidModel_swiginit(self, _StepShape.new_StepShape_SolidModel(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_SolidModel(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SolidModel
StepShape_SolidModel_swigregister = _StepShape.StepShape_SolidModel_swigregister
StepShape_SolidModel_swigregister(StepShape_SolidModel)

class Handle_StepShape_SolidModel(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_SolidModel_swiginit(self, _StepShape.new_Handle_StepShape_SolidModel(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_SolidModel_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_SolidModel
Handle_StepShape_SolidModel.Nullify = new_instancemethod(_StepShape.Handle_StepShape_SolidModel_Nullify, None, Handle_StepShape_SolidModel)
Handle_StepShape_SolidModel.IsNull = new_instancemethod(_StepShape.Handle_StepShape_SolidModel_IsNull, None, Handle_StepShape_SolidModel)
Handle_StepShape_SolidModel._get_reference = new_instancemethod(_StepShape.Handle_StepShape_SolidModel__get_reference, None, Handle_StepShape_SolidModel)
Handle_StepShape_SolidModel_swigregister = _StepShape.Handle_StepShape_SolidModel_swigregister
Handle_StepShape_SolidModel_swigregister(Handle_StepShape_SolidModel)

def Handle_StepShape_SolidModel_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_SolidModel const":
    return _StepShape.Handle_StepShape_SolidModel_DownCast(AnObject)
Handle_StepShape_SolidModel_DownCast = _StepShape.Handle_StepShape_SolidModel_DownCast

class StepShape_Sphere(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Sphere

        :rtype: None

        """
        _StepShape.StepShape_Sphere_swiginit(self, _StepShape.new_StepShape_Sphere(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aRadius:
        :type aRadius: float
        :param aCentre:
        :type aCentre: Handle_StepGeom_Point &
        :rtype: void

        """
        return _StepShape.StepShape_Sphere_Init(self, *args)


    def SetRadius(self, *args) -> "void":
        """
        :param aRadius:
        :type aRadius: float
        :rtype: None

        """
        return _StepShape.StepShape_Sphere_SetRadius(self, *args)


    def Radius(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Sphere_Radius(self, *args)


    def SetCentre(self, *args) -> "void":
        """
        :param aCentre:
        :type aCentre: Handle_StepGeom_Point &
        :rtype: None

        """
        return _StepShape.StepShape_Sphere_SetCentre(self, *args)


    def Centre(self, *args) -> "Handle_StepGeom_Point":
        """
        :rtype: Handle_StepGeom_Point

        """
        return _StepShape.StepShape_Sphere_Centre(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Sphere(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Sphere
StepShape_Sphere.Init = new_instancemethod(_StepShape.StepShape_Sphere_Init, None, StepShape_Sphere)
StepShape_Sphere.SetRadius = new_instancemethod(_StepShape.StepShape_Sphere_SetRadius, None, StepShape_Sphere)
StepShape_Sphere.Radius = new_instancemethod(_StepShape.StepShape_Sphere_Radius, None, StepShape_Sphere)
StepShape_Sphere.SetCentre = new_instancemethod(_StepShape.StepShape_Sphere_SetCentre, None, StepShape_Sphere)
StepShape_Sphere.Centre = new_instancemethod(_StepShape.StepShape_Sphere_Centre, None, StepShape_Sphere)
StepShape_Sphere_swigregister = _StepShape.StepShape_Sphere_swigregister
StepShape_Sphere_swigregister(StepShape_Sphere)

class Handle_StepShape_Sphere(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Sphere_swiginit(self, _StepShape.new_Handle_StepShape_Sphere(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Sphere_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Sphere
Handle_StepShape_Sphere.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Sphere_Nullify, None, Handle_StepShape_Sphere)
Handle_StepShape_Sphere.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Sphere_IsNull, None, Handle_StepShape_Sphere)
Handle_StepShape_Sphere._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Sphere__get_reference, None, Handle_StepShape_Sphere)
Handle_StepShape_Sphere_swigregister = _StepShape.Handle_StepShape_Sphere_swigregister
Handle_StepShape_Sphere_swigregister(Handle_StepShape_Sphere)

def Handle_StepShape_Sphere_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Sphere const":
    return _StepShape.Handle_StepShape_Sphere_DownCast(AnObject)
Handle_StepShape_Sphere_DownCast = _StepShape.Handle_StepShape_Sphere_DownCast

class StepShape_SurfaceModel(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SurfaceModel SelectType

        :rtype: None

        """
        _StepShape.StepShape_SurfaceModel_swiginit(self, _StepShape.new_StepShape_SurfaceModel(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a SurfaceModel Kind Entity that is : 1 -> ShellBasedSurfaceModel 2 -> FaceBasedSurfaceModel 0 else

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_SurfaceModel_CaseNum(self, *args)


    def ShellBasedSurfaceModel(self, *args) -> "Handle_StepShape_ShellBasedSurfaceModel":
        """
        * returns Value as a ShellBasedSurfaceModel (Null if another type)

        :rtype: Handle_StepShape_ShellBasedSurfaceModel

        """
        return _StepShape.StepShape_SurfaceModel_ShellBasedSurfaceModel(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SurfaceModel
StepShape_SurfaceModel.CaseNum = new_instancemethod(_StepShape.StepShape_SurfaceModel_CaseNum, None, StepShape_SurfaceModel)
StepShape_SurfaceModel.ShellBasedSurfaceModel = new_instancemethod(_StepShape.StepShape_SurfaceModel_ShellBasedSurfaceModel, None, StepShape_SurfaceModel)
StepShape_SurfaceModel_swigregister = _StepShape.StepShape_SurfaceModel_swigregister
StepShape_SurfaceModel_swigregister(StepShape_SurfaceModel)

class StepShape_ToleranceMethodDefinition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_ToleranceMethodDefinition_swiginit(self, _StepShape.new_StepShape_ToleranceMethodDefinition(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a kind of ValueQualifier Select Type : 1 -> ToleranceValue from StepShape 2 -> LimitsAndFits from StepShape

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_ToleranceMethodDefinition_CaseNum(self, *args)


    def ToleranceValue(self, *args) -> "Handle_StepShape_ToleranceValue":
        """
        * Returns Value as ToleranceValue

        :rtype: Handle_StepShape_ToleranceValue

        """
        return _StepShape.StepShape_ToleranceMethodDefinition_ToleranceValue(self, *args)


    def LimitsAndFits(self, *args) -> "Handle_StepShape_LimitsAndFits":
        """
        * Returns Value as LimitsAndFits

        :rtype: Handle_StepShape_LimitsAndFits

        """
        return _StepShape.StepShape_ToleranceMethodDefinition_LimitsAndFits(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ToleranceMethodDefinition
StepShape_ToleranceMethodDefinition.CaseNum = new_instancemethod(_StepShape.StepShape_ToleranceMethodDefinition_CaseNum, None, StepShape_ToleranceMethodDefinition)
StepShape_ToleranceMethodDefinition.ToleranceValue = new_instancemethod(_StepShape.StepShape_ToleranceMethodDefinition_ToleranceValue, None, StepShape_ToleranceMethodDefinition)
StepShape_ToleranceMethodDefinition.LimitsAndFits = new_instancemethod(_StepShape.StepShape_ToleranceMethodDefinition_LimitsAndFits, None, StepShape_ToleranceMethodDefinition)
StepShape_ToleranceMethodDefinition_swigregister = _StepShape.StepShape_ToleranceMethodDefinition_swigregister
StepShape_ToleranceMethodDefinition_swigregister(StepShape_ToleranceMethodDefinition)

class StepShape_ToleranceValue(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_ToleranceValue_swiginit(self, _StepShape.new_StepShape_ToleranceValue(*args))

    def Init(self, *args) -> "void":
        """
        :param lower_bound:
        :type lower_bound: Handle_StepBasic_MeasureWithUnit &
        :param upper_bound:
        :type upper_bound: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepShape.StepShape_ToleranceValue_Init(self, *args)


    def LowerBound(self, *args) -> "Handle_StepBasic_MeasureWithUnit":
        """
        :rtype: Handle_StepBasic_MeasureWithUnit

        """
        return _StepShape.StepShape_ToleranceValue_LowerBound(self, *args)


    def SetLowerBound(self, *args) -> "void":
        """
        :param lower_bound:
        :type lower_bound: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepShape.StepShape_ToleranceValue_SetLowerBound(self, *args)


    def UpperBound(self, *args) -> "Handle_StepBasic_MeasureWithUnit":
        """
        :rtype: Handle_StepBasic_MeasureWithUnit

        """
        return _StepShape.StepShape_ToleranceValue_UpperBound(self, *args)


    def SetUpperBound(self, *args) -> "void":
        """
        :param upper_bound:
        :type upper_bound: Handle_StepBasic_MeasureWithUnit &
        :rtype: None

        """
        return _StepShape.StepShape_ToleranceValue_SetUpperBound(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ToleranceValue(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ToleranceValue
StepShape_ToleranceValue.Init = new_instancemethod(_StepShape.StepShape_ToleranceValue_Init, None, StepShape_ToleranceValue)
StepShape_ToleranceValue.LowerBound = new_instancemethod(_StepShape.StepShape_ToleranceValue_LowerBound, None, StepShape_ToleranceValue)
StepShape_ToleranceValue.SetLowerBound = new_instancemethod(_StepShape.StepShape_ToleranceValue_SetLowerBound, None, StepShape_ToleranceValue)
StepShape_ToleranceValue.UpperBound = new_instancemethod(_StepShape.StepShape_ToleranceValue_UpperBound, None, StepShape_ToleranceValue)
StepShape_ToleranceValue.SetUpperBound = new_instancemethod(_StepShape.StepShape_ToleranceValue_SetUpperBound, None, StepShape_ToleranceValue)
StepShape_ToleranceValue_swigregister = _StepShape.StepShape_ToleranceValue_swigregister
StepShape_ToleranceValue_swigregister(StepShape_ToleranceValue)

class Handle_StepShape_ToleranceValue(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ToleranceValue_swiginit(self, _StepShape.new_Handle_StepShape_ToleranceValue(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ToleranceValue_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ToleranceValue
Handle_StepShape_ToleranceValue.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ToleranceValue_Nullify, None, Handle_StepShape_ToleranceValue)
Handle_StepShape_ToleranceValue.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ToleranceValue_IsNull, None, Handle_StepShape_ToleranceValue)
Handle_StepShape_ToleranceValue._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ToleranceValue__get_reference, None, Handle_StepShape_ToleranceValue)
Handle_StepShape_ToleranceValue_swigregister = _StepShape.Handle_StepShape_ToleranceValue_swigregister
Handle_StepShape_ToleranceValue_swigregister(Handle_StepShape_ToleranceValue)

def Handle_StepShape_ToleranceValue_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ToleranceValue const":
    return _StepShape.Handle_StepShape_ToleranceValue_DownCast(AnObject)
Handle_StepShape_ToleranceValue_DownCast = _StepShape.Handle_StepShape_ToleranceValue_DownCast

class StepShape_TopologicalRepresentationItem(OCC.StepRepr.StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TopologicalRepresentationItem

        :rtype: None

        """
        _StepShape.StepShape_TopologicalRepresentationItem_swiginit(self, _StepShape.new_StepShape_TopologicalRepresentationItem(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_TopologicalRepresentationItem(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TopologicalRepresentationItem
StepShape_TopologicalRepresentationItem_swigregister = _StepShape.StepShape_TopologicalRepresentationItem_swigregister
StepShape_TopologicalRepresentationItem_swigregister(StepShape_TopologicalRepresentationItem)

class Handle_StepShape_TopologicalRepresentationItem(OCC.StepRepr.Handle_StepRepr_RepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_TopologicalRepresentationItem_swiginit(self, _StepShape.new_Handle_StepShape_TopologicalRepresentationItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_TopologicalRepresentationItem_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_TopologicalRepresentationItem
Handle_StepShape_TopologicalRepresentationItem.Nullify = new_instancemethod(_StepShape.Handle_StepShape_TopologicalRepresentationItem_Nullify, None, Handle_StepShape_TopologicalRepresentationItem)
Handle_StepShape_TopologicalRepresentationItem.IsNull = new_instancemethod(_StepShape.Handle_StepShape_TopologicalRepresentationItem_IsNull, None, Handle_StepShape_TopologicalRepresentationItem)
Handle_StepShape_TopologicalRepresentationItem._get_reference = new_instancemethod(_StepShape.Handle_StepShape_TopologicalRepresentationItem__get_reference, None, Handle_StepShape_TopologicalRepresentationItem)
Handle_StepShape_TopologicalRepresentationItem_swigregister = _StepShape.Handle_StepShape_TopologicalRepresentationItem_swigregister
Handle_StepShape_TopologicalRepresentationItem_swigregister(Handle_StepShape_TopologicalRepresentationItem)

def Handle_StepShape_TopologicalRepresentationItem_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_TopologicalRepresentationItem const":
    return _StepShape.Handle_StepShape_TopologicalRepresentationItem_DownCast(AnObject)
Handle_StepShape_TopologicalRepresentationItem_DownCast = _StepShape.Handle_StepShape_TopologicalRepresentationItem_DownCast

class StepShape_Torus(OCC.StepGeom.StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Torus

        :rtype: None

        """
        _StepShape.StepShape_Torus_swiginit(self, _StepShape.new_StepShape_Torus(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :param aMajorRadius:
        :type aMajorRadius: float
        :param aMinorRadius:
        :type aMinorRadius: float
        :rtype: void

        """
        return _StepShape.StepShape_Torus_Init(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        :param aPosition:
        :type aPosition: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepShape.StepShape_Torus_SetPosition(self, *args)


    def Position(self, *args) -> "Handle_StepGeom_Axis1Placement":
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepShape.StepShape_Torus_Position(self, *args)


    def SetMajorRadius(self, *args) -> "void":
        """
        :param aMajorRadius:
        :type aMajorRadius: float
        :rtype: None

        """
        return _StepShape.StepShape_Torus_SetMajorRadius(self, *args)


    def MajorRadius(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Torus_MajorRadius(self, *args)


    def SetMinorRadius(self, *args) -> "void":
        """
        :param aMinorRadius:
        :type aMinorRadius: float
        :rtype: None

        """
        return _StepShape.StepShape_Torus_SetMinorRadius(self, *args)


    def MinorRadius(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_Torus_MinorRadius(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Torus(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Torus
StepShape_Torus.Init = new_instancemethod(_StepShape.StepShape_Torus_Init, None, StepShape_Torus)
StepShape_Torus.SetPosition = new_instancemethod(_StepShape.StepShape_Torus_SetPosition, None, StepShape_Torus)
StepShape_Torus.Position = new_instancemethod(_StepShape.StepShape_Torus_Position, None, StepShape_Torus)
StepShape_Torus.SetMajorRadius = new_instancemethod(_StepShape.StepShape_Torus_SetMajorRadius, None, StepShape_Torus)
StepShape_Torus.MajorRadius = new_instancemethod(_StepShape.StepShape_Torus_MajorRadius, None, StepShape_Torus)
StepShape_Torus.SetMinorRadius = new_instancemethod(_StepShape.StepShape_Torus_SetMinorRadius, None, StepShape_Torus)
StepShape_Torus.MinorRadius = new_instancemethod(_StepShape.StepShape_Torus_MinorRadius, None, StepShape_Torus)
StepShape_Torus_swigregister = _StepShape.StepShape_Torus_swigregister
StepShape_Torus_swigregister(StepShape_Torus)

class Handle_StepShape_Torus(OCC.StepGeom.Handle_StepGeom_GeometricRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Torus_swiginit(self, _StepShape.new_Handle_StepShape_Torus(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Torus_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Torus
Handle_StepShape_Torus.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Torus_Nullify, None, Handle_StepShape_Torus)
Handle_StepShape_Torus.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Torus_IsNull, None, Handle_StepShape_Torus)
Handle_StepShape_Torus._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Torus__get_reference, None, Handle_StepShape_Torus)
Handle_StepShape_Torus_swigregister = _StepShape.Handle_StepShape_Torus_swigregister
Handle_StepShape_Torus_swigregister(Handle_StepShape_Torus)

def Handle_StepShape_Torus_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Torus const":
    return _StepShape.Handle_StepShape_Torus_DownCast(AnObject)
Handle_StepShape_Torus_DownCast = _StepShape.Handle_StepShape_Torus_DownCast

class StepShape_TypeQualifier(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_TypeQualifier_swiginit(self, _StepShape.new_StepShape_TypeQualifier(*args))

    def Init(self, *args) -> "void":
        """
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_TypeQualifier_Init(self, *args)


    def Name(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _StepShape.StepShape_TypeQualifier_Name(self, *args)


    def SetName(self, *args) -> "void":
        """
        :param name:
        :type name: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _StepShape.StepShape_TypeQualifier_SetName(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_TypeQualifier(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TypeQualifier
StepShape_TypeQualifier.Init = new_instancemethod(_StepShape.StepShape_TypeQualifier_Init, None, StepShape_TypeQualifier)
StepShape_TypeQualifier.Name = new_instancemethod(_StepShape.StepShape_TypeQualifier_Name, None, StepShape_TypeQualifier)
StepShape_TypeQualifier.SetName = new_instancemethod(_StepShape.StepShape_TypeQualifier_SetName, None, StepShape_TypeQualifier)
StepShape_TypeQualifier_swigregister = _StepShape.StepShape_TypeQualifier_swigregister
StepShape_TypeQualifier_swigregister(StepShape_TypeQualifier)

class Handle_StepShape_TypeQualifier(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_TypeQualifier_swiginit(self, _StepShape.new_Handle_StepShape_TypeQualifier(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_TypeQualifier_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_TypeQualifier
Handle_StepShape_TypeQualifier.Nullify = new_instancemethod(_StepShape.Handle_StepShape_TypeQualifier_Nullify, None, Handle_StepShape_TypeQualifier)
Handle_StepShape_TypeQualifier.IsNull = new_instancemethod(_StepShape.Handle_StepShape_TypeQualifier_IsNull, None, Handle_StepShape_TypeQualifier)
Handle_StepShape_TypeQualifier._get_reference = new_instancemethod(_StepShape.Handle_StepShape_TypeQualifier__get_reference, None, Handle_StepShape_TypeQualifier)
Handle_StepShape_TypeQualifier_swigregister = _StepShape.Handle_StepShape_TypeQualifier_swigregister
Handle_StepShape_TypeQualifier_swigregister(Handle_StepShape_TypeQualifier)

def Handle_StepShape_TypeQualifier_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_TypeQualifier const":
    return _StepShape.Handle_StepShape_TypeQualifier_DownCast(AnObject)
Handle_StepShape_TypeQualifier_DownCast = _StepShape.Handle_StepShape_TypeQualifier_DownCast

class StepShape_ValueQualifier(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StepShape.StepShape_ValueQualifier_swiginit(self, _StepShape.new_StepShape_ValueQualifier(*args))

    def CaseNum(self, *args) -> "Standard_Integer":
        """
        * Recognizes a kind of ValueQualifier Select Type : 1 -> PrecisionQualifier from StepShape 2 -> TypeQualifier from StepShape 3 -> UnceraintyQualifier .. not yet implemented

        :param ent:
        :type ent: Handle_Standard_Transient &
        :rtype: int

        """
        return _StepShape.StepShape_ValueQualifier_CaseNum(self, *args)


    def PrecisionQualifier(self, *args) -> "Handle_StepShape_PrecisionQualifier":
        """
        * Returns Value as PrecisionQualifier

        :rtype: Handle_StepShape_PrecisionQualifier

        """
        return _StepShape.StepShape_ValueQualifier_PrecisionQualifier(self, *args)


    def TypeQualifier(self, *args) -> "Handle_StepShape_TypeQualifier":
        """
        * Returns Value as TypeQualifier

        :rtype: Handle_StepShape_TypeQualifier

        """
        return _StepShape.StepShape_ValueQualifier_TypeQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ValueQualifier
StepShape_ValueQualifier.CaseNum = new_instancemethod(_StepShape.StepShape_ValueQualifier_CaseNum, None, StepShape_ValueQualifier)
StepShape_ValueQualifier.PrecisionQualifier = new_instancemethod(_StepShape.StepShape_ValueQualifier_PrecisionQualifier, None, StepShape_ValueQualifier)
StepShape_ValueQualifier.TypeQualifier = new_instancemethod(_StepShape.StepShape_ValueQualifier_TypeQualifier, None, StepShape_ValueQualifier)
StepShape_ValueQualifier_swigregister = _StepShape.StepShape_ValueQualifier_swigregister
StepShape_ValueQualifier_swigregister(StepShape_ValueQualifier)

class StepShape_AdvancedBrepShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a AdvancedBrepShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_AdvancedBrepShapeRepresentation_swiginit(self, _StepShape.new_StepShape_AdvancedBrepShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_AdvancedBrepShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AdvancedBrepShapeRepresentation
StepShape_AdvancedBrepShapeRepresentation_swigregister = _StepShape.StepShape_AdvancedBrepShapeRepresentation_swigregister
StepShape_AdvancedBrepShapeRepresentation_swigregister(StepShape_AdvancedBrepShapeRepresentation)

class Handle_StepShape_AdvancedBrepShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_AdvancedBrepShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_AdvancedBrepShapeRepresentation
Handle_StepShape_AdvancedBrepShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_Nullify, None, Handle_StepShape_AdvancedBrepShapeRepresentation)
Handle_StepShape_AdvancedBrepShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_IsNull, None, Handle_StepShape_AdvancedBrepShapeRepresentation)
Handle_StepShape_AdvancedBrepShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation__get_reference, None, Handle_StepShape_AdvancedBrepShapeRepresentation)
Handle_StepShape_AdvancedBrepShapeRepresentation_swigregister = _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_swigregister
Handle_StepShape_AdvancedBrepShapeRepresentation_swigregister(Handle_StepShape_AdvancedBrepShapeRepresentation)

def Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_AdvancedBrepShapeRepresentation const":
    return _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast(AnObject)
Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast = _StepShape.Handle_StepShape_AdvancedBrepShapeRepresentation_DownCast

class StepShape_AngularLocation(StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_AngularLocation_swiginit(self, _StepShape.new_StepShape_AngularLocation(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aShapeAspectRelationship_Name:
        :type aShapeAspectRelationship_Name: Handle_TCollection_HAsciiString &
        :param hasShapeAspectRelationship_Description:
        :type hasShapeAspectRelationship_Description: bool
        :param aShapeAspectRelationship_Description:
        :type aShapeAspectRelationship_Description: Handle_TCollection_HAsciiString &
        :param aShapeAspectRelationship_RelatingShapeAspect:
        :type aShapeAspectRelationship_RelatingShapeAspect: Handle_StepRepr_ShapeAspect &
        :param aShapeAspectRelationship_RelatedShapeAspect:
        :type aShapeAspectRelationship_RelatedShapeAspect: Handle_StepRepr_ShapeAspect &
        :param aAngleSelection:
        :type aAngleSelection: StepShape_AngleRelator
        :rtype: None

        """
        return _StepShape.StepShape_AngularLocation_Init(self, *args)


    def AngleSelection(self, *args) -> "StepShape_AngleRelator":
        """
        * Returns field AngleSelection

        :rtype: StepShape_AngleRelator

        """
        return _StepShape.StepShape_AngularLocation_AngleSelection(self, *args)


    def SetAngleSelection(self, *args) -> "void":
        """
        * Set field AngleSelection

        :param AngleSelection:
        :type AngleSelection: StepShape_AngleRelator
        :rtype: None

        """
        return _StepShape.StepShape_AngularLocation_SetAngleSelection(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_AngularLocation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AngularLocation
StepShape_AngularLocation.Init = new_instancemethod(_StepShape.StepShape_AngularLocation_Init, None, StepShape_AngularLocation)
StepShape_AngularLocation.AngleSelection = new_instancemethod(_StepShape.StepShape_AngularLocation_AngleSelection, None, StepShape_AngularLocation)
StepShape_AngularLocation.SetAngleSelection = new_instancemethod(_StepShape.StepShape_AngularLocation_SetAngleSelection, None, StepShape_AngularLocation)
StepShape_AngularLocation_swigregister = _StepShape.StepShape_AngularLocation_swigregister
StepShape_AngularLocation_swigregister(StepShape_AngularLocation)

class Handle_StepShape_AngularLocation(Handle_StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_AngularLocation_swiginit(self, _StepShape.new_Handle_StepShape_AngularLocation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_AngularLocation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_AngularLocation
Handle_StepShape_AngularLocation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_AngularLocation_Nullify, None, Handle_StepShape_AngularLocation)
Handle_StepShape_AngularLocation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_AngularLocation_IsNull, None, Handle_StepShape_AngularLocation)
Handle_StepShape_AngularLocation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_AngularLocation__get_reference, None, Handle_StepShape_AngularLocation)
Handle_StepShape_AngularLocation_swigregister = _StepShape.Handle_StepShape_AngularLocation_swigregister
Handle_StepShape_AngularLocation_swigregister(Handle_StepShape_AngularLocation)

def Handle_StepShape_AngularLocation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_AngularLocation const":
    return _StepShape.Handle_StepShape_AngularLocation_DownCast(AnObject)
Handle_StepShape_AngularLocation_DownCast = _StepShape.Handle_StepShape_AngularLocation_DownCast

class StepShape_AngularSize(StepShape_DimensionalSize):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_AngularSize_swiginit(self, _StepShape.new_StepShape_AngularSize(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aDimensionalSize_AppliesTo:
        :type aDimensionalSize_AppliesTo: Handle_StepRepr_ShapeAspect &
        :param aDimensionalSize_Name:
        :type aDimensionalSize_Name: Handle_TCollection_HAsciiString &
        :param aAngleSelection:
        :type aAngleSelection: StepShape_AngleRelator
        :rtype: None

        """
        return _StepShape.StepShape_AngularSize_Init(self, *args)


    def AngleSelection(self, *args) -> "StepShape_AngleRelator":
        """
        * Returns field AngleSelection

        :rtype: StepShape_AngleRelator

        """
        return _StepShape.StepShape_AngularSize_AngleSelection(self, *args)


    def SetAngleSelection(self, *args) -> "void":
        """
        * Set field AngleSelection

        :param AngleSelection:
        :type AngleSelection: StepShape_AngleRelator
        :rtype: None

        """
        return _StepShape.StepShape_AngularSize_SetAngleSelection(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_AngularSize(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AngularSize
StepShape_AngularSize.Init = new_instancemethod(_StepShape.StepShape_AngularSize_Init, None, StepShape_AngularSize)
StepShape_AngularSize.AngleSelection = new_instancemethod(_StepShape.StepShape_AngularSize_AngleSelection, None, StepShape_AngularSize)
StepShape_AngularSize.SetAngleSelection = new_instancemethod(_StepShape.StepShape_AngularSize_SetAngleSelection, None, StepShape_AngularSize)
StepShape_AngularSize_swigregister = _StepShape.StepShape_AngularSize_swigregister
StepShape_AngularSize_swigregister(StepShape_AngularSize)

class Handle_StepShape_AngularSize(Handle_StepShape_DimensionalSize):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_AngularSize_swiginit(self, _StepShape.new_Handle_StepShape_AngularSize(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_AngularSize_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_AngularSize
Handle_StepShape_AngularSize.Nullify = new_instancemethod(_StepShape.Handle_StepShape_AngularSize_Nullify, None, Handle_StepShape_AngularSize)
Handle_StepShape_AngularSize.IsNull = new_instancemethod(_StepShape.Handle_StepShape_AngularSize_IsNull, None, Handle_StepShape_AngularSize)
Handle_StepShape_AngularSize._get_reference = new_instancemethod(_StepShape.Handle_StepShape_AngularSize__get_reference, None, Handle_StepShape_AngularSize)
Handle_StepShape_AngularSize_swigregister = _StepShape.Handle_StepShape_AngularSize_swigregister
Handle_StepShape_AngularSize_swigregister(Handle_StepShape_AngularSize)

def Handle_StepShape_AngularSize_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_AngularSize const":
    return _StepShape.Handle_StepShape_AngularSize_DownCast(AnObject)
Handle_StepShape_AngularSize_DownCast = _StepShape.Handle_StepShape_AngularSize_DownCast

class StepShape_BoxedHalfSpace(StepShape_HalfSpaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BoxedHalfSpace

        :rtype: None

        """
        _StepShape.StepShape_BoxedHalfSpace_swiginit(self, _StepShape.new_StepShape_BoxedHalfSpace(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBaseSurface:
        :type aBaseSurface: Handle_StepGeom_Surface &
        :param aAgreementFlag:
        :type aAgreementFlag: bool
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBaseSurface:
        :type aBaseSurface: Handle_StepGeom_Surface &
        :param aAgreementFlag:
        :type aAgreementFlag: bool
        :param aEnclosure:
        :type aEnclosure: Handle_StepShape_BoxDomain &
        :rtype: void

        """
        return _StepShape.StepShape_BoxedHalfSpace_Init(self, *args)


    def SetEnclosure(self, *args) -> "void":
        """
        :param aEnclosure:
        :type aEnclosure: Handle_StepShape_BoxDomain &
        :rtype: None

        """
        return _StepShape.StepShape_BoxedHalfSpace_SetEnclosure(self, *args)


    def Enclosure(self, *args) -> "Handle_StepShape_BoxDomain":
        """
        :rtype: Handle_StepShape_BoxDomain

        """
        return _StepShape.StepShape_BoxedHalfSpace_Enclosure(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_BoxedHalfSpace(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BoxedHalfSpace
StepShape_BoxedHalfSpace.Init = new_instancemethod(_StepShape.StepShape_BoxedHalfSpace_Init, None, StepShape_BoxedHalfSpace)
StepShape_BoxedHalfSpace.SetEnclosure = new_instancemethod(_StepShape.StepShape_BoxedHalfSpace_SetEnclosure, None, StepShape_BoxedHalfSpace)
StepShape_BoxedHalfSpace.Enclosure = new_instancemethod(_StepShape.StepShape_BoxedHalfSpace_Enclosure, None, StepShape_BoxedHalfSpace)
StepShape_BoxedHalfSpace_swigregister = _StepShape.StepShape_BoxedHalfSpace_swigregister
StepShape_BoxedHalfSpace_swigregister(StepShape_BoxedHalfSpace)

class Handle_StepShape_BoxedHalfSpace(Handle_StepShape_HalfSpaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_BoxedHalfSpace_swiginit(self, _StepShape.new_Handle_StepShape_BoxedHalfSpace(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_BoxedHalfSpace_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_BoxedHalfSpace
Handle_StepShape_BoxedHalfSpace.Nullify = new_instancemethod(_StepShape.Handle_StepShape_BoxedHalfSpace_Nullify, None, Handle_StepShape_BoxedHalfSpace)
Handle_StepShape_BoxedHalfSpace.IsNull = new_instancemethod(_StepShape.Handle_StepShape_BoxedHalfSpace_IsNull, None, Handle_StepShape_BoxedHalfSpace)
Handle_StepShape_BoxedHalfSpace._get_reference = new_instancemethod(_StepShape.Handle_StepShape_BoxedHalfSpace__get_reference, None, Handle_StepShape_BoxedHalfSpace)
Handle_StepShape_BoxedHalfSpace_swigregister = _StepShape.Handle_StepShape_BoxedHalfSpace_swigregister
Handle_StepShape_BoxedHalfSpace_swigregister(Handle_StepShape_BoxedHalfSpace)

def Handle_StepShape_BoxedHalfSpace_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_BoxedHalfSpace const":
    return _StepShape.Handle_StepShape_BoxedHalfSpace_DownCast(AnObject)
Handle_StepShape_BoxedHalfSpace_DownCast = _StepShape.Handle_StepShape_BoxedHalfSpace_DownCast

class StepShape_CompoundShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_CompoundShapeRepresentation_swiginit(self, _StepShape.new_StepShape_CompoundShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_CompoundShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CompoundShapeRepresentation
StepShape_CompoundShapeRepresentation_swigregister = _StepShape.StepShape_CompoundShapeRepresentation_swigregister
StepShape_CompoundShapeRepresentation_swigregister(StepShape_CompoundShapeRepresentation)

class Handle_StepShape_CompoundShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_CompoundShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_CompoundShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_CompoundShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_CompoundShapeRepresentation
Handle_StepShape_CompoundShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_CompoundShapeRepresentation_Nullify, None, Handle_StepShape_CompoundShapeRepresentation)
Handle_StepShape_CompoundShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_CompoundShapeRepresentation_IsNull, None, Handle_StepShape_CompoundShapeRepresentation)
Handle_StepShape_CompoundShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_CompoundShapeRepresentation__get_reference, None, Handle_StepShape_CompoundShapeRepresentation)
Handle_StepShape_CompoundShapeRepresentation_swigregister = _StepShape.Handle_StepShape_CompoundShapeRepresentation_swigregister
Handle_StepShape_CompoundShapeRepresentation_swigregister(Handle_StepShape_CompoundShapeRepresentation)

def Handle_StepShape_CompoundShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_CompoundShapeRepresentation const":
    return _StepShape.Handle_StepShape_CompoundShapeRepresentation_DownCast(AnObject)
Handle_StepShape_CompoundShapeRepresentation_DownCast = _StepShape.Handle_StepShape_CompoundShapeRepresentation_DownCast

class StepShape_ConnectedEdgeSet(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ConnectedEdgeSet_swiginit(self, _StepShape.new_StepShape_ConnectedEdgeSet(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aCesEdges:
        :type aCesEdges: Handle_StepShape_HArray1OfEdge &
        :rtype: None

        """
        return _StepShape.StepShape_ConnectedEdgeSet_Init(self, *args)


    def CesEdges(self, *args) -> "Handle_StepShape_HArray1OfEdge":
        """
        * Returns field CesEdges

        :rtype: Handle_StepShape_HArray1OfEdge

        """
        return _StepShape.StepShape_ConnectedEdgeSet_CesEdges(self, *args)


    def SetCesEdges(self, *args) -> "void":
        """
        * Set field CesEdges

        :param CesEdges:
        :type CesEdges: Handle_StepShape_HArray1OfEdge &
        :rtype: None

        """
        return _StepShape.StepShape_ConnectedEdgeSet_SetCesEdges(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ConnectedEdgeSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedEdgeSet
StepShape_ConnectedEdgeSet.Init = new_instancemethod(_StepShape.StepShape_ConnectedEdgeSet_Init, None, StepShape_ConnectedEdgeSet)
StepShape_ConnectedEdgeSet.CesEdges = new_instancemethod(_StepShape.StepShape_ConnectedEdgeSet_CesEdges, None, StepShape_ConnectedEdgeSet)
StepShape_ConnectedEdgeSet.SetCesEdges = new_instancemethod(_StepShape.StepShape_ConnectedEdgeSet_SetCesEdges, None, StepShape_ConnectedEdgeSet)
StepShape_ConnectedEdgeSet_swigregister = _StepShape.StepShape_ConnectedEdgeSet_swigregister
StepShape_ConnectedEdgeSet_swigregister(StepShape_ConnectedEdgeSet)

class Handle_StepShape_ConnectedEdgeSet(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ConnectedEdgeSet_swiginit(self, _StepShape.new_Handle_StepShape_ConnectedEdgeSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ConnectedEdgeSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ConnectedEdgeSet
Handle_StepShape_ConnectedEdgeSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ConnectedEdgeSet_Nullify, None, Handle_StepShape_ConnectedEdgeSet)
Handle_StepShape_ConnectedEdgeSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ConnectedEdgeSet_IsNull, None, Handle_StepShape_ConnectedEdgeSet)
Handle_StepShape_ConnectedEdgeSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ConnectedEdgeSet__get_reference, None, Handle_StepShape_ConnectedEdgeSet)
Handle_StepShape_ConnectedEdgeSet_swigregister = _StepShape.Handle_StepShape_ConnectedEdgeSet_swigregister
Handle_StepShape_ConnectedEdgeSet_swigregister(Handle_StepShape_ConnectedEdgeSet)

def Handle_StepShape_ConnectedEdgeSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ConnectedEdgeSet const":
    return _StepShape.Handle_StepShape_ConnectedEdgeSet_DownCast(AnObject)
Handle_StepShape_ConnectedEdgeSet_DownCast = _StepShape.Handle_StepShape_ConnectedEdgeSet_DownCast

class StepShape_ConnectedFaceSet(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ConnectedFaceSet

        :rtype: None

        """
        _StepShape.StepShape_ConnectedFaceSet_swiginit(self, _StepShape.new_StepShape_ConnectedFaceSet(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aCfsFaces:
        :type aCfsFaces: Handle_StepShape_HArray1OfFace &
        :rtype: void

        """
        return _StepShape.StepShape_ConnectedFaceSet_Init(self, *args)


    def SetCfsFaces(self, *args) -> "void":
        """
        :param aCfsFaces:
        :type aCfsFaces: Handle_StepShape_HArray1OfFace &
        :rtype: void

        """
        return _StepShape.StepShape_ConnectedFaceSet_SetCfsFaces(self, *args)


    def CfsFaces(self, *args) -> "Handle_StepShape_HArray1OfFace":
        """
        :rtype: Handle_StepShape_HArray1OfFace

        """
        return _StepShape.StepShape_ConnectedFaceSet_CfsFaces(self, *args)


    def CfsFacesValue(self, *args) -> "Handle_StepShape_Face":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_ConnectedFaceSet_CfsFacesValue(self, *args)


    def NbCfsFaces(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_ConnectedFaceSet_NbCfsFaces(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ConnectedFaceSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceSet
StepShape_ConnectedFaceSet.Init = new_instancemethod(_StepShape.StepShape_ConnectedFaceSet_Init, None, StepShape_ConnectedFaceSet)
StepShape_ConnectedFaceSet.SetCfsFaces = new_instancemethod(_StepShape.StepShape_ConnectedFaceSet_SetCfsFaces, None, StepShape_ConnectedFaceSet)
StepShape_ConnectedFaceSet.CfsFaces = new_instancemethod(_StepShape.StepShape_ConnectedFaceSet_CfsFaces, None, StepShape_ConnectedFaceSet)
StepShape_ConnectedFaceSet.CfsFacesValue = new_instancemethod(_StepShape.StepShape_ConnectedFaceSet_CfsFacesValue, None, StepShape_ConnectedFaceSet)
StepShape_ConnectedFaceSet.NbCfsFaces = new_instancemethod(_StepShape.StepShape_ConnectedFaceSet_NbCfsFaces, None, StepShape_ConnectedFaceSet)
StepShape_ConnectedFaceSet_swigregister = _StepShape.StepShape_ConnectedFaceSet_swigregister
StepShape_ConnectedFaceSet_swigregister(StepShape_ConnectedFaceSet)

class Handle_StepShape_ConnectedFaceSet(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ConnectedFaceSet_swiginit(self, _StepShape.new_Handle_StepShape_ConnectedFaceSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ConnectedFaceSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ConnectedFaceSet
Handle_StepShape_ConnectedFaceSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSet_Nullify, None, Handle_StepShape_ConnectedFaceSet)
Handle_StepShape_ConnectedFaceSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSet_IsNull, None, Handle_StepShape_ConnectedFaceSet)
Handle_StepShape_ConnectedFaceSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSet__get_reference, None, Handle_StepShape_ConnectedFaceSet)
Handle_StepShape_ConnectedFaceSet_swigregister = _StepShape.Handle_StepShape_ConnectedFaceSet_swigregister
Handle_StepShape_ConnectedFaceSet_swigregister(Handle_StepShape_ConnectedFaceSet)

def Handle_StepShape_ConnectedFaceSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ConnectedFaceSet const":
    return _StepShape.Handle_StepShape_ConnectedFaceSet_DownCast(AnObject)
Handle_StepShape_ConnectedFaceSet_DownCast = _StepShape.Handle_StepShape_ConnectedFaceSet_DownCast

class StepShape_CsgShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CsgShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_CsgShapeRepresentation_swiginit(self, _StepShape.new_StepShape_CsgShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_CsgShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgShapeRepresentation
StepShape_CsgShapeRepresentation_swigregister = _StepShape.StepShape_CsgShapeRepresentation_swigregister
StepShape_CsgShapeRepresentation_swigregister(StepShape_CsgShapeRepresentation)

class Handle_StepShape_CsgShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_CsgShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_CsgShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_CsgShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_CsgShapeRepresentation
Handle_StepShape_CsgShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_CsgShapeRepresentation_Nullify, None, Handle_StepShape_CsgShapeRepresentation)
Handle_StepShape_CsgShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_CsgShapeRepresentation_IsNull, None, Handle_StepShape_CsgShapeRepresentation)
Handle_StepShape_CsgShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_CsgShapeRepresentation__get_reference, None, Handle_StepShape_CsgShapeRepresentation)
Handle_StepShape_CsgShapeRepresentation_swigregister = _StepShape.Handle_StepShape_CsgShapeRepresentation_swigregister
Handle_StepShape_CsgShapeRepresentation_swigregister(Handle_StepShape_CsgShapeRepresentation)

def Handle_StepShape_CsgShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_CsgShapeRepresentation const":
    return _StepShape.Handle_StepShape_CsgShapeRepresentation_DownCast(AnObject)
Handle_StepShape_CsgShapeRepresentation_DownCast = _StepShape.Handle_StepShape_CsgShapeRepresentation_DownCast

class StepShape_CsgSolid(StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a CsgSolid

        :rtype: None

        """
        _StepShape.StepShape_CsgSolid_swiginit(self, _StepShape.new_StepShape_CsgSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aTreeRootExpression:
        :type aTreeRootExpression: StepShape_CsgSelect &
        :rtype: void

        """
        return _StepShape.StepShape_CsgSolid_Init(self, *args)


    def SetTreeRootExpression(self, *args) -> "void":
        """
        :param aTreeRootExpression:
        :type aTreeRootExpression: StepShape_CsgSelect &
        :rtype: None

        """
        return _StepShape.StepShape_CsgSolid_SetTreeRootExpression(self, *args)


    def TreeRootExpression(self, *args) -> "StepShape_CsgSelect":
        """
        :rtype: StepShape_CsgSelect

        """
        return _StepShape.StepShape_CsgSolid_TreeRootExpression(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_CsgSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_CsgSolid
StepShape_CsgSolid.Init = new_instancemethod(_StepShape.StepShape_CsgSolid_Init, None, StepShape_CsgSolid)
StepShape_CsgSolid.SetTreeRootExpression = new_instancemethod(_StepShape.StepShape_CsgSolid_SetTreeRootExpression, None, StepShape_CsgSolid)
StepShape_CsgSolid.TreeRootExpression = new_instancemethod(_StepShape.StepShape_CsgSolid_TreeRootExpression, None, StepShape_CsgSolid)
StepShape_CsgSolid_swigregister = _StepShape.StepShape_CsgSolid_swigregister
StepShape_CsgSolid_swigregister(StepShape_CsgSolid)

class Handle_StepShape_CsgSolid(Handle_StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_CsgSolid_swiginit(self, _StepShape.new_Handle_StepShape_CsgSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_CsgSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_CsgSolid
Handle_StepShape_CsgSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_CsgSolid_Nullify, None, Handle_StepShape_CsgSolid)
Handle_StepShape_CsgSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_CsgSolid_IsNull, None, Handle_StepShape_CsgSolid)
Handle_StepShape_CsgSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_CsgSolid__get_reference, None, Handle_StepShape_CsgSolid)
Handle_StepShape_CsgSolid_swigregister = _StepShape.Handle_StepShape_CsgSolid_swigregister
Handle_StepShape_CsgSolid_swigregister(Handle_StepShape_CsgSolid)

def Handle_StepShape_CsgSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_CsgSolid const":
    return _StepShape.Handle_StepShape_CsgSolid_DownCast(AnObject)
Handle_StepShape_CsgSolid_DownCast = _StepShape.Handle_StepShape_CsgSolid_DownCast

class StepShape_DimensionalLocationWithPath(StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalLocationWithPath_swiginit(self, _StepShape.new_StepShape_DimensionalLocationWithPath(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aShapeAspectRelationship_Name:
        :type aShapeAspectRelationship_Name: Handle_TCollection_HAsciiString &
        :param hasShapeAspectRelationship_Description:
        :type hasShapeAspectRelationship_Description: bool
        :param aShapeAspectRelationship_Description:
        :type aShapeAspectRelationship_Description: Handle_TCollection_HAsciiString &
        :param aShapeAspectRelationship_RelatingShapeAspect:
        :type aShapeAspectRelationship_RelatingShapeAspect: Handle_StepRepr_ShapeAspect &
        :param aShapeAspectRelationship_RelatedShapeAspect:
        :type aShapeAspectRelationship_RelatedShapeAspect: Handle_StepRepr_ShapeAspect &
        :param aPath:
        :type aPath: Handle_StepRepr_ShapeAspect &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_Init(self, *args)


    def Path(self, *args) -> "Handle_StepRepr_ShapeAspect":
        """
        * Returns field Path

        :rtype: Handle_StepRepr_ShapeAspect

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_Path(self, *args)


    def SetPath(self, *args) -> "void":
        """
        * Set field Path

        :param Path:
        :type Path: Handle_StepRepr_ShapeAspect &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalLocationWithPath_SetPath(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DimensionalLocationWithPath(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalLocationWithPath
StepShape_DimensionalLocationWithPath.Init = new_instancemethod(_StepShape.StepShape_DimensionalLocationWithPath_Init, None, StepShape_DimensionalLocationWithPath)
StepShape_DimensionalLocationWithPath.Path = new_instancemethod(_StepShape.StepShape_DimensionalLocationWithPath_Path, None, StepShape_DimensionalLocationWithPath)
StepShape_DimensionalLocationWithPath.SetPath = new_instancemethod(_StepShape.StepShape_DimensionalLocationWithPath_SetPath, None, StepShape_DimensionalLocationWithPath)
StepShape_DimensionalLocationWithPath_swigregister = _StepShape.StepShape_DimensionalLocationWithPath_swigregister
StepShape_DimensionalLocationWithPath_swigregister(StepShape_DimensionalLocationWithPath)

class Handle_StepShape_DimensionalLocationWithPath(Handle_StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DimensionalLocationWithPath_swiginit(self, _StepShape.new_Handle_StepShape_DimensionalLocationWithPath(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DimensionalLocationWithPath_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DimensionalLocationWithPath
Handle_StepShape_DimensionalLocationWithPath.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocationWithPath_Nullify, None, Handle_StepShape_DimensionalLocationWithPath)
Handle_StepShape_DimensionalLocationWithPath.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocationWithPath_IsNull, None, Handle_StepShape_DimensionalLocationWithPath)
Handle_StepShape_DimensionalLocationWithPath._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DimensionalLocationWithPath__get_reference, None, Handle_StepShape_DimensionalLocationWithPath)
Handle_StepShape_DimensionalLocationWithPath_swigregister = _StepShape.Handle_StepShape_DimensionalLocationWithPath_swigregister
Handle_StepShape_DimensionalLocationWithPath_swigregister(Handle_StepShape_DimensionalLocationWithPath)

def Handle_StepShape_DimensionalLocationWithPath_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DimensionalLocationWithPath const":
    return _StepShape.Handle_StepShape_DimensionalLocationWithPath_DownCast(AnObject)
Handle_StepShape_DimensionalLocationWithPath_DownCast = _StepShape.Handle_StepShape_DimensionalLocationWithPath_DownCast

class StepShape_DimensionalSizeWithPath(StepShape_DimensionalSize):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DimensionalSizeWithPath_swiginit(self, _StepShape.new_StepShape_DimensionalSizeWithPath(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aDimensionalSize_AppliesTo:
        :type aDimensionalSize_AppliesTo: Handle_StepRepr_ShapeAspect &
        :param aDimensionalSize_Name:
        :type aDimensionalSize_Name: Handle_TCollection_HAsciiString &
        :param aPath:
        :type aPath: Handle_StepRepr_ShapeAspect &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_Init(self, *args)


    def Path(self, *args) -> "Handle_StepRepr_ShapeAspect":
        """
        * Returns field Path

        :rtype: Handle_StepRepr_ShapeAspect

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_Path(self, *args)


    def SetPath(self, *args) -> "void":
        """
        * Set field Path

        :param Path:
        :type Path: Handle_StepRepr_ShapeAspect &
        :rtype: None

        """
        return _StepShape.StepShape_DimensionalSizeWithPath_SetPath(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DimensionalSizeWithPath(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DimensionalSizeWithPath
StepShape_DimensionalSizeWithPath.Init = new_instancemethod(_StepShape.StepShape_DimensionalSizeWithPath_Init, None, StepShape_DimensionalSizeWithPath)
StepShape_DimensionalSizeWithPath.Path = new_instancemethod(_StepShape.StepShape_DimensionalSizeWithPath_Path, None, StepShape_DimensionalSizeWithPath)
StepShape_DimensionalSizeWithPath.SetPath = new_instancemethod(_StepShape.StepShape_DimensionalSizeWithPath_SetPath, None, StepShape_DimensionalSizeWithPath)
StepShape_DimensionalSizeWithPath_swigregister = _StepShape.StepShape_DimensionalSizeWithPath_swigregister
StepShape_DimensionalSizeWithPath_swigregister(StepShape_DimensionalSizeWithPath)

class Handle_StepShape_DimensionalSizeWithPath(Handle_StepShape_DimensionalSize):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DimensionalSizeWithPath_swiginit(self, _StepShape.new_Handle_StepShape_DimensionalSizeWithPath(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DimensionalSizeWithPath_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DimensionalSizeWithPath
Handle_StepShape_DimensionalSizeWithPath.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSizeWithPath_Nullify, None, Handle_StepShape_DimensionalSizeWithPath)
Handle_StepShape_DimensionalSizeWithPath.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSizeWithPath_IsNull, None, Handle_StepShape_DimensionalSizeWithPath)
Handle_StepShape_DimensionalSizeWithPath._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DimensionalSizeWithPath__get_reference, None, Handle_StepShape_DimensionalSizeWithPath)
Handle_StepShape_DimensionalSizeWithPath_swigregister = _StepShape.Handle_StepShape_DimensionalSizeWithPath_swigregister
Handle_StepShape_DimensionalSizeWithPath_swigregister(Handle_StepShape_DimensionalSizeWithPath)

def Handle_StepShape_DimensionalSizeWithPath_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DimensionalSizeWithPath const":
    return _StepShape.Handle_StepShape_DimensionalSizeWithPath_DownCast(AnObject)
Handle_StepShape_DimensionalSizeWithPath_DownCast = _StepShape.Handle_StepShape_DimensionalSizeWithPath_DownCast

class StepShape_DirectedDimensionalLocation(StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_DirectedDimensionalLocation_swiginit(self, _StepShape.new_StepShape_DirectedDimensionalLocation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_DirectedDimensionalLocation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_DirectedDimensionalLocation
StepShape_DirectedDimensionalLocation_swigregister = _StepShape.StepShape_DirectedDimensionalLocation_swigregister
StepShape_DirectedDimensionalLocation_swigregister(StepShape_DirectedDimensionalLocation)

class Handle_StepShape_DirectedDimensionalLocation(Handle_StepShape_DimensionalLocation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_DirectedDimensionalLocation_swiginit(self, _StepShape.new_Handle_StepShape_DirectedDimensionalLocation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_DirectedDimensionalLocation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_DirectedDimensionalLocation
Handle_StepShape_DirectedDimensionalLocation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_DirectedDimensionalLocation_Nullify, None, Handle_StepShape_DirectedDimensionalLocation)
Handle_StepShape_DirectedDimensionalLocation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_DirectedDimensionalLocation_IsNull, None, Handle_StepShape_DirectedDimensionalLocation)
Handle_StepShape_DirectedDimensionalLocation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_DirectedDimensionalLocation__get_reference, None, Handle_StepShape_DirectedDimensionalLocation)
Handle_StepShape_DirectedDimensionalLocation_swigregister = _StepShape.Handle_StepShape_DirectedDimensionalLocation_swigregister
Handle_StepShape_DirectedDimensionalLocation_swigregister(Handle_StepShape_DirectedDimensionalLocation)

def Handle_StepShape_DirectedDimensionalLocation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_DirectedDimensionalLocation const":
    return _StepShape.Handle_StepShape_DirectedDimensionalLocation_DownCast(AnObject)
Handle_StepShape_DirectedDimensionalLocation_DownCast = _StepShape.Handle_StepShape_DirectedDimensionalLocation_DownCast

class StepShape_Edge(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Edge

        :rtype: None

        """
        _StepShape.StepShape_Edge_swiginit(self, _StepShape.new_StepShape_Edge(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeStart:
        :type aEdgeStart: Handle_StepShape_Vertex &
        :param aEdgeEnd:
        :type aEdgeEnd: Handle_StepShape_Vertex &
        :rtype: void

        """
        return _StepShape.StepShape_Edge_Init(self, *args)


    def SetEdgeStart(self, *args) -> "void":
        """
        :param aEdgeStart:
        :type aEdgeStart: Handle_StepShape_Vertex &
        :rtype: void

        """
        return _StepShape.StepShape_Edge_SetEdgeStart(self, *args)


    def EdgeStart(self, *args) -> "Handle_StepShape_Vertex":
        """
        :rtype: Handle_StepShape_Vertex

        """
        return _StepShape.StepShape_Edge_EdgeStart(self, *args)


    def SetEdgeEnd(self, *args) -> "void":
        """
        :param aEdgeEnd:
        :type aEdgeEnd: Handle_StepShape_Vertex &
        :rtype: void

        """
        return _StepShape.StepShape_Edge_SetEdgeEnd(self, *args)


    def EdgeEnd(self, *args) -> "Handle_StepShape_Vertex":
        """
        :rtype: Handle_StepShape_Vertex

        """
        return _StepShape.StepShape_Edge_EdgeEnd(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Edge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Edge
StepShape_Edge.Init = new_instancemethod(_StepShape.StepShape_Edge_Init, None, StepShape_Edge)
StepShape_Edge.SetEdgeStart = new_instancemethod(_StepShape.StepShape_Edge_SetEdgeStart, None, StepShape_Edge)
StepShape_Edge.EdgeStart = new_instancemethod(_StepShape.StepShape_Edge_EdgeStart, None, StepShape_Edge)
StepShape_Edge.SetEdgeEnd = new_instancemethod(_StepShape.StepShape_Edge_SetEdgeEnd, None, StepShape_Edge)
StepShape_Edge.EdgeEnd = new_instancemethod(_StepShape.StepShape_Edge_EdgeEnd, None, StepShape_Edge)
StepShape_Edge_swigregister = _StepShape.StepShape_Edge_swigregister
StepShape_Edge_swigregister(StepShape_Edge)

class Handle_StepShape_Edge(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Edge_swiginit(self, _StepShape.new_Handle_StepShape_Edge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Edge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Edge
Handle_StepShape_Edge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Edge_Nullify, None, Handle_StepShape_Edge)
Handle_StepShape_Edge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Edge_IsNull, None, Handle_StepShape_Edge)
Handle_StepShape_Edge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Edge__get_reference, None, Handle_StepShape_Edge)
Handle_StepShape_Edge_swigregister = _StepShape.Handle_StepShape_Edge_swigregister
Handle_StepShape_Edge_swigregister(Handle_StepShape_Edge)

def Handle_StepShape_Edge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Edge const":
    return _StepShape.Handle_StepShape_Edge_DownCast(AnObject)
Handle_StepShape_Edge_DownCast = _StepShape.Handle_StepShape_Edge_DownCast

class StepShape_EdgeBasedWireframeShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_EdgeBasedWireframeShapeRepresentation_swiginit(self, _StepShape.new_StepShape_EdgeBasedWireframeShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_EdgeBasedWireframeShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeBasedWireframeShapeRepresentation
StepShape_EdgeBasedWireframeShapeRepresentation_swigregister = _StepShape.StepShape_EdgeBasedWireframeShapeRepresentation_swigregister
StepShape_EdgeBasedWireframeShapeRepresentation_swigregister(StepShape_EdgeBasedWireframeShapeRepresentation)

class Handle_StepShape_EdgeBasedWireframeShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_EdgeBasedWireframeShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_EdgeBasedWireframeShapeRepresentation
Handle_StepShape_EdgeBasedWireframeShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_Nullify, None, Handle_StepShape_EdgeBasedWireframeShapeRepresentation)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_IsNull, None, Handle_StepShape_EdgeBasedWireframeShapeRepresentation)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation__get_reference, None, Handle_StepShape_EdgeBasedWireframeShapeRepresentation)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_swigregister = _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_swigregister
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_swigregister(Handle_StepShape_EdgeBasedWireframeShapeRepresentation)

def Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_EdgeBasedWireframeShapeRepresentation const":
    return _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast(AnObject)
Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast = _StepShape.Handle_StepShape_EdgeBasedWireframeShapeRepresentation_DownCast

class StepShape_Face(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Face

        :rtype: None

        """
        _StepShape.StepShape_Face_swiginit(self, _StepShape.new_StepShape_Face(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBounds:
        :type aBounds: Handle_StepShape_HArray1OfFaceBound &
        :rtype: void

        """
        return _StepShape.StepShape_Face_Init(self, *args)


    def SetBounds(self, *args) -> "void":
        """
        :param aBounds:
        :type aBounds: Handle_StepShape_HArray1OfFaceBound &
        :rtype: void

        """
        return _StepShape.StepShape_Face_SetBounds(self, *args)


    def Bounds(self, *args) -> "Handle_StepShape_HArray1OfFaceBound":
        """
        :rtype: Handle_StepShape_HArray1OfFaceBound

        """
        return _StepShape.StepShape_Face_Bounds(self, *args)


    def BoundsValue(self, *args) -> "Handle_StepShape_FaceBound":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_FaceBound

        """
        return _StepShape.StepShape_Face_BoundsValue(self, *args)


    def NbBounds(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Face_NbBounds(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Face(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Face
StepShape_Face.Init = new_instancemethod(_StepShape.StepShape_Face_Init, None, StepShape_Face)
StepShape_Face.SetBounds = new_instancemethod(_StepShape.StepShape_Face_SetBounds, None, StepShape_Face)
StepShape_Face.Bounds = new_instancemethod(_StepShape.StepShape_Face_Bounds, None, StepShape_Face)
StepShape_Face.BoundsValue = new_instancemethod(_StepShape.StepShape_Face_BoundsValue, None, StepShape_Face)
StepShape_Face.NbBounds = new_instancemethod(_StepShape.StepShape_Face_NbBounds, None, StepShape_Face)
StepShape_Face_swigregister = _StepShape.StepShape_Face_swigregister
StepShape_Face_swigregister(StepShape_Face)

class Handle_StepShape_Face(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Face_swiginit(self, _StepShape.new_Handle_StepShape_Face(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Face_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Face
Handle_StepShape_Face.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Face_Nullify, None, Handle_StepShape_Face)
Handle_StepShape_Face.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Face_IsNull, None, Handle_StepShape_Face)
Handle_StepShape_Face._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Face__get_reference, None, Handle_StepShape_Face)
Handle_StepShape_Face_swigregister = _StepShape.Handle_StepShape_Face_swigregister
Handle_StepShape_Face_swigregister(Handle_StepShape_Face)

def Handle_StepShape_Face_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Face const":
    return _StepShape.Handle_StepShape_Face_DownCast(AnObject)
Handle_StepShape_Face_DownCast = _StepShape.Handle_StepShape_Face_DownCast

class StepShape_FaceBound(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FaceBound

        :rtype: None

        """
        _StepShape.StepShape_FaceBound_swiginit(self, _StepShape.new_StepShape_FaceBound(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBound:
        :type aBound: Handle_StepShape_Loop &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_FaceBound_Init(self, *args)


    def SetBound(self, *args) -> "void":
        """
        :param aBound:
        :type aBound: Handle_StepShape_Loop &
        :rtype: None

        """
        return _StepShape.StepShape_FaceBound_SetBound(self, *args)


    def Bound(self, *args) -> "Handle_StepShape_Loop":
        """
        :rtype: Handle_StepShape_Loop

        """
        return _StepShape.StepShape_FaceBound_Bound(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_FaceBound_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_FaceBound_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FaceBound(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceBound
StepShape_FaceBound.Init = new_instancemethod(_StepShape.StepShape_FaceBound_Init, None, StepShape_FaceBound)
StepShape_FaceBound.SetBound = new_instancemethod(_StepShape.StepShape_FaceBound_SetBound, None, StepShape_FaceBound)
StepShape_FaceBound.Bound = new_instancemethod(_StepShape.StepShape_FaceBound_Bound, None, StepShape_FaceBound)
StepShape_FaceBound.SetOrientation = new_instancemethod(_StepShape.StepShape_FaceBound_SetOrientation, None, StepShape_FaceBound)
StepShape_FaceBound.Orientation = new_instancemethod(_StepShape.StepShape_FaceBound_Orientation, None, StepShape_FaceBound)
StepShape_FaceBound_swigregister = _StepShape.StepShape_FaceBound_swigregister
StepShape_FaceBound_swigregister(StepShape_FaceBound)

class Handle_StepShape_FaceBound(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FaceBound_swiginit(self, _StepShape.new_Handle_StepShape_FaceBound(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FaceBound_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FaceBound
Handle_StepShape_FaceBound.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FaceBound_Nullify, None, Handle_StepShape_FaceBound)
Handle_StepShape_FaceBound.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FaceBound_IsNull, None, Handle_StepShape_FaceBound)
Handle_StepShape_FaceBound._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FaceBound__get_reference, None, Handle_StepShape_FaceBound)
Handle_StepShape_FaceBound_swigregister = _StepShape.Handle_StepShape_FaceBound_swigregister
Handle_StepShape_FaceBound_swigregister(Handle_StepShape_FaceBound)

def Handle_StepShape_FaceBound_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FaceBound const":
    return _StepShape.Handle_StepShape_FaceBound_DownCast(AnObject)
Handle_StepShape_FaceBound_DownCast = _StepShape.Handle_StepShape_FaceBound_DownCast

class StepShape_FacetedBrepShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FacetedBrepShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_FacetedBrepShapeRepresentation_swiginit(self, _StepShape.new_StepShape_FacetedBrepShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FacetedBrepShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrepShapeRepresentation
StepShape_FacetedBrepShapeRepresentation_swigregister = _StepShape.StepShape_FacetedBrepShapeRepresentation_swigregister
StepShape_FacetedBrepShapeRepresentation_swigregister(StepShape_FacetedBrepShapeRepresentation)

class Handle_StepShape_FacetedBrepShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_FacetedBrepShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FacetedBrepShapeRepresentation
Handle_StepShape_FacetedBrepShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_Nullify, None, Handle_StepShape_FacetedBrepShapeRepresentation)
Handle_StepShape_FacetedBrepShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_IsNull, None, Handle_StepShape_FacetedBrepShapeRepresentation)
Handle_StepShape_FacetedBrepShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepShapeRepresentation__get_reference, None, Handle_StepShape_FacetedBrepShapeRepresentation)
Handle_StepShape_FacetedBrepShapeRepresentation_swigregister = _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_swigregister
Handle_StepShape_FacetedBrepShapeRepresentation_swigregister(Handle_StepShape_FacetedBrepShapeRepresentation)

def Handle_StepShape_FacetedBrepShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FacetedBrepShapeRepresentation const":
    return _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_DownCast(AnObject)
Handle_StepShape_FacetedBrepShapeRepresentation_DownCast = _StepShape.Handle_StepShape_FacetedBrepShapeRepresentation_DownCast

class StepShape_GeometricCurveSet(StepShape_GeometricSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricCurveSet

        :rtype: None

        """
        _StepShape.StepShape_GeometricCurveSet_swiginit(self, _StepShape.new_StepShape_GeometricCurveSet(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_GeometricCurveSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricCurveSet
StepShape_GeometricCurveSet_swigregister = _StepShape.StepShape_GeometricCurveSet_swigregister
StepShape_GeometricCurveSet_swigregister(StepShape_GeometricCurveSet)

class Handle_StepShape_GeometricCurveSet(Handle_StepShape_GeometricSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_GeometricCurveSet_swiginit(self, _StepShape.new_Handle_StepShape_GeometricCurveSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_GeometricCurveSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_GeometricCurveSet
Handle_StepShape_GeometricCurveSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_GeometricCurveSet_Nullify, None, Handle_StepShape_GeometricCurveSet)
Handle_StepShape_GeometricCurveSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_GeometricCurveSet_IsNull, None, Handle_StepShape_GeometricCurveSet)
Handle_StepShape_GeometricCurveSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_GeometricCurveSet__get_reference, None, Handle_StepShape_GeometricCurveSet)
Handle_StepShape_GeometricCurveSet_swigregister = _StepShape.Handle_StepShape_GeometricCurveSet_swigregister
Handle_StepShape_GeometricCurveSet_swigregister(Handle_StepShape_GeometricCurveSet)

def Handle_StepShape_GeometricCurveSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_GeometricCurveSet const":
    return _StepShape.Handle_StepShape_GeometricCurveSet_DownCast(AnObject)
Handle_StepShape_GeometricCurveSet_DownCast = _StepShape.Handle_StepShape_GeometricCurveSet_DownCast

class StepShape_GeometricallyBoundedSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricallyBoundedSurfaceShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swiginit(self, _StepShape.new_StepShape_GeometricallyBoundedSurfaceShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricallyBoundedSurfaceShapeRepresentation
StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister
StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister(StepShape_GeometricallyBoundedSurfaceShapeRepresentation)

class Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_Nullify, None, Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_IsNull, None, Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation__get_reference, None, Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister = _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_swigregister(Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation)

def Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation const":
    return _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast(AnObject)
Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_GeometricallyBoundedSurfaceShapeRepresentation_DownCast

class StepShape_GeometricallyBoundedWireframeShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a GeometricallyBoundedWireframeShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_GeometricallyBoundedWireframeShapeRepresentation_swiginit(self, _StepShape.new_StepShape_GeometricallyBoundedWireframeShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_GeometricallyBoundedWireframeShapeRepresentation
StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister = _StepShape.StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister
StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister(StepShape_GeometricallyBoundedWireframeShapeRepresentation)

class Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_Nullify, None, Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_IsNull, None, Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation__get_reference, None, Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister = _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_swigregister(Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation)

def Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation const":
    return _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast(AnObject)
Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast = _StepShape.Handle_StepShape_GeometricallyBoundedWireframeShapeRepresentation_DownCast

class StepShape_Loop(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Loop

        :rtype: None

        """
        _StepShape.StepShape_Loop_swiginit(self, _StepShape.new_StepShape_Loop(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Loop(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Loop
StepShape_Loop_swigregister = _StepShape.StepShape_Loop_swigregister
StepShape_Loop_swigregister(StepShape_Loop)

class Handle_StepShape_Loop(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Loop_swiginit(self, _StepShape.new_Handle_StepShape_Loop(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Loop_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Loop
Handle_StepShape_Loop.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Loop_Nullify, None, Handle_StepShape_Loop)
Handle_StepShape_Loop.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Loop_IsNull, None, Handle_StepShape_Loop)
Handle_StepShape_Loop._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Loop__get_reference, None, Handle_StepShape_Loop)
Handle_StepShape_Loop_swigregister = _StepShape.Handle_StepShape_Loop_swigregister
Handle_StepShape_Loop_swigregister(Handle_StepShape_Loop)

def Handle_StepShape_Loop_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Loop const":
    return _StepShape.Handle_StepShape_Loop_DownCast(AnObject)
Handle_StepShape_Loop_DownCast = _StepShape.Handle_StepShape_Loop_DownCast

class StepShape_LoopAndPath(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a LoopAndPath

        :rtype: None

        """
        _StepShape.StepShape_LoopAndPath_swiginit(self, _StepShape.new_StepShape_LoopAndPath(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLoop:
        :type aLoop: Handle_StepShape_Loop &
        :param aPath:
        :type aPath: Handle_StepShape_Path &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: void

        """
        return _StepShape.StepShape_LoopAndPath_Init(self, *args)


    def SetLoop(self, *args) -> "void":
        """
        :param aLoop:
        :type aLoop: Handle_StepShape_Loop &
        :rtype: None

        """
        return _StepShape.StepShape_LoopAndPath_SetLoop(self, *args)


    def Loop(self, *args) -> "Handle_StepShape_Loop":
        """
        :rtype: Handle_StepShape_Loop

        """
        return _StepShape.StepShape_LoopAndPath_Loop(self, *args)


    def SetPath(self, *args) -> "void":
        """
        :param aPath:
        :type aPath: Handle_StepShape_Path &
        :rtype: None

        """
        return _StepShape.StepShape_LoopAndPath_SetPath(self, *args)


    def Path(self, *args) -> "Handle_StepShape_Path":
        """
        :rtype: Handle_StepShape_Path

        """
        return _StepShape.StepShape_LoopAndPath_Path(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_LoopAndPath_SetEdgeList(self, *args)


    def EdgeList(self, *args) -> "Handle_StepShape_HArray1OfOrientedEdge":
        """
        :rtype: Handle_StepShape_HArray1OfOrientedEdge

        """
        return _StepShape.StepShape_LoopAndPath_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_LoopAndPath_EdgeListValue(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_LoopAndPath_NbEdgeList(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_LoopAndPath(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_LoopAndPath
StepShape_LoopAndPath.Init = new_instancemethod(_StepShape.StepShape_LoopAndPath_Init, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.SetLoop = new_instancemethod(_StepShape.StepShape_LoopAndPath_SetLoop, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.Loop = new_instancemethod(_StepShape.StepShape_LoopAndPath_Loop, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.SetPath = new_instancemethod(_StepShape.StepShape_LoopAndPath_SetPath, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.Path = new_instancemethod(_StepShape.StepShape_LoopAndPath_Path, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.SetEdgeList = new_instancemethod(_StepShape.StepShape_LoopAndPath_SetEdgeList, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.EdgeList = new_instancemethod(_StepShape.StepShape_LoopAndPath_EdgeList, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.EdgeListValue = new_instancemethod(_StepShape.StepShape_LoopAndPath_EdgeListValue, None, StepShape_LoopAndPath)
StepShape_LoopAndPath.NbEdgeList = new_instancemethod(_StepShape.StepShape_LoopAndPath_NbEdgeList, None, StepShape_LoopAndPath)
StepShape_LoopAndPath_swigregister = _StepShape.StepShape_LoopAndPath_swigregister
StepShape_LoopAndPath_swigregister(StepShape_LoopAndPath)

class Handle_StepShape_LoopAndPath(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_LoopAndPath_swiginit(self, _StepShape.new_Handle_StepShape_LoopAndPath(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_LoopAndPath_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_LoopAndPath
Handle_StepShape_LoopAndPath.Nullify = new_instancemethod(_StepShape.Handle_StepShape_LoopAndPath_Nullify, None, Handle_StepShape_LoopAndPath)
Handle_StepShape_LoopAndPath.IsNull = new_instancemethod(_StepShape.Handle_StepShape_LoopAndPath_IsNull, None, Handle_StepShape_LoopAndPath)
Handle_StepShape_LoopAndPath._get_reference = new_instancemethod(_StepShape.Handle_StepShape_LoopAndPath__get_reference, None, Handle_StepShape_LoopAndPath)
Handle_StepShape_LoopAndPath_swigregister = _StepShape.Handle_StepShape_LoopAndPath_swigregister
Handle_StepShape_LoopAndPath_swigregister(Handle_StepShape_LoopAndPath)

def Handle_StepShape_LoopAndPath_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_LoopAndPath const":
    return _StepShape.Handle_StepShape_LoopAndPath_DownCast(AnObject)
Handle_StepShape_LoopAndPath_DownCast = _StepShape.Handle_StepShape_LoopAndPath_DownCast

class StepShape_ManifoldSolidBrep(StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ManifoldSolidBrep

        :rtype: None

        """
        _StepShape.StepShape_ManifoldSolidBrep_swiginit(self, _StepShape.new_StepShape_ManifoldSolidBrep(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ConnectedFaceSet &
        :rtype: void

        """
        return _StepShape.StepShape_ManifoldSolidBrep_Init(self, *args)


    def SetOuter(self, *args) -> "void":
        """
        :param aOuter:
        :type aOuter: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_ManifoldSolidBrep_SetOuter(self, *args)


    def Outer(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_ManifoldSolidBrep_Outer(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ManifoldSolidBrep(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ManifoldSolidBrep
StepShape_ManifoldSolidBrep.Init = new_instancemethod(_StepShape.StepShape_ManifoldSolidBrep_Init, None, StepShape_ManifoldSolidBrep)
StepShape_ManifoldSolidBrep.SetOuter = new_instancemethod(_StepShape.StepShape_ManifoldSolidBrep_SetOuter, None, StepShape_ManifoldSolidBrep)
StepShape_ManifoldSolidBrep.Outer = new_instancemethod(_StepShape.StepShape_ManifoldSolidBrep_Outer, None, StepShape_ManifoldSolidBrep)
StepShape_ManifoldSolidBrep_swigregister = _StepShape.StepShape_ManifoldSolidBrep_swigregister
StepShape_ManifoldSolidBrep_swigregister(StepShape_ManifoldSolidBrep)

class Handle_StepShape_ManifoldSolidBrep(Handle_StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ManifoldSolidBrep_swiginit(self, _StepShape.new_Handle_StepShape_ManifoldSolidBrep(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ManifoldSolidBrep_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ManifoldSolidBrep
Handle_StepShape_ManifoldSolidBrep.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSolidBrep_Nullify, None, Handle_StepShape_ManifoldSolidBrep)
Handle_StepShape_ManifoldSolidBrep.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSolidBrep_IsNull, None, Handle_StepShape_ManifoldSolidBrep)
Handle_StepShape_ManifoldSolidBrep._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSolidBrep__get_reference, None, Handle_StepShape_ManifoldSolidBrep)
Handle_StepShape_ManifoldSolidBrep_swigregister = _StepShape.Handle_StepShape_ManifoldSolidBrep_swigregister
Handle_StepShape_ManifoldSolidBrep_swigregister(Handle_StepShape_ManifoldSolidBrep)

def Handle_StepShape_ManifoldSolidBrep_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ManifoldSolidBrep const":
    return _StepShape.Handle_StepShape_ManifoldSolidBrep_DownCast(AnObject)
Handle_StepShape_ManifoldSolidBrep_DownCast = _StepShape.Handle_StepShape_ManifoldSolidBrep_DownCast

class StepShape_ManifoldSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ManifoldSurfaceShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_ManifoldSurfaceShapeRepresentation_swiginit(self, _StepShape.new_StepShape_ManifoldSurfaceShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ManifoldSurfaceShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ManifoldSurfaceShapeRepresentation
StepShape_ManifoldSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_ManifoldSurfaceShapeRepresentation_swigregister
StepShape_ManifoldSurfaceShapeRepresentation_swigregister(StepShape_ManifoldSurfaceShapeRepresentation)

class Handle_StepShape_ManifoldSurfaceShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ManifoldSurfaceShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ManifoldSurfaceShapeRepresentation
Handle_StepShape_ManifoldSurfaceShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_Nullify, None, Handle_StepShape_ManifoldSurfaceShapeRepresentation)
Handle_StepShape_ManifoldSurfaceShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_IsNull, None, Handle_StepShape_ManifoldSurfaceShapeRepresentation)
Handle_StepShape_ManifoldSurfaceShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation__get_reference, None, Handle_StepShape_ManifoldSurfaceShapeRepresentation)
Handle_StepShape_ManifoldSurfaceShapeRepresentation_swigregister = _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_swigregister
Handle_StepShape_ManifoldSurfaceShapeRepresentation_swigregister(Handle_StepShape_ManifoldSurfaceShapeRepresentation)

def Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ManifoldSurfaceShapeRepresentation const":
    return _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast(AnObject)
Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_ManifoldSurfaceShapeRepresentation_DownCast

class StepShape_NonManifoldSurfaceShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_NonManifoldSurfaceShapeRepresentation_swiginit(self, _StepShape.new_StepShape_NonManifoldSurfaceShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_NonManifoldSurfaceShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_NonManifoldSurfaceShapeRepresentation
StepShape_NonManifoldSurfaceShapeRepresentation_swigregister = _StepShape.StepShape_NonManifoldSurfaceShapeRepresentation_swigregister
StepShape_NonManifoldSurfaceShapeRepresentation_swigregister(StepShape_NonManifoldSurfaceShapeRepresentation)

class Handle_StepShape_NonManifoldSurfaceShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_NonManifoldSurfaceShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_NonManifoldSurfaceShapeRepresentation
Handle_StepShape_NonManifoldSurfaceShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_Nullify, None, Handle_StepShape_NonManifoldSurfaceShapeRepresentation)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_IsNull, None, Handle_StepShape_NonManifoldSurfaceShapeRepresentation)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation__get_reference, None, Handle_StepShape_NonManifoldSurfaceShapeRepresentation)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_swigregister = _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_swigregister
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_swigregister(Handle_StepShape_NonManifoldSurfaceShapeRepresentation)

def Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_NonManifoldSurfaceShapeRepresentation const":
    return _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast(AnObject)
Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast = _StepShape.Handle_StepShape_NonManifoldSurfaceShapeRepresentation_DownCast

class StepShape_Path(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Path

        :rtype: None

        """
        _StepShape.StepShape_Path_swiginit(self, _StepShape.new_StepShape_Path(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: void

        """
        return _StepShape.StepShape_Path_Init(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: void

        """
        return _StepShape.StepShape_Path_SetEdgeList(self, *args)


    def EdgeList(self, *args) -> "Handle_StepShape_HArray1OfOrientedEdge":
        """
        :rtype: Handle_StepShape_HArray1OfOrientedEdge

        """
        return _StepShape.StepShape_Path_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_Path_EdgeListValue(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_Path_NbEdgeList(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Path(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Path
StepShape_Path.Init = new_instancemethod(_StepShape.StepShape_Path_Init, None, StepShape_Path)
StepShape_Path.SetEdgeList = new_instancemethod(_StepShape.StepShape_Path_SetEdgeList, None, StepShape_Path)
StepShape_Path.EdgeList = new_instancemethod(_StepShape.StepShape_Path_EdgeList, None, StepShape_Path)
StepShape_Path.EdgeListValue = new_instancemethod(_StepShape.StepShape_Path_EdgeListValue, None, StepShape_Path)
StepShape_Path.NbEdgeList = new_instancemethod(_StepShape.StepShape_Path_NbEdgeList, None, StepShape_Path)
StepShape_Path_swigregister = _StepShape.StepShape_Path_swigregister
StepShape_Path_swigregister(StepShape_Path)

class Handle_StepShape_Path(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Path_swiginit(self, _StepShape.new_Handle_StepShape_Path(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Path_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Path
Handle_StepShape_Path.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Path_Nullify, None, Handle_StepShape_Path)
Handle_StepShape_Path.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Path_IsNull, None, Handle_StepShape_Path)
Handle_StepShape_Path._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Path__get_reference, None, Handle_StepShape_Path)
Handle_StepShape_Path_swigregister = _StepShape.Handle_StepShape_Path_swigregister
Handle_StepShape_Path_swigregister(Handle_StepShape_Path)

def Handle_StepShape_Path_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Path const":
    return _StepShape.Handle_StepShape_Path_DownCast(AnObject)
Handle_StepShape_Path_DownCast = _StepShape.Handle_StepShape_Path_DownCast

class StepShape_PointRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_PointRepresentation_swiginit(self, _StepShape.new_StepShape_PointRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_PointRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PointRepresentation
StepShape_PointRepresentation_swigregister = _StepShape.StepShape_PointRepresentation_swigregister
StepShape_PointRepresentation_swigregister(StepShape_PointRepresentation)

class Handle_StepShape_PointRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_PointRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_PointRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_PointRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_PointRepresentation
Handle_StepShape_PointRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_PointRepresentation_Nullify, None, Handle_StepShape_PointRepresentation)
Handle_StepShape_PointRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_PointRepresentation_IsNull, None, Handle_StepShape_PointRepresentation)
Handle_StepShape_PointRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_PointRepresentation__get_reference, None, Handle_StepShape_PointRepresentation)
Handle_StepShape_PointRepresentation_swigregister = _StepShape.Handle_StepShape_PointRepresentation_swigregister
Handle_StepShape_PointRepresentation_swigregister(Handle_StepShape_PointRepresentation)

def Handle_StepShape_PointRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_PointRepresentation const":
    return _StepShape.Handle_StepShape_PointRepresentation_DownCast(AnObject)
Handle_StepShape_PointRepresentation_DownCast = _StepShape.Handle_StepShape_PointRepresentation_DownCast

class StepShape_ShapeDimensionRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ShapeDimensionRepresentation_swiginit(self, _StepShape.new_StepShape_ShapeDimensionRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ShapeDimensionRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeDimensionRepresentation
StepShape_ShapeDimensionRepresentation_swigregister = _StepShape.StepShape_ShapeDimensionRepresentation_swigregister
StepShape_ShapeDimensionRepresentation_swigregister(StepShape_ShapeDimensionRepresentation)

class Handle_StepShape_ShapeDimensionRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ShapeDimensionRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_ShapeDimensionRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ShapeDimensionRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ShapeDimensionRepresentation
Handle_StepShape_ShapeDimensionRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ShapeDimensionRepresentation_Nullify, None, Handle_StepShape_ShapeDimensionRepresentation)
Handle_StepShape_ShapeDimensionRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ShapeDimensionRepresentation_IsNull, None, Handle_StepShape_ShapeDimensionRepresentation)
Handle_StepShape_ShapeDimensionRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ShapeDimensionRepresentation__get_reference, None, Handle_StepShape_ShapeDimensionRepresentation)
Handle_StepShape_ShapeDimensionRepresentation_swigregister = _StepShape.Handle_StepShape_ShapeDimensionRepresentation_swigregister
Handle_StepShape_ShapeDimensionRepresentation_swigregister(Handle_StepShape_ShapeDimensionRepresentation)

def Handle_StepShape_ShapeDimensionRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ShapeDimensionRepresentation const":
    return _StepShape.Handle_StepShape_ShapeDimensionRepresentation_DownCast(AnObject)
Handle_StepShape_ShapeDimensionRepresentation_DownCast = _StepShape.Handle_StepShape_ShapeDimensionRepresentation_DownCast

class StepShape_ShapeRepresentationWithParameters(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ShapeRepresentationWithParameters_swiginit(self, _StepShape.new_StepShape_ShapeRepresentationWithParameters(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ShapeRepresentationWithParameters(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ShapeRepresentationWithParameters
StepShape_ShapeRepresentationWithParameters_swigregister = _StepShape.StepShape_ShapeRepresentationWithParameters_swigregister
StepShape_ShapeRepresentationWithParameters_swigregister(StepShape_ShapeRepresentationWithParameters)

class Handle_StepShape_ShapeRepresentationWithParameters(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_swiginit(self, _StepShape.new_Handle_StepShape_ShapeRepresentationWithParameters(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ShapeRepresentationWithParameters_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ShapeRepresentationWithParameters
Handle_StepShape_ShapeRepresentationWithParameters.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentationWithParameters_Nullify, None, Handle_StepShape_ShapeRepresentationWithParameters)
Handle_StepShape_ShapeRepresentationWithParameters.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentationWithParameters_IsNull, None, Handle_StepShape_ShapeRepresentationWithParameters)
Handle_StepShape_ShapeRepresentationWithParameters._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ShapeRepresentationWithParameters__get_reference, None, Handle_StepShape_ShapeRepresentationWithParameters)
Handle_StepShape_ShapeRepresentationWithParameters_swigregister = _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_swigregister
Handle_StepShape_ShapeRepresentationWithParameters_swigregister(Handle_StepShape_ShapeRepresentationWithParameters)

def Handle_StepShape_ShapeRepresentationWithParameters_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ShapeRepresentationWithParameters const":
    return _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_DownCast(AnObject)
Handle_StepShape_ShapeRepresentationWithParameters_DownCast = _StepShape.Handle_StepShape_ShapeRepresentationWithParameters_DownCast

class StepShape_SolidReplica(StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SolidReplica

        :rtype: None

        """
        _StepShape.StepShape_SolidReplica_swiginit(self, _StepShape.new_StepShape_SolidReplica(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aParentSolid:
        :type aParentSolid: Handle_StepShape_SolidModel &
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator3d &
        :rtype: void

        """
        return _StepShape.StepShape_SolidReplica_Init(self, *args)


    def SetParentSolid(self, *args) -> "void":
        """
        :param aParentSolid:
        :type aParentSolid: Handle_StepShape_SolidModel &
        :rtype: None

        """
        return _StepShape.StepShape_SolidReplica_SetParentSolid(self, *args)


    def ParentSolid(self, *args) -> "Handle_StepShape_SolidModel":
        """
        :rtype: Handle_StepShape_SolidModel

        """
        return _StepShape.StepShape_SolidReplica_ParentSolid(self, *args)


    def SetTransformation(self, *args) -> "void":
        """
        :param aTransformation:
        :type aTransformation: Handle_StepGeom_CartesianTransformationOperator3d &
        :rtype: None

        """
        return _StepShape.StepShape_SolidReplica_SetTransformation(self, *args)


    def Transformation(self, *args) -> "Handle_StepGeom_CartesianTransformationOperator3d":
        """
        :rtype: Handle_StepGeom_CartesianTransformationOperator3d

        """
        return _StepShape.StepShape_SolidReplica_Transformation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_SolidReplica(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SolidReplica
StepShape_SolidReplica.Init = new_instancemethod(_StepShape.StepShape_SolidReplica_Init, None, StepShape_SolidReplica)
StepShape_SolidReplica.SetParentSolid = new_instancemethod(_StepShape.StepShape_SolidReplica_SetParentSolid, None, StepShape_SolidReplica)
StepShape_SolidReplica.ParentSolid = new_instancemethod(_StepShape.StepShape_SolidReplica_ParentSolid, None, StepShape_SolidReplica)
StepShape_SolidReplica.SetTransformation = new_instancemethod(_StepShape.StepShape_SolidReplica_SetTransformation, None, StepShape_SolidReplica)
StepShape_SolidReplica.Transformation = new_instancemethod(_StepShape.StepShape_SolidReplica_Transformation, None, StepShape_SolidReplica)
StepShape_SolidReplica_swigregister = _StepShape.StepShape_SolidReplica_swigregister
StepShape_SolidReplica_swigregister(StepShape_SolidReplica)

class Handle_StepShape_SolidReplica(Handle_StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_SolidReplica_swiginit(self, _StepShape.new_Handle_StepShape_SolidReplica(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_SolidReplica_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_SolidReplica
Handle_StepShape_SolidReplica.Nullify = new_instancemethod(_StepShape.Handle_StepShape_SolidReplica_Nullify, None, Handle_StepShape_SolidReplica)
Handle_StepShape_SolidReplica.IsNull = new_instancemethod(_StepShape.Handle_StepShape_SolidReplica_IsNull, None, Handle_StepShape_SolidReplica)
Handle_StepShape_SolidReplica._get_reference = new_instancemethod(_StepShape.Handle_StepShape_SolidReplica__get_reference, None, Handle_StepShape_SolidReplica)
Handle_StepShape_SolidReplica_swigregister = _StepShape.Handle_StepShape_SolidReplica_swigregister
Handle_StepShape_SolidReplica_swigregister(Handle_StepShape_SolidReplica)

def Handle_StepShape_SolidReplica_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_SolidReplica const":
    return _StepShape.Handle_StepShape_SolidReplica_DownCast(AnObject)
Handle_StepShape_SolidReplica_DownCast = _StepShape.Handle_StepShape_SolidReplica_DownCast

class StepShape_SweptAreaSolid(StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SweptAreaSolid

        :rtype: None

        """
        _StepShape.StepShape_SweptAreaSolid_swiginit(self, _StepShape.new_StepShape_SweptAreaSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :rtype: void

        """
        return _StepShape.StepShape_SweptAreaSolid_Init(self, *args)


    def SetSweptArea(self, *args) -> "void":
        """
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :rtype: None

        """
        return _StepShape.StepShape_SweptAreaSolid_SetSweptArea(self, *args)


    def SweptArea(self, *args) -> "Handle_StepGeom_CurveBoundedSurface":
        """
        :rtype: Handle_StepGeom_CurveBoundedSurface

        """
        return _StepShape.StepShape_SweptAreaSolid_SweptArea(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_SweptAreaSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SweptAreaSolid
StepShape_SweptAreaSolid.Init = new_instancemethod(_StepShape.StepShape_SweptAreaSolid_Init, None, StepShape_SweptAreaSolid)
StepShape_SweptAreaSolid.SetSweptArea = new_instancemethod(_StepShape.StepShape_SweptAreaSolid_SetSweptArea, None, StepShape_SweptAreaSolid)
StepShape_SweptAreaSolid.SweptArea = new_instancemethod(_StepShape.StepShape_SweptAreaSolid_SweptArea, None, StepShape_SweptAreaSolid)
StepShape_SweptAreaSolid_swigregister = _StepShape.StepShape_SweptAreaSolid_swigregister
StepShape_SweptAreaSolid_swigregister(StepShape_SweptAreaSolid)

class Handle_StepShape_SweptAreaSolid(Handle_StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_SweptAreaSolid_swiginit(self, _StepShape.new_Handle_StepShape_SweptAreaSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_SweptAreaSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_SweptAreaSolid
Handle_StepShape_SweptAreaSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_SweptAreaSolid_Nullify, None, Handle_StepShape_SweptAreaSolid)
Handle_StepShape_SweptAreaSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_SweptAreaSolid_IsNull, None, Handle_StepShape_SweptAreaSolid)
Handle_StepShape_SweptAreaSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_SweptAreaSolid__get_reference, None, Handle_StepShape_SweptAreaSolid)
Handle_StepShape_SweptAreaSolid_swigregister = _StepShape.Handle_StepShape_SweptAreaSolid_swigregister
Handle_StepShape_SweptAreaSolid_swigregister(Handle_StepShape_SweptAreaSolid)

def Handle_StepShape_SweptAreaSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_SweptAreaSolid const":
    return _StepShape.Handle_StepShape_SweptAreaSolid_DownCast(AnObject)
Handle_StepShape_SweptAreaSolid_DownCast = _StepShape.Handle_StepShape_SweptAreaSolid_DownCast

class StepShape_SweptFaceSolid(StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a SweptFaceSolid

        :rtype: None

        """
        _StepShape.StepShape_SweptFaceSolid_swiginit(self, _StepShape.new_StepShape_SweptFaceSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :rtype: void

        """
        return _StepShape.StepShape_SweptFaceSolid_Init(self, *args)


    def SetSweptFace(self, *args) -> "void":
        """
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :rtype: void

        """
        return _StepShape.StepShape_SweptFaceSolid_SetSweptFace(self, *args)


    def SweptFace(self, *args) -> "Handle_StepShape_FaceSurface":
        """
        :rtype: Handle_StepShape_FaceSurface

        """
        return _StepShape.StepShape_SweptFaceSolid_SweptFace(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_SweptFaceSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SweptFaceSolid
StepShape_SweptFaceSolid.Init = new_instancemethod(_StepShape.StepShape_SweptFaceSolid_Init, None, StepShape_SweptFaceSolid)
StepShape_SweptFaceSolid.SetSweptFace = new_instancemethod(_StepShape.StepShape_SweptFaceSolid_SetSweptFace, None, StepShape_SweptFaceSolid)
StepShape_SweptFaceSolid.SweptFace = new_instancemethod(_StepShape.StepShape_SweptFaceSolid_SweptFace, None, StepShape_SweptFaceSolid)
StepShape_SweptFaceSolid_swigregister = _StepShape.StepShape_SweptFaceSolid_swigregister
StepShape_SweptFaceSolid_swigregister(StepShape_SweptFaceSolid)

class Handle_StepShape_SweptFaceSolid(Handle_StepShape_SolidModel):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_SweptFaceSolid_swiginit(self, _StepShape.new_Handle_StepShape_SweptFaceSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_SweptFaceSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_SweptFaceSolid
Handle_StepShape_SweptFaceSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_SweptFaceSolid_Nullify, None, Handle_StepShape_SweptFaceSolid)
Handle_StepShape_SweptFaceSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_SweptFaceSolid_IsNull, None, Handle_StepShape_SweptFaceSolid)
Handle_StepShape_SweptFaceSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_SweptFaceSolid__get_reference, None, Handle_StepShape_SweptFaceSolid)
Handle_StepShape_SweptFaceSolid_swigregister = _StepShape.Handle_StepShape_SweptFaceSolid_swigregister
Handle_StepShape_SweptFaceSolid_swigregister(Handle_StepShape_SweptFaceSolid)

def Handle_StepShape_SweptFaceSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_SweptFaceSolid const":
    return _StepShape.Handle_StepShape_SweptFaceSolid_DownCast(AnObject)
Handle_StepShape_SweptFaceSolid_DownCast = _StepShape.Handle_StepShape_SweptFaceSolid_DownCast

class StepShape_TransitionalShapeRepresentation(StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a TransitionalShapeRepresentation

        :rtype: None

        """
        _StepShape.StepShape_TransitionalShapeRepresentation_swiginit(self, _StepShape.new_StepShape_TransitionalShapeRepresentation(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_TransitionalShapeRepresentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_TransitionalShapeRepresentation
StepShape_TransitionalShapeRepresentation_swigregister = _StepShape.StepShape_TransitionalShapeRepresentation_swigregister
StepShape_TransitionalShapeRepresentation_swigregister(StepShape_TransitionalShapeRepresentation)

class Handle_StepShape_TransitionalShapeRepresentation(Handle_StepShape_ShapeRepresentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_TransitionalShapeRepresentation_swiginit(self, _StepShape.new_Handle_StepShape_TransitionalShapeRepresentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_TransitionalShapeRepresentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_TransitionalShapeRepresentation
Handle_StepShape_TransitionalShapeRepresentation.Nullify = new_instancemethod(_StepShape.Handle_StepShape_TransitionalShapeRepresentation_Nullify, None, Handle_StepShape_TransitionalShapeRepresentation)
Handle_StepShape_TransitionalShapeRepresentation.IsNull = new_instancemethod(_StepShape.Handle_StepShape_TransitionalShapeRepresentation_IsNull, None, Handle_StepShape_TransitionalShapeRepresentation)
Handle_StepShape_TransitionalShapeRepresentation._get_reference = new_instancemethod(_StepShape.Handle_StepShape_TransitionalShapeRepresentation__get_reference, None, Handle_StepShape_TransitionalShapeRepresentation)
Handle_StepShape_TransitionalShapeRepresentation_swigregister = _StepShape.Handle_StepShape_TransitionalShapeRepresentation_swigregister
Handle_StepShape_TransitionalShapeRepresentation_swigregister(Handle_StepShape_TransitionalShapeRepresentation)

def Handle_StepShape_TransitionalShapeRepresentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_TransitionalShapeRepresentation const":
    return _StepShape.Handle_StepShape_TransitionalShapeRepresentation_DownCast(AnObject)
Handle_StepShape_TransitionalShapeRepresentation_DownCast = _StepShape.Handle_StepShape_TransitionalShapeRepresentation_DownCast

class StepShape_Vertex(StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a Vertex

        :rtype: None

        """
        _StepShape.StepShape_Vertex_swiginit(self, _StepShape.new_StepShape_Vertex(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Vertex(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Vertex
StepShape_Vertex_swigregister = _StepShape.StepShape_Vertex_swigregister
StepShape_Vertex_swigregister(StepShape_Vertex)

class Handle_StepShape_Vertex(Handle_StepShape_TopologicalRepresentationItem):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Vertex_swiginit(self, _StepShape.new_Handle_StepShape_Vertex(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Vertex_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Vertex
Handle_StepShape_Vertex.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Vertex_Nullify, None, Handle_StepShape_Vertex)
Handle_StepShape_Vertex.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Vertex_IsNull, None, Handle_StepShape_Vertex)
Handle_StepShape_Vertex._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Vertex__get_reference, None, Handle_StepShape_Vertex)
Handle_StepShape_Vertex_swigregister = _StepShape.Handle_StepShape_Vertex_swigregister
Handle_StepShape_Vertex_swigregister(Handle_StepShape_Vertex)

def Handle_StepShape_Vertex_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Vertex const":
    return _StepShape.Handle_StepShape_Vertex_DownCast(AnObject)
Handle_StepShape_Vertex_DownCast = _StepShape.Handle_StepShape_Vertex_DownCast

class StepShape_BrepWithVoids(StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a BrepWithVoids

        :rtype: None

        """
        _StepShape.StepShape_BrepWithVoids_swiginit(self, _StepShape.new_StepShape_BrepWithVoids(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :param aVoids:
        :type aVoids: Handle_StepShape_HArray1OfOrientedClosedShell &
        :rtype: void

        """
        return _StepShape.StepShape_BrepWithVoids_Init(self, *args)


    def SetVoids(self, *args) -> "void":
        """
        :param aVoids:
        :type aVoids: Handle_StepShape_HArray1OfOrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_BrepWithVoids_SetVoids(self, *args)


    def Voids(self, *args) -> "Handle_StepShape_HArray1OfOrientedClosedShell":
        """
        :rtype: Handle_StepShape_HArray1OfOrientedClosedShell

        """
        return _StepShape.StepShape_BrepWithVoids_Voids(self, *args)


    def VoidsValue(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_BrepWithVoids_VoidsValue(self, *args)


    def NbVoids(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_BrepWithVoids_NbVoids(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_BrepWithVoids(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_BrepWithVoids
StepShape_BrepWithVoids.Init = new_instancemethod(_StepShape.StepShape_BrepWithVoids_Init, None, StepShape_BrepWithVoids)
StepShape_BrepWithVoids.SetVoids = new_instancemethod(_StepShape.StepShape_BrepWithVoids_SetVoids, None, StepShape_BrepWithVoids)
StepShape_BrepWithVoids.Voids = new_instancemethod(_StepShape.StepShape_BrepWithVoids_Voids, None, StepShape_BrepWithVoids)
StepShape_BrepWithVoids.VoidsValue = new_instancemethod(_StepShape.StepShape_BrepWithVoids_VoidsValue, None, StepShape_BrepWithVoids)
StepShape_BrepWithVoids.NbVoids = new_instancemethod(_StepShape.StepShape_BrepWithVoids_NbVoids, None, StepShape_BrepWithVoids)
StepShape_BrepWithVoids_swigregister = _StepShape.StepShape_BrepWithVoids_swigregister
StepShape_BrepWithVoids_swigregister(StepShape_BrepWithVoids)

class Handle_StepShape_BrepWithVoids(Handle_StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_BrepWithVoids_swiginit(self, _StepShape.new_Handle_StepShape_BrepWithVoids(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_BrepWithVoids_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_BrepWithVoids
Handle_StepShape_BrepWithVoids.Nullify = new_instancemethod(_StepShape.Handle_StepShape_BrepWithVoids_Nullify, None, Handle_StepShape_BrepWithVoids)
Handle_StepShape_BrepWithVoids.IsNull = new_instancemethod(_StepShape.Handle_StepShape_BrepWithVoids_IsNull, None, Handle_StepShape_BrepWithVoids)
Handle_StepShape_BrepWithVoids._get_reference = new_instancemethod(_StepShape.Handle_StepShape_BrepWithVoids__get_reference, None, Handle_StepShape_BrepWithVoids)
Handle_StepShape_BrepWithVoids_swigregister = _StepShape.Handle_StepShape_BrepWithVoids_swigregister
Handle_StepShape_BrepWithVoids_swigregister(Handle_StepShape_BrepWithVoids)

def Handle_StepShape_BrepWithVoids_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_BrepWithVoids const":
    return _StepShape.Handle_StepShape_BrepWithVoids_DownCast(AnObject)
Handle_StepShape_BrepWithVoids_DownCast = _StepShape.Handle_StepShape_BrepWithVoids_DownCast

class StepShape_ClosedShell(StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ClosedShell

        :rtype: None

        """
        _StepShape.StepShape_ClosedShell_swiginit(self, _StepShape.new_StepShape_ClosedShell(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ClosedShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ClosedShell
StepShape_ClosedShell_swigregister = _StepShape.StepShape_ClosedShell_swigregister
StepShape_ClosedShell_swigregister(StepShape_ClosedShell)

class Handle_StepShape_ClosedShell(Handle_StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ClosedShell_swiginit(self, _StepShape.new_Handle_StepShape_ClosedShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ClosedShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ClosedShell
Handle_StepShape_ClosedShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ClosedShell_Nullify, None, Handle_StepShape_ClosedShell)
Handle_StepShape_ClosedShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ClosedShell_IsNull, None, Handle_StepShape_ClosedShell)
Handle_StepShape_ClosedShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ClosedShell__get_reference, None, Handle_StepShape_ClosedShell)
Handle_StepShape_ClosedShell_swigregister = _StepShape.Handle_StepShape_ClosedShell_swigregister
Handle_StepShape_ClosedShell_swigregister(Handle_StepShape_ClosedShell)

def Handle_StepShape_ClosedShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ClosedShell const":
    return _StepShape.Handle_StepShape_ClosedShell_DownCast(AnObject)
Handle_StepShape_ClosedShell_DownCast = _StepShape.Handle_StepShape_ClosedShell_DownCast

class StepShape_ConnectedFaceSubSet(StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_ConnectedFaceSubSet_swiginit(self, _StepShape.new_StepShape_ConnectedFaceSubSet(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aConnectedFaceSet_CfsFaces:
        :type aConnectedFaceSet_CfsFaces: Handle_StepShape_HArray1OfFace &
        :param aParentFaceSet:
        :type aParentFaceSet: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_Init(self, *args)


    def ParentFaceSet(self, *args) -> "Handle_StepShape_ConnectedFaceSet":
        """
        * Returns field ParentFaceSet

        :rtype: Handle_StepShape_ConnectedFaceSet

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_ParentFaceSet(self, *args)


    def SetParentFaceSet(self, *args) -> "void":
        """
        * Set field ParentFaceSet

        :param ParentFaceSet:
        :type ParentFaceSet: Handle_StepShape_ConnectedFaceSet &
        :rtype: None

        """
        return _StepShape.StepShape_ConnectedFaceSubSet_SetParentFaceSet(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ConnectedFaceSubSet(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ConnectedFaceSubSet
StepShape_ConnectedFaceSubSet.Init = new_instancemethod(_StepShape.StepShape_ConnectedFaceSubSet_Init, None, StepShape_ConnectedFaceSubSet)
StepShape_ConnectedFaceSubSet.ParentFaceSet = new_instancemethod(_StepShape.StepShape_ConnectedFaceSubSet_ParentFaceSet, None, StepShape_ConnectedFaceSubSet)
StepShape_ConnectedFaceSubSet.SetParentFaceSet = new_instancemethod(_StepShape.StepShape_ConnectedFaceSubSet_SetParentFaceSet, None, StepShape_ConnectedFaceSubSet)
StepShape_ConnectedFaceSubSet_swigregister = _StepShape.StepShape_ConnectedFaceSubSet_swigregister
StepShape_ConnectedFaceSubSet_swigregister(StepShape_ConnectedFaceSubSet)

class Handle_StepShape_ConnectedFaceSubSet(Handle_StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ConnectedFaceSubSet_swiginit(self, _StepShape.new_Handle_StepShape_ConnectedFaceSubSet(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ConnectedFaceSubSet_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ConnectedFaceSubSet
Handle_StepShape_ConnectedFaceSubSet.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSubSet_Nullify, None, Handle_StepShape_ConnectedFaceSubSet)
Handle_StepShape_ConnectedFaceSubSet.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSubSet_IsNull, None, Handle_StepShape_ConnectedFaceSubSet)
Handle_StepShape_ConnectedFaceSubSet._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ConnectedFaceSubSet__get_reference, None, Handle_StepShape_ConnectedFaceSubSet)
Handle_StepShape_ConnectedFaceSubSet_swigregister = _StepShape.Handle_StepShape_ConnectedFaceSubSet_swigregister
Handle_StepShape_ConnectedFaceSubSet_swigregister(Handle_StepShape_ConnectedFaceSubSet)

def Handle_StepShape_ConnectedFaceSubSet_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ConnectedFaceSubSet const":
    return _StepShape.Handle_StepShape_ConnectedFaceSubSet_DownCast(AnObject)
Handle_StepShape_ConnectedFaceSubSet_DownCast = _StepShape.Handle_StepShape_ConnectedFaceSubSet_DownCast

class StepShape_EdgeCurve(StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a EdgeCurve

        :rtype: None

        """
        _StepShape.StepShape_EdgeCurve_swiginit(self, _StepShape.new_StepShape_EdgeCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeStart:
        :type aEdgeStart: Handle_StepShape_Vertex &
        :param aEdgeEnd:
        :type aEdgeEnd: Handle_StepShape_Vertex &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeStart:
        :type aEdgeStart: Handle_StepShape_Vertex &
        :param aEdgeEnd:
        :type aEdgeEnd: Handle_StepShape_Vertex &
        :param aEdgeGeometry:
        :type aEdgeGeometry: Handle_StepGeom_Curve &
        :param aSameSense:
        :type aSameSense: bool
        :rtype: void

        """
        return _StepShape.StepShape_EdgeCurve_Init(self, *args)


    def SetEdgeGeometry(self, *args) -> "void":
        """
        :param aEdgeGeometry:
        :type aEdgeGeometry: Handle_StepGeom_Curve &
        :rtype: None

        """
        return _StepShape.StepShape_EdgeCurve_SetEdgeGeometry(self, *args)


    def EdgeGeometry(self, *args) -> "Handle_StepGeom_Curve":
        """
        :rtype: Handle_StepGeom_Curve

        """
        return _StepShape.StepShape_EdgeCurve_EdgeGeometry(self, *args)


    def SetSameSense(self, *args) -> "void":
        """
        :param aSameSense:
        :type aSameSense: bool
        :rtype: None

        """
        return _StepShape.StepShape_EdgeCurve_SetSameSense(self, *args)


    def SameSense(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_EdgeCurve_SameSense(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_EdgeCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeCurve
StepShape_EdgeCurve.Init = new_instancemethod(_StepShape.StepShape_EdgeCurve_Init, None, StepShape_EdgeCurve)
StepShape_EdgeCurve.SetEdgeGeometry = new_instancemethod(_StepShape.StepShape_EdgeCurve_SetEdgeGeometry, None, StepShape_EdgeCurve)
StepShape_EdgeCurve.EdgeGeometry = new_instancemethod(_StepShape.StepShape_EdgeCurve_EdgeGeometry, None, StepShape_EdgeCurve)
StepShape_EdgeCurve.SetSameSense = new_instancemethod(_StepShape.StepShape_EdgeCurve_SetSameSense, None, StepShape_EdgeCurve)
StepShape_EdgeCurve.SameSense = new_instancemethod(_StepShape.StepShape_EdgeCurve_SameSense, None, StepShape_EdgeCurve)
StepShape_EdgeCurve_swigregister = _StepShape.StepShape_EdgeCurve_swigregister
StepShape_EdgeCurve_swigregister(StepShape_EdgeCurve)

class Handle_StepShape_EdgeCurve(Handle_StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_EdgeCurve_swiginit(self, _StepShape.new_Handle_StepShape_EdgeCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_EdgeCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_EdgeCurve
Handle_StepShape_EdgeCurve.Nullify = new_instancemethod(_StepShape.Handle_StepShape_EdgeCurve_Nullify, None, Handle_StepShape_EdgeCurve)
Handle_StepShape_EdgeCurve.IsNull = new_instancemethod(_StepShape.Handle_StepShape_EdgeCurve_IsNull, None, Handle_StepShape_EdgeCurve)
Handle_StepShape_EdgeCurve._get_reference = new_instancemethod(_StepShape.Handle_StepShape_EdgeCurve__get_reference, None, Handle_StepShape_EdgeCurve)
Handle_StepShape_EdgeCurve_swigregister = _StepShape.Handle_StepShape_EdgeCurve_swigregister
Handle_StepShape_EdgeCurve_swigregister(Handle_StepShape_EdgeCurve)

def Handle_StepShape_EdgeCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_EdgeCurve const":
    return _StepShape.Handle_StepShape_EdgeCurve_DownCast(AnObject)
Handle_StepShape_EdgeCurve_DownCast = _StepShape.Handle_StepShape_EdgeCurve_DownCast

class StepShape_EdgeLoop(StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a EdgeLoop

        :rtype: None

        """
        _StepShape.StepShape_EdgeLoop_swiginit(self, _StepShape.new_StepShape_EdgeLoop(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_EdgeLoop_Init(self, *args)


    def SetEdgeList(self, *args) -> "void":
        """
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: None

        """
        return _StepShape.StepShape_EdgeLoop_SetEdgeList(self, *args)


    def EdgeList(self, *args) -> "Handle_StepShape_HArray1OfOrientedEdge":
        """
        :rtype: Handle_StepShape_HArray1OfOrientedEdge

        """
        return _StepShape.StepShape_EdgeLoop_EdgeList(self, *args)


    def EdgeListValue(self, *args) -> "Handle_StepShape_OrientedEdge":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_OrientedEdge

        """
        return _StepShape.StepShape_EdgeLoop_EdgeListValue(self, *args)


    def NbEdgeList(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_EdgeLoop_NbEdgeList(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_EdgeLoop(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_EdgeLoop
StepShape_EdgeLoop.Init = new_instancemethod(_StepShape.StepShape_EdgeLoop_Init, None, StepShape_EdgeLoop)
StepShape_EdgeLoop.SetEdgeList = new_instancemethod(_StepShape.StepShape_EdgeLoop_SetEdgeList, None, StepShape_EdgeLoop)
StepShape_EdgeLoop.EdgeList = new_instancemethod(_StepShape.StepShape_EdgeLoop_EdgeList, None, StepShape_EdgeLoop)
StepShape_EdgeLoop.EdgeListValue = new_instancemethod(_StepShape.StepShape_EdgeLoop_EdgeListValue, None, StepShape_EdgeLoop)
StepShape_EdgeLoop.NbEdgeList = new_instancemethod(_StepShape.StepShape_EdgeLoop_NbEdgeList, None, StepShape_EdgeLoop)
StepShape_EdgeLoop_swigregister = _StepShape.StepShape_EdgeLoop_swigregister
StepShape_EdgeLoop_swigregister(StepShape_EdgeLoop)

class Handle_StepShape_EdgeLoop(Handle_StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_EdgeLoop_swiginit(self, _StepShape.new_Handle_StepShape_EdgeLoop(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_EdgeLoop_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_EdgeLoop
Handle_StepShape_EdgeLoop.Nullify = new_instancemethod(_StepShape.Handle_StepShape_EdgeLoop_Nullify, None, Handle_StepShape_EdgeLoop)
Handle_StepShape_EdgeLoop.IsNull = new_instancemethod(_StepShape.Handle_StepShape_EdgeLoop_IsNull, None, Handle_StepShape_EdgeLoop)
Handle_StepShape_EdgeLoop._get_reference = new_instancemethod(_StepShape.Handle_StepShape_EdgeLoop__get_reference, None, Handle_StepShape_EdgeLoop)
Handle_StepShape_EdgeLoop_swigregister = _StepShape.Handle_StepShape_EdgeLoop_swigregister
Handle_StepShape_EdgeLoop_swigregister(Handle_StepShape_EdgeLoop)

def Handle_StepShape_EdgeLoop_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_EdgeLoop const":
    return _StepShape.Handle_StepShape_EdgeLoop_DownCast(AnObject)
Handle_StepShape_EdgeLoop_DownCast = _StepShape.Handle_StepShape_EdgeLoop_DownCast

class StepShape_ExtrudedAreaSolid(StepShape_SweptAreaSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ExtrudedAreaSolid

        :rtype: None

        """
        _StepShape.StepShape_ExtrudedAreaSolid_swiginit(self, _StepShape.new_StepShape_ExtrudedAreaSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :param aExtrudedDirection:
        :type aExtrudedDirection: Handle_StepGeom_Direction &
        :param aDepth:
        :type aDepth: float
        :rtype: void

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_Init(self, *args)


    def SetExtrudedDirection(self, *args) -> "void":
        """
        :param aExtrudedDirection:
        :type aExtrudedDirection: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_SetExtrudedDirection(self, *args)


    def ExtrudedDirection(self, *args) -> "Handle_StepGeom_Direction":
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_ExtrudedDirection(self, *args)


    def SetDepth(self, *args) -> "void":
        """
        :param aDepth:
        :type aDepth: float
        :rtype: None

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_SetDepth(self, *args)


    def Depth(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_ExtrudedAreaSolid_Depth(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ExtrudedAreaSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ExtrudedAreaSolid
StepShape_ExtrudedAreaSolid.Init = new_instancemethod(_StepShape.StepShape_ExtrudedAreaSolid_Init, None, StepShape_ExtrudedAreaSolid)
StepShape_ExtrudedAreaSolid.SetExtrudedDirection = new_instancemethod(_StepShape.StepShape_ExtrudedAreaSolid_SetExtrudedDirection, None, StepShape_ExtrudedAreaSolid)
StepShape_ExtrudedAreaSolid.ExtrudedDirection = new_instancemethod(_StepShape.StepShape_ExtrudedAreaSolid_ExtrudedDirection, None, StepShape_ExtrudedAreaSolid)
StepShape_ExtrudedAreaSolid.SetDepth = new_instancemethod(_StepShape.StepShape_ExtrudedAreaSolid_SetDepth, None, StepShape_ExtrudedAreaSolid)
StepShape_ExtrudedAreaSolid.Depth = new_instancemethod(_StepShape.StepShape_ExtrudedAreaSolid_Depth, None, StepShape_ExtrudedAreaSolid)
StepShape_ExtrudedAreaSolid_swigregister = _StepShape.StepShape_ExtrudedAreaSolid_swigregister
StepShape_ExtrudedAreaSolid_swigregister(StepShape_ExtrudedAreaSolid)

class Handle_StepShape_ExtrudedAreaSolid(Handle_StepShape_SweptAreaSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ExtrudedAreaSolid_swiginit(self, _StepShape.new_Handle_StepShape_ExtrudedAreaSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ExtrudedAreaSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ExtrudedAreaSolid
Handle_StepShape_ExtrudedAreaSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedAreaSolid_Nullify, None, Handle_StepShape_ExtrudedAreaSolid)
Handle_StepShape_ExtrudedAreaSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedAreaSolid_IsNull, None, Handle_StepShape_ExtrudedAreaSolid)
Handle_StepShape_ExtrudedAreaSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedAreaSolid__get_reference, None, Handle_StepShape_ExtrudedAreaSolid)
Handle_StepShape_ExtrudedAreaSolid_swigregister = _StepShape.Handle_StepShape_ExtrudedAreaSolid_swigregister
Handle_StepShape_ExtrudedAreaSolid_swigregister(Handle_StepShape_ExtrudedAreaSolid)

def Handle_StepShape_ExtrudedAreaSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ExtrudedAreaSolid const":
    return _StepShape.Handle_StepShape_ExtrudedAreaSolid_DownCast(AnObject)
Handle_StepShape_ExtrudedAreaSolid_DownCast = _StepShape.Handle_StepShape_ExtrudedAreaSolid_DownCast

class StepShape_ExtrudedFaceSolid(StepShape_SweptFaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a ExtrudedFaceSolid

        :rtype: None

        """
        _StepShape.StepShape_ExtrudedFaceSolid_swiginit(self, _StepShape.new_StepShape_ExtrudedFaceSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :param aExtrudedDirection:
        :type aExtrudedDirection: Handle_StepGeom_Direction &
        :param aDepth:
        :type aDepth: float
        :rtype: None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_Init(self, *args)


    def SetExtrudedDirection(self, *args) -> "void":
        """
        :param aExtrudedDirection:
        :type aExtrudedDirection: Handle_StepGeom_Direction &
        :rtype: None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_SetExtrudedDirection(self, *args)


    def ExtrudedDirection(self, *args) -> "Handle_StepGeom_Direction":
        """
        :rtype: Handle_StepGeom_Direction

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_ExtrudedDirection(self, *args)


    def SetDepth(self, *args) -> "void":
        """
        :param aDepth:
        :type aDepth: float
        :rtype: None

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_SetDepth(self, *args)


    def Depth(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_ExtrudedFaceSolid_Depth(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_ExtrudedFaceSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_ExtrudedFaceSolid
StepShape_ExtrudedFaceSolid.Init = new_instancemethod(_StepShape.StepShape_ExtrudedFaceSolid_Init, None, StepShape_ExtrudedFaceSolid)
StepShape_ExtrudedFaceSolid.SetExtrudedDirection = new_instancemethod(_StepShape.StepShape_ExtrudedFaceSolid_SetExtrudedDirection, None, StepShape_ExtrudedFaceSolid)
StepShape_ExtrudedFaceSolid.ExtrudedDirection = new_instancemethod(_StepShape.StepShape_ExtrudedFaceSolid_ExtrudedDirection, None, StepShape_ExtrudedFaceSolid)
StepShape_ExtrudedFaceSolid.SetDepth = new_instancemethod(_StepShape.StepShape_ExtrudedFaceSolid_SetDepth, None, StepShape_ExtrudedFaceSolid)
StepShape_ExtrudedFaceSolid.Depth = new_instancemethod(_StepShape.StepShape_ExtrudedFaceSolid_Depth, None, StepShape_ExtrudedFaceSolid)
StepShape_ExtrudedFaceSolid_swigregister = _StepShape.StepShape_ExtrudedFaceSolid_swigregister
StepShape_ExtrudedFaceSolid_swigregister(StepShape_ExtrudedFaceSolid)

class Handle_StepShape_ExtrudedFaceSolid(Handle_StepShape_SweptFaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_ExtrudedFaceSolid_swiginit(self, _StepShape.new_Handle_StepShape_ExtrudedFaceSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_ExtrudedFaceSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_ExtrudedFaceSolid
Handle_StepShape_ExtrudedFaceSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedFaceSolid_Nullify, None, Handle_StepShape_ExtrudedFaceSolid)
Handle_StepShape_ExtrudedFaceSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedFaceSolid_IsNull, None, Handle_StepShape_ExtrudedFaceSolid)
Handle_StepShape_ExtrudedFaceSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_ExtrudedFaceSolid__get_reference, None, Handle_StepShape_ExtrudedFaceSolid)
Handle_StepShape_ExtrudedFaceSolid_swigregister = _StepShape.Handle_StepShape_ExtrudedFaceSolid_swigregister
Handle_StepShape_ExtrudedFaceSolid_swigregister(Handle_StepShape_ExtrudedFaceSolid)

def Handle_StepShape_ExtrudedFaceSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_ExtrudedFaceSolid const":
    return _StepShape.Handle_StepShape_ExtrudedFaceSolid_DownCast(AnObject)
Handle_StepShape_ExtrudedFaceSolid_DownCast = _StepShape.Handle_StepShape_ExtrudedFaceSolid_DownCast

class StepShape_FaceOuterBound(StepShape_FaceBound):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FaceOuterBound

        :rtype: None

        """
        _StepShape.StepShape_FaceOuterBound_swiginit(self, _StepShape.new_StepShape_FaceOuterBound(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FaceOuterBound(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceOuterBound
StepShape_FaceOuterBound_swigregister = _StepShape.StepShape_FaceOuterBound_swigregister
StepShape_FaceOuterBound_swigregister(StepShape_FaceOuterBound)

class Handle_StepShape_FaceOuterBound(Handle_StepShape_FaceBound):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FaceOuterBound_swiginit(self, _StepShape.new_Handle_StepShape_FaceOuterBound(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FaceOuterBound_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FaceOuterBound
Handle_StepShape_FaceOuterBound.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FaceOuterBound_Nullify, None, Handle_StepShape_FaceOuterBound)
Handle_StepShape_FaceOuterBound.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FaceOuterBound_IsNull, None, Handle_StepShape_FaceOuterBound)
Handle_StepShape_FaceOuterBound._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FaceOuterBound__get_reference, None, Handle_StepShape_FaceOuterBound)
Handle_StepShape_FaceOuterBound_swigregister = _StepShape.Handle_StepShape_FaceOuterBound_swigregister
Handle_StepShape_FaceOuterBound_swigregister(Handle_StepShape_FaceOuterBound)

def Handle_StepShape_FaceOuterBound_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FaceOuterBound const":
    return _StepShape.Handle_StepShape_FaceOuterBound_DownCast(AnObject)
Handle_StepShape_FaceOuterBound_DownCast = _StepShape.Handle_StepShape_FaceOuterBound_DownCast

class StepShape_FaceSurface(StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FaceSurface

        :rtype: None

        """
        _StepShape.StepShape_FaceSurface_swiginit(self, _StepShape.new_StepShape_FaceSurface(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBounds:
        :type aBounds: Handle_StepShape_HArray1OfFaceBound &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBounds:
        :type aBounds: Handle_StepShape_HArray1OfFaceBound &
        :param aFaceGeometry:
        :type aFaceGeometry: Handle_StepGeom_Surface &
        :param aSameSense:
        :type aSameSense: bool
        :rtype: void

        """
        return _StepShape.StepShape_FaceSurface_Init(self, *args)


    def SetFaceGeometry(self, *args) -> "void":
        """
        :param aFaceGeometry:
        :type aFaceGeometry: Handle_StepGeom_Surface &
        :rtype: None

        """
        return _StepShape.StepShape_FaceSurface_SetFaceGeometry(self, *args)


    def FaceGeometry(self, *args) -> "Handle_StepGeom_Surface":
        """
        :rtype: Handle_StepGeom_Surface

        """
        return _StepShape.StepShape_FaceSurface_FaceGeometry(self, *args)


    def SetSameSense(self, *args) -> "void":
        """
        :param aSameSense:
        :type aSameSense: bool
        :rtype: None

        """
        return _StepShape.StepShape_FaceSurface_SetSameSense(self, *args)


    def SameSense(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_FaceSurface_SameSense(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FaceSurface(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FaceSurface
StepShape_FaceSurface.Init = new_instancemethod(_StepShape.StepShape_FaceSurface_Init, None, StepShape_FaceSurface)
StepShape_FaceSurface.SetFaceGeometry = new_instancemethod(_StepShape.StepShape_FaceSurface_SetFaceGeometry, None, StepShape_FaceSurface)
StepShape_FaceSurface.FaceGeometry = new_instancemethod(_StepShape.StepShape_FaceSurface_FaceGeometry, None, StepShape_FaceSurface)
StepShape_FaceSurface.SetSameSense = new_instancemethod(_StepShape.StepShape_FaceSurface_SetSameSense, None, StepShape_FaceSurface)
StepShape_FaceSurface.SameSense = new_instancemethod(_StepShape.StepShape_FaceSurface_SameSense, None, StepShape_FaceSurface)
StepShape_FaceSurface_swigregister = _StepShape.StepShape_FaceSurface_swigregister
StepShape_FaceSurface_swigregister(StepShape_FaceSurface)

class Handle_StepShape_FaceSurface(Handle_StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FaceSurface_swiginit(self, _StepShape.new_Handle_StepShape_FaceSurface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FaceSurface_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FaceSurface
Handle_StepShape_FaceSurface.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FaceSurface_Nullify, None, Handle_StepShape_FaceSurface)
Handle_StepShape_FaceSurface.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FaceSurface_IsNull, None, Handle_StepShape_FaceSurface)
Handle_StepShape_FaceSurface._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FaceSurface__get_reference, None, Handle_StepShape_FaceSurface)
Handle_StepShape_FaceSurface_swigregister = _StepShape.Handle_StepShape_FaceSurface_swigregister
Handle_StepShape_FaceSurface_swigregister(Handle_StepShape_FaceSurface)

def Handle_StepShape_FaceSurface_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FaceSurface const":
    return _StepShape.Handle_StepShape_FaceSurface_DownCast(AnObject)
Handle_StepShape_FaceSurface_DownCast = _StepShape.Handle_StepShape_FaceSurface_DownCast

class StepShape_FacetedBrep(StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FacetedBrep

        :rtype: None

        """
        _StepShape.StepShape_FacetedBrep_swiginit(self, _StepShape.new_StepShape_FacetedBrep(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FacetedBrep(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrep
StepShape_FacetedBrep_swigregister = _StepShape.StepShape_FacetedBrep_swigregister
StepShape_FacetedBrep_swigregister(StepShape_FacetedBrep)

class Handle_StepShape_FacetedBrep(Handle_StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FacetedBrep_swiginit(self, _StepShape.new_Handle_StepShape_FacetedBrep(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FacetedBrep_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FacetedBrep
Handle_StepShape_FacetedBrep.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrep_Nullify, None, Handle_StepShape_FacetedBrep)
Handle_StepShape_FacetedBrep.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrep_IsNull, None, Handle_StepShape_FacetedBrep)
Handle_StepShape_FacetedBrep._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrep__get_reference, None, Handle_StepShape_FacetedBrep)
Handle_StepShape_FacetedBrep_swigregister = _StepShape.Handle_StepShape_FacetedBrep_swigregister
Handle_StepShape_FacetedBrep_swigregister(Handle_StepShape_FacetedBrep)

def Handle_StepShape_FacetedBrep_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FacetedBrep const":
    return _StepShape.Handle_StepShape_FacetedBrep_DownCast(AnObject)
Handle_StepShape_FacetedBrep_DownCast = _StepShape.Handle_StepShape_FacetedBrep_DownCast

class StepShape_FacetedBrepAndBrepWithVoids(StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a FacetedBrepAndBrepWithVoids

        :rtype: None

        """
        _StepShape.StepShape_FacetedBrepAndBrepWithVoids_swiginit(self, _StepShape.new_StepShape_FacetedBrepAndBrepWithVoids(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :param aFacetedBrep:
        :type aFacetedBrep: Handle_StepShape_FacetedBrep &
        :param aBrepWithVoids:
        :type aBrepWithVoids: Handle_StepShape_BrepWithVoids &
        :rtype: None

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOuter:
        :type aOuter: Handle_StepShape_ClosedShell &
        :param aVoids:
        :type aVoids: Handle_StepShape_HArray1OfOrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_Init(self, *args)


    def SetFacetedBrep(self, *args) -> "void":
        """
        :param aFacetedBrep:
        :type aFacetedBrep: Handle_StepShape_FacetedBrep &
        :rtype: None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetFacetedBrep(self, *args)


    def FacetedBrep(self, *args) -> "Handle_StepShape_FacetedBrep":
        """
        :rtype: Handle_StepShape_FacetedBrep

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_FacetedBrep(self, *args)


    def SetBrepWithVoids(self, *args) -> "void":
        """
        :param aBrepWithVoids:
        :type aBrepWithVoids: Handle_StepShape_BrepWithVoids &
        :rtype: None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetBrepWithVoids(self, *args)


    def BrepWithVoids(self, *args) -> "Handle_StepShape_BrepWithVoids":
        """
        :rtype: Handle_StepShape_BrepWithVoids

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_BrepWithVoids(self, *args)


    def SetVoids(self, *args) -> "void":
        """
        :param aVoids:
        :type aVoids: Handle_StepShape_HArray1OfOrientedClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetVoids(self, *args)


    def Voids(self, *args) -> "Handle_StepShape_HArray1OfOrientedClosedShell":
        """
        :rtype: Handle_StepShape_HArray1OfOrientedClosedShell

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_Voids(self, *args)


    def VoidsValue(self, *args) -> "Handle_StepShape_OrientedClosedShell":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepShape_OrientedClosedShell

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_VoidsValue(self, *args)


    def NbVoids(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_FacetedBrepAndBrepWithVoids_NbVoids(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_FacetedBrepAndBrepWithVoids(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_FacetedBrepAndBrepWithVoids
StepShape_FacetedBrepAndBrepWithVoids.Init = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_Init, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.SetFacetedBrep = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetFacetedBrep, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.FacetedBrep = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_FacetedBrep, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.SetBrepWithVoids = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetBrepWithVoids, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.BrepWithVoids = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_BrepWithVoids, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.SetVoids = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_SetVoids, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.Voids = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_Voids, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.VoidsValue = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_VoidsValue, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids.NbVoids = new_instancemethod(_StepShape.StepShape_FacetedBrepAndBrepWithVoids_NbVoids, None, StepShape_FacetedBrepAndBrepWithVoids)
StepShape_FacetedBrepAndBrepWithVoids_swigregister = _StepShape.StepShape_FacetedBrepAndBrepWithVoids_swigregister
StepShape_FacetedBrepAndBrepWithVoids_swigregister(StepShape_FacetedBrepAndBrepWithVoids)

class Handle_StepShape_FacetedBrepAndBrepWithVoids(Handle_StepShape_ManifoldSolidBrep):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_swiginit(self, _StepShape.new_Handle_StepShape_FacetedBrepAndBrepWithVoids(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_FacetedBrepAndBrepWithVoids
Handle_StepShape_FacetedBrepAndBrepWithVoids.Nullify = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_Nullify, None, Handle_StepShape_FacetedBrepAndBrepWithVoids)
Handle_StepShape_FacetedBrepAndBrepWithVoids.IsNull = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_IsNull, None, Handle_StepShape_FacetedBrepAndBrepWithVoids)
Handle_StepShape_FacetedBrepAndBrepWithVoids._get_reference = new_instancemethod(_StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids__get_reference, None, Handle_StepShape_FacetedBrepAndBrepWithVoids)
Handle_StepShape_FacetedBrepAndBrepWithVoids_swigregister = _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_swigregister
Handle_StepShape_FacetedBrepAndBrepWithVoids_swigregister(Handle_StepShape_FacetedBrepAndBrepWithVoids)

def Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_FacetedBrepAndBrepWithVoids const":
    return _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast(AnObject)
Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast = _StepShape.Handle_StepShape_FacetedBrepAndBrepWithVoids_DownCast

class StepShape_OpenShell(StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OpenShell

        :rtype: None

        """
        _StepShape.StepShape_OpenShell_swiginit(self, _StepShape.new_StepShape_OpenShell(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OpenShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OpenShell
StepShape_OpenShell_swigregister = _StepShape.StepShape_OpenShell_swigregister
StepShape_OpenShell_swigregister(StepShape_OpenShell)

class Handle_StepShape_OpenShell(Handle_StepShape_ConnectedFaceSet):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OpenShell_swiginit(self, _StepShape.new_Handle_StepShape_OpenShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OpenShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OpenShell
Handle_StepShape_OpenShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OpenShell_Nullify, None, Handle_StepShape_OpenShell)
Handle_StepShape_OpenShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OpenShell_IsNull, None, Handle_StepShape_OpenShell)
Handle_StepShape_OpenShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OpenShell__get_reference, None, Handle_StepShape_OpenShell)
Handle_StepShape_OpenShell_swigregister = _StepShape.Handle_StepShape_OpenShell_swigregister
Handle_StepShape_OpenShell_swigregister(Handle_StepShape_OpenShell)

def Handle_StepShape_OpenShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OpenShell const":
    return _StepShape.Handle_StepShape_OpenShell_DownCast(AnObject)
Handle_StepShape_OpenShell_DownCast = _StepShape.Handle_StepShape_OpenShell_DownCast

class StepShape_OrientedEdge(StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrientedEdge

        :rtype: None

        """
        _StepShape.StepShape_OrientedEdge_swiginit(self, _StepShape.new_StepShape_OrientedEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeElement:
        :type aEdgeElement: Handle_StepShape_Edge &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_OrientedEdge_Init(self, *args)


    def SetEdgeElement(self, *args) -> "void":
        """
        :param aEdgeElement:
        :type aEdgeElement: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_OrientedEdge_SetEdgeElement(self, *args)


    def EdgeElement(self, *args) -> "Handle_StepShape_Edge":
        """
        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_OrientedEdge_EdgeElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_OrientedEdge_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_OrientedEdge_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OrientedEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedEdge
StepShape_OrientedEdge.Init = new_instancemethod(_StepShape.StepShape_OrientedEdge_Init, None, StepShape_OrientedEdge)
StepShape_OrientedEdge.SetEdgeElement = new_instancemethod(_StepShape.StepShape_OrientedEdge_SetEdgeElement, None, StepShape_OrientedEdge)
StepShape_OrientedEdge.EdgeElement = new_instancemethod(_StepShape.StepShape_OrientedEdge_EdgeElement, None, StepShape_OrientedEdge)
StepShape_OrientedEdge.SetOrientation = new_instancemethod(_StepShape.StepShape_OrientedEdge_SetOrientation, None, StepShape_OrientedEdge)
StepShape_OrientedEdge.Orientation = new_instancemethod(_StepShape.StepShape_OrientedEdge_Orientation, None, StepShape_OrientedEdge)
StepShape_OrientedEdge_swigregister = _StepShape.StepShape_OrientedEdge_swigregister
StepShape_OrientedEdge_swigregister(StepShape_OrientedEdge)

class Handle_StepShape_OrientedEdge(Handle_StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OrientedEdge_swiginit(self, _StepShape.new_Handle_StepShape_OrientedEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OrientedEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OrientedEdge
Handle_StepShape_OrientedEdge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OrientedEdge_Nullify, None, Handle_StepShape_OrientedEdge)
Handle_StepShape_OrientedEdge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OrientedEdge_IsNull, None, Handle_StepShape_OrientedEdge)
Handle_StepShape_OrientedEdge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OrientedEdge__get_reference, None, Handle_StepShape_OrientedEdge)
Handle_StepShape_OrientedEdge_swigregister = _StepShape.Handle_StepShape_OrientedEdge_swigregister
Handle_StepShape_OrientedEdge_swigregister(Handle_StepShape_OrientedEdge)

def Handle_StepShape_OrientedEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OrientedEdge const":
    return _StepShape.Handle_StepShape_OrientedEdge_DownCast(AnObject)
Handle_StepShape_OrientedEdge_DownCast = _StepShape.Handle_StepShape_OrientedEdge_DownCast

class StepShape_OrientedFace(StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrientedFace

        :rtype: None

        """
        _StepShape.StepShape_OrientedFace_swiginit(self, _StepShape.new_StepShape_OrientedFace(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aBounds:
        :type aBounds: Handle_StepShape_HArray1OfFaceBound &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aFaceElement:
        :type aFaceElement: Handle_StepShape_Face &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_OrientedFace_Init(self, *args)


    def SetFaceElement(self, *args) -> "void":
        """
        :param aFaceElement:
        :type aFaceElement: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_OrientedFace_SetFaceElement(self, *args)


    def FaceElement(self, *args) -> "Handle_StepShape_Face":
        """
        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_OrientedFace_FaceElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_OrientedFace_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_OrientedFace_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OrientedFace(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedFace
StepShape_OrientedFace.Init = new_instancemethod(_StepShape.StepShape_OrientedFace_Init, None, StepShape_OrientedFace)
StepShape_OrientedFace.SetFaceElement = new_instancemethod(_StepShape.StepShape_OrientedFace_SetFaceElement, None, StepShape_OrientedFace)
StepShape_OrientedFace.FaceElement = new_instancemethod(_StepShape.StepShape_OrientedFace_FaceElement, None, StepShape_OrientedFace)
StepShape_OrientedFace.SetOrientation = new_instancemethod(_StepShape.StepShape_OrientedFace_SetOrientation, None, StepShape_OrientedFace)
StepShape_OrientedFace.Orientation = new_instancemethod(_StepShape.StepShape_OrientedFace_Orientation, None, StepShape_OrientedFace)
StepShape_OrientedFace_swigregister = _StepShape.StepShape_OrientedFace_swigregister
StepShape_OrientedFace_swigregister(StepShape_OrientedFace)

class Handle_StepShape_OrientedFace(Handle_StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OrientedFace_swiginit(self, _StepShape.new_Handle_StepShape_OrientedFace(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OrientedFace_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OrientedFace
Handle_StepShape_OrientedFace.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OrientedFace_Nullify, None, Handle_StepShape_OrientedFace)
Handle_StepShape_OrientedFace.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OrientedFace_IsNull, None, Handle_StepShape_OrientedFace)
Handle_StepShape_OrientedFace._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OrientedFace__get_reference, None, Handle_StepShape_OrientedFace)
Handle_StepShape_OrientedFace_swigregister = _StepShape.Handle_StepShape_OrientedFace_swigregister
Handle_StepShape_OrientedFace_swigregister(Handle_StepShape_OrientedFace)

def Handle_StepShape_OrientedFace_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OrientedFace const":
    return _StepShape.Handle_StepShape_OrientedFace_DownCast(AnObject)
Handle_StepShape_OrientedFace_DownCast = _StepShape.Handle_StepShape_OrientedFace_DownCast

class StepShape_OrientedPath(StepShape_Path):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrientedPath

        :rtype: None

        """
        _StepShape.StepShape_OrientedPath_swiginit(self, _StepShape.new_StepShape_OrientedPath(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aEdgeList:
        :type aEdgeList: Handle_StepShape_HArray1OfOrientedEdge &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPathElement:
        :type aPathElement: Handle_StepShape_EdgeLoop &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_OrientedPath_Init(self, *args)


    def SetPathElement(self, *args) -> "void":
        """
        :param aPathElement:
        :type aPathElement: Handle_StepShape_EdgeLoop &
        :rtype: None

        """
        return _StepShape.StepShape_OrientedPath_SetPathElement(self, *args)


    def PathElement(self, *args) -> "Handle_StepShape_EdgeLoop":
        """
        :rtype: Handle_StepShape_EdgeLoop

        """
        return _StepShape.StepShape_OrientedPath_PathElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_OrientedPath_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_OrientedPath_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OrientedPath(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedPath
StepShape_OrientedPath.Init = new_instancemethod(_StepShape.StepShape_OrientedPath_Init, None, StepShape_OrientedPath)
StepShape_OrientedPath.SetPathElement = new_instancemethod(_StepShape.StepShape_OrientedPath_SetPathElement, None, StepShape_OrientedPath)
StepShape_OrientedPath.PathElement = new_instancemethod(_StepShape.StepShape_OrientedPath_PathElement, None, StepShape_OrientedPath)
StepShape_OrientedPath.SetOrientation = new_instancemethod(_StepShape.StepShape_OrientedPath_SetOrientation, None, StepShape_OrientedPath)
StepShape_OrientedPath.Orientation = new_instancemethod(_StepShape.StepShape_OrientedPath_Orientation, None, StepShape_OrientedPath)
StepShape_OrientedPath_swigregister = _StepShape.StepShape_OrientedPath_swigregister
StepShape_OrientedPath_swigregister(StepShape_OrientedPath)

class Handle_StepShape_OrientedPath(Handle_StepShape_Path):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OrientedPath_swiginit(self, _StepShape.new_Handle_StepShape_OrientedPath(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OrientedPath_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OrientedPath
Handle_StepShape_OrientedPath.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OrientedPath_Nullify, None, Handle_StepShape_OrientedPath)
Handle_StepShape_OrientedPath.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OrientedPath_IsNull, None, Handle_StepShape_OrientedPath)
Handle_StepShape_OrientedPath._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OrientedPath__get_reference, None, Handle_StepShape_OrientedPath)
Handle_StepShape_OrientedPath_swigregister = _StepShape.Handle_StepShape_OrientedPath_swigregister
Handle_StepShape_OrientedPath_swigregister(Handle_StepShape_OrientedPath)

def Handle_StepShape_OrientedPath_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OrientedPath const":
    return _StepShape.Handle_StepShape_OrientedPath_DownCast(AnObject)
Handle_StepShape_OrientedPath_DownCast = _StepShape.Handle_StepShape_OrientedPath_DownCast

class StepShape_PolyLoop(StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a PolyLoop

        :rtype: None

        """
        _StepShape.StepShape_PolyLoop_swiginit(self, _StepShape.new_StepShape_PolyLoop(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aPolygon:
        :type aPolygon: Handle_StepGeom_HArray1OfCartesianPoint &
        :rtype: void

        """
        return _StepShape.StepShape_PolyLoop_Init(self, *args)


    def SetPolygon(self, *args) -> "void":
        """
        :param aPolygon:
        :type aPolygon: Handle_StepGeom_HArray1OfCartesianPoint &
        :rtype: None

        """
        return _StepShape.StepShape_PolyLoop_SetPolygon(self, *args)


    def Polygon(self, *args) -> "Handle_StepGeom_HArray1OfCartesianPoint":
        """
        :rtype: Handle_StepGeom_HArray1OfCartesianPoint

        """
        return _StepShape.StepShape_PolyLoop_Polygon(self, *args)


    def PolygonValue(self, *args) -> "Handle_StepGeom_CartesianPoint":
        """
        :param num:
        :type num: int
        :rtype: Handle_StepGeom_CartesianPoint

        """
        return _StepShape.StepShape_PolyLoop_PolygonValue(self, *args)


    def NbPolygon(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _StepShape.StepShape_PolyLoop_NbPolygon(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_PolyLoop(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_PolyLoop
StepShape_PolyLoop.Init = new_instancemethod(_StepShape.StepShape_PolyLoop_Init, None, StepShape_PolyLoop)
StepShape_PolyLoop.SetPolygon = new_instancemethod(_StepShape.StepShape_PolyLoop_SetPolygon, None, StepShape_PolyLoop)
StepShape_PolyLoop.Polygon = new_instancemethod(_StepShape.StepShape_PolyLoop_Polygon, None, StepShape_PolyLoop)
StepShape_PolyLoop.PolygonValue = new_instancemethod(_StepShape.StepShape_PolyLoop_PolygonValue, None, StepShape_PolyLoop)
StepShape_PolyLoop.NbPolygon = new_instancemethod(_StepShape.StepShape_PolyLoop_NbPolygon, None, StepShape_PolyLoop)
StepShape_PolyLoop_swigregister = _StepShape.StepShape_PolyLoop_swigregister
StepShape_PolyLoop_swigregister(StepShape_PolyLoop)

class Handle_StepShape_PolyLoop(Handle_StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_PolyLoop_swiginit(self, _StepShape.new_Handle_StepShape_PolyLoop(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_PolyLoop_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_PolyLoop
Handle_StepShape_PolyLoop.Nullify = new_instancemethod(_StepShape.Handle_StepShape_PolyLoop_Nullify, None, Handle_StepShape_PolyLoop)
Handle_StepShape_PolyLoop.IsNull = new_instancemethod(_StepShape.Handle_StepShape_PolyLoop_IsNull, None, Handle_StepShape_PolyLoop)
Handle_StepShape_PolyLoop._get_reference = new_instancemethod(_StepShape.Handle_StepShape_PolyLoop__get_reference, None, Handle_StepShape_PolyLoop)
Handle_StepShape_PolyLoop_swigregister = _StepShape.Handle_StepShape_PolyLoop_swigregister
Handle_StepShape_PolyLoop_swigregister(Handle_StepShape_PolyLoop)

def Handle_StepShape_PolyLoop_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_PolyLoop const":
    return _StepShape.Handle_StepShape_PolyLoop_DownCast(AnObject)
Handle_StepShape_PolyLoop_DownCast = _StepShape.Handle_StepShape_PolyLoop_DownCast

class StepShape_RevolvedAreaSolid(StepShape_SweptAreaSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RevolvedAreaSolid

        :rtype: None

        """
        _StepShape.StepShape_RevolvedAreaSolid_swiginit(self, _StepShape.new_StepShape_RevolvedAreaSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepGeom_CurveBoundedSurface &
        :param aAxis:
        :type aAxis: Handle_StepGeom_Axis1Placement &
        :param aAngle:
        :type aAngle: float
        :rtype: void

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Init(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        :param aAxis:
        :type aAxis: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepShape.StepShape_RevolvedAreaSolid_SetAxis(self, *args)


    def Axis(self, *args) -> "Handle_StepGeom_Axis1Placement":
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Axis(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        :param aAngle:
        :type aAngle: float
        :rtype: None

        """
        return _StepShape.StepShape_RevolvedAreaSolid_SetAngle(self, *args)


    def Angle(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RevolvedAreaSolid_Angle(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_RevolvedAreaSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RevolvedAreaSolid
StepShape_RevolvedAreaSolid.Init = new_instancemethod(_StepShape.StepShape_RevolvedAreaSolid_Init, None, StepShape_RevolvedAreaSolid)
StepShape_RevolvedAreaSolid.SetAxis = new_instancemethod(_StepShape.StepShape_RevolvedAreaSolid_SetAxis, None, StepShape_RevolvedAreaSolid)
StepShape_RevolvedAreaSolid.Axis = new_instancemethod(_StepShape.StepShape_RevolvedAreaSolid_Axis, None, StepShape_RevolvedAreaSolid)
StepShape_RevolvedAreaSolid.SetAngle = new_instancemethod(_StepShape.StepShape_RevolvedAreaSolid_SetAngle, None, StepShape_RevolvedAreaSolid)
StepShape_RevolvedAreaSolid.Angle = new_instancemethod(_StepShape.StepShape_RevolvedAreaSolid_Angle, None, StepShape_RevolvedAreaSolid)
StepShape_RevolvedAreaSolid_swigregister = _StepShape.StepShape_RevolvedAreaSolid_swigregister
StepShape_RevolvedAreaSolid_swigregister(StepShape_RevolvedAreaSolid)

class Handle_StepShape_RevolvedAreaSolid(Handle_StepShape_SweptAreaSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_RevolvedAreaSolid_swiginit(self, _StepShape.new_Handle_StepShape_RevolvedAreaSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_RevolvedAreaSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_RevolvedAreaSolid
Handle_StepShape_RevolvedAreaSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_RevolvedAreaSolid_Nullify, None, Handle_StepShape_RevolvedAreaSolid)
Handle_StepShape_RevolvedAreaSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_RevolvedAreaSolid_IsNull, None, Handle_StepShape_RevolvedAreaSolid)
Handle_StepShape_RevolvedAreaSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_RevolvedAreaSolid__get_reference, None, Handle_StepShape_RevolvedAreaSolid)
Handle_StepShape_RevolvedAreaSolid_swigregister = _StepShape.Handle_StepShape_RevolvedAreaSolid_swigregister
Handle_StepShape_RevolvedAreaSolid_swigregister(Handle_StepShape_RevolvedAreaSolid)

def Handle_StepShape_RevolvedAreaSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_RevolvedAreaSolid const":
    return _StepShape.Handle_StepShape_RevolvedAreaSolid_DownCast(AnObject)
Handle_StepShape_RevolvedAreaSolid_DownCast = _StepShape.Handle_StepShape_RevolvedAreaSolid_DownCast

class StepShape_RevolvedFaceSolid(StepShape_SweptFaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a RevolvedFaceSolid

        :rtype: None

        """
        _StepShape.StepShape_RevolvedFaceSolid_swiginit(self, _StepShape.new_StepShape_RevolvedFaceSolid(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aSweptArea:
        :type aSweptArea: Handle_StepShape_FaceSurface &
        :param aAxis:
        :type aAxis: Handle_StepGeom_Axis1Placement &
        :param aAngle:
        :type aAngle: float
        :rtype: None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Init(self, *args)


    def SetAxis(self, *args) -> "void":
        """
        :param aAxis:
        :type aAxis: Handle_StepGeom_Axis1Placement &
        :rtype: None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_SetAxis(self, *args)


    def Axis(self, *args) -> "Handle_StepGeom_Axis1Placement":
        """
        :rtype: Handle_StepGeom_Axis1Placement

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Axis(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        :param aAngle:
        :type aAngle: float
        :rtype: None

        """
        return _StepShape.StepShape_RevolvedFaceSolid_SetAngle(self, *args)


    def Angle(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _StepShape.StepShape_RevolvedFaceSolid_Angle(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_RevolvedFaceSolid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_RevolvedFaceSolid
StepShape_RevolvedFaceSolid.Init = new_instancemethod(_StepShape.StepShape_RevolvedFaceSolid_Init, None, StepShape_RevolvedFaceSolid)
StepShape_RevolvedFaceSolid.SetAxis = new_instancemethod(_StepShape.StepShape_RevolvedFaceSolid_SetAxis, None, StepShape_RevolvedFaceSolid)
StepShape_RevolvedFaceSolid.Axis = new_instancemethod(_StepShape.StepShape_RevolvedFaceSolid_Axis, None, StepShape_RevolvedFaceSolid)
StepShape_RevolvedFaceSolid.SetAngle = new_instancemethod(_StepShape.StepShape_RevolvedFaceSolid_SetAngle, None, StepShape_RevolvedFaceSolid)
StepShape_RevolvedFaceSolid.Angle = new_instancemethod(_StepShape.StepShape_RevolvedFaceSolid_Angle, None, StepShape_RevolvedFaceSolid)
StepShape_RevolvedFaceSolid_swigregister = _StepShape.StepShape_RevolvedFaceSolid_swigregister
StepShape_RevolvedFaceSolid_swigregister(StepShape_RevolvedFaceSolid)

class Handle_StepShape_RevolvedFaceSolid(Handle_StepShape_SweptFaceSolid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_RevolvedFaceSolid_swiginit(self, _StepShape.new_Handle_StepShape_RevolvedFaceSolid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_RevolvedFaceSolid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_RevolvedFaceSolid
Handle_StepShape_RevolvedFaceSolid.Nullify = new_instancemethod(_StepShape.Handle_StepShape_RevolvedFaceSolid_Nullify, None, Handle_StepShape_RevolvedFaceSolid)
Handle_StepShape_RevolvedFaceSolid.IsNull = new_instancemethod(_StepShape.Handle_StepShape_RevolvedFaceSolid_IsNull, None, Handle_StepShape_RevolvedFaceSolid)
Handle_StepShape_RevolvedFaceSolid._get_reference = new_instancemethod(_StepShape.Handle_StepShape_RevolvedFaceSolid__get_reference, None, Handle_StepShape_RevolvedFaceSolid)
Handle_StepShape_RevolvedFaceSolid_swigregister = _StepShape.Handle_StepShape_RevolvedFaceSolid_swigregister
Handle_StepShape_RevolvedFaceSolid_swigregister(Handle_StepShape_RevolvedFaceSolid)

def Handle_StepShape_RevolvedFaceSolid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_RevolvedFaceSolid const":
    return _StepShape.Handle_StepShape_RevolvedFaceSolid_DownCast(AnObject)
Handle_StepShape_RevolvedFaceSolid_DownCast = _StepShape.Handle_StepShape_RevolvedFaceSolid_DownCast

class StepShape_Subedge(StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_Subedge_swiginit(self, _StepShape.new_StepShape_Subedge(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aEdge_EdgeStart:
        :type aEdge_EdgeStart: Handle_StepShape_Vertex &
        :param aEdge_EdgeEnd:
        :type aEdge_EdgeEnd: Handle_StepShape_Vertex &
        :param aParentEdge:
        :type aParentEdge: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_Subedge_Init(self, *args)


    def ParentEdge(self, *args) -> "Handle_StepShape_Edge":
        """
        * Returns field ParentEdge

        :rtype: Handle_StepShape_Edge

        """
        return _StepShape.StepShape_Subedge_ParentEdge(self, *args)


    def SetParentEdge(self, *args) -> "void":
        """
        * Set field ParentEdge

        :param ParentEdge:
        :type ParentEdge: Handle_StepShape_Edge &
        :rtype: None

        """
        return _StepShape.StepShape_Subedge_SetParentEdge(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Subedge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Subedge
StepShape_Subedge.Init = new_instancemethod(_StepShape.StepShape_Subedge_Init, None, StepShape_Subedge)
StepShape_Subedge.ParentEdge = new_instancemethod(_StepShape.StepShape_Subedge_ParentEdge, None, StepShape_Subedge)
StepShape_Subedge.SetParentEdge = new_instancemethod(_StepShape.StepShape_Subedge_SetParentEdge, None, StepShape_Subedge)
StepShape_Subedge_swigregister = _StepShape.StepShape_Subedge_swigregister
StepShape_Subedge_swigregister(StepShape_Subedge)

class Handle_StepShape_Subedge(Handle_StepShape_Edge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Subedge_swiginit(self, _StepShape.new_Handle_StepShape_Subedge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Subedge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Subedge
Handle_StepShape_Subedge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Subedge_Nullify, None, Handle_StepShape_Subedge)
Handle_StepShape_Subedge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Subedge_IsNull, None, Handle_StepShape_Subedge)
Handle_StepShape_Subedge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Subedge__get_reference, None, Handle_StepShape_Subedge)
Handle_StepShape_Subedge_swigregister = _StepShape.Handle_StepShape_Subedge_swigregister
Handle_StepShape_Subedge_swigregister(Handle_StepShape_Subedge)

def Handle_StepShape_Subedge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Subedge const":
    return _StepShape.Handle_StepShape_Subedge_DownCast(AnObject)
Handle_StepShape_Subedge_DownCast = _StepShape.Handle_StepShape_Subedge_DownCast

class StepShape_Subface(StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_Subface_swiginit(self, _StepShape.new_StepShape_Subface(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aFace_Bounds:
        :type aFace_Bounds: Handle_StepShape_HArray1OfFaceBound &
        :param aParentFace:
        :type aParentFace: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_Subface_Init(self, *args)


    def ParentFace(self, *args) -> "Handle_StepShape_Face":
        """
        * Returns field ParentFace

        :rtype: Handle_StepShape_Face

        """
        return _StepShape.StepShape_Subface_ParentFace(self, *args)


    def SetParentFace(self, *args) -> "void":
        """
        * Set field ParentFace

        :param ParentFace:
        :type ParentFace: Handle_StepShape_Face &
        :rtype: None

        """
        return _StepShape.StepShape_Subface_SetParentFace(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_Subface(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_Subface
StepShape_Subface.Init = new_instancemethod(_StepShape.StepShape_Subface_Init, None, StepShape_Subface)
StepShape_Subface.ParentFace = new_instancemethod(_StepShape.StepShape_Subface_ParentFace, None, StepShape_Subface)
StepShape_Subface.SetParentFace = new_instancemethod(_StepShape.StepShape_Subface_SetParentFace, None, StepShape_Subface)
StepShape_Subface_swigregister = _StepShape.StepShape_Subface_swigregister
StepShape_Subface_swigregister(StepShape_Subface)

class Handle_StepShape_Subface(Handle_StepShape_Face):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_Subface_swiginit(self, _StepShape.new_Handle_StepShape_Subface(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_Subface_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_Subface
Handle_StepShape_Subface.Nullify = new_instancemethod(_StepShape.Handle_StepShape_Subface_Nullify, None, Handle_StepShape_Subface)
Handle_StepShape_Subface.IsNull = new_instancemethod(_StepShape.Handle_StepShape_Subface_IsNull, None, Handle_StepShape_Subface)
Handle_StepShape_Subface._get_reference = new_instancemethod(_StepShape.Handle_StepShape_Subface__get_reference, None, Handle_StepShape_Subface)
Handle_StepShape_Subface_swigregister = _StepShape.Handle_StepShape_Subface_swigregister
Handle_StepShape_Subface_swigregister(Handle_StepShape_Subface)

def Handle_StepShape_Subface_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_Subface const":
    return _StepShape.Handle_StepShape_Subface_DownCast(AnObject)
Handle_StepShape_Subface_DownCast = _StepShape.Handle_StepShape_Subface_DownCast

class StepShape_VertexLoop(StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a VertexLoop

        :rtype: None

        """
        _StepShape.StepShape_VertexLoop_swiginit(self, _StepShape.new_StepShape_VertexLoop(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aLoopVertex:
        :type aLoopVertex: Handle_StepShape_Vertex &
        :rtype: void

        """
        return _StepShape.StepShape_VertexLoop_Init(self, *args)


    def SetLoopVertex(self, *args) -> "void":
        """
        :param aLoopVertex:
        :type aLoopVertex: Handle_StepShape_Vertex &
        :rtype: None

        """
        return _StepShape.StepShape_VertexLoop_SetLoopVertex(self, *args)


    def LoopVertex(self, *args) -> "Handle_StepShape_Vertex":
        """
        :rtype: Handle_StepShape_Vertex

        """
        return _StepShape.StepShape_VertexLoop_LoopVertex(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_VertexLoop(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_VertexLoop
StepShape_VertexLoop.Init = new_instancemethod(_StepShape.StepShape_VertexLoop_Init, None, StepShape_VertexLoop)
StepShape_VertexLoop.SetLoopVertex = new_instancemethod(_StepShape.StepShape_VertexLoop_SetLoopVertex, None, StepShape_VertexLoop)
StepShape_VertexLoop.LoopVertex = new_instancemethod(_StepShape.StepShape_VertexLoop_LoopVertex, None, StepShape_VertexLoop)
StepShape_VertexLoop_swigregister = _StepShape.StepShape_VertexLoop_swigregister
StepShape_VertexLoop_swigregister(StepShape_VertexLoop)

class Handle_StepShape_VertexLoop(Handle_StepShape_Loop):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_VertexLoop_swiginit(self, _StepShape.new_Handle_StepShape_VertexLoop(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_VertexLoop_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_VertexLoop
Handle_StepShape_VertexLoop.Nullify = new_instancemethod(_StepShape.Handle_StepShape_VertexLoop_Nullify, None, Handle_StepShape_VertexLoop)
Handle_StepShape_VertexLoop.IsNull = new_instancemethod(_StepShape.Handle_StepShape_VertexLoop_IsNull, None, Handle_StepShape_VertexLoop)
Handle_StepShape_VertexLoop._get_reference = new_instancemethod(_StepShape.Handle_StepShape_VertexLoop__get_reference, None, Handle_StepShape_VertexLoop)
Handle_StepShape_VertexLoop_swigregister = _StepShape.Handle_StepShape_VertexLoop_swigregister
Handle_StepShape_VertexLoop_swigregister(Handle_StepShape_VertexLoop)

def Handle_StepShape_VertexLoop_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_VertexLoop const":
    return _StepShape.Handle_StepShape_VertexLoop_DownCast(AnObject)
Handle_StepShape_VertexLoop_DownCast = _StepShape.Handle_StepShape_VertexLoop_DownCast

class StepShape_VertexPoint(StepShape_Vertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a VertexPoint

        :rtype: None

        """
        _StepShape.StepShape_VertexPoint_swiginit(self, _StepShape.new_StepShape_VertexPoint(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aVertexGeometry:
        :type aVertexGeometry: Handle_StepGeom_Point &
        :rtype: void

        """
        return _StepShape.StepShape_VertexPoint_Init(self, *args)


    def SetVertexGeometry(self, *args) -> "void":
        """
        :param aVertexGeometry:
        :type aVertexGeometry: Handle_StepGeom_Point &
        :rtype: None

        """
        return _StepShape.StepShape_VertexPoint_SetVertexGeometry(self, *args)


    def VertexGeometry(self, *args) -> "Handle_StepGeom_Point":
        """
        :rtype: Handle_StepGeom_Point

        """
        return _StepShape.StepShape_VertexPoint_VertexGeometry(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_VertexPoint(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_VertexPoint
StepShape_VertexPoint.Init = new_instancemethod(_StepShape.StepShape_VertexPoint_Init, None, StepShape_VertexPoint)
StepShape_VertexPoint.SetVertexGeometry = new_instancemethod(_StepShape.StepShape_VertexPoint_SetVertexGeometry, None, StepShape_VertexPoint)
StepShape_VertexPoint.VertexGeometry = new_instancemethod(_StepShape.StepShape_VertexPoint_VertexGeometry, None, StepShape_VertexPoint)
StepShape_VertexPoint_swigregister = _StepShape.StepShape_VertexPoint_swigregister
StepShape_VertexPoint_swigregister(StepShape_VertexPoint)

class Handle_StepShape_VertexPoint(Handle_StepShape_Vertex):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_VertexPoint_swiginit(self, _StepShape.new_Handle_StepShape_VertexPoint(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_VertexPoint_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_VertexPoint
Handle_StepShape_VertexPoint.Nullify = new_instancemethod(_StepShape.Handle_StepShape_VertexPoint_Nullify, None, Handle_StepShape_VertexPoint)
Handle_StepShape_VertexPoint.IsNull = new_instancemethod(_StepShape.Handle_StepShape_VertexPoint_IsNull, None, Handle_StepShape_VertexPoint)
Handle_StepShape_VertexPoint._get_reference = new_instancemethod(_StepShape.Handle_StepShape_VertexPoint__get_reference, None, Handle_StepShape_VertexPoint)
Handle_StepShape_VertexPoint_swigregister = _StepShape.Handle_StepShape_VertexPoint_swigregister
Handle_StepShape_VertexPoint_swigregister(Handle_StepShape_VertexPoint)

def Handle_StepShape_VertexPoint_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_VertexPoint const":
    return _StepShape.Handle_StepShape_VertexPoint_DownCast(AnObject)
Handle_StepShape_VertexPoint_DownCast = _StepShape.Handle_StepShape_VertexPoint_DownCast

class StepShape_AdvancedFace(StepShape_FaceSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a AdvancedFace

        :rtype: None

        """
        _StepShape.StepShape_AdvancedFace_swiginit(self, _StepShape.new_StepShape_AdvancedFace(*args))

    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_AdvancedFace(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_AdvancedFace
StepShape_AdvancedFace_swigregister = _StepShape.StepShape_AdvancedFace_swigregister
StepShape_AdvancedFace_swigregister(StepShape_AdvancedFace)

class Handle_StepShape_AdvancedFace(Handle_StepShape_FaceSurface):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_AdvancedFace_swiginit(self, _StepShape.new_Handle_StepShape_AdvancedFace(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_AdvancedFace_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_AdvancedFace
Handle_StepShape_AdvancedFace.Nullify = new_instancemethod(_StepShape.Handle_StepShape_AdvancedFace_Nullify, None, Handle_StepShape_AdvancedFace)
Handle_StepShape_AdvancedFace.IsNull = new_instancemethod(_StepShape.Handle_StepShape_AdvancedFace_IsNull, None, Handle_StepShape_AdvancedFace)
Handle_StepShape_AdvancedFace._get_reference = new_instancemethod(_StepShape.Handle_StepShape_AdvancedFace__get_reference, None, Handle_StepShape_AdvancedFace)
Handle_StepShape_AdvancedFace_swigregister = _StepShape.Handle_StepShape_AdvancedFace_swigregister
Handle_StepShape_AdvancedFace_swigregister(Handle_StepShape_AdvancedFace)

def Handle_StepShape_AdvancedFace_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_AdvancedFace const":
    return _StepShape.Handle_StepShape_AdvancedFace_DownCast(AnObject)
Handle_StepShape_AdvancedFace_DownCast = _StepShape.Handle_StepShape_AdvancedFace_DownCast

class StepShape_OrientedClosedShell(StepShape_ClosedShell):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrientedClosedShell

        :rtype: None

        """
        _StepShape.StepShape_OrientedClosedShell_swiginit(self, _StepShape.new_StepShape_OrientedClosedShell(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aCfsFaces:
        :type aCfsFaces: Handle_StepShape_HArray1OfFace &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aClosedShellElement:
        :type aClosedShellElement: Handle_StepShape_ClosedShell &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_OrientedClosedShell_Init(self, *args)


    def SetClosedShellElement(self, *args) -> "void":
        """
        :param aClosedShellElement:
        :type aClosedShellElement: Handle_StepShape_ClosedShell &
        :rtype: None

        """
        return _StepShape.StepShape_OrientedClosedShell_SetClosedShellElement(self, *args)


    def ClosedShellElement(self, *args) -> "Handle_StepShape_ClosedShell":
        """
        :rtype: Handle_StepShape_ClosedShell

        """
        return _StepShape.StepShape_OrientedClosedShell_ClosedShellElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_OrientedClosedShell_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_OrientedClosedShell_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OrientedClosedShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedClosedShell
StepShape_OrientedClosedShell.Init = new_instancemethod(_StepShape.StepShape_OrientedClosedShell_Init, None, StepShape_OrientedClosedShell)
StepShape_OrientedClosedShell.SetClosedShellElement = new_instancemethod(_StepShape.StepShape_OrientedClosedShell_SetClosedShellElement, None, StepShape_OrientedClosedShell)
StepShape_OrientedClosedShell.ClosedShellElement = new_instancemethod(_StepShape.StepShape_OrientedClosedShell_ClosedShellElement, None, StepShape_OrientedClosedShell)
StepShape_OrientedClosedShell.SetOrientation = new_instancemethod(_StepShape.StepShape_OrientedClosedShell_SetOrientation, None, StepShape_OrientedClosedShell)
StepShape_OrientedClosedShell.Orientation = new_instancemethod(_StepShape.StepShape_OrientedClosedShell_Orientation, None, StepShape_OrientedClosedShell)
StepShape_OrientedClosedShell_swigregister = _StepShape.StepShape_OrientedClosedShell_swigregister
StepShape_OrientedClosedShell_swigregister(StepShape_OrientedClosedShell)

class Handle_StepShape_OrientedClosedShell(Handle_StepShape_ClosedShell):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OrientedClosedShell_swiginit(self, _StepShape.new_Handle_StepShape_OrientedClosedShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OrientedClosedShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OrientedClosedShell
Handle_StepShape_OrientedClosedShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OrientedClosedShell_Nullify, None, Handle_StepShape_OrientedClosedShell)
Handle_StepShape_OrientedClosedShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OrientedClosedShell_IsNull, None, Handle_StepShape_OrientedClosedShell)
Handle_StepShape_OrientedClosedShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OrientedClosedShell__get_reference, None, Handle_StepShape_OrientedClosedShell)
Handle_StepShape_OrientedClosedShell_swigregister = _StepShape.Handle_StepShape_OrientedClosedShell_swigregister
Handle_StepShape_OrientedClosedShell_swigregister(Handle_StepShape_OrientedClosedShell)

def Handle_StepShape_OrientedClosedShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OrientedClosedShell const":
    return _StepShape.Handle_StepShape_OrientedClosedShell_DownCast(AnObject)
Handle_StepShape_OrientedClosedShell_DownCast = _StepShape.Handle_StepShape_OrientedClosedShell_DownCast

class StepShape_OrientedOpenShell(StepShape_OpenShell):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Returns a OrientedOpenShell

        :rtype: None

        """
        _StepShape.StepShape_OrientedOpenShell_swiginit(self, _StepShape.new_StepShape_OrientedOpenShell(*args))

    def Init(self, *args) -> "void":
        """
        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aCfsFaces:
        :type aCfsFaces: Handle_StepShape_HArray1OfFace &
        :rtype: void

        :param aName:
        :type aName: Handle_TCollection_HAsciiString &
        :param aOpenShellElement:
        :type aOpenShellElement: Handle_StepShape_OpenShell &
        :param aOrientation:
        :type aOrientation: bool
        :rtype: void

        """
        return _StepShape.StepShape_OrientedOpenShell_Init(self, *args)


    def SetOpenShellElement(self, *args) -> "void":
        """
        :param aOpenShellElement:
        :type aOpenShellElement: Handle_StepShape_OpenShell &
        :rtype: None

        """
        return _StepShape.StepShape_OrientedOpenShell_SetOpenShellElement(self, *args)


    def OpenShellElement(self, *args) -> "Handle_StepShape_OpenShell":
        """
        :rtype: Handle_StepShape_OpenShell

        """
        return _StepShape.StepShape_OrientedOpenShell_OpenShellElement(self, *args)


    def SetOrientation(self, *args) -> "void":
        """
        :param aOrientation:
        :type aOrientation: bool
        :rtype: None

        """
        return _StepShape.StepShape_OrientedOpenShell_SetOrientation(self, *args)


    def Orientation(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _StepShape.StepShape_OrientedOpenShell_Orientation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_OrientedOpenShell(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_OrientedOpenShell
StepShape_OrientedOpenShell.Init = new_instancemethod(_StepShape.StepShape_OrientedOpenShell_Init, None, StepShape_OrientedOpenShell)
StepShape_OrientedOpenShell.SetOpenShellElement = new_instancemethod(_StepShape.StepShape_OrientedOpenShell_SetOpenShellElement, None, StepShape_OrientedOpenShell)
StepShape_OrientedOpenShell.OpenShellElement = new_instancemethod(_StepShape.StepShape_OrientedOpenShell_OpenShellElement, None, StepShape_OrientedOpenShell)
StepShape_OrientedOpenShell.SetOrientation = new_instancemethod(_StepShape.StepShape_OrientedOpenShell_SetOrientation, None, StepShape_OrientedOpenShell)
StepShape_OrientedOpenShell.Orientation = new_instancemethod(_StepShape.StepShape_OrientedOpenShell_Orientation, None, StepShape_OrientedOpenShell)
StepShape_OrientedOpenShell_swigregister = _StepShape.StepShape_OrientedOpenShell_swigregister
StepShape_OrientedOpenShell_swigregister(StepShape_OrientedOpenShell)

class Handle_StepShape_OrientedOpenShell(Handle_StepShape_OpenShell):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_OrientedOpenShell_swiginit(self, _StepShape.new_Handle_StepShape_OrientedOpenShell(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_OrientedOpenShell_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_OrientedOpenShell
Handle_StepShape_OrientedOpenShell.Nullify = new_instancemethod(_StepShape.Handle_StepShape_OrientedOpenShell_Nullify, None, Handle_StepShape_OrientedOpenShell)
Handle_StepShape_OrientedOpenShell.IsNull = new_instancemethod(_StepShape.Handle_StepShape_OrientedOpenShell_IsNull, None, Handle_StepShape_OrientedOpenShell)
Handle_StepShape_OrientedOpenShell._get_reference = new_instancemethod(_StepShape.Handle_StepShape_OrientedOpenShell__get_reference, None, Handle_StepShape_OrientedOpenShell)
Handle_StepShape_OrientedOpenShell_swigregister = _StepShape.Handle_StepShape_OrientedOpenShell_swigregister
Handle_StepShape_OrientedOpenShell_swigregister(Handle_StepShape_OrientedOpenShell)

def Handle_StepShape_OrientedOpenShell_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_OrientedOpenShell const":
    return _StepShape.Handle_StepShape_OrientedOpenShell_DownCast(AnObject)
Handle_StepShape_OrientedOpenShell_DownCast = _StepShape.Handle_StepShape_OrientedOpenShell_DownCast

class StepShape_SeamEdge(StepShape_OrientedEdge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        """
        _StepShape.StepShape_SeamEdge_swiginit(self, _StepShape.new_StepShape_SeamEdge(*args))

    def Init(self, *args) -> "void":
        """
        * Initialize all fields (own and inherited)

        :param aRepresentationItem_Name:
        :type aRepresentationItem_Name: Handle_TCollection_HAsciiString &
        :param aOrientedEdge_EdgeElement:
        :type aOrientedEdge_EdgeElement: Handle_StepShape_Edge &
        :param aOrientedEdge_Orientation:
        :type aOrientedEdge_Orientation: bool
        :param aPcurveReference:
        :type aPcurveReference: Handle_StepGeom_Pcurve &
        :rtype: None

        """
        return _StepShape.StepShape_SeamEdge_Init(self, *args)


    def PcurveReference(self, *args) -> "Handle_StepGeom_Pcurve":
        """
        * Returns field PcurveReference

        :rtype: Handle_StepGeom_Pcurve

        """
        return _StepShape.StepShape_SeamEdge_PcurveReference(self, *args)


    def SetPcurveReference(self, *args) -> "void":
        """
        * Set field PcurveReference

        :param PcurveReference:
        :type PcurveReference: Handle_StepGeom_Pcurve &
        :rtype: None

        """
        return _StepShape.StepShape_SeamEdge_SetPcurveReference(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_StepShape_SeamEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _StepShape.delete_StepShape_SeamEdge
StepShape_SeamEdge.Init = new_instancemethod(_StepShape.StepShape_SeamEdge_Init, None, StepShape_SeamEdge)
StepShape_SeamEdge.PcurveReference = new_instancemethod(_StepShape.StepShape_SeamEdge_PcurveReference, None, StepShape_SeamEdge)
StepShape_SeamEdge.SetPcurveReference = new_instancemethod(_StepShape.StepShape_SeamEdge_SetPcurveReference, None, StepShape_SeamEdge)
StepShape_SeamEdge_swigregister = _StepShape.StepShape_SeamEdge_swigregister
StepShape_SeamEdge_swigregister(StepShape_SeamEdge)

class Handle_StepShape_SeamEdge(Handle_StepShape_OrientedEdge):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _StepShape.Handle_StepShape_SeamEdge_swiginit(self, _StepShape.new_Handle_StepShape_SeamEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_StepShape.Handle_StepShape_SeamEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _StepShape.delete_Handle_StepShape_SeamEdge
Handle_StepShape_SeamEdge.Nullify = new_instancemethod(_StepShape.Handle_StepShape_SeamEdge_Nullify, None, Handle_StepShape_SeamEdge)
Handle_StepShape_SeamEdge.IsNull = new_instancemethod(_StepShape.Handle_StepShape_SeamEdge_IsNull, None, Handle_StepShape_SeamEdge)
Handle_StepShape_SeamEdge._get_reference = new_instancemethod(_StepShape.Handle_StepShape_SeamEdge__get_reference, None, Handle_StepShape_SeamEdge)
Handle_StepShape_SeamEdge_swigregister = _StepShape.Handle_StepShape_SeamEdge_swigregister
Handle_StepShape_SeamEdge_swigregister(Handle_StepShape_SeamEdge)

def Handle_StepShape_SeamEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_StepShape_SeamEdge const":
    return _StepShape.Handle_StepShape_SeamEdge_DownCast(AnObject)
Handle_StepShape_SeamEdge_DownCast = _StepShape.Handle_StepShape_SeamEdge_DownCast



