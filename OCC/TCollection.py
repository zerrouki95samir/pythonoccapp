# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TCollection.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TCollection')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TCollection')
    _TCollection = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TCollection', [dirname(__file__)])
        except ImportError:
            import _TCollection
            return _TCollection
        try:
            _mod = imp.load_module('_TCollection', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TCollection = swig_import_helper()
    del swig_import_helper
else:
    import _TCollection
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TCollection.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TCollection.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TCollection.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TCollection.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TCollection.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TCollection.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TCollection.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TCollection.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TCollection.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TCollection.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TCollection.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TCollection.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TCollection.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TCollection.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TCollection.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TCollection.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TCollection.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TCollection.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.MMgt

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

TCollection_Left = _TCollection.TCollection_Left
TCollection_Right = _TCollection.TCollection_Right
class tcollection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def NextPrimeForMap(*args) -> "Standard_Integer":
        """
        * Returns a prime number greater than <I> suitable to dimension a Map. When <I> becomes great there is a limit on the result (today the limit is around 1 000 000). This is not a limit of the number of items but a limit in the number of buckets. i.e. there will be more collisions in the map.

        :param I:
        :type I: int
        :rtype: int

        """
        return _TCollection.tcollection_NextPrimeForMap(*args)

    NextPrimeForMap = staticmethod(NextPrimeForMap)

    __repr__ = _dumps_object


    def __init__(self):
        _TCollection.tcollection_swiginit(self, _TCollection.new_tcollection())
    __swig_destroy__ = _TCollection.delete_tcollection
tcollection_swigregister = _TCollection.tcollection_swigregister
tcollection_swigregister(tcollection)

def tcollection_NextPrimeForMap(*args) -> "Standard_Integer":
    """
    * Returns a prime number greater than <I> suitable to dimension a Map. When <I> becomes great there is a limit on the result (today the limit is around 1 000 000). This is not a limit of the number of items but a limit in the number of buckets. i.e. there will be more collisions in the map.

    :param I:
    :type I: int
    :rtype: int

    """
    return _TCollection.tcollection_NextPrimeForMap(*args)

class TCollection_AsciiString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a AsciiString to an empty AsciiString.

        :rtype: None

        * Initializes a AsciiString with a CString.

        :param message:
        :type message: char *
        :rtype: None

        * Initializes a AsciiString with a CString.

        :param message:
        :type message: char *
        :param aLen:
        :type aLen: int
        :rtype: None

        * Initializes a AsciiString with a single character.

        :param aChar:
        :type aChar: Standard_Character
        :rtype: None

        * Initializes an AsciiString with <length> space allocated. and filled with <filler>. This is usefull for buffers.

        :param length:
        :type length: int
        :param filler:
        :type filler: Standard_Character
        :rtype: None

        * Initializes an AsciiString with an integer value

        :param value:
        :type value: int
        :rtype: None

        * Initializes an AsciiString with a real value

        :param value:
        :type value: float
        :rtype: None

        * Initializes a AsciiString with another AsciiString.

        :param astring:
        :type astring: TCollection_AsciiString &
        :rtype: None

        * Initializes a AsciiString with copy of another AsciiString concatenated with the message character.

        :param astring:
        :type astring: TCollection_AsciiString &
        :param message:
        :type message: Standard_Character
        :rtype: None

        * Initializes a AsciiString with copy of another AsciiString concatenated with the message string.

        :param astring:
        :type astring: TCollection_AsciiString &
        :param message:
        :type message: char *
        :rtype: None

        * Initializes a AsciiString with copy of another AsciiString concatenated with the message string.

        :param astring:
        :type astring: TCollection_AsciiString &
        :param message:
        :type message: TCollection_AsciiString &
        :rtype: None

        * Creation by converting an extended string to an ascii string. If replaceNonAscii is non-null charecter, it will be used in place of any non-ascii character found in the source string. Otherwise, creates UTF-8 unicode string.

        :param astring:
        :type astring: TCollection_ExtendedString &
        :param replaceNonAscii: default value is 0
        :type replaceNonAscii: Standard_Character
        :rtype: None

        """
        _TCollection.TCollection_AsciiString_swiginit(self, _TCollection.new_TCollection_AsciiString(*args))

    def AssignCat(self, *args) -> "void":
        """
        * Appends <other> to me. This is an unary operator.

        :param other:
        :type other: Standard_Character
        :rtype: None

        * Appends <other> to me. This is an unary operator.

        :param other:
        :type other: int
        :rtype: None

        * Appends <other> to me. This is an unary operator.

        :param other:
        :type other: float
        :rtype: None

        * Appends <other> to me. This is an unary operator. ex: aString += 'Dummy' To catenate more than one CString, you must put a AsciiString before. Example: aString += 'Hello ' + 'Dolly' IS NOT VALID ! But astring += anotherString + 'Hello ' + 'Dolly' is valid.

        :param other:
        :type other: char *
        :rtype: None

        * Appends <other> to me. This is an unary operator. Example: aString += anotherString

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_AssignCat(self, *args)


    def __iadd__(self, *args) -> "void":
        """
        :param other:
        :type other: Standard_Character
        :rtype: None

        :param other:
        :type other: int
        :rtype: None

        :param other:
        :type other: float
        :rtype: None

        :param other:
        :type other: char *
        :rtype: None

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString___iadd__(self, *args)


    def Capitalize(self, *args) -> "void":
        """
        * Converts the first character into its corresponding upper-case character and the other characters into lowercase Example: before me = 'hellO ' after me = 'Hello '

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Capitalize(self, *args)


    def Cat(self, *args) -> "TCollection_AsciiString":
        """
        * Appends <other> to me. Syntax: aString = aString + 'Dummy' Example: aString contains 'I say ' aString = aString + 'Hello ' + 'Dolly' gives 'I say Hello Dolly' To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.

        :param other:
        :type other: Standard_Character
        :rtype: TCollection_AsciiString

        * Appends <other> to me. Syntax: aString = aString + 15; Example: aString contains 'I say ' gives 'I say 15' To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.

        :param other:
        :type other: int
        :rtype: TCollection_AsciiString

        * Appends <other> to me. Syntax: aString = aString + 15.15; Example: aString contains 'I say ' gives 'I say 15.15' To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.

        :param other:
        :type other: float
        :rtype: TCollection_AsciiString

        * Appends <other> to me. Syntax: aString = aString + 'Dummy' Example: aString contains 'I say ' aString = aString + 'Hello ' + 'Dolly' gives 'I say Hello Dolly' To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.

        :param other:
        :type other: char *
        :rtype: TCollection_AsciiString

        * Appends <other> to me. Example: aString = aString + anotherString

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Cat(self, *args)


    def __add__(self, *args) -> "TCollection_AsciiString":
        """
        :param other:
        :type other: Standard_Character
        :rtype: TCollection_AsciiString

        :param other:
        :type other: int
        :rtype: TCollection_AsciiString

        :param other:
        :type other: float
        :rtype: TCollection_AsciiString

        :param other:
        :type other: char *
        :rtype: TCollection_AsciiString

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString___add__(self, *args)


    def Center(self, *args) -> "void":
        """
        * Modifies this ASCII string so that its length becomes equal to Width and the new characters are equal to Filler. New characters are added both at the beginning and at the end of this string. If Width is less than the length of this ASCII string, nothing happens. Example TCollection_AsciiString myAlphabet('abcdef'); myAlphabet.Center(9,' '); assert ( myAlphabet == ' abcdef ' );

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Center(self, *args)


    def ChangeAll(self, *args) -> "void":
        """
        * Substitutes all the characters equal to aChar by NewChar in the AsciiString <self>. The substitution can be case sensitive. If you don't use default case sensitive, no matter wether aChar is uppercase or not. Example: me = 'Histake' -> ChangeAll('H','M',Standard_True) gives me = 'Mistake'

        :param aChar:
        :type aChar: Standard_Character
        :param NewChar:
        :type NewChar: Standard_Character
        :param CaseSensitive: default value is Standard_True
        :type CaseSensitive: bool
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_ChangeAll(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all characters contained in <self>. This produces an empty AsciiString.

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Clear(self, *args)


    def Copy(self, *args) -> "void":
        """
        * Copy <fromwhere> to <self>. Used as operator = Example: aString = anotherCString;

        :param fromwhere:
        :type fromwhere: char *
        :rtype: None

        * Copy <fromwhere> to <self>. Used as operator = Example: aString = anotherString;

        :param fromwhere:
        :type fromwhere: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Copy(self, *args)


    def Set(self, *args) -> "void":
        """
        :param fromwhere:
        :type fromwhere: char *
        :rtype: None

        :param fromwhere:
        :type fromwhere: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Set(self, *args)


    def Destroy(self, *args) -> "void":
        """
        * Frees memory allocated by AsciiString.

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Destroy(self, *args)


    def FirstLocationInSet(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the first character of <self> that is present in <Set>. The search begins to the index FromIndex and ends to the the index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 1

        :param Set:
        :type Set: TCollection_AsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_FirstLocationInSet(self, *args)


    def FirstLocationNotInSet(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the first character of <self> that is not present in the set <Set>. The search begins to the index FromIndex and ends to the the index ToIndex in <self>. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 3

        :param Set:
        :type Set: TCollection_AsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_FirstLocationNotInSet(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Inserts a Character at position <where>. Example: aString contains 'hy not ?' aString.Insert(1,'W'); gives 'Why not ?' aString contains 'Wh' aString.Insert(3,'y'); gives 'Why' aString contains 'Way' aString.Insert(2,'h'); gives 'Why'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_Character
        :rtype: None

        * Inserts a CString at position <where>. Example: aString contains 'O more' aString.Insert(2,'nce'); gives 'Once more'

        :param where:
        :type where: int
        :param what:
        :type what: char *
        :rtype: None

        * Inserts a AsciiString at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Insert(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        * Pushing a string after a specific index in the string <self>. Raises an exception if Index is out of bounds. - less than 0 (InsertAfter), or less than 1 (InsertBefore), or - greater than the number of characters in this ASCII string. Example: before me = 'cde' , Index = 0 , other = 'ab' after me = 'abcde' , other = 'ab'

        :param Index:
        :type Index: int
        :param other:
        :type other: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        * Pushing a string before a specific index in the string <self>. Raises an exception if Index is out of bounds. - less than 0 (InsertAfter), or less than 1 (InsertBefore), or - greater than the number of characters in this ASCII string. Example: before me = 'cde' , Index = 1 , other = 'ab' after me = 'abcde' , other = 'ab'

        :param Index:
        :type Index: int
        :param other:
        :type other: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_InsertBefore(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string <self> contains zero character.

        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsEmpty(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there are differences between the characters in this ASCII string and ASCII string other. Note that this method is an alias of operator !=

        :param other:
        :type other: char *
        :rtype: bool

        * Returns true if there are differences between the characters in this ASCII string and ASCII string other. Note that this method is an alias of operator !=

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsDifferent(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsLess(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is 'ASCII' less than <other>.

        :param other:
        :type other: char *
        :rtype: bool

        * Returns True if <self> is 'ASCII' less than <other>.

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsLess(self, *args)


    def __lt__(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: char *
        :rtype: bool

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString___lt__(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is 'ASCII' greater than <other>.

        :param other:
        :type other: char *
        :rtype: bool

        * Returns True if <self> is 'ASCII' greater than <other>.

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsGreater(self, *args)


    def __gt__(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: char *
        :rtype: bool

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString___gt__(self, *args)


    def IntegerValue(self, *args) -> "Standard_Integer":
        """
        * Converts a AsciiString containing a numeric expression to an Integer. Example: '215' returns 215.

        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_IntegerValue(self, *args)


    def IsIntegerValue(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the AsciiString contains an integer value. Note: an integer value is considered to be a real value as well.

        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsIntegerValue(self, *args)


    def IsRealValue(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the AsciiString contains a real value. Note: an integer value is considered to be a real value as well.

        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsRealValue(self, *args)


    def IsAscii(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the AsciiString contains only ASCII characters between ' ' and '~'. This means no control character and no extended ASCII code.

        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsAscii(self, *args)


    def LeftAdjust(self, *args) -> "void":
        """
        * Removes all space characters in the begining of the string.

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_LeftAdjust(self, *args)


    def LeftJustify(self, *args) -> "void":
        """
        * left justify Length becomes equal to Width and the new characters are equal to Filler. If Width < Length nothing happens. Raises an exception if Width is less than zero. Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = 'abcdef '

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_LeftJustify(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns number of characters in <self>. This is the same functionality as 'strlen' in C. Example TCollection_AsciiString myAlphabet('abcdef'); assert ( myAlphabet.Length() == 6 ); - 1 is the position of the first character in this string. - The length of this string gives the position of its last character. - Positions less than or equal to zero, or greater than the length of this string are invalid in functions which identify a character of this string by its position.

        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_Length(self, *args)


    def Location(self, *args) -> "Standard_Integer":
        """
        * Returns an index in the string <self> of the first occurence of the string S in the string <self> from the starting index FromIndex to the ending index ToIndex returns zero if failure Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAaAa', S = 'Aa', FromIndex = 1, ToIndex = 7 after me = 'aabAaAa' returns 4

        :param other:
        :type other: TCollection_AsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        * Returns the index of the nth occurence of the character C in the string <self> from the starting index FromIndex to the ending index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAa', N = 3, C = 'a', FromIndex = 1, ToIndex = 5 after me = 'aabAa' returns 5

        :param N:
        :type N: int
        :param C:
        :type C: Standard_Character
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_Location(self, *args)


    def LowerCase(self, *args) -> "void":
        """
        * Converts <self> to its lower-case equivalent. Example TCollection_AsciiString myString('Hello Dolly'); myString.UpperCase(); assert ( myString == 'HELLO DOLLY' ); myString.LowerCase(); assert ( myString == 'hello dolly' );

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_LowerCase(self, *args)


    def Prepend(self, *args) -> "void":
        """
        * Inserts the string other at the beginning of this ASCII string. Example TCollection_AsciiString myAlphabet('cde'); TCollection_AsciiString myBegin('ab'); myAlphabet.Prepend(myBegin); assert ( myAlphabet == 'abcde' );

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Prepend(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(TCollection_AsciiString self) -> std::string"""
        return _TCollection.TCollection_AsciiString_PrintToString(self)


    def ReadFromString(self, src: 'std::string') -> "void":
        """ReadFromString(TCollection_AsciiString self, std::string src)"""
        return _TCollection.TCollection_AsciiString_ReadFromString(self, src)


    def RealValue(self, *args) -> "Standard_Real":
        """
        * Converts an AsciiString containing a numeric expression. to a Real. Example: ex: '215' returns 215.0. ex: '3.14159267' returns 3.14159267.

        :rtype: float

        """
        return _TCollection.TCollection_AsciiString_RealValue(self, *args)


    def RemoveAll(self, *args) -> "void":
        """
        * Remove all the occurences of the character C in the string. Example: before me = 'HellLLo', C = 'L' , CaseSensitive = True after me = 'Hello'

        :param C:
        :type C: Standard_Character
        :param CaseSensitive:
        :type CaseSensitive: bool
        :rtype: None

        * Removes every <what> characters from <self>.

        :param what:
        :type what: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_RemoveAll(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Erases <ahowmany> characters from position <where>, <where> included. Example: aString contains 'Hello' aString.Remove(2,2) erases 2 characters from position 2 This gives 'Hlo'.

        :param where:
        :type where: int
        :param ahowmany: default value is 1
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Remove(self, *args)


    def RightAdjust(self, *args) -> "void":
        """
        * Removes all space characters at the end of the string.

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_RightAdjust(self, *args)


    def RightJustify(self, *args) -> "void":
        """
        * Right justify. Length becomes equal to Width and the new characters are equal to Filler. if Width < Length nothing happens. Raises an exception if Width is less than zero. Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = ' abcdef'

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_RightJustify(self, *args)


    def Search(self, *args) -> "Standard_Integer":
        """
        * Searches a CString in <self> from the beginning and returns position of first item <what> matching. it returns -1 if not found. Example: aString contains 'Sample single test' aString.Search('le') returns 5

        :param what:
        :type what: char *
        :rtype: int

        * Searches an AsciiString in <self> from the beginning and returns position of first item <what> matching. It returns -1 if not found.

        :param what:
        :type what: TCollection_AsciiString &
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_Search(self, *args)


    def SearchFromEnd(self, *args) -> "Standard_Integer":
        """
        * Searches a CString in a AsciiString from the end and returns position of first item <what> matching. It returns -1 if not found. Example: aString contains 'Sample single test' aString.SearchFromEnd('le') returns 12

        :param what:
        :type what: char *
        :rtype: int

        * Searches a AsciiString in another AsciiString from the end and returns position of first item <what> matching. It returns -1 if not found.

        :param what:
        :type what: TCollection_AsciiString &
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_SearchFromEnd(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Replaces one character in the AsciiString at position <where>. If <where> is less than zero or greater than the length of <self> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <self> = 'Garbage'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_Character
        :rtype: None

        * Replaces a part of <self> by a CString. If <where> is less than zero or greater than the length of <self> an exception is raised. Example: aString contains 'abcde' aString.SetValue(4,'1234567') gives <self> = 'abc1234567'

        :param where:
        :type where: int
        :param what:
        :type what: char *
        :rtype: None

        * Replaces a part of <self> by another AsciiString.

        :param where:
        :type where: int
        :param what:
        :type what: TCollection_AsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_SetValue(self, *args)


    def Split(self, *args) -> "TCollection_AsciiString":
        """
        * Splits a AsciiString into two sub-strings. Example: aString contains 'abcdefg' aString.Split(3) gives <self> = 'abc' and returns 'defg'

        :param where:
        :type where: int
        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Split(self, *args)


    def SubString(self, *args) -> "TCollection_AsciiString":
        """
        * Creation of a sub-string of the string <self>. The sub-string starts to the index Fromindex and ends to the index ToIndex. Raises an exception if ToIndex or FromIndex is out of bounds Example: before me = 'abcdefg', ToIndex=3, FromIndex=6 after me = 'abcdefg' returns 'cdef'

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_SubString(self, *args)


    def ToCString(self, *args) -> "char const *":
        """
        * Returns pointer to AsciiString (char *). This is useful for some casual manipulations. Warning: Because this 'char *' is 'const', you can't modify its contents.

        :rtype: char *

        """
        return _TCollection.TCollection_AsciiString_ToCString(self, *args)


    def Token(self, *args) -> "TCollection_AsciiString":
        """
        * Extracts <whichone> token from <self>. By default, the <separators> is set to space and tabulation. By default, the token extracted is the first one (whichone = 1). <separators> contains all separators you need. If no token indexed by <whichone> is found, it returns empty AsciiString. Example: aString contains 'This is a message' aString.Token() returns 'This' aString.Token(' ',4) returns 'message' aString.Token(' ',2) returns 'is' aString.Token(' ',9) returns '' Other separators than space character and tabulation are allowed : aString contains '1234; test:message , value' aString.Token('; :,',4) returns 'value' aString.Token('; :,',2) returns 'test'

        :param separators: default value is '	'
        :type separators: char *
        :param whichone: default value is 1
        :type whichone: int
        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_AsciiString_Token(self, *args)


    def Trunc(self, *args) -> "void":
        """
        * Truncates <self> to <ahowmany> characters. Example: me = 'Hello Dolly' -> Trunc(3) -> me = 'Hel'

        :param ahowmany:
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_Trunc(self, *args)


    def UpperCase(self, *args) -> "void":
        """
        * Converts <self> to its upper-case equivalent.

        :rtype: None

        """
        return _TCollection.TCollection_AsciiString_UpperCase(self, *args)


    def UsefullLength(self, *args) -> "Standard_Integer":
        """
        * Length of the string ignoring all spaces (' ') and the control character at the end.

        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_UsefullLength(self, *args)


    def Value(self, *args) -> "Standard_Character":
        """
        * Returns character at position <where> in <self>. If <where> is less than zero or greater than the lenght of <self>, an exception is raised. Example: aString contains 'Hello' aString.Value(2) returns 'e'

        :param where:
        :type where: int
        :rtype: Standard_Character

        """
        return _TCollection.TCollection_AsciiString_Value(self, *args)


    def HashCode(*args) -> "Standard_Integer":
        """
        * Hash function for AsciiString (returns the same Integer value that the hash function for ExtendedString)

        :param astring:
        :type astring: TCollection_AsciiString &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TCollection.TCollection_AsciiString_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns true if the characters in this ASCII string are identical to the characters in ASCII string other. Note that this method is an alias of operator ==.

        :param other:
        :type other: char *
        :rtype: bool

        * Returns true if the characters in this ASCII string are identical to the characters in ASCII string other. Note that this method is an alias of operator ==.

        :param other:
        :type other: TCollection_AsciiString &
        :rtype: bool

        * Returns True when the two strings are the same. (Just for HashCode for AsciiString)

        :param string1:
        :type string1: TCollection_AsciiString &
        :param string2:
        :type string2: TCollection_AsciiString &
        :rtype: bool

        * Returns True when the two strings are the same. (Just for HashCode for AsciiString)

        :param string1:
        :type string1: TCollection_AsciiString &
        :param string2:
        :type string2: char *
        :rtype: bool

        """
        return _TCollection.TCollection_AsciiString_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_AsciiString
TCollection_AsciiString.AssignCat = new_instancemethod(_TCollection.TCollection_AsciiString_AssignCat, None, TCollection_AsciiString)
TCollection_AsciiString.__iadd__ = new_instancemethod(_TCollection.TCollection_AsciiString___iadd__, None, TCollection_AsciiString)
TCollection_AsciiString.Capitalize = new_instancemethod(_TCollection.TCollection_AsciiString_Capitalize, None, TCollection_AsciiString)
TCollection_AsciiString.Cat = new_instancemethod(_TCollection.TCollection_AsciiString_Cat, None, TCollection_AsciiString)
TCollection_AsciiString.__add__ = new_instancemethod(_TCollection.TCollection_AsciiString___add__, None, TCollection_AsciiString)
TCollection_AsciiString.Center = new_instancemethod(_TCollection.TCollection_AsciiString_Center, None, TCollection_AsciiString)
TCollection_AsciiString.ChangeAll = new_instancemethod(_TCollection.TCollection_AsciiString_ChangeAll, None, TCollection_AsciiString)
TCollection_AsciiString.Clear = new_instancemethod(_TCollection.TCollection_AsciiString_Clear, None, TCollection_AsciiString)
TCollection_AsciiString.Copy = new_instancemethod(_TCollection.TCollection_AsciiString_Copy, None, TCollection_AsciiString)
TCollection_AsciiString.Set = new_instancemethod(_TCollection.TCollection_AsciiString_Set, None, TCollection_AsciiString)
TCollection_AsciiString.Destroy = new_instancemethod(_TCollection.TCollection_AsciiString_Destroy, None, TCollection_AsciiString)
TCollection_AsciiString.FirstLocationInSet = new_instancemethod(_TCollection.TCollection_AsciiString_FirstLocationInSet, None, TCollection_AsciiString)
TCollection_AsciiString.FirstLocationNotInSet = new_instancemethod(_TCollection.TCollection_AsciiString_FirstLocationNotInSet, None, TCollection_AsciiString)
TCollection_AsciiString.Insert = new_instancemethod(_TCollection.TCollection_AsciiString_Insert, None, TCollection_AsciiString)
TCollection_AsciiString.InsertAfter = new_instancemethod(_TCollection.TCollection_AsciiString_InsertAfter, None, TCollection_AsciiString)
TCollection_AsciiString.InsertBefore = new_instancemethod(_TCollection.TCollection_AsciiString_InsertBefore, None, TCollection_AsciiString)
TCollection_AsciiString.IsEmpty = new_instancemethod(_TCollection.TCollection_AsciiString_IsEmpty, None, TCollection_AsciiString)
TCollection_AsciiString.__eq_wrapper__ = new_instancemethod(_TCollection.TCollection_AsciiString___eq_wrapper__, None, TCollection_AsciiString)
TCollection_AsciiString.IsDifferent = new_instancemethod(_TCollection.TCollection_AsciiString_IsDifferent, None, TCollection_AsciiString)
TCollection_AsciiString.__ne_wrapper__ = new_instancemethod(_TCollection.TCollection_AsciiString___ne_wrapper__, None, TCollection_AsciiString)
TCollection_AsciiString.IsLess = new_instancemethod(_TCollection.TCollection_AsciiString_IsLess, None, TCollection_AsciiString)
TCollection_AsciiString.__lt__ = new_instancemethod(_TCollection.TCollection_AsciiString___lt__, None, TCollection_AsciiString)
TCollection_AsciiString.IsGreater = new_instancemethod(_TCollection.TCollection_AsciiString_IsGreater, None, TCollection_AsciiString)
TCollection_AsciiString.__gt__ = new_instancemethod(_TCollection.TCollection_AsciiString___gt__, None, TCollection_AsciiString)
TCollection_AsciiString.IntegerValue = new_instancemethod(_TCollection.TCollection_AsciiString_IntegerValue, None, TCollection_AsciiString)
TCollection_AsciiString.IsIntegerValue = new_instancemethod(_TCollection.TCollection_AsciiString_IsIntegerValue, None, TCollection_AsciiString)
TCollection_AsciiString.IsRealValue = new_instancemethod(_TCollection.TCollection_AsciiString_IsRealValue, None, TCollection_AsciiString)
TCollection_AsciiString.IsAscii = new_instancemethod(_TCollection.TCollection_AsciiString_IsAscii, None, TCollection_AsciiString)
TCollection_AsciiString.LeftAdjust = new_instancemethod(_TCollection.TCollection_AsciiString_LeftAdjust, None, TCollection_AsciiString)
TCollection_AsciiString.LeftJustify = new_instancemethod(_TCollection.TCollection_AsciiString_LeftJustify, None, TCollection_AsciiString)
TCollection_AsciiString.Length = new_instancemethod(_TCollection.TCollection_AsciiString_Length, None, TCollection_AsciiString)
TCollection_AsciiString.Location = new_instancemethod(_TCollection.TCollection_AsciiString_Location, None, TCollection_AsciiString)
TCollection_AsciiString.LowerCase = new_instancemethod(_TCollection.TCollection_AsciiString_LowerCase, None, TCollection_AsciiString)
TCollection_AsciiString.Prepend = new_instancemethod(_TCollection.TCollection_AsciiString_Prepend, None, TCollection_AsciiString)
TCollection_AsciiString.PrintToString = new_instancemethod(_TCollection.TCollection_AsciiString_PrintToString, None, TCollection_AsciiString)
TCollection_AsciiString.ReadFromString = new_instancemethod(_TCollection.TCollection_AsciiString_ReadFromString, None, TCollection_AsciiString)
TCollection_AsciiString.RealValue = new_instancemethod(_TCollection.TCollection_AsciiString_RealValue, None, TCollection_AsciiString)
TCollection_AsciiString.RemoveAll = new_instancemethod(_TCollection.TCollection_AsciiString_RemoveAll, None, TCollection_AsciiString)
TCollection_AsciiString.Remove = new_instancemethod(_TCollection.TCollection_AsciiString_Remove, None, TCollection_AsciiString)
TCollection_AsciiString.RightAdjust = new_instancemethod(_TCollection.TCollection_AsciiString_RightAdjust, None, TCollection_AsciiString)
TCollection_AsciiString.RightJustify = new_instancemethod(_TCollection.TCollection_AsciiString_RightJustify, None, TCollection_AsciiString)
TCollection_AsciiString.Search = new_instancemethod(_TCollection.TCollection_AsciiString_Search, None, TCollection_AsciiString)
TCollection_AsciiString.SearchFromEnd = new_instancemethod(_TCollection.TCollection_AsciiString_SearchFromEnd, None, TCollection_AsciiString)
TCollection_AsciiString.SetValue = new_instancemethod(_TCollection.TCollection_AsciiString_SetValue, None, TCollection_AsciiString)
TCollection_AsciiString.Split = new_instancemethod(_TCollection.TCollection_AsciiString_Split, None, TCollection_AsciiString)
TCollection_AsciiString.SubString = new_instancemethod(_TCollection.TCollection_AsciiString_SubString, None, TCollection_AsciiString)
TCollection_AsciiString.ToCString = new_instancemethod(_TCollection.TCollection_AsciiString_ToCString, None, TCollection_AsciiString)
TCollection_AsciiString.Token = new_instancemethod(_TCollection.TCollection_AsciiString_Token, None, TCollection_AsciiString)
TCollection_AsciiString.Trunc = new_instancemethod(_TCollection.TCollection_AsciiString_Trunc, None, TCollection_AsciiString)
TCollection_AsciiString.UpperCase = new_instancemethod(_TCollection.TCollection_AsciiString_UpperCase, None, TCollection_AsciiString)
TCollection_AsciiString.UsefullLength = new_instancemethod(_TCollection.TCollection_AsciiString_UsefullLength, None, TCollection_AsciiString)
TCollection_AsciiString.Value = new_instancemethod(_TCollection.TCollection_AsciiString_Value, None, TCollection_AsciiString)
TCollection_AsciiString_swigregister = _TCollection.TCollection_AsciiString_swigregister
TCollection_AsciiString_swigregister(TCollection_AsciiString)

def TCollection_AsciiString_HashCode(*args) -> "Standard_Integer":
    """
    * Hash function for AsciiString (returns the same Integer value that the hash function for ExtendedString)

    :param astring:
    :type astring: TCollection_AsciiString &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TCollection.TCollection_AsciiString_HashCode(*args)

def TCollection_AsciiString_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns true if the characters in this ASCII string are identical to the characters in ASCII string other. Note that this method is an alias of operator ==.

    :param other:
    :type other: char *
    :rtype: bool

    * Returns true if the characters in this ASCII string are identical to the characters in ASCII string other. Note that this method is an alias of operator ==.

    :param other:
    :type other: TCollection_AsciiString &
    :rtype: bool

    * Returns True when the two strings are the same. (Just for HashCode for AsciiString)

    :param string1:
    :type string1: TCollection_AsciiString &
    :param string2:
    :type string2: TCollection_AsciiString &
    :rtype: bool

    * Returns True when the two strings are the same. (Just for HashCode for AsciiString)

    :param string1:
    :type string1: TCollection_AsciiString &
    :param string2:
    :type string2: char *
    :rtype: bool

    """
    return _TCollection.TCollection_AsciiString_IsEqual(*args)

class TCollection_BaseSequence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * returns True if the sequence <self> contains no elements.

        :rtype: bool

        """
        return _TCollection.TCollection_BaseSequence_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns the number of element(s) in the sequence. Returns zero if the sequence is empty.

        :rtype: int

        """
        return _TCollection.TCollection_BaseSequence_Length(self, *args)


    def Reverse(self, *args) -> "void":
        """
        * Reverses the order of items on <self>. Example: before me = (A B C) after me = (C B A)

        :rtype: None

        """
        return _TCollection.TCollection_BaseSequence_Reverse(self, *args)


    def Exchange(self, *args) -> "void":
        """
        * Swaps elements which are located at positions <I> and <J> in <self>. Raises an exception if I or J is out of bound. Example: before me = (A B C), I = 1, J = 3 after me = (C B A)

        :param I:
        :type I: int
        :param J:
        :type J: int
        :rtype: None

        """
        return _TCollection.TCollection_BaseSequence_Exchange(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_BaseSequence
TCollection_BaseSequence.IsEmpty = new_instancemethod(_TCollection.TCollection_BaseSequence_IsEmpty, None, TCollection_BaseSequence)
TCollection_BaseSequence.Length = new_instancemethod(_TCollection.TCollection_BaseSequence_Length, None, TCollection_BaseSequence)
TCollection_BaseSequence.Reverse = new_instancemethod(_TCollection.TCollection_BaseSequence_Reverse, None, TCollection_BaseSequence)
TCollection_BaseSequence.Exchange = new_instancemethod(_TCollection.TCollection_BaseSequence_Exchange, None, TCollection_BaseSequence)
TCollection_BaseSequence_swigregister = _TCollection.TCollection_BaseSequence_swigregister
TCollection_BaseSequence_swigregister(TCollection_BaseSequence)

class TCollection_BasicMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def NbBuckets(self, *args) -> "Standard_Integer":
        """
        * Returns the number of buckets in <self>.

        :rtype: int

        """
        return _TCollection.TCollection_BasicMap_NbBuckets(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        * Returns the number of keys already stored in <self>.

        :rtype: int

        """
        return _TCollection.TCollection_BasicMap_Extent(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the map contains no keys. This is exactly Extent() == 0.

        :rtype: bool

        """
        return _TCollection.TCollection_BasicMap_IsEmpty(self, *args)


    def StatisticsToString(self) -> "std::string":
        """StatisticsToString(TCollection_BasicMap self) -> std::string"""
        return _TCollection.TCollection_BasicMap_StatisticsToString(self)


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_BasicMap
TCollection_BasicMap.NbBuckets = new_instancemethod(_TCollection.TCollection_BasicMap_NbBuckets, None, TCollection_BasicMap)
TCollection_BasicMap.Extent = new_instancemethod(_TCollection.TCollection_BasicMap_Extent, None, TCollection_BasicMap)
TCollection_BasicMap.IsEmpty = new_instancemethod(_TCollection.TCollection_BasicMap_IsEmpty, None, TCollection_BasicMap)
TCollection_BasicMap.StatisticsToString = new_instancemethod(_TCollection.TCollection_BasicMap_StatisticsToString, None, TCollection_BasicMap)
TCollection_BasicMap_swigregister = _TCollection.TCollection_BasicMap_swigregister
TCollection_BasicMap_swigregister(TCollection_BasicMap)

class TCollection_BasicMapIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Reset(self, *args) -> "void":
        """
        * Resets the iterator to the first node.

        :rtype: None

        """
        return _TCollection.TCollection_BasicMapIterator_Reset(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there is a current entry for this iterator in the map. Use the function Next to set this iterator to the position of the next entry, if it exists.

        :rtype: bool

        """
        return _TCollection.TCollection_BasicMapIterator_More(self, *args)


    def Next(self, *args) -> "void":
        """
        * Sets this iterator to the position of the next entry of the map. Nothing is changed if there is no more entry to explore in the map: this iterator is always positioned on the last entry of the map but the function More returns false.

        :rtype: None

        """
        return _TCollection.TCollection_BasicMapIterator_Next(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_BasicMapIterator
TCollection_BasicMapIterator.Reset = new_instancemethod(_TCollection.TCollection_BasicMapIterator_Reset, None, TCollection_BasicMapIterator)
TCollection_BasicMapIterator.More = new_instancemethod(_TCollection.TCollection_BasicMapIterator_More, None, TCollection_BasicMapIterator)
TCollection_BasicMapIterator.Next = new_instancemethod(_TCollection.TCollection_BasicMapIterator_Next, None, TCollection_BasicMapIterator)
TCollection_BasicMapIterator_swigregister = _TCollection.TCollection_BasicMapIterator_swigregister
TCollection_BasicMapIterator_swigregister(TCollection_BasicMapIterator)

class TCollection_ExtendedString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a ExtendedString to an empty ExtendedString.

        :rtype: None

        * Creation by converting a CString to an extended string. If <isMultiByte> is true then the string is treated as having UTF-8 coding. If it is not a UTF-8 then <isMultiByte> is ignored and each character is copied to ExtCharacter.

        :param astring:
        :type astring: char *
        :param isMultiByte: default value is Standard_False
        :type isMultiByte: bool
        :rtype: None

        * Creation by converting an ExtString to an extended string.

        :param astring:
        :type astring: Standard_ExtString
        :rtype: None

        * Initializes a AsciiString with a single character.

        :param aChar:
        :type aChar: Standard_Character
        :rtype: None

        * Initializes a ExtendedString with a single character.

        :param aChar:
        :type aChar: Standard_ExtCharacter
        :rtype: None

        * Initializes a ExtendedString with <length> space allocated. and filled with <filler>.This is useful for buffers.

        :param length:
        :type length: int
        :param filler:
        :type filler: Standard_ExtCharacter
        :rtype: None

        * Initializes an ExtendedString with an integer value

        :param value:
        :type value: int
        :rtype: None

        * Initializes an ExtendedString with a real value

        :param value:
        :type value: float
        :rtype: None

        * Initializes a ExtendedString with another ExtendedString.

        :param astring:
        :type astring: TCollection_ExtendedString &
        :rtype: None

        * Creation by converting an Ascii string to an extended string. The string is treated as having UTF-8 coding. If it is not a UTF-8 then each character is copied to ExtCharacter.

        :param astring:
        :type astring: TCollection_AsciiString &
        :rtype: None

        """
        _TCollection.TCollection_ExtendedString_swiginit(self, _TCollection.new_TCollection_ExtendedString(*args))

    def AssignCat(self, *args) -> "void":
        """
        * Appends the other extended string to this extended string. Note that this method is an alias of operator +=. Example: aString += anotherString

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_AssignCat(self, *args)


    def __iadd__(self, *args) -> "void":
        """
        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString___iadd__(self, *args)


    def Cat(self, *args) -> "TCollection_ExtendedString":
        """
        * Appends <other> to me.

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Cat(self, *args)


    def __add__(self, *args) -> "TCollection_ExtendedString":
        """
        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString___add__(self, *args)


    def ChangeAll(self, *args) -> "void":
        """
        * Substitutes all the characters equal to aChar by NewChar in the ExtendedString <self>. The substitution can be case sensitive. If you don't use default case sensitive, no matter wether aChar is uppercase or not.

        :param aChar:
        :type aChar: Standard_ExtCharacter
        :param NewChar:
        :type NewChar: Standard_ExtCharacter
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_ChangeAll(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all characters contained in <self>. This produces an empty ExtendedString.

        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Clear(self, *args)


    def Copy(self, *args) -> "void":
        """
        * Copy <fromwhere> to <self>. Used as operator =

        :param fromwhere:
        :type fromwhere: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Copy(self, *args)


    def Set(self, *args) -> "void":
        """
        :param fromwhere:
        :type fromwhere: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Set(self, *args)


    def Destroy(self, *args) -> "void":
        """
        * Frees memory allocated by ExtendedString.

        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Destroy(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Insert a Character at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        * Insert a ExtendedString at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Insert(self, *args)


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __eq__(self,right):
        try:
            return self.__eq_wrapper__(right)
        except:
            return False


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there are differences between the characters in this extended string and the other extended string. Note that this method is an alias of operator !=.

        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        * Returns true if there are differences between the characters in this extended string and the other extended string. Note that this method is an alias of operator !=.

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString_IsDifferent(self, *args)


    def __ne__(self,right):
        try:
            return self.__ne_wrapper__(right)
        except:
            return True


    def IsLess(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is less than <other>.

        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        * Returns True if <self> is less than <other>.

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString_IsLess(self, *args)


    def __lt__(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString___lt__(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is greater than <other>.

        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        * Returns True if <self> is greater than <other>.

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString_IsGreater(self, *args)


    def __gt__(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString___gt__(self, *args)


    def IsAscii(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the ExtendedString contains only 'Ascii Range' characters .

        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString_IsAscii(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns number of characters in <self>. This is the same functionality as 'strlen' in C.

        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_Length(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(TCollection_ExtendedString self) -> std::string"""
        return _TCollection.TCollection_ExtendedString_PrintToString(self)


    def RemoveAll(self, *args) -> "void":
        """
        * Removes every <what> characters from <self>.

        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_RemoveAll(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Erases <ahowmany> characters from position <where>,<where> included.

        :param where:
        :type where: int
        :param ahowmany: default value is 1
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Remove(self, *args)


    def Search(self, *args) -> "Standard_Integer":
        """
        * Searches a ExtendedString in <self> from the beginning and returns position of first item <what> matching. it returns -1 if not found.

        :param what:
        :type what: TCollection_ExtendedString &
        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_Search(self, *args)


    def SearchFromEnd(self, *args) -> "Standard_Integer":
        """
        * Searches a ExtendedString in another ExtendedString from the end and returns position of first item <what> matching. it returns -1 if not found.

        :param what:
        :type what: TCollection_ExtendedString &
        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_SearchFromEnd(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Replaces one character in the ExtendedString at position <where>. If <where> is less than zero or greater than the length of <self> an exception is raised.

        :param where:
        :type where: int
        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        * Replaces a part of <self> by another ExtendedString see above.

        :param where:
        :type where: int
        :param what:
        :type what: TCollection_ExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_SetValue(self, *args)


    def Split(self, *args) -> "TCollection_ExtendedString":
        """
        * Splits this extended string into two sub-strings at position where. - The second sub-string (from position where + 1 of this string to the end) is returned in a new extended string. - this extended string is modified: its last characters are removed, it becomes equal to the first sub-string (from the first character to position where). Example: aString contains 'abcdefg' aString.Split(3) gives <self> = 'abc' and returns 'defg'

        :param where:
        :type where: int
        :rtype: TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Split(self, *args)


    def Token(self, *args) -> "TCollection_ExtendedString":
        """
        * Extracts <whichone> token from <self>. By default, the <separators> is set to space and tabulation. By default, the token extracted is the first one (whichone = 1). <separators> contains all separators you need. If no token indexed by <whichone> is found, it returns an empty AsciiString. Example: aString contains 'This is a message' aString.Token() returns 'This' aString.Token(' ',4) returns 'message' aString.Token(' ',2) returns 'is' aString.Token(' ',9) returns '' Other separators than space character and tabulation are allowed : aString contains '1234; test:message , value' aString.Token('; :,',4) returns 'value' aString.Token('; :,',2) returns 'test'

        :param separators:
        :type separators: Standard_ExtString
        :param whichone: default value is 1
        :type whichone: int
        :rtype: TCollection_ExtendedString

        """
        return _TCollection.TCollection_ExtendedString_Token(self, *args)


    def ToExtString(self, *args) -> "Standard_ExtString":
        """
        * Returns pointer to ExtString

        :rtype: Standard_ExtString

        """
        return _TCollection.TCollection_ExtendedString_ToExtString(self, *args)


    def Trunc(self, *args) -> "void":
        """
        * Truncates <self> to <ahowmany> characters. Example: me = 'Hello Dolly' -> Trunc(3) -> me = 'Hel' Exceptions Standard_OutOfRange if ahowmany is greater than the length of this string.

        :param ahowmany:
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_ExtendedString_Trunc(self, *args)


    def Value(self, *args) -> "Standard_ExtCharacter":
        """
        * Returns character at position <where> in <self>. If <where> is less than zero or greater than the lenght of <self>, an exception is raised. Example: aString contains 'Hello' aString.Value(2) returns 'e' Exceptions Standard_OutOfRange if where lies outside the bounds of this extended string.

        :param where:
        :type where: int
        :rtype: Standard_ExtCharacter

        """
        return _TCollection.TCollection_ExtendedString_Value(self, *args)


    def HashCode(*args) -> "Standard_Integer":
        """
        * Returns a hashed value for the extended string astring within the range 1..Upper. Note: if astring is ASCII, the computed value is the same as the value computed with the HashCode function on a TCollection_AsciiString string composed with equivalent ASCII characters

        :param astring:
        :type astring: TCollection_ExtendedString &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==

        :param other:
        :type other: Standard_ExtString
        :rtype: bool

        * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==

        :param other:
        :type other: TCollection_ExtendedString &
        :rtype: bool

        * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==.

        :param string1:
        :type string1: TCollection_ExtendedString &
        :param string2:
        :type string2: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_ExtendedString_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    def ToUTF8CString(self, *args) -> "Standard_Integer":
        """
        * Converts the internal <mystring> to UTF8 coding and returns length of the out CString. A memory for the <theCString> should be allocated before call!

        :param theCString:
        :type theCString: Standard_PCharacter &
        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_ToUTF8CString(self, *args)


    def LengthOfCString(self, *args) -> "Standard_Integer":
        """
        * Returns expected CString length in UTF8 coding. It can be used for memory calculation before converting to CString containing symbols in UTF8 coding.

        :rtype: int

        """
        return _TCollection.TCollection_ExtendedString_LengthOfCString(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_ExtendedString
TCollection_ExtendedString.AssignCat = new_instancemethod(_TCollection.TCollection_ExtendedString_AssignCat, None, TCollection_ExtendedString)
TCollection_ExtendedString.__iadd__ = new_instancemethod(_TCollection.TCollection_ExtendedString___iadd__, None, TCollection_ExtendedString)
TCollection_ExtendedString.Cat = new_instancemethod(_TCollection.TCollection_ExtendedString_Cat, None, TCollection_ExtendedString)
TCollection_ExtendedString.__add__ = new_instancemethod(_TCollection.TCollection_ExtendedString___add__, None, TCollection_ExtendedString)
TCollection_ExtendedString.ChangeAll = new_instancemethod(_TCollection.TCollection_ExtendedString_ChangeAll, None, TCollection_ExtendedString)
TCollection_ExtendedString.Clear = new_instancemethod(_TCollection.TCollection_ExtendedString_Clear, None, TCollection_ExtendedString)
TCollection_ExtendedString.Copy = new_instancemethod(_TCollection.TCollection_ExtendedString_Copy, None, TCollection_ExtendedString)
TCollection_ExtendedString.Set = new_instancemethod(_TCollection.TCollection_ExtendedString_Set, None, TCollection_ExtendedString)
TCollection_ExtendedString.Destroy = new_instancemethod(_TCollection.TCollection_ExtendedString_Destroy, None, TCollection_ExtendedString)
TCollection_ExtendedString.Insert = new_instancemethod(_TCollection.TCollection_ExtendedString_Insert, None, TCollection_ExtendedString)
TCollection_ExtendedString.__eq_wrapper__ = new_instancemethod(_TCollection.TCollection_ExtendedString___eq_wrapper__, None, TCollection_ExtendedString)
TCollection_ExtendedString.IsDifferent = new_instancemethod(_TCollection.TCollection_ExtendedString_IsDifferent, None, TCollection_ExtendedString)
TCollection_ExtendedString.__ne_wrapper__ = new_instancemethod(_TCollection.TCollection_ExtendedString___ne_wrapper__, None, TCollection_ExtendedString)
TCollection_ExtendedString.IsLess = new_instancemethod(_TCollection.TCollection_ExtendedString_IsLess, None, TCollection_ExtendedString)
TCollection_ExtendedString.__lt__ = new_instancemethod(_TCollection.TCollection_ExtendedString___lt__, None, TCollection_ExtendedString)
TCollection_ExtendedString.IsGreater = new_instancemethod(_TCollection.TCollection_ExtendedString_IsGreater, None, TCollection_ExtendedString)
TCollection_ExtendedString.__gt__ = new_instancemethod(_TCollection.TCollection_ExtendedString___gt__, None, TCollection_ExtendedString)
TCollection_ExtendedString.IsAscii = new_instancemethod(_TCollection.TCollection_ExtendedString_IsAscii, None, TCollection_ExtendedString)
TCollection_ExtendedString.Length = new_instancemethod(_TCollection.TCollection_ExtendedString_Length, None, TCollection_ExtendedString)
TCollection_ExtendedString.PrintToString = new_instancemethod(_TCollection.TCollection_ExtendedString_PrintToString, None, TCollection_ExtendedString)
TCollection_ExtendedString.RemoveAll = new_instancemethod(_TCollection.TCollection_ExtendedString_RemoveAll, None, TCollection_ExtendedString)
TCollection_ExtendedString.Remove = new_instancemethod(_TCollection.TCollection_ExtendedString_Remove, None, TCollection_ExtendedString)
TCollection_ExtendedString.Search = new_instancemethod(_TCollection.TCollection_ExtendedString_Search, None, TCollection_ExtendedString)
TCollection_ExtendedString.SearchFromEnd = new_instancemethod(_TCollection.TCollection_ExtendedString_SearchFromEnd, None, TCollection_ExtendedString)
TCollection_ExtendedString.SetValue = new_instancemethod(_TCollection.TCollection_ExtendedString_SetValue, None, TCollection_ExtendedString)
TCollection_ExtendedString.Split = new_instancemethod(_TCollection.TCollection_ExtendedString_Split, None, TCollection_ExtendedString)
TCollection_ExtendedString.Token = new_instancemethod(_TCollection.TCollection_ExtendedString_Token, None, TCollection_ExtendedString)
TCollection_ExtendedString.ToExtString = new_instancemethod(_TCollection.TCollection_ExtendedString_ToExtString, None, TCollection_ExtendedString)
TCollection_ExtendedString.Trunc = new_instancemethod(_TCollection.TCollection_ExtendedString_Trunc, None, TCollection_ExtendedString)
TCollection_ExtendedString.Value = new_instancemethod(_TCollection.TCollection_ExtendedString_Value, None, TCollection_ExtendedString)
TCollection_ExtendedString.ToUTF8CString = new_instancemethod(_TCollection.TCollection_ExtendedString_ToUTF8CString, None, TCollection_ExtendedString)
TCollection_ExtendedString.LengthOfCString = new_instancemethod(_TCollection.TCollection_ExtendedString_LengthOfCString, None, TCollection_ExtendedString)
TCollection_ExtendedString_swigregister = _TCollection.TCollection_ExtendedString_swigregister
TCollection_ExtendedString_swigregister(TCollection_ExtendedString)

def TCollection_ExtendedString_HashCode(*args) -> "Standard_Integer":
    """
    * Returns a hashed value for the extended string astring within the range 1..Upper. Note: if astring is ASCII, the computed value is the same as the value computed with the HashCode function on a TCollection_AsciiString string composed with equivalent ASCII characters

    :param astring:
    :type astring: TCollection_ExtendedString &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TCollection.TCollection_ExtendedString_HashCode(*args)

def TCollection_ExtendedString_IsEqual(*args) -> "Standard_Boolean":
    """
    * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==

    :param other:
    :type other: Standard_ExtString
    :rtype: bool

    * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==

    :param other:
    :type other: TCollection_ExtendedString &
    :rtype: bool

    * Returns true if the characters in this extended string are identical to the characters in the other extended string. Note that this method is an alias of operator ==.

    :param string1:
    :type string1: TCollection_ExtendedString &
    :param string2:
    :type string2: TCollection_ExtendedString &
    :rtype: bool

    """
    return _TCollection.TCollection_ExtendedString_IsEqual(*args)

class TCollection_HAsciiString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a HAsciiString to an empty AsciiString.

        :rtype: None

        * Initializes a HAsciiString with a CString.

        :param message:
        :type message: char *
        :rtype: None

        * Initializes a HAsciiString with a single character.

        :param aChar:
        :type aChar: Standard_Character
        :rtype: None

        * Initializes a HAsciiString with <length> space allocated. and filled with <filler>.This is useful for buffers.

        :param length:
        :type length: int
        :param filler:
        :type filler: Standard_Character
        :rtype: None

        * Initializes a HAsciiString with an integer value

        :param value:
        :type value: int
        :rtype: None

        * Initializes a HAsciiString with a real value

        :param value:
        :type value: float
        :rtype: None

        * Initializes a HAsciiString with a HAsciiString.

        :param aString:
        :type aString: TCollection_AsciiString &
        :rtype: None

        * Initializes a HAsciiString with a HAsciiString.

        :param aString:
        :type aString: Handle_TCollection_HAsciiString &
        :rtype: None

        * Initializes a HAsciiString with a HAsciiString. If replaceNonAscii is non-null charecter, it will be used in place of any non-ascii character found in the source string. Otherwise, raises OutOfRange exception if at least one character in the source string is not in the 'Ascii range'.

        :param aString:
        :type aString: Handle_TCollection_HExtendedString &
        :param replaceNonAscii:
        :type replaceNonAscii: Standard_Character
        :rtype: None

        """
        _TCollection.TCollection_HAsciiString_swiginit(self, _TCollection.new_TCollection_HAsciiString(*args))

    def AssignCat(self, *args) -> "void":
        """
        * Appends <other> to me.

        :param other:
        :type other: char *
        :rtype: None

        * Appends <other> to me. Example: aString = aString + anotherString

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_AssignCat(self, *args)


    def Capitalize(self, *args) -> "void":
        """
        * Converts the first character into its corresponding upper-case character and the other characters into lowercase. Example: before me = 'hellO ' after me = 'Hello '

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Capitalize(self, *args)


    def Cat(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        * Creates a new string by concatenation of this ASCII string and the other ASCII string. Example: aString = aString + anotherString aString = aString + 'Dummy' aString contains 'I say ' aString = aString + 'Hello ' + 'Dolly' gives 'I say Hello Dolly' Warning: To catenate more than one CString, you must put a String before. So the following example is WRONG ! aString = 'Hello ' + 'Dolly' THIS IS NOT ALLOWED This rule is applicable to AssignCat (operator +=) too.

        :param other:
        :type other: char *
        :rtype: Handle_TCollection_HAsciiString

        * Creates a new string by concatenation of this ASCII string and the other ASCII string. Example: aString = aString + anotherString

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Cat(self, *args)


    def Center(self, *args) -> "void":
        """
        * Modifies this ASCII string so that its length becomes equal to Width and the new characters are equal to Filler. New characters are added both at the beginning and at the end of this string. If Width is less than the length of this ASCII string, nothing happens. Example Handle_TCollection_HAsciiString myAlphabet = new TCollection_HAsciiString ('abcdef'); myAlphabet->Center(9,' '); assert ( !strcmp( myAlphabet->ToCString(), ' abcdef ') );

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Center(self, *args)


    def ChangeAll(self, *args) -> "void":
        """
        * Replaces all characters equal to aChar by NewChar in this ASCII string. The substitution is case sensitive if CaseSensitive is true (default value). If you do not use the default case sensitive option, it does not matter whether aChar is upper-case or not. Example Handle_TCollection_HAsciiString myMistake = new TCollection_HAsciiString ('Hather'); myMistake->ChangeAll('H','F'); assert ( !strcmp( myMistake->ToCString(), 'Father') );

        :param aChar:
        :type aChar: Standard_Character
        :param NewChar:
        :type NewChar: Standard_Character
        :param CaseSensitive: default value is Standard_True
        :type CaseSensitive: bool
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_ChangeAll(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all characters contained in <self>. This produces an empty HAsciiString.

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Clear(self, *args)


    def FirstLocationInSet(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the first character of <self> that is present in <Set>. The search begins to the index FromIndex and ends to the the index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 1

        :param Set:
        :type Set: Handle_TCollection_HAsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_FirstLocationInSet(self, *args)


    def FirstLocationNotInSet(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the first character of <self> that is not present in the set <Set>. The search begins to the index FromIndex and ends to the the index ToIndex in <self>. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAcAa', S = 'Aa', FromIndex = 1, Toindex = 7 after me = 'aabAcAa' returns 3

        :param Set:
        :type Set: Handle_TCollection_HAsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_FirstLocationNotInSet(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Insert a Character at position <where>. Example: aString contains 'hy not ?' aString.Insert(1,'W'); gives 'Why not ?' aString contains 'Wh' aString.Insert(3,'y'); gives 'Why' aString contains 'Way' aString.Insert(2,'h'); gives 'Why'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_Character
        :rtype: None

        * Insert a HAsciiString at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: char *
        :rtype: None

        * Insert a HAsciiString at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Insert(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        * Inserts the other ASCII string a after a specific index in the string <self> Example: before me = 'cde' , Index = 0 , other = 'ab' after me = 'abcde' , other = 'ab'

        :param Index:
        :type Index: int
        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_InsertAfter(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        * Inserts the other ASCII string a before a specific index in the string <self> Raises an exception if Index is out of bounds Example: before me = 'cde' , Index = 1 , other = 'ab' after me = 'abcde' , other = 'ab'

        :param Index:
        :type Index: int
        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_InsertBefore(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string <self> contains zero character

        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsEmpty(self, *args)


    def IsLess(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is 'ASCII' less than <other>.

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsLess(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is 'ASCII' greater than <other>.

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsGreater(self, *args)


    def IntegerValue(self, *args) -> "Standard_Integer":
        """
        * Converts a HAsciiString containing a numeric expression to an Integer. Example: '215' returns 215.

        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_IntegerValue(self, *args)


    def IsIntegerValue(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string contains an integer value.

        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsIntegerValue(self, *args)


    def IsRealValue(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string contains a real value.

        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsRealValue(self, *args)


    def IsAscii(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string contains only ASCII characters between ' ' and '~'. This means no control character and no extended ASCII code.

        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsAscii(self, *args)


    def IsDifferent(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string S not contains same characters than the string <self>.

        :param S:
        :type S: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsDifferent(self, *args)


    def IsSameString(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string S contains same characters than the string <self>.

        :param S:
        :type S: Handle_TCollection_HAsciiString &
        :rtype: bool

        * Returns True if the string S contains same characters than the string <self>.

        :param S:
        :type S: Handle_TCollection_HAsciiString &
        :param CaseSensitive:
        :type CaseSensitive: bool
        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsSameString(self, *args)


    def LeftAdjust(self, *args) -> "void":
        """
        * Removes all space characters in the begining of the string

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_LeftAdjust(self, *args)


    def LeftJustify(self, *args) -> "void":
        """
        * Left justify. Length becomes equal to Width and the new characters are equal to Filler if Width < Length nothing happens Raises an exception if Width is less than zero Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = 'abcdef '

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_LeftJustify(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns number of characters in <self>. This is the same functionality as 'strlen' in C.

        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_Length(self, *args)


    def Location(self, *args) -> "Standard_Integer":
        """
        * returns an index in the string <self> of the first occurence of the string S in the string <self> from the starting index FromIndex to the ending index ToIndex returns zero if failure Raises an exception if FromIndex or ToIndex is out of range. Example: before me = 'aabAaAa', S = 'Aa', FromIndex = 1, ToIndex = 7 after me = 'aabAaAa' returns 4

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        * Returns the index of the nth occurence of the character C in the string <self> from the starting index FromIndex to the ending index ToIndex. Returns zero if failure. Raises an exception if FromIndex or ToIndex is out of range Example: before me = 'aabAa', N = 3, C = 'a', FromIndex = 1, ToIndex = 5 after me = 'aabAa' returns 5

        :param N:
        :type N: int
        :param C:
        :type C: Standard_Character
        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_Location(self, *args)


    def LowerCase(self, *args) -> "void":
        """
        * Converts <self> to its lower-case equivalent.

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_LowerCase(self, *args)


    def Prepend(self, *args) -> "void":
        """
        * Inserts the other string at the begining of the string <self> Example: before me = 'cde' , S = 'ab' after me = 'abcde' , S = 'ab'

        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Prepend(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(TCollection_HAsciiString self) -> std::string"""
        return _TCollection.TCollection_HAsciiString_PrintToString(self)


    def RealValue(self, *args) -> "Standard_Real":
        """
        * Converts a string containing a numeric expression to a Real. Example: '215' returns 215.0. '3.14159267' returns 3.14159267.

        :rtype: float

        """
        return _TCollection.TCollection_HAsciiString_RealValue(self, *args)


    def RemoveAll(self, *args) -> "void":
        """
        * Remove all the occurences of the character C in the string Example: before me = 'HellLLo', C = 'L' , CaseSensitive = True after me = 'Hello'

        :param C:
        :type C: Standard_Character
        :param CaseSensitive:
        :type CaseSensitive: bool
        :rtype: None

        * Removes every <what> characters from <self>

        :param what:
        :type what: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_RemoveAll(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Erases <ahowmany> characters from position <where>, <where> included. Example: aString contains 'Hello' aString.Erase(2,2) erases 2 characters from position 1 This gives 'Hlo'.

        :param where:
        :type where: int
        :param ahowmany: default value is 1
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Remove(self, *args)


    def RightAdjust(self, *args) -> "void":
        """
        * Removes all space characters at the end of the string.

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_RightAdjust(self, *args)


    def RightJustify(self, *args) -> "void":
        """
        * Right justify. Length becomes equal to Width and the new characters are equal to Filler if Width < Length nothing happens Raises an exception if Width is less than zero Example: before me = 'abcdef' , Width = 9 , Filler = ' ' after me = ' abcdef'

        :param Width:
        :type Width: int
        :param Filler:
        :type Filler: Standard_Character
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_RightJustify(self, *args)


    def Search(self, *args) -> "Standard_Integer":
        """
        * Searches a CString in <self> from the beginning and returns position of first item <what> matching. It returns -1 if not found. Example: aString contains 'Sample single test' aString.Search('le') returns 5

        :param what:
        :type what: char *
        :rtype: int

        * Searches a String in <self> from the beginning and returns position of first item <what> matching. it returns -1 if not found.

        :param what:
        :type what: Handle_TCollection_HAsciiString &
        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_Search(self, *args)


    def SearchFromEnd(self, *args) -> "Standard_Integer":
        """
        * Searches a CString in a String from the end and returns position of first item <what> matching. It returns -1 if not found. Example: aString contains 'Sample single test' aString.SearchFromEnd('le') returns 12

        :param what:
        :type what: char *
        :rtype: int

        * Searches a HAsciiString in another HAsciiString from the end and returns position of first item <what> matching. It returns -1 if not found.

        :param what:
        :type what: Handle_TCollection_HAsciiString &
        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_SearchFromEnd(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Replaces one character in the string at position <where>. If <where> is less than zero or greater than the length of <self> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <self> = 'Garbage'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_Character
        :rtype: None

        * Replaces a part of <self> in the string at position <where>. If <where> is less than zero or greater than the length of <self> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <self> = 'Garbage'

        :param where:
        :type where: int
        :param what:
        :type what: char *
        :rtype: None

        * Replaces a part of <self> by another string.

        :param where:
        :type where: int
        :param what:
        :type what: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_SetValue(self, *args)


    def Split(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        * Splits a HAsciiString into two sub-strings. Example: aString contains 'abcdefg' aString.Split(3) gives <self> = 'abc' and returns 'defg'

        :param where:
        :type where: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Split(self, *args)


    def SubString(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        * Creation of a sub-string of the string <self>. The sub-string starts to the index Fromindex and ends to the index ToIndex. Raises an exception if ToIndex or FromIndex is out of bounds Example: before me = 'abcdefg', ToIndex=3, FromIndex=6 after me = 'abcdefg' returns 'cdef'

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_SubString(self, *args)


    def ToCString(self, *args) -> "char const *":
        """
        * Returns pointer to string (char *) This is useful for some casual manipulations Because this 'char *' is 'const', you can't modify its contents.

        :rtype: char *

        """
        return _TCollection.TCollection_HAsciiString_ToCString(self, *args)


    def Token(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        * Extracts <whichone> token from <self>. By default, the <separators> is set to space and tabulation. By default, the token extracted is the first one (whichone = 1). <separators> contains all separators you need. If no token indexed by <whichone> is found, it returns an empty String. Example: aString contains 'This is a message' aString.Token() returns 'This' aString.Token(' ',4) returns 'message' aString.Token(' ',2) returns 'is' aString.Token(' ',9) returns '' Other separators than space character and tabulation are allowed aString contains '1234; test:message , value' aString.Token('; :,',4) returns 'value' aString.Token('; :,',2) returns 'test'

        :param separators: default value is '	'
        :type separators: char *
        :param whichone: default value is 1
        :type whichone: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TCollection.TCollection_HAsciiString_Token(self, *args)


    def Trunc(self, *args) -> "void":
        """
        * Truncates <self> to <ahowmany> characters. Example: me = 'Hello Dolly' -> Trunc(3) -> me = 'Hel'

        :param ahowmany:
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_Trunc(self, *args)


    def UpperCase(self, *args) -> "void":
        """
        * Converts <self> to its upper-case equivalent.

        :rtype: None

        """
        return _TCollection.TCollection_HAsciiString_UpperCase(self, *args)


    def UsefullLength(self, *args) -> "Standard_Integer":
        """
        * Length of the string ignoring all spaces (' ') and the control character at the end.

        :rtype: int

        """
        return _TCollection.TCollection_HAsciiString_UsefullLength(self, *args)


    def Value(self, *args) -> "Standard_Character":
        """
        * Returns character at position <where> in <self>. If <where> is less than zero or greater than the lenght of <self>, an exception is raised. Example: aString contains 'Hello' aString.Value(2) returns 'e'

        :param where:
        :type where: int
        :rtype: Standard_Character

        """
        return _TCollection.TCollection_HAsciiString_Value(self, *args)


    def String(self, *args) -> "TCollection_AsciiString const &":
        """
        * Returns the field myString.

        :rtype: TCollection_AsciiString

        """
        return _TCollection.TCollection_HAsciiString_String(self, *args)


    def IsSameState(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: Handle_TCollection_HAsciiString &
        :rtype: bool

        """
        return _TCollection.TCollection_HAsciiString_IsSameState(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TCollection_HAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_HAsciiString
TCollection_HAsciiString.AssignCat = new_instancemethod(_TCollection.TCollection_HAsciiString_AssignCat, None, TCollection_HAsciiString)
TCollection_HAsciiString.Capitalize = new_instancemethod(_TCollection.TCollection_HAsciiString_Capitalize, None, TCollection_HAsciiString)
TCollection_HAsciiString.Cat = new_instancemethod(_TCollection.TCollection_HAsciiString_Cat, None, TCollection_HAsciiString)
TCollection_HAsciiString.Center = new_instancemethod(_TCollection.TCollection_HAsciiString_Center, None, TCollection_HAsciiString)
TCollection_HAsciiString.ChangeAll = new_instancemethod(_TCollection.TCollection_HAsciiString_ChangeAll, None, TCollection_HAsciiString)
TCollection_HAsciiString.Clear = new_instancemethod(_TCollection.TCollection_HAsciiString_Clear, None, TCollection_HAsciiString)
TCollection_HAsciiString.FirstLocationInSet = new_instancemethod(_TCollection.TCollection_HAsciiString_FirstLocationInSet, None, TCollection_HAsciiString)
TCollection_HAsciiString.FirstLocationNotInSet = new_instancemethod(_TCollection.TCollection_HAsciiString_FirstLocationNotInSet, None, TCollection_HAsciiString)
TCollection_HAsciiString.Insert = new_instancemethod(_TCollection.TCollection_HAsciiString_Insert, None, TCollection_HAsciiString)
TCollection_HAsciiString.InsertAfter = new_instancemethod(_TCollection.TCollection_HAsciiString_InsertAfter, None, TCollection_HAsciiString)
TCollection_HAsciiString.InsertBefore = new_instancemethod(_TCollection.TCollection_HAsciiString_InsertBefore, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsEmpty = new_instancemethod(_TCollection.TCollection_HAsciiString_IsEmpty, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsLess = new_instancemethod(_TCollection.TCollection_HAsciiString_IsLess, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsGreater = new_instancemethod(_TCollection.TCollection_HAsciiString_IsGreater, None, TCollection_HAsciiString)
TCollection_HAsciiString.IntegerValue = new_instancemethod(_TCollection.TCollection_HAsciiString_IntegerValue, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsIntegerValue = new_instancemethod(_TCollection.TCollection_HAsciiString_IsIntegerValue, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsRealValue = new_instancemethod(_TCollection.TCollection_HAsciiString_IsRealValue, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsAscii = new_instancemethod(_TCollection.TCollection_HAsciiString_IsAscii, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsDifferent = new_instancemethod(_TCollection.TCollection_HAsciiString_IsDifferent, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsSameString = new_instancemethod(_TCollection.TCollection_HAsciiString_IsSameString, None, TCollection_HAsciiString)
TCollection_HAsciiString.LeftAdjust = new_instancemethod(_TCollection.TCollection_HAsciiString_LeftAdjust, None, TCollection_HAsciiString)
TCollection_HAsciiString.LeftJustify = new_instancemethod(_TCollection.TCollection_HAsciiString_LeftJustify, None, TCollection_HAsciiString)
TCollection_HAsciiString.Length = new_instancemethod(_TCollection.TCollection_HAsciiString_Length, None, TCollection_HAsciiString)
TCollection_HAsciiString.Location = new_instancemethod(_TCollection.TCollection_HAsciiString_Location, None, TCollection_HAsciiString)
TCollection_HAsciiString.LowerCase = new_instancemethod(_TCollection.TCollection_HAsciiString_LowerCase, None, TCollection_HAsciiString)
TCollection_HAsciiString.Prepend = new_instancemethod(_TCollection.TCollection_HAsciiString_Prepend, None, TCollection_HAsciiString)
TCollection_HAsciiString.PrintToString = new_instancemethod(_TCollection.TCollection_HAsciiString_PrintToString, None, TCollection_HAsciiString)
TCollection_HAsciiString.RealValue = new_instancemethod(_TCollection.TCollection_HAsciiString_RealValue, None, TCollection_HAsciiString)
TCollection_HAsciiString.RemoveAll = new_instancemethod(_TCollection.TCollection_HAsciiString_RemoveAll, None, TCollection_HAsciiString)
TCollection_HAsciiString.Remove = new_instancemethod(_TCollection.TCollection_HAsciiString_Remove, None, TCollection_HAsciiString)
TCollection_HAsciiString.RightAdjust = new_instancemethod(_TCollection.TCollection_HAsciiString_RightAdjust, None, TCollection_HAsciiString)
TCollection_HAsciiString.RightJustify = new_instancemethod(_TCollection.TCollection_HAsciiString_RightJustify, None, TCollection_HAsciiString)
TCollection_HAsciiString.Search = new_instancemethod(_TCollection.TCollection_HAsciiString_Search, None, TCollection_HAsciiString)
TCollection_HAsciiString.SearchFromEnd = new_instancemethod(_TCollection.TCollection_HAsciiString_SearchFromEnd, None, TCollection_HAsciiString)
TCollection_HAsciiString.SetValue = new_instancemethod(_TCollection.TCollection_HAsciiString_SetValue, None, TCollection_HAsciiString)
TCollection_HAsciiString.Split = new_instancemethod(_TCollection.TCollection_HAsciiString_Split, None, TCollection_HAsciiString)
TCollection_HAsciiString.SubString = new_instancemethod(_TCollection.TCollection_HAsciiString_SubString, None, TCollection_HAsciiString)
TCollection_HAsciiString.ToCString = new_instancemethod(_TCollection.TCollection_HAsciiString_ToCString, None, TCollection_HAsciiString)
TCollection_HAsciiString.Token = new_instancemethod(_TCollection.TCollection_HAsciiString_Token, None, TCollection_HAsciiString)
TCollection_HAsciiString.Trunc = new_instancemethod(_TCollection.TCollection_HAsciiString_Trunc, None, TCollection_HAsciiString)
TCollection_HAsciiString.UpperCase = new_instancemethod(_TCollection.TCollection_HAsciiString_UpperCase, None, TCollection_HAsciiString)
TCollection_HAsciiString.UsefullLength = new_instancemethod(_TCollection.TCollection_HAsciiString_UsefullLength, None, TCollection_HAsciiString)
TCollection_HAsciiString.Value = new_instancemethod(_TCollection.TCollection_HAsciiString_Value, None, TCollection_HAsciiString)
TCollection_HAsciiString.String = new_instancemethod(_TCollection.TCollection_HAsciiString_String, None, TCollection_HAsciiString)
TCollection_HAsciiString.IsSameState = new_instancemethod(_TCollection.TCollection_HAsciiString_IsSameState, None, TCollection_HAsciiString)
TCollection_HAsciiString_swigregister = _TCollection.TCollection_HAsciiString_swigregister
TCollection_HAsciiString_swigregister(TCollection_HAsciiString)

class Handle_TCollection_HAsciiString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TCollection.Handle_TCollection_HAsciiString_swiginit(self, _TCollection.new_Handle_TCollection_HAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TCollection.Handle_TCollection_HAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TCollection.delete_Handle_TCollection_HAsciiString
Handle_TCollection_HAsciiString.Nullify = new_instancemethod(_TCollection.Handle_TCollection_HAsciiString_Nullify, None, Handle_TCollection_HAsciiString)
Handle_TCollection_HAsciiString.IsNull = new_instancemethod(_TCollection.Handle_TCollection_HAsciiString_IsNull, None, Handle_TCollection_HAsciiString)
Handle_TCollection_HAsciiString._get_reference = new_instancemethod(_TCollection.Handle_TCollection_HAsciiString__get_reference, None, Handle_TCollection_HAsciiString)
Handle_TCollection_HAsciiString_swigregister = _TCollection.Handle_TCollection_HAsciiString_swigregister
Handle_TCollection_HAsciiString_swigregister(Handle_TCollection_HAsciiString)

def Handle_TCollection_HAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TCollection_HAsciiString const":
    return _TCollection.Handle_TCollection_HAsciiString_DownCast(AnObject)
Handle_TCollection_HAsciiString_DownCast = _TCollection.Handle_TCollection_HAsciiString_DownCast

class TCollection_HExtendedString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes a HExtendedString to an empty ExtendedString.

        :rtype: None

        * Initializes a HExtendedString with a CString.

        :param message:
        :type message: char *
        :rtype: None

        * Initializes a HExtendedString with an ExtString.

        :param message:
        :type message: Standard_ExtString
        :rtype: None

        * Initializes a HExtendedString with a single character.

        :param aChar:
        :type aChar: Standard_ExtCharacter
        :rtype: None

        * Initializes a HExtendedString with <length> space allocated. and filled with <filler>.This is usefull for buffers.

        :param length:
        :type length: int
        :param filler:
        :type filler: Standard_ExtCharacter
        :rtype: None

        * Initializes a HExtendedString with a HExtendedString.

        :param aString:
        :type aString: TCollection_ExtendedString &
        :rtype: None

        * Initializes a HExtendedString with an HAsciiString.

        :param aString:
        :type aString: Handle_TCollection_HAsciiString &
        :rtype: None

        * Initializes a HExtendedString with a HExtendedString.

        :param aString:
        :type aString: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        _TCollection.TCollection_HExtendedString_swiginit(self, _TCollection.new_TCollection_HExtendedString(*args))

    def AssignCat(self, *args) -> "void":
        """
        * Appends <other> to me.

        :param other:
        :type other: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_AssignCat(self, *args)


    def Cat(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        * Returns a string appending <other> to me.

        :param other:
        :type other: Handle_TCollection_HExtendedString &
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Cat(self, *args)


    def ChangeAll(self, *args) -> "void":
        """
        * Substitutes all the characters equal to aChar by NewChar in the string <self>.

        :param aChar:
        :type aChar: Standard_ExtCharacter
        :param NewChar:
        :type NewChar: Standard_ExtCharacter
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_ChangeAll(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Removes all characters contained in <self>. This produces an empty ExtendedString.

        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string <self> contains zero character

        :rtype: bool

        """
        return _TCollection.TCollection_HExtendedString_IsEmpty(self, *args)


    def Insert(self, *args) -> "void":
        """
        * Insert a ExtCharacter at position <where>. Example: aString contains 'hy not ?' aString.Insert(1,'W'); gives 'Why not ?' aString contains 'Wh' aString.Insert(3,'y'); gives 'Why' aString contains 'Way' aString.Insert(2,'h'); gives 'Why'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        * Insert a HExtendedString at position <where>.

        :param where:
        :type where: int
        :param what:
        :type what: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_Insert(self, *args)


    def IsLess(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is less than <other>.

        :param other:
        :type other: Handle_TCollection_HExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_HExtendedString_IsLess(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is greater than <other>.

        :param other:
        :type other: Handle_TCollection_HExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_HExtendedString_IsGreater(self, *args)


    def IsAscii(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the string contains only 'Ascii Range' characters

        :rtype: bool

        """
        return _TCollection.TCollection_HExtendedString_IsAscii(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        * Returns number of characters in <self>. This is the same functionality as 'strlen' in C.

        :rtype: int

        """
        return _TCollection.TCollection_HExtendedString_Length(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Erases <ahowmany> characters from position <where>, <where> included. Example: aString contains 'Hello' aString.Erase(2,2) erases 2 characters from position 1 This gives 'Hlo'.

        :param where:
        :type where: int
        :param ahowmany: default value is 1
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_Remove(self, *args)


    def RemoveAll(self, *args) -> "void":
        """
        * Removes every <what> characters from <self>.

        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_RemoveAll(self, *args)


    def SetValue(self, *args) -> "void":
        """
        * Replaces one character in the string at position <where>. If <where> is less than zero or greater than the length of <self> an exception is raised. Example: aString contains 'Garbake' astring.Replace(6,'g') gives <self> = 'Garbage'

        :param where:
        :type where: int
        :param what:
        :type what: Standard_ExtCharacter
        :rtype: None

        * Replaces a part of <self> by another string.

        :param where:
        :type where: int
        :param what:
        :type what: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_SetValue(self, *args)


    def Split(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        * Splits a ExtendedString into two sub-strings. Example: aString contains 'abcdefg' aString.Split(3) gives <self> = 'abc' and returns 'defg'

        :param where:
        :type where: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Split(self, *args)


    def Search(self, *args) -> "Standard_Integer":
        """
        * Searches a String in <self> from the beginning and returns position of first item <what> matching. It returns -1 if not found.

        :param what:
        :type what: Handle_TCollection_HExtendedString &
        :rtype: int

        """
        return _TCollection.TCollection_HExtendedString_Search(self, *args)


    def SearchFromEnd(self, *args) -> "Standard_Integer":
        """
        * Searches a ExtendedString in another ExtendedString from the end and returns position of first item <what> matching. It returns -1 if not found.

        :param what:
        :type what: Handle_TCollection_HExtendedString &
        :rtype: int

        """
        return _TCollection.TCollection_HExtendedString_SearchFromEnd(self, *args)


    def ToExtString(self, *args) -> "Standard_ExtString":
        """
        * Returns pointer to ExtString

        :rtype: Standard_ExtString

        """
        return _TCollection.TCollection_HExtendedString_ToExtString(self, *args)


    def Token(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        * Extracts <whichone> token from <self>. By default, the <separators> is set to space and tabulation. By default, the token extracted is the first one (whichone = 1). <separators> contains all separators you need. If no token indexed by <whichone> is found, it returns an empty String. Example: aString contains 'This is a message' aString.Token() returns 'This' aString.Token(' ',4) returns 'message' aString.Token(' ',2) returns 'is' aString.Token(' ',9) returns '' Other separators than space character and tabulation are allowed aString contains '1234; test:message , value' aString.Token('; :,',4) returns 'value' aString.Token('; :,',2) returns 'test'

        :param separators:
        :type separators: Standard_ExtString
        :param whichone: default value is 1
        :type whichone: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TCollection.TCollection_HExtendedString_Token(self, *args)


    def Trunc(self, *args) -> "void":
        """
        * Truncates <self> to <ahowmany> characters. Example: me = 'Hello Dolly' -> Trunc(3) -> me = 'Hel'

        :param ahowmany:
        :type ahowmany: int
        :rtype: None

        """
        return _TCollection.TCollection_HExtendedString_Trunc(self, *args)


    def Value(self, *args) -> "Standard_ExtCharacter":
        """
        * Returns ExtCharacter at position <where> in <self>. If <where> is less than zero or greater than the length of <self>, an exception is raised. Example: aString contains 'Hello' aString.Value(2) returns 'e'

        :param where:
        :type where: int
        :rtype: Standard_ExtCharacter

        """
        return _TCollection.TCollection_HExtendedString_Value(self, *args)


    def String(self, *args) -> "TCollection_ExtendedString const &":
        """
        * Returns the field myString

        :rtype: TCollection_ExtendedString

        """
        return _TCollection.TCollection_HExtendedString_String(self, *args)


    def PrintToString(self) -> "std::string":
        """PrintToString(TCollection_HExtendedString self) -> std::string"""
        return _TCollection.TCollection_HExtendedString_PrintToString(self)


    def IsSameState(self, *args) -> "Standard_Boolean":
        """
        :param other:
        :type other: Handle_TCollection_HExtendedString &
        :rtype: bool

        """
        return _TCollection.TCollection_HExtendedString_IsSameState(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TCollection_HExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_HExtendedString
TCollection_HExtendedString.AssignCat = new_instancemethod(_TCollection.TCollection_HExtendedString_AssignCat, None, TCollection_HExtendedString)
TCollection_HExtendedString.Cat = new_instancemethod(_TCollection.TCollection_HExtendedString_Cat, None, TCollection_HExtendedString)
TCollection_HExtendedString.ChangeAll = new_instancemethod(_TCollection.TCollection_HExtendedString_ChangeAll, None, TCollection_HExtendedString)
TCollection_HExtendedString.Clear = new_instancemethod(_TCollection.TCollection_HExtendedString_Clear, None, TCollection_HExtendedString)
TCollection_HExtendedString.IsEmpty = new_instancemethod(_TCollection.TCollection_HExtendedString_IsEmpty, None, TCollection_HExtendedString)
TCollection_HExtendedString.Insert = new_instancemethod(_TCollection.TCollection_HExtendedString_Insert, None, TCollection_HExtendedString)
TCollection_HExtendedString.IsLess = new_instancemethod(_TCollection.TCollection_HExtendedString_IsLess, None, TCollection_HExtendedString)
TCollection_HExtendedString.IsGreater = new_instancemethod(_TCollection.TCollection_HExtendedString_IsGreater, None, TCollection_HExtendedString)
TCollection_HExtendedString.IsAscii = new_instancemethod(_TCollection.TCollection_HExtendedString_IsAscii, None, TCollection_HExtendedString)
TCollection_HExtendedString.Length = new_instancemethod(_TCollection.TCollection_HExtendedString_Length, None, TCollection_HExtendedString)
TCollection_HExtendedString.Remove = new_instancemethod(_TCollection.TCollection_HExtendedString_Remove, None, TCollection_HExtendedString)
TCollection_HExtendedString.RemoveAll = new_instancemethod(_TCollection.TCollection_HExtendedString_RemoveAll, None, TCollection_HExtendedString)
TCollection_HExtendedString.SetValue = new_instancemethod(_TCollection.TCollection_HExtendedString_SetValue, None, TCollection_HExtendedString)
TCollection_HExtendedString.Split = new_instancemethod(_TCollection.TCollection_HExtendedString_Split, None, TCollection_HExtendedString)
TCollection_HExtendedString.Search = new_instancemethod(_TCollection.TCollection_HExtendedString_Search, None, TCollection_HExtendedString)
TCollection_HExtendedString.SearchFromEnd = new_instancemethod(_TCollection.TCollection_HExtendedString_SearchFromEnd, None, TCollection_HExtendedString)
TCollection_HExtendedString.ToExtString = new_instancemethod(_TCollection.TCollection_HExtendedString_ToExtString, None, TCollection_HExtendedString)
TCollection_HExtendedString.Token = new_instancemethod(_TCollection.TCollection_HExtendedString_Token, None, TCollection_HExtendedString)
TCollection_HExtendedString.Trunc = new_instancemethod(_TCollection.TCollection_HExtendedString_Trunc, None, TCollection_HExtendedString)
TCollection_HExtendedString.Value = new_instancemethod(_TCollection.TCollection_HExtendedString_Value, None, TCollection_HExtendedString)
TCollection_HExtendedString.String = new_instancemethod(_TCollection.TCollection_HExtendedString_String, None, TCollection_HExtendedString)
TCollection_HExtendedString.PrintToString = new_instancemethod(_TCollection.TCollection_HExtendedString_PrintToString, None, TCollection_HExtendedString)
TCollection_HExtendedString.IsSameState = new_instancemethod(_TCollection.TCollection_HExtendedString_IsSameState, None, TCollection_HExtendedString)
TCollection_HExtendedString_swigregister = _TCollection.TCollection_HExtendedString_swigregister
TCollection_HExtendedString_swigregister(TCollection_HExtendedString)

class Handle_TCollection_HExtendedString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TCollection.Handle_TCollection_HExtendedString_swiginit(self, _TCollection.new_Handle_TCollection_HExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TCollection.Handle_TCollection_HExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TCollection.delete_Handle_TCollection_HExtendedString
Handle_TCollection_HExtendedString.Nullify = new_instancemethod(_TCollection.Handle_TCollection_HExtendedString_Nullify, None, Handle_TCollection_HExtendedString)
Handle_TCollection_HExtendedString.IsNull = new_instancemethod(_TCollection.Handle_TCollection_HExtendedString_IsNull, None, Handle_TCollection_HExtendedString)
Handle_TCollection_HExtendedString._get_reference = new_instancemethod(_TCollection.Handle_TCollection_HExtendedString__get_reference, None, Handle_TCollection_HExtendedString)
Handle_TCollection_HExtendedString_swigregister = _TCollection.Handle_TCollection_HExtendedString_swigregister
Handle_TCollection_HExtendedString_swigregister(Handle_TCollection_HExtendedString)

def Handle_TCollection_HExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TCollection_HExtendedString const":
    return _TCollection.Handle_TCollection_HExtendedString_DownCast(AnObject)
Handle_TCollection_HExtendedString_DownCast = _TCollection.Handle_TCollection_HExtendedString_DownCast

class TCollection_MapNode(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TCollection.TCollection_MapNode_swiginit(self, _TCollection.new_TCollection_MapNode(*args))

    def Next(self, *args) -> "TCollection_MapNodePtr &":
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TCollection.TCollection_MapNode_Next(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TCollection_MapNode(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_MapNode
TCollection_MapNode.Next = new_instancemethod(_TCollection.TCollection_MapNode_Next, None, TCollection_MapNode)
TCollection_MapNode_swigregister = _TCollection.TCollection_MapNode_swigregister
TCollection_MapNode_swigregister(TCollection_MapNode)

class Handle_TCollection_MapNode(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TCollection.Handle_TCollection_MapNode_swiginit(self, _TCollection.new_Handle_TCollection_MapNode(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TCollection.Handle_TCollection_MapNode_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TCollection.delete_Handle_TCollection_MapNode
Handle_TCollection_MapNode.Nullify = new_instancemethod(_TCollection.Handle_TCollection_MapNode_Nullify, None, Handle_TCollection_MapNode)
Handle_TCollection_MapNode.IsNull = new_instancemethod(_TCollection.Handle_TCollection_MapNode_IsNull, None, Handle_TCollection_MapNode)
Handle_TCollection_MapNode._get_reference = new_instancemethod(_TCollection.Handle_TCollection_MapNode__get_reference, None, Handle_TCollection_MapNode)
Handle_TCollection_MapNode_swigregister = _TCollection.Handle_TCollection_MapNode_swigregister
Handle_TCollection_MapNode_swigregister(Handle_TCollection_MapNode)

def Handle_TCollection_MapNode_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TCollection_MapNode const":
    return _TCollection.Handle_TCollection_MapNode_DownCast(AnObject)
Handle_TCollection_MapNode_DownCast = _TCollection.Handle_TCollection_MapNode_DownCast

class TCollection_PrivCompareOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsLower(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: int &
        :param Right:
        :type Right: int &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfInteger_IsLower(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: int &
        :param Right:
        :type Right: int &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfInteger_IsGreater(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: int &
        :param Right:
        :type Right: int &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfInteger_IsEqual(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _TCollection.TCollection_PrivCompareOfInteger_swiginit(self, _TCollection.new_TCollection_PrivCompareOfInteger())
    __swig_destroy__ = _TCollection.delete_TCollection_PrivCompareOfInteger
TCollection_PrivCompareOfInteger.IsLower = new_instancemethod(_TCollection.TCollection_PrivCompareOfInteger_IsLower, None, TCollection_PrivCompareOfInteger)
TCollection_PrivCompareOfInteger.IsGreater = new_instancemethod(_TCollection.TCollection_PrivCompareOfInteger_IsGreater, None, TCollection_PrivCompareOfInteger)
TCollection_PrivCompareOfInteger.IsEqual = new_instancemethod(_TCollection.TCollection_PrivCompareOfInteger_IsEqual, None, TCollection_PrivCompareOfInteger)
TCollection_PrivCompareOfInteger_swigregister = _TCollection.TCollection_PrivCompareOfInteger_swigregister
TCollection_PrivCompareOfInteger_swigregister(TCollection_PrivCompareOfInteger)

class TCollection_PrivCompareOfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def IsLower(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: float &
        :param Right:
        :type Right: float &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfReal_IsLower(self, *args)


    def IsGreater(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: float &
        :param Right:
        :type Right: float &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfReal_IsGreater(self, *args)


    def IsEqual(self, *args) -> "Standard_Boolean":
        """
        :param Left:
        :type Left: float &
        :param Right:
        :type Right: float &
        :rtype: bool

        """
        return _TCollection.TCollection_PrivCompareOfReal_IsEqual(self, *args)


    __repr__ = _dumps_object


    def __init__(self):
        _TCollection.TCollection_PrivCompareOfReal_swiginit(self, _TCollection.new_TCollection_PrivCompareOfReal())
    __swig_destroy__ = _TCollection.delete_TCollection_PrivCompareOfReal
TCollection_PrivCompareOfReal.IsLower = new_instancemethod(_TCollection.TCollection_PrivCompareOfReal_IsLower, None, TCollection_PrivCompareOfReal)
TCollection_PrivCompareOfReal.IsGreater = new_instancemethod(_TCollection.TCollection_PrivCompareOfReal_IsGreater, None, TCollection_PrivCompareOfReal)
TCollection_PrivCompareOfReal.IsEqual = new_instancemethod(_TCollection.TCollection_PrivCompareOfReal_IsEqual, None, TCollection_PrivCompareOfReal)
TCollection_PrivCompareOfReal_swigregister = _TCollection.TCollection_PrivCompareOfReal_swigregister
TCollection_PrivCompareOfReal_swigregister(TCollection_PrivCompareOfReal)

class TCollection_SeqNode(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TCollection.TCollection_SeqNode_swiginit(self, _TCollection.new_TCollection_SeqNode(*args))

    def Next(self, *args) -> "TCollection_SeqNodePtr &":
        """
        :rtype: TCollection_SeqNodePtr

        """
        return _TCollection.TCollection_SeqNode_Next(self, *args)


    def Previous(self, *args) -> "TCollection_SeqNodePtr &":
        """
        :rtype: TCollection_SeqNodePtr

        """
        return _TCollection.TCollection_SeqNode_Previous(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TCollection_SeqNode(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_SeqNode
TCollection_SeqNode.Next = new_instancemethod(_TCollection.TCollection_SeqNode_Next, None, TCollection_SeqNode)
TCollection_SeqNode.Previous = new_instancemethod(_TCollection.TCollection_SeqNode_Previous, None, TCollection_SeqNode)
TCollection_SeqNode_swigregister = _TCollection.TCollection_SeqNode_swigregister
TCollection_SeqNode_swigregister(TCollection_SeqNode)

class Handle_TCollection_SeqNode(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TCollection.Handle_TCollection_SeqNode_swiginit(self, _TCollection.new_Handle_TCollection_SeqNode(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TCollection.Handle_TCollection_SeqNode_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TCollection.delete_Handle_TCollection_SeqNode
Handle_TCollection_SeqNode.Nullify = new_instancemethod(_TCollection.Handle_TCollection_SeqNode_Nullify, None, Handle_TCollection_SeqNode)
Handle_TCollection_SeqNode.IsNull = new_instancemethod(_TCollection.Handle_TCollection_SeqNode_IsNull, None, Handle_TCollection_SeqNode)
Handle_TCollection_SeqNode._get_reference = new_instancemethod(_TCollection.Handle_TCollection_SeqNode__get_reference, None, Handle_TCollection_SeqNode)
Handle_TCollection_SeqNode_swigregister = _TCollection.Handle_TCollection_SeqNode_swigregister
Handle_TCollection_SeqNode_swigregister(Handle_TCollection_SeqNode)

def Handle_TCollection_SeqNode_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TCollection_SeqNode const":
    return _TCollection.Handle_TCollection_SeqNode_DownCast(AnObject)
Handle_TCollection_SeqNode_DownCast = _TCollection.Handle_TCollection_SeqNode_DownCast

class TCollection_CompareOfInteger(TCollection_PrivCompareOfInteger):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TCollection.TCollection_CompareOfInteger_swiginit(self, _TCollection.new_TCollection_CompareOfInteger(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_CompareOfInteger
TCollection_CompareOfInteger_swigregister = _TCollection.TCollection_CompareOfInteger_swigregister
TCollection_CompareOfInteger_swigregister(TCollection_CompareOfInteger)

class TCollection_CompareOfReal(TCollection_PrivCompareOfReal):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TCollection.TCollection_CompareOfReal_swiginit(self, _TCollection.new_TCollection_CompareOfReal(*args))

    __repr__ = _dumps_object

    __swig_destroy__ = _TCollection.delete_TCollection_CompareOfReal
TCollection_CompareOfReal_swigregister = _TCollection.TCollection_CompareOfReal_swigregister
TCollection_CompareOfReal_swigregister(TCollection_CompareOfReal)



