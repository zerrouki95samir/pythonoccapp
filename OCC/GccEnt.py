# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _GccEnt.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_GccEnt')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_GccEnt')
    _GccEnt = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_GccEnt', [dirname(__file__)])
        except ImportError:
            import _GccEnt
            return _GccEnt
        try:
            _mod = imp.load_module('_GccEnt', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _GccEnt = swig_import_helper()
    del swig_import_helper
else:
    import _GccEnt
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GccEnt.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_GccEnt.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_GccEnt.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_GccEnt.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_GccEnt.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_GccEnt.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_GccEnt.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_GccEnt.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_GccEnt.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_GccEnt.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_GccEnt.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_GccEnt.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_GccEnt.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_GccEnt.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_GccEnt.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_GccEnt.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_GccEnt.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _GccEnt.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.gp
import OCC.Standard

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

GccEnt_unqualified = _GccEnt.GccEnt_unqualified
GccEnt_enclosing = _GccEnt.GccEnt_enclosing
GccEnt_enclosed = _GccEnt.GccEnt_enclosed
GccEnt_outside = _GccEnt.GccEnt_outside
GccEnt_noqualifier = _GccEnt.GccEnt_noqualifier
class gccent(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Unqualified(*args) -> "GccEnt_QualifiedCirc":
        """
        * Constructs a qualified line, so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

        :param Obj:
        :type Obj: gp_Lin2d
        :rtype: GccEnt_QualifiedLin

        * Constructs a qualified circle so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

        :param Obj:
        :type Obj: gp_Circ2d
        :rtype: GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Unqualified(*args)

    Unqualified = staticmethod(Unqualified)

    def Enclosing(*args) -> "GccEnt_QualifiedCirc":
        """
        * Constructs such a qualified circle that the solution computed by a construction algorithm using the qualified circle encloses the circle.

        :param Obj:
        :type Obj: gp_Circ2d
        :rtype: GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Enclosing(*args)

    Enclosing = staticmethod(Enclosing)

    def Enclosed(*args) -> "GccEnt_QualifiedCirc":
        """
        * Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

        :param Obj:
        :type Obj: gp_Lin2d
        :rtype: GccEnt_QualifiedLin

        * Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

        :param Obj:
        :type Obj: gp_Circ2d
        :rtype: GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Enclosed(*args)

    Enclosed = staticmethod(Enclosed)

    def Outside(*args) -> "GccEnt_QualifiedCirc":
        """
        * Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

        :param Obj:
        :type Obj: gp_Lin2d
        :rtype: GccEnt_QualifiedLin

        * Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

        :param Obj:
        :type Obj: gp_Circ2d
        :rtype: GccEnt_QualifiedCirc

        """
        return _GccEnt.gccent_Outside(*args)

    Outside = staticmethod(Outside)

    __repr__ = _dumps_object


    def __init__(self):
        _GccEnt.gccent_swiginit(self, _GccEnt.new_gccent())
    __swig_destroy__ = _GccEnt.delete_gccent
gccent_swigregister = _GccEnt.gccent_swigregister
gccent_swigregister(gccent)

def gccent_Unqualified(*args) -> "GccEnt_QualifiedCirc":
    """
    * Constructs a qualified line, so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

    :param Obj:
    :type Obj: gp_Lin2d
    :rtype: GccEnt_QualifiedLin

    * Constructs a qualified circle so that the relative position to the circle or line of the solution computed by a construction algorithm using the qualified circle or line is not qualified, i.e. all solutions apply.

    :param Obj:
    :type Obj: gp_Circ2d
    :rtype: GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Unqualified(*args)

def gccent_Enclosing(*args) -> "GccEnt_QualifiedCirc":
    """
    * Constructs such a qualified circle that the solution computed by a construction algorithm using the qualified circle encloses the circle.

    :param Obj:
    :type Obj: gp_Circ2d
    :rtype: GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Enclosing(*args)

def gccent_Enclosed(*args) -> "GccEnt_QualifiedCirc":
    """
    * Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

    :param Obj:
    :type Obj: gp_Lin2d
    :rtype: GccEnt_QualifiedLin

    * Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line is enclosed by the circle or line.

    :param Obj:
    :type Obj: gp_Circ2d
    :rtype: GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Enclosed(*args)

def gccent_Outside(*args) -> "GccEnt_QualifiedCirc":
    """
    * Constructs a qualified line, so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

    :param Obj:
    :type Obj: gp_Lin2d
    :rtype: GccEnt_QualifiedLin

    * Constructs a qualified circle so that the solution computed by a construction algorithm using the qualified circle or line and the circle or line are external to one another.

    :param Obj:
    :type Obj: gp_Circ2d
    :rtype: GccEnt_QualifiedCirc

    """
    return _GccEnt.gccent_Outside(*args)

class GccEnt_Array1OfPosition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: GccEnt_Position &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _GccEnt.GccEnt_Array1OfPosition_swiginit(self, _GccEnt.new_GccEnt_Array1OfPosition(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: GccEnt_Position &
        :rtype: None

        """
        return _GccEnt.GccEnt_Array1OfPosition_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _GccEnt.GccEnt_Array1OfPosition_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _GccEnt.GccEnt_Array1OfPosition_IsAllocated(self, *args)


    def Assign(self, *args) -> "GccEnt_Array1OfPosition const &":
        """
        :param Other:
        :type Other: GccEnt_Array1OfPosition &
        :rtype: GccEnt_Array1OfPosition

        """
        return _GccEnt.GccEnt_Array1OfPosition_Assign(self, *args)


    def Set(self, *args) -> "GccEnt_Array1OfPosition const &":
        """
        :param Other:
        :type Other: GccEnt_Array1OfPosition &
        :rtype: GccEnt_Array1OfPosition

        """
        return _GccEnt.GccEnt_Array1OfPosition_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GccEnt.GccEnt_Array1OfPosition_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GccEnt.GccEnt_Array1OfPosition_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _GccEnt.GccEnt_Array1OfPosition_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: GccEnt_Position &
        :rtype: None

        """
        return _GccEnt.GccEnt_Array1OfPosition_SetValue(self, *args)


    def Value(self, *args) -> "GccEnt_Position const &":
        """
        :param Index:
        :type Index: int
        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_Array1OfPosition_Value(self, *args)


    def ChangeValue(self, *args) -> "GccEnt_Position &":
        """
        :param Index:
        :type Index: int
        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_Array1OfPosition_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_Array1OfPosition
GccEnt_Array1OfPosition.Init = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Init, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Destroy = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Destroy, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.IsAllocated = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_IsAllocated, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Assign = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Assign, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Set = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Set, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Length = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Length, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Lower = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Lower, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Upper = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Upper, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.SetValue = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_SetValue, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.Value = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_Value, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition.ChangeValue = new_instancemethod(_GccEnt.GccEnt_Array1OfPosition_ChangeValue, None, GccEnt_Array1OfPosition)
GccEnt_Array1OfPosition_swigregister = _GccEnt.GccEnt_Array1OfPosition_swigregister
GccEnt_Array1OfPosition_swigregister(GccEnt_Array1OfPosition)

class GccEnt_QualifiedCirc(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Qualified(self, *args) -> "gp_Circ2d":
        """
        * Returns a 2D circle to which the qualifier is assigned.

        :rtype: gp_Circ2d

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualified(self, *args)


    def Qualifier(self, *args) -> "GccEnt_Position":
        """
        * Returns - the qualifier of this qualified circle, if it is enclosing, enclosed or outside, or - GccEnt_noqualifier if it is unqualified.

        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedCirc_Qualifier(self, *args)


    def IsUnqualified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the Circ2d is Unqualified and false in the other cases.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsUnqualified(self, *args)


    def IsEnclosing(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solution computed by a construction algorithm using this qualified circle encloses the circle.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosing(self, *args)


    def IsEnclosed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solution computed by a construction algorithm using this qualified circle is enclosed by the circle.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsEnclosed(self, *args)


    def IsOutside(self, *args) -> "Standard_Boolean":
        """
        * Returns true if both the solution computed by a construction algorithm using this qualified circle and the circle are external to one another.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedCirc_IsOutside(self, *args)


    def __init__(self, *args):
        """
        * Constructs a qualified circle by assigning the qualifier Qualifier to the circle Qualified. Qualifier may be: - GccEnt_enclosing if the solution computed by a construction algorithm using the qualified circle encloses the circle, or - GccEnt_enclosed if the solution is enclosed by the circle, or - GccEnt_outside if both the solution and the circle are external to one another, or - GccEnt_unqualified if all solutions apply.

        :param Qualified:
        :type Qualified: gp_Circ2d
        :param Qualifier:
        :type Qualifier: GccEnt_Position
        :rtype: None

        :rtype: None

        """
        _GccEnt.GccEnt_QualifiedCirc_swiginit(self, _GccEnt.new_GccEnt_QualifiedCirc(*args))

    def _CSFDB_GetGccEnt_QualifiedCircTheQualified(self, *args) -> "gp_Circ2d const":
        """
        :rtype: gp_Circ2d

        """
        return _GccEnt.GccEnt_QualifiedCirc__CSFDB_GetGccEnt_QualifiedCircTheQualified(self, *args)


    def _CSFDB_GetGccEnt_QualifiedCircTheQualifier(self, *args) -> "GccEnt_Position":
        """
        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedCirc__CSFDB_GetGccEnt_QualifiedCircTheQualifier(self, *args)


    def _CSFDB_SetGccEnt_QualifiedCircTheQualifier(self, *args) -> "void":
        """
        :param p:
        :type p: GccEnt_Position
        :rtype: None

        """
        return _GccEnt.GccEnt_QualifiedCirc__CSFDB_SetGccEnt_QualifiedCircTheQualifier(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedCirc
GccEnt_QualifiedCirc.Qualified = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_Qualified, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc.Qualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_Qualifier, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc.IsUnqualified = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_IsUnqualified, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc.IsEnclosing = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_IsEnclosing, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc.IsEnclosed = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_IsEnclosed, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc.IsOutside = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc_IsOutside, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc._CSFDB_GetGccEnt_QualifiedCircTheQualified = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc__CSFDB_GetGccEnt_QualifiedCircTheQualified, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc._CSFDB_GetGccEnt_QualifiedCircTheQualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc__CSFDB_GetGccEnt_QualifiedCircTheQualifier, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc._CSFDB_SetGccEnt_QualifiedCircTheQualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedCirc__CSFDB_SetGccEnt_QualifiedCircTheQualifier, None, GccEnt_QualifiedCirc)
GccEnt_QualifiedCirc_swigregister = _GccEnt.GccEnt_QualifiedCirc_swigregister
GccEnt_QualifiedCirc_swigregister(GccEnt_QualifiedCirc)

class GccEnt_QualifiedLin(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Qualified(self, *args) -> "gp_Lin2d":
        """
        * Returns a 2D line to which the qualifier is assigned.

        :rtype: gp_Lin2d

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualified(self, *args)


    def Qualifier(self, *args) -> "GccEnt_Position":
        """
        * Returns the qualifier of this qualified line, if it is 'enclosed' or 'outside', or - GccEnt_noqualifier if it is unqualified.

        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedLin_Qualifier(self, *args)


    def IsUnqualified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solution is unqualified and false in the other cases.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsUnqualified(self, *args)


    def IsEnclosed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solution is Enclosed in the Lin2d and false in the other cases.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsEnclosed(self, *args)


    def IsOutside(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the solution is Outside the Lin2d and false in the other cases.

        :rtype: bool

        """
        return _GccEnt.GccEnt_QualifiedLin_IsOutside(self, *args)


    def __init__(self, *args):
        """
        * Constructs a qualified line by assigning the qualifier Qualifier to the line Qualified. Qualifier may be: - GccEnt_enclosed if the solution is enclosed by the line, or - GccEnt_outside if both the solution and the line are external to one another, or - GccEnt_unqualified if all solutions apply. Note : the interior of a line is defined as the left-hand side of the line in relation to its orientation.

        :param Qualified:
        :type Qualified: gp_Lin2d
        :param Qualifier:
        :type Qualifier: GccEnt_Position
        :rtype: None

        :rtype: None

        """
        _GccEnt.GccEnt_QualifiedLin_swiginit(self, _GccEnt.new_GccEnt_QualifiedLin(*args))

    def _CSFDB_GetGccEnt_QualifiedLinTheQualifier(self, *args) -> "GccEnt_Position":
        """
        :rtype: GccEnt_Position

        """
        return _GccEnt.GccEnt_QualifiedLin__CSFDB_GetGccEnt_QualifiedLinTheQualifier(self, *args)


    def _CSFDB_SetGccEnt_QualifiedLinTheQualifier(self, *args) -> "void":
        """
        :param p:
        :type p: GccEnt_Position
        :rtype: None

        """
        return _GccEnt.GccEnt_QualifiedLin__CSFDB_SetGccEnt_QualifiedLinTheQualifier(self, *args)


    def _CSFDB_GetGccEnt_QualifiedLinTheQualified(self, *args) -> "gp_Lin2d const":
        """
        :rtype: gp_Lin2d

        """
        return _GccEnt.GccEnt_QualifiedLin__CSFDB_GetGccEnt_QualifiedLinTheQualified(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _GccEnt.delete_GccEnt_QualifiedLin
GccEnt_QualifiedLin.Qualified = new_instancemethod(_GccEnt.GccEnt_QualifiedLin_Qualified, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin.Qualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedLin_Qualifier, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin.IsUnqualified = new_instancemethod(_GccEnt.GccEnt_QualifiedLin_IsUnqualified, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin.IsEnclosed = new_instancemethod(_GccEnt.GccEnt_QualifiedLin_IsEnclosed, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin.IsOutside = new_instancemethod(_GccEnt.GccEnt_QualifiedLin_IsOutside, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin._CSFDB_GetGccEnt_QualifiedLinTheQualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedLin__CSFDB_GetGccEnt_QualifiedLinTheQualifier, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin._CSFDB_SetGccEnt_QualifiedLinTheQualifier = new_instancemethod(_GccEnt.GccEnt_QualifiedLin__CSFDB_SetGccEnt_QualifiedLinTheQualifier, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin._CSFDB_GetGccEnt_QualifiedLinTheQualified = new_instancemethod(_GccEnt.GccEnt_QualifiedLin__CSFDB_GetGccEnt_QualifiedLinTheQualified, None, GccEnt_QualifiedLin)
GccEnt_QualifiedLin_swigregister = _GccEnt.GccEnt_QualifiedLin_swigregister
GccEnt_QualifiedLin_swigregister(GccEnt_QualifiedLin)



