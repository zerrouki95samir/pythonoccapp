# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Intrv.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Intrv')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Intrv')
    _Intrv = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Intrv', [dirname(__file__)])
        except ImportError:
            import _Intrv
            return _Intrv
        try:
            _mod = imp.load_module('_Intrv', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Intrv = swig_import_helper()
    del swig_import_helper
else:
    import _Intrv
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Intrv.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Intrv.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Intrv.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Intrv.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Intrv.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Intrv.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Intrv.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Intrv.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Intrv.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Intrv.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Intrv.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Intrv.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Intrv.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Intrv.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Intrv.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Intrv.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Intrv.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Intrv.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.TCollection
import OCC.MMgt

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

Intrv_Before = _Intrv.Intrv_Before
Intrv_JustBefore = _Intrv.Intrv_JustBefore
Intrv_OverlappingAtStart = _Intrv.Intrv_OverlappingAtStart
Intrv_JustEnclosingAtEnd = _Intrv.Intrv_JustEnclosingAtEnd
Intrv_Enclosing = _Intrv.Intrv_Enclosing
Intrv_JustOverlappingAtStart = _Intrv.Intrv_JustOverlappingAtStart
Intrv_Similar = _Intrv.Intrv_Similar
Intrv_JustEnclosingAtStart = _Intrv.Intrv_JustEnclosingAtStart
Intrv_Inside = _Intrv.Intrv_Inside
Intrv_JustOverlappingAtEnd = _Intrv.Intrv_JustOverlappingAtEnd
Intrv_OverlappingAtEnd = _Intrv.Intrv_OverlappingAtEnd
Intrv_JustAfter = _Intrv.Intrv_JustAfter
Intrv_After = _Intrv.Intrv_After
class Intrv_Interval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Start:
        :type Start: float
        :param End:
        :type End: float
        :rtype: None

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        _Intrv.Intrv_Interval_swiginit(self, _Intrv.new_Intrv_Interval(*args))

    def Start(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _Intrv.Intrv_Interval_Start(self, *args)


    def End(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _Intrv.Intrv_Interval_End(self, *args)


    def TolStart(self, *args) -> "Standard_ShortReal":
        """
        :rtype: Standard_ShortReal

        """
        return _Intrv.Intrv_Interval_TolStart(self, *args)


    def TolEnd(self, *args) -> "Standard_ShortReal":
        """
        :rtype: Standard_ShortReal

        """
        return _Intrv.Intrv_Interval_TolEnd(self, *args)


    def Bounds(self, *args) -> "void":
        """
        :param Start:
        :type Start: float &
        :param TolStart:
        :type TolStart: Standard_ShortReal &
        :param End:
        :type End: float &
        :param TolEnd:
        :type TolEnd: Standard_ShortReal &
        :rtype: None

        """
        return _Intrv.Intrv_Interval_Bounds(self, *args)


    def SetStart(self, *args) -> "void":
        """
        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_SetStart(self, *args)


    def FuseAtStart(self, *args) -> "void":
        """
        * ****+****--------------------> Old one ****+****------------------------> New one to fuse <<< <<< ****+****------------------------> result

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_FuseAtStart(self, *args)


    def CutAtStart(self, *args) -> "void":
        """
        * ****+****-----------> Old one <----------**+** Tool for cutting >>> >>> ****+****-----------> result

        :param Start:
        :type Start: float
        :param TolStart:
        :type TolStart: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_CutAtStart(self, *args)


    def SetEnd(self, *args) -> "void":
        """
        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_SetEnd(self, *args)


    def FuseAtEnd(self, *args) -> "void":
        """
        * <---------------------****+**** Old one <-----------------**+**  New one to fuse >>> >>> <---------------------****+**** result

        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_FuseAtEnd(self, *args)


    def CutAtEnd(self, *args) -> "void":
        """
        * <-----****+****  Old one **+**------> Tool for cutting <<< <<< <-----****+****  result

        :param End:
        :type End: float
        :param TolEnd:
        :type TolEnd: Standard_ShortReal
        :rtype: None

        """
        return _Intrv.Intrv_Interval_CutAtEnd(self, *args)


    def IsProbablyEmpty(self, *args) -> "Standard_Boolean":
        """
        * True if myStart+myTolStart > myEnd-myTolEnd or if myEnd+myTolEnd > myStart-myTolStart

        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsProbablyEmpty(self, *args)


    def Position(self, *args) -> "Intrv_Position":
        """
        * True if me is Before Other **-----------**** Other ***-----*   Before ***------------*  JustBefore ***-----------------*  OverlappingAtStart ***--------------------------*  JustEnclosingAtEnd ***-------------------------------------* Enclosing ***----*  JustOverlappingAtStart ***-------------*  Similar ***------------------------* JustEnclosingAtStart ***-*  Inside ***------*  JustOverlappingAtEnd ***-----------------* OverlappingAtEnd ***--------* JustAfter ***---* After

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: Intrv_Position

        """
        return _Intrv.Intrv_Interval_Position(self, *args)


    def IsBefore(self, *args) -> "Standard_Boolean":
        """
        * True if me is Before Other ***----------------**  me **-----------**** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsBefore(self, *args)


    def IsAfter(self, *args) -> "Standard_Boolean":
        """
        * True if me is After Other **-----------**** me ***----------------**  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsAfter(self, *args)


    def IsInside(self, *args) -> "Standard_Boolean":
        """
        * True if me is Inside Other **-----------****  me ***--------------------------**  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsInside(self, *args)


    def IsEnclosing(self, *args) -> "Standard_Boolean":
        """
        * True if me is Enclosing Other ***----------------------------**** me ***------------------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsEnclosing(self, *args)


    def IsJustEnclosingAtStart(self, *args) -> "Standard_Boolean":
        """
        * True if me is just Enclosing Other at start ***---------------------------**** me ***------------------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustEnclosingAtStart(self, *args)


    def IsJustEnclosingAtEnd(self, *args) -> "Standard_Boolean":
        """
        * True if me is just Enclosing Other at End ***----------------------------**** me ***-----------------****  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustEnclosingAtEnd(self, *args)


    def IsJustBefore(self, *args) -> "Standard_Boolean":
        """
        * True if me is just before Other ***--------****   me ***-----------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustBefore(self, *args)


    def IsJustAfter(self, *args) -> "Standard_Boolean":
        """
        * True if me is just after Other ****-------****  me ***-----------**  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustAfter(self, *args)


    def IsOverlappingAtStart(self, *args) -> "Standard_Boolean":
        """
        * True if me is overlapping Other at start ***---------------***  me ***-----------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsOverlappingAtStart(self, *args)


    def IsOverlappingAtEnd(self, *args) -> "Standard_Boolean":
        """
        * True if me is overlapping Other at end ***-----------** me ***---------------***  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsOverlappingAtEnd(self, *args)


    def IsJustOverlappingAtStart(self, *args) -> "Standard_Boolean":
        """
        * True if me is just overlapping Other at start ***-----------***  me ***------------------------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustOverlappingAtStart(self, *args)


    def IsJustOverlappingAtEnd(self, *args) -> "Standard_Boolean":
        """
        * True if me is just overlapping Other at end ***-----------*  me ***------------------------** Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsJustOverlappingAtEnd(self, *args)


    def IsSimilar(self, *args) -> "Standard_Boolean":
        """
        * True if me and Other have the same bounds *----------------***  me ***-----------------**  Other

        :param Other:
        :type Other: Intrv_Interval &
        :rtype: bool

        """
        return _Intrv.Intrv_Interval_IsSimilar(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Intrv.delete_Intrv_Interval
Intrv_Interval.Start = new_instancemethod(_Intrv.Intrv_Interval_Start, None, Intrv_Interval)
Intrv_Interval.End = new_instancemethod(_Intrv.Intrv_Interval_End, None, Intrv_Interval)
Intrv_Interval.TolStart = new_instancemethod(_Intrv.Intrv_Interval_TolStart, None, Intrv_Interval)
Intrv_Interval.TolEnd = new_instancemethod(_Intrv.Intrv_Interval_TolEnd, None, Intrv_Interval)
Intrv_Interval.Bounds = new_instancemethod(_Intrv.Intrv_Interval_Bounds, None, Intrv_Interval)
Intrv_Interval.SetStart = new_instancemethod(_Intrv.Intrv_Interval_SetStart, None, Intrv_Interval)
Intrv_Interval.FuseAtStart = new_instancemethod(_Intrv.Intrv_Interval_FuseAtStart, None, Intrv_Interval)
Intrv_Interval.CutAtStart = new_instancemethod(_Intrv.Intrv_Interval_CutAtStart, None, Intrv_Interval)
Intrv_Interval.SetEnd = new_instancemethod(_Intrv.Intrv_Interval_SetEnd, None, Intrv_Interval)
Intrv_Interval.FuseAtEnd = new_instancemethod(_Intrv.Intrv_Interval_FuseAtEnd, None, Intrv_Interval)
Intrv_Interval.CutAtEnd = new_instancemethod(_Intrv.Intrv_Interval_CutAtEnd, None, Intrv_Interval)
Intrv_Interval.IsProbablyEmpty = new_instancemethod(_Intrv.Intrv_Interval_IsProbablyEmpty, None, Intrv_Interval)
Intrv_Interval.Position = new_instancemethod(_Intrv.Intrv_Interval_Position, None, Intrv_Interval)
Intrv_Interval.IsBefore = new_instancemethod(_Intrv.Intrv_Interval_IsBefore, None, Intrv_Interval)
Intrv_Interval.IsAfter = new_instancemethod(_Intrv.Intrv_Interval_IsAfter, None, Intrv_Interval)
Intrv_Interval.IsInside = new_instancemethod(_Intrv.Intrv_Interval_IsInside, None, Intrv_Interval)
Intrv_Interval.IsEnclosing = new_instancemethod(_Intrv.Intrv_Interval_IsEnclosing, None, Intrv_Interval)
Intrv_Interval.IsJustEnclosingAtStart = new_instancemethod(_Intrv.Intrv_Interval_IsJustEnclosingAtStart, None, Intrv_Interval)
Intrv_Interval.IsJustEnclosingAtEnd = new_instancemethod(_Intrv.Intrv_Interval_IsJustEnclosingAtEnd, None, Intrv_Interval)
Intrv_Interval.IsJustBefore = new_instancemethod(_Intrv.Intrv_Interval_IsJustBefore, None, Intrv_Interval)
Intrv_Interval.IsJustAfter = new_instancemethod(_Intrv.Intrv_Interval_IsJustAfter, None, Intrv_Interval)
Intrv_Interval.IsOverlappingAtStart = new_instancemethod(_Intrv.Intrv_Interval_IsOverlappingAtStart, None, Intrv_Interval)
Intrv_Interval.IsOverlappingAtEnd = new_instancemethod(_Intrv.Intrv_Interval_IsOverlappingAtEnd, None, Intrv_Interval)
Intrv_Interval.IsJustOverlappingAtStart = new_instancemethod(_Intrv.Intrv_Interval_IsJustOverlappingAtStart, None, Intrv_Interval)
Intrv_Interval.IsJustOverlappingAtEnd = new_instancemethod(_Intrv.Intrv_Interval_IsJustOverlappingAtEnd, None, Intrv_Interval)
Intrv_Interval.IsSimilar = new_instancemethod(_Intrv.Intrv_Interval_IsSimilar, None, Intrv_Interval)
Intrv_Interval_swigregister = _Intrv.Intrv_Interval_swigregister
Intrv_Interval_swigregister(Intrv_Interval)

class Intrv_Intervals(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a void sequence of intervals.

        :rtype: None

        * Creates a sequence of one interval.

        :param Int:
        :type Int: Intrv_Interval &
        :rtype: None

        * Creates by copying an existing sequence of intervals.

        :param Int:
        :type Int: Intrv_Intervals &
        :rtype: None

        """
        _Intrv.Intrv_Intervals_swiginit(self, _Intrv.new_Intrv_Intervals(*args))

    def Intersect(self, *args) -> "void":
        """
        * Intersects the intervals with the interval <Tool>.

        :param Tool:
        :type Tool: Intrv_Interval &
        :rtype: None

        * Intersects the intervals with the intervals in the sequence <Tool>.

        :param Tool:
        :type Tool: Intrv_Intervals &
        :rtype: None

        """
        return _Intrv.Intrv_Intervals_Intersect(self, *args)


    def Subtract(self, *args) -> "void":
        """
        :param Tool:
        :type Tool: Intrv_Interval &
        :rtype: None

        :param Tool:
        :type Tool: Intrv_Intervals &
        :rtype: None

        """
        return _Intrv.Intrv_Intervals_Subtract(self, *args)


    def Unite(self, *args) -> "void":
        """
        :param Tool:
        :type Tool: Intrv_Interval &
        :rtype: None

        :param Tool:
        :type Tool: Intrv_Intervals &
        :rtype: None

        """
        return _Intrv.Intrv_Intervals_Unite(self, *args)


    def XUnite(self, *args) -> "void":
        """
        :param Tool:
        :type Tool: Intrv_Interval &
        :rtype: None

        :param Tool:
        :type Tool: Intrv_Intervals &
        :rtype: None

        """
        return _Intrv.Intrv_Intervals_XUnite(self, *args)


    def NbIntervals(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Intrv.Intrv_Intervals_NbIntervals(self, *args)


    def Value(self, *args) -> "Intrv_Interval const &":
        """
        :param Index:
        :type Index: int
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_Intervals_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Intrv.delete_Intrv_Intervals
Intrv_Intervals.Intersect = new_instancemethod(_Intrv.Intrv_Intervals_Intersect, None, Intrv_Intervals)
Intrv_Intervals.Subtract = new_instancemethod(_Intrv.Intrv_Intervals_Subtract, None, Intrv_Intervals)
Intrv_Intervals.Unite = new_instancemethod(_Intrv.Intrv_Intervals_Unite, None, Intrv_Intervals)
Intrv_Intervals.XUnite = new_instancemethod(_Intrv.Intrv_Intervals_XUnite, None, Intrv_Intervals)
Intrv_Intervals.NbIntervals = new_instancemethod(_Intrv.Intrv_Intervals_NbIntervals, None, Intrv_Intervals)
Intrv_Intervals.Value = new_instancemethod(_Intrv.Intrv_Intervals_Value, None, Intrv_Intervals)
Intrv_Intervals_swigregister = _Intrv.Intrv_Intervals_swigregister
Intrv_Intervals_swigregister(Intrv_Intervals)

class Intrv_SequenceNodeOfSequenceOfInterval(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Intrv_Interval &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Intrv.Intrv_SequenceNodeOfSequenceOfInterval_swiginit(self, _Intrv.new_Intrv_SequenceNodeOfSequenceOfInterval(*args))

    def Value(self, *args) -> "Intrv_Interval &":
        """
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_SequenceNodeOfSequenceOfInterval_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Intrv_SequenceNodeOfSequenceOfInterval(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Intrv.delete_Intrv_SequenceNodeOfSequenceOfInterval
Intrv_SequenceNodeOfSequenceOfInterval.Value = new_instancemethod(_Intrv.Intrv_SequenceNodeOfSequenceOfInterval_Value, None, Intrv_SequenceNodeOfSequenceOfInterval)
Intrv_SequenceNodeOfSequenceOfInterval_swigregister = _Intrv.Intrv_SequenceNodeOfSequenceOfInterval_swigregister
Intrv_SequenceNodeOfSequenceOfInterval_swigregister(Intrv_SequenceNodeOfSequenceOfInterval)

class Handle_Intrv_SequenceNodeOfSequenceOfInterval(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_swiginit(self, _Intrv.new_Handle_Intrv_SequenceNodeOfSequenceOfInterval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Intrv.delete_Handle_Intrv_SequenceNodeOfSequenceOfInterval
Handle_Intrv_SequenceNodeOfSequenceOfInterval.Nullify = new_instancemethod(_Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_Nullify, None, Handle_Intrv_SequenceNodeOfSequenceOfInterval)
Handle_Intrv_SequenceNodeOfSequenceOfInterval.IsNull = new_instancemethod(_Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_IsNull, None, Handle_Intrv_SequenceNodeOfSequenceOfInterval)
Handle_Intrv_SequenceNodeOfSequenceOfInterval._get_reference = new_instancemethod(_Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval__get_reference, None, Handle_Intrv_SequenceNodeOfSequenceOfInterval)
Handle_Intrv_SequenceNodeOfSequenceOfInterval_swigregister = _Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_swigregister
Handle_Intrv_SequenceNodeOfSequenceOfInterval_swigregister(Handle_Intrv_SequenceNodeOfSequenceOfInterval)

def Handle_Intrv_SequenceNodeOfSequenceOfInterval_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Intrv_SequenceNodeOfSequenceOfInterval const":
    return _Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_DownCast(AnObject)
Handle_Intrv_SequenceNodeOfSequenceOfInterval_DownCast = _Intrv.Handle_Intrv_SequenceNodeOfSequenceOfInterval_DownCast

class Intrv_SequenceOfInterval(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Intrv_SequenceOfInterval &
        :rtype: None

        """
        _Intrv.Intrv_SequenceOfInterval_swiginit(self, _Intrv.new_Intrv_SequenceOfInterval(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_Clear(self, *args)


    def Assign(self, *args) -> "Intrv_SequenceOfInterval const &":
        """
        :param Other:
        :type Other: Intrv_SequenceOfInterval &
        :rtype: Intrv_SequenceOfInterval

        """
        return _Intrv.Intrv_SequenceOfInterval_Assign(self, *args)


    def Set(self, *args) -> "Intrv_SequenceOfInterval const &":
        """
        :param Other:
        :type Other: Intrv_SequenceOfInterval &
        :rtype: Intrv_SequenceOfInterval

        """
        return _Intrv.Intrv_SequenceOfInterval_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Intrv_Interval &
        :rtype: None

        :param S:
        :type S: Intrv_SequenceOfInterval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Intrv_Interval &
        :rtype: None

        :param S:
        :type S: Intrv_SequenceOfInterval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Intrv_Interval &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Intrv_SequenceOfInterval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Intrv_Interval &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Intrv_SequenceOfInterval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_InsertAfter(self, *args)


    def First(self, *args) -> "Intrv_Interval const &":
        """
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_SequenceOfInterval_First(self, *args)


    def Last(self, *args) -> "Intrv_Interval const &":
        """
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_SequenceOfInterval_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Intrv_SequenceOfInterval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_Split(self, *args)


    def Value(self, *args) -> "Intrv_Interval const &":
        """
        :param Index:
        :type Index: int
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_SequenceOfInterval_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Intrv_Interval &
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Intrv_Interval &":
        """
        :param Index:
        :type Index: int
        :rtype: Intrv_Interval

        """
        return _Intrv.Intrv_SequenceOfInterval_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Intrv.Intrv_SequenceOfInterval_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Intrv.delete_Intrv_SequenceOfInterval
Intrv_SequenceOfInterval.Clear = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Clear, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Assign = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Assign, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Set = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Set, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Append = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Append, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Prepend = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Prepend, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.InsertBefore = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_InsertBefore, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.InsertAfter = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_InsertAfter, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.First = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_First, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Last = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Last, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Split = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Split, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Value = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Value, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.SetValue = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_SetValue, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.ChangeValue = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_ChangeValue, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval.Remove = new_instancemethod(_Intrv.Intrv_SequenceOfInterval_Remove, None, Intrv_SequenceOfInterval)
Intrv_SequenceOfInterval_swigregister = _Intrv.Intrv_SequenceOfInterval_swigregister
Intrv_SequenceOfInterval_swigregister(Intrv_SequenceOfInterval)



