# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Aspect.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Aspect')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Aspect')
    _Aspect = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Aspect', [dirname(__file__)])
        except ImportError:
            import _Aspect
            return _Aspect
        try:
            _mod = imp.load_module('_Aspect', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Aspect = swig_import_helper()
    del swig_import_helper
else:
    import _Aspect
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Aspect.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Aspect.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Aspect.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Aspect.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Aspect.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Aspect.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Aspect.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Aspect.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Aspect.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Aspect.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Aspect.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Aspect.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Aspect.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Aspect.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Aspect.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Aspect.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Aspect.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Aspect.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Quantity
import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TColStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

Aspect_CP_North = _Aspect.Aspect_CP_North
Aspect_CP_NorthEast = _Aspect.Aspect_CP_NorthEast
Aspect_CP_East = _Aspect.Aspect_CP_East
Aspect_CP_SouthEast = _Aspect.Aspect_CP_SouthEast
Aspect_CP_South = _Aspect.Aspect_CP_South
Aspect_CP_SouthWest = _Aspect.Aspect_CP_SouthWest
Aspect_CP_West = _Aspect.Aspect_CP_West
Aspect_CP_NorthWest = _Aspect.Aspect_CP_NorthWest
Aspect_CP_Center = _Aspect.Aspect_CP_Center
Aspect_FM_NONE = _Aspect.Aspect_FM_NONE
Aspect_FM_CENTERED = _Aspect.Aspect_FM_CENTERED
Aspect_FM_TILED = _Aspect.Aspect_FM_TILED
Aspect_FM_STRETCH = _Aspect.Aspect_FM_STRETCH
Aspect_FOSP_A0 = _Aspect.Aspect_FOSP_A0
Aspect_FOSP_A1 = _Aspect.Aspect_FOSP_A1
Aspect_FOSP_A2 = _Aspect.Aspect_FOSP_A2
Aspect_FOSP_A3 = _Aspect.Aspect_FOSP_A3
Aspect_FOSP_A4 = _Aspect.Aspect_FOSP_A4
Aspect_FOSP_A5 = _Aspect.Aspect_FOSP_A5
Aspect_FOSP_K_LONG = _Aspect.Aspect_FOSP_K_LONG
Aspect_FOSP_K_SHORT = _Aspect.Aspect_FOSP_K_SHORT
Aspect_FOSP_J_LONG = _Aspect.Aspect_FOSP_J_LONG
Aspect_FOSP_J_SHORT = _Aspect.Aspect_FOSP_J_SHORT
Aspect_FOSP_H_LONG = _Aspect.Aspect_FOSP_H_LONG
Aspect_FOSP_H_SHORT = _Aspect.Aspect_FOSP_H_SHORT
Aspect_FOSP_G_LONG = _Aspect.Aspect_FOSP_G_LONG
Aspect_FOSP_G_SHORT = _Aspect.Aspect_FOSP_G_SHORT
Aspect_FOSP_F = _Aspect.Aspect_FOSP_F
Aspect_FOSP_E = _Aspect.Aspect_FOSP_E
Aspect_FOSP_D = _Aspect.Aspect_FOSP_D
Aspect_FOSP_C = _Aspect.Aspect_FOSP_C
Aspect_FOSP_B = _Aspect.Aspect_FOSP_B
Aspect_FOSP_A = _Aspect.Aspect_FOSP_A
Aspect_FOSP_UNKNOWN = _Aspect.Aspect_FOSP_UNKNOWN
Aspect_GFM_NONE = _Aspect.Aspect_GFM_NONE
Aspect_GFM_HOR = _Aspect.Aspect_GFM_HOR
Aspect_GFM_VER = _Aspect.Aspect_GFM_VER
Aspect_GFM_DIAG1 = _Aspect.Aspect_GFM_DIAG1
Aspect_GFM_DIAG2 = _Aspect.Aspect_GFM_DIAG2
Aspect_GFM_CORNER1 = _Aspect.Aspect_GFM_CORNER1
Aspect_GFM_CORNER2 = _Aspect.Aspect_GFM_CORNER2
Aspect_GFM_CORNER3 = _Aspect.Aspect_GFM_CORNER3
Aspect_GFM_CORNER4 = _Aspect.Aspect_GFM_CORNER4
Aspect_GDM_Lines = _Aspect.Aspect_GDM_Lines
Aspect_GDM_Points = _Aspect.Aspect_GDM_Points
Aspect_GDM_None = _Aspect.Aspect_GDM_None
Aspect_GT_Rectangular = _Aspect.Aspect_GT_Rectangular
Aspect_GT_Circular = _Aspect.Aspect_GT_Circular
Aspect_HS_HORIZONTAL = _Aspect.Aspect_HS_HORIZONTAL
Aspect_HS_HORIZONTAL_WIDE = _Aspect.Aspect_HS_HORIZONTAL_WIDE
Aspect_HS_VERTICAL = _Aspect.Aspect_HS_VERTICAL
Aspect_HS_VERTICAL_WIDE = _Aspect.Aspect_HS_VERTICAL_WIDE
Aspect_HS_DIAGONAL_45 = _Aspect.Aspect_HS_DIAGONAL_45
Aspect_HS_DIAGONAL_45_WIDE = _Aspect.Aspect_HS_DIAGONAL_45_WIDE
Aspect_HS_DIAGONAL_135 = _Aspect.Aspect_HS_DIAGONAL_135
Aspect_HS_DIAGONAL_135_WIDE = _Aspect.Aspect_HS_DIAGONAL_135_WIDE
Aspect_HS_GRID = _Aspect.Aspect_HS_GRID
Aspect_HS_GRID_WIDE = _Aspect.Aspect_HS_GRID_WIDE
Aspect_HS_GRID_DIAGONAL = _Aspect.Aspect_HS_GRID_DIAGONAL
Aspect_HS_GRID_DIAGONAL_WIDE = _Aspect.Aspect_HS_GRID_DIAGONAL_WIDE
Aspect_IS_EMPTY = _Aspect.Aspect_IS_EMPTY
Aspect_IS_HOLLOW = _Aspect.Aspect_IS_HOLLOW
Aspect_IS_HATCH = _Aspect.Aspect_IS_HATCH
Aspect_IS_SOLID = _Aspect.Aspect_IS_SOLID
Aspect_IS_HIDDENLINE = _Aspect.Aspect_IS_HIDDENLINE
Aspect_IS_POINT = _Aspect.Aspect_IS_POINT
Aspect_POM_Off = _Aspect.Aspect_POM_Off
Aspect_POM_Fill = _Aspect.Aspect_POM_Fill
Aspect_POM_Line = _Aspect.Aspect_POM_Line
Aspect_POM_Point = _Aspect.Aspect_POM_Point
Aspect_POM_All = _Aspect.Aspect_POM_All
Aspect_POM_None = _Aspect.Aspect_POM_None
Aspect_POM_Mask = _Aspect.Aspect_POM_Mask
Aspect_PA_STRETCH = _Aspect.Aspect_PA_STRETCH
Aspect_PA_TILE = _Aspect.Aspect_PA_TILE
Aspect_TOCSD_AUTO = _Aspect.Aspect_TOCSD_AUTO
Aspect_TOCSD_USER = _Aspect.Aspect_TOCSD_USER
Aspect_TOCSO_NONE = _Aspect.Aspect_TOCSO_NONE
Aspect_TOCSO_LEFT = _Aspect.Aspect_TOCSO_LEFT
Aspect_TOCSO_RIGHT = _Aspect.Aspect_TOCSO_RIGHT
Aspect_TOCSO_CENTER = _Aspect.Aspect_TOCSO_CENTER
Aspect_TOCSP_NONE = _Aspect.Aspect_TOCSP_NONE
Aspect_TOCSP_LEFT = _Aspect.Aspect_TOCSP_LEFT
Aspect_TOCSP_RIGHT = _Aspect.Aspect_TOCSP_RIGHT
Aspect_TOCSP_CENTER = _Aspect.Aspect_TOCSP_CENTER
Aspect_TOCS_BlackAndWhite = _Aspect.Aspect_TOCS_BlackAndWhite
Aspect_TOCS_GreyScale = _Aspect.Aspect_TOCS_GreyScale
Aspect_TOCS_RGB = _Aspect.Aspect_TOCS_RGB
Aspect_TOC_BOTTOM_LEFT = _Aspect.Aspect_TOC_BOTTOM_LEFT
Aspect_TOC_BOTTOM_RIGHT = _Aspect.Aspect_TOC_BOTTOM_RIGHT
Aspect_TOC_TOP_LEFT = _Aspect.Aspect_TOC_TOP_LEFT
Aspect_TOC_TOP_RIGHT = _Aspect.Aspect_TOC_TOP_RIGHT
Aspect_TOD_RELATIVE = _Aspect.Aspect_TOD_RELATIVE
Aspect_TOD_ABSOLUTE = _Aspect.Aspect_TOD_ABSOLUTE
Aspect_TODT_NORMAL = _Aspect.Aspect_TODT_NORMAL
Aspect_TODT_SUBTITLE = _Aspect.Aspect_TODT_SUBTITLE
Aspect_TODT_DEKALE = _Aspect.Aspect_TODT_DEKALE
Aspect_TODT_BLEND = _Aspect.Aspect_TODT_BLEND
Aspect_TODT_DIMENSION = _Aspect.Aspect_TODT_DIMENSION
Aspect_TODM_REPLACE = _Aspect.Aspect_TODM_REPLACE
Aspect_TODM_ERASE = _Aspect.Aspect_TODM_ERASE
Aspect_TODM_XOR = _Aspect.Aspect_TODM_XOR
Aspect_TODM_XORLIGHT = _Aspect.Aspect_TODM_XORLIGHT
Aspect_TOE_VISIBLE = _Aspect.Aspect_TOE_VISIBLE
Aspect_TOE_INVISIBLE = _Aspect.Aspect_TOE_INVISIBLE
Aspect_TOFM_BOTH_SIDE = _Aspect.Aspect_TOFM_BOTH_SIDE
Aspect_TOFM_BACK_SIDE = _Aspect.Aspect_TOFM_BACK_SIDE
Aspect_TOFM_FRONT_SIDE = _Aspect.Aspect_TOFM_FRONT_SIDE
Aspect_TOF_DEFAULT = _Aspect.Aspect_TOF_DEFAULT
Aspect_TOF_COURIER = _Aspect.Aspect_TOF_COURIER
Aspect_TOF_HELVETICA = _Aspect.Aspect_TOF_HELVETICA
Aspect_TOF_TIMES = _Aspect.Aspect_TOF_TIMES
Aspect_TOF_USERDEFINED = _Aspect.Aspect_TOF_USERDEFINED
Aspect_TOHM_COLOR = _Aspect.Aspect_TOHM_COLOR
Aspect_TOHM_BOUNDBOX = _Aspect.Aspect_TOHM_BOUNDBOX
Aspect_TOL_OVERLAY = _Aspect.Aspect_TOL_OVERLAY
Aspect_TOL_UNDERLAY = _Aspect.Aspect_TOL_UNDERLAY
Aspect_TOL_SOLID = _Aspect.Aspect_TOL_SOLID
Aspect_TOL_DASH = _Aspect.Aspect_TOL_DASH
Aspect_TOL_DOT = _Aspect.Aspect_TOL_DOT
Aspect_TOL_DOTDASH = _Aspect.Aspect_TOL_DOTDASH
Aspect_TOL_USERDEFINED = _Aspect.Aspect_TOL_USERDEFINED
Aspect_TOM_POINT = _Aspect.Aspect_TOM_POINT
Aspect_TOM_PLUS = _Aspect.Aspect_TOM_PLUS
Aspect_TOM_STAR = _Aspect.Aspect_TOM_STAR
Aspect_TOM_X = _Aspect.Aspect_TOM_X
Aspect_TOM_O = _Aspect.Aspect_TOM_O
Aspect_TOM_O_POINT = _Aspect.Aspect_TOM_O_POINT
Aspect_TOM_O_PLUS = _Aspect.Aspect_TOM_O_PLUS
Aspect_TOM_O_STAR = _Aspect.Aspect_TOM_O_STAR
Aspect_TOM_O_X = _Aspect.Aspect_TOM_O_X
Aspect_TOM_RING1 = _Aspect.Aspect_TOM_RING1
Aspect_TOM_RING2 = _Aspect.Aspect_TOM_RING2
Aspect_TOM_RING3 = _Aspect.Aspect_TOM_RING3
Aspect_TOM_BALL = _Aspect.Aspect_TOM_BALL
Aspect_TOM_USERDEFINED = _Aspect.Aspect_TOM_USERDEFINED
Aspect_TOP_UNKNOWN = _Aspect.Aspect_TOP_UNKNOWN
Aspect_TOP_POLYLINE = _Aspect.Aspect_TOP_POLYLINE
Aspect_TOP_POLYGON = _Aspect.Aspect_TOP_POLYGON
Aspect_TOP_SEGMENTS = _Aspect.Aspect_TOP_SEGMENTS
Aspect_TOP_ARCS = _Aspect.Aspect_TOP_ARCS
Aspect_TOP_POLYARCS = _Aspect.Aspect_TOP_POLYARCS
Aspect_TOP_POINTS = _Aspect.Aspect_TOP_POINTS
Aspect_TOP_MARKERS = _Aspect.Aspect_TOP_MARKERS
Aspect_TORM_IMMEDIAT = _Aspect.Aspect_TORM_IMMEDIAT
Aspect_TORM_RETAIN = _Aspect.Aspect_TORM_RETAIN
Aspect_TORM_CLEAR_AND_RETAIN = _Aspect.Aspect_TORM_CLEAR_AND_RETAIN
Aspect_TOR_UNKNOWN = _Aspect.Aspect_TOR_UNKNOWN
Aspect_TOR_NO_BORDER = _Aspect.Aspect_TOR_NO_BORDER
Aspect_TOR_TOP_BORDER = _Aspect.Aspect_TOR_TOP_BORDER
Aspect_TOR_RIGHT_BORDER = _Aspect.Aspect_TOR_RIGHT_BORDER
Aspect_TOR_BOTTOM_BORDER = _Aspect.Aspect_TOR_BOTTOM_BORDER
Aspect_TOR_LEFT_BORDER = _Aspect.Aspect_TOR_LEFT_BORDER
Aspect_TOR_TOP_AND_RIGHT_BORDER = _Aspect.Aspect_TOR_TOP_AND_RIGHT_BORDER
Aspect_TOR_RIGHT_AND_BOTTOM_BORDER = _Aspect.Aspect_TOR_RIGHT_AND_BOTTOM_BORDER
Aspect_TOR_BOTTOM_AND_LEFT_BORDER = _Aspect.Aspect_TOR_BOTTOM_AND_LEFT_BORDER
Aspect_TOR_LEFT_AND_TOP_BORDER = _Aspect.Aspect_TOR_LEFT_AND_TOP_BORDER
Aspect_TOST_NORMAL = _Aspect.Aspect_TOST_NORMAL
Aspect_TOST_ANNOTATION = _Aspect.Aspect_TOST_ANNOTATION
Aspect_TOT_SOLID = _Aspect.Aspect_TOT_SOLID
Aspect_TOT_OUTLINE = _Aspect.Aspect_TOT_OUTLINE
Aspect_TOTE_NONE = _Aspect.Aspect_TOTE_NONE
Aspect_TOTE_ORIGIN = _Aspect.Aspect_TOTE_ORIGIN
Aspect_TOTE_AXIS_X = _Aspect.Aspect_TOTE_AXIS_X
Aspect_TOTE_AXIS_Y = _Aspect.Aspect_TOTE_AXIS_Y
Aspect_TOTE_AXIS_Z = _Aspect.Aspect_TOTE_AXIS_Z
Aspect_TOTE_TEXT_X = _Aspect.Aspect_TOTE_TEXT_X
Aspect_TOTE_TEXT_Y = _Aspect.Aspect_TOTE_TEXT_Y
Aspect_TOTE_TEXT_Z = _Aspect.Aspect_TOTE_TEXT_Z
Aspect_TOTE_01 = _Aspect.Aspect_TOTE_01
Aspect_TOTE_02 = _Aspect.Aspect_TOTE_02
Aspect_TOTE_03 = _Aspect.Aspect_TOTE_03
Aspect_TOTE_04 = _Aspect.Aspect_TOTE_04
Aspect_TOTE_05 = _Aspect.Aspect_TOTE_05
Aspect_TOTE_06 = _Aspect.Aspect_TOTE_06
Aspect_TOTE_07 = _Aspect.Aspect_TOTE_07
Aspect_TOTE_08 = _Aspect.Aspect_TOTE_08
Aspect_TOTE_09 = _Aspect.Aspect_TOTE_09
Aspect_TOTE_10 = _Aspect.Aspect_TOTE_10
Aspect_TOTP_CENTER = _Aspect.Aspect_TOTP_CENTER
Aspect_TOTP_LEFT_LOWER = _Aspect.Aspect_TOTP_LEFT_LOWER
Aspect_TOTP_LEFT_UPPER = _Aspect.Aspect_TOTP_LEFT_UPPER
Aspect_TOTP_RIGHT_LOWER = _Aspect.Aspect_TOTP_RIGHT_LOWER
Aspect_TOTP_RIGHT_UPPER = _Aspect.Aspect_TOTP_RIGHT_UPPER
Aspect_TOTP_01 = _Aspect.Aspect_TOTP_01
Aspect_TOTP_02 = _Aspect.Aspect_TOTP_02
Aspect_TOTP_03 = _Aspect.Aspect_TOTP_03
Aspect_TOTP_04 = _Aspect.Aspect_TOTP_04
Aspect_TOTP_05 = _Aspect.Aspect_TOTP_05
Aspect_TOTP_06 = _Aspect.Aspect_TOTP_06
Aspect_TOTP_07 = _Aspect.Aspect_TOTP_07
Aspect_TOTP_08 = _Aspect.Aspect_TOTP_08
Aspect_TOTP_09 = _Aspect.Aspect_TOTP_09
Aspect_TOTP_10 = _Aspect.Aspect_TOTP_10
Aspect_TOU_ASAP = _Aspect.Aspect_TOU_ASAP
Aspect_TOU_WAIT = _Aspect.Aspect_TOU_WAIT
Aspect_WOL_THIN = _Aspect.Aspect_WOL_THIN
Aspect_WOL_MEDIUM = _Aspect.Aspect_WOL_MEDIUM
Aspect_WOL_THICK = _Aspect.Aspect_WOL_THICK
Aspect_WOL_VERYTHICK = _Aspect.Aspect_WOL_VERYTHICK
Aspect_WOL_USERDEFINED = _Aspect.Aspect_WOL_USERDEFINED
Aspect_XA_DELETE_WINDOW = _Aspect.Aspect_XA_DELETE_WINDOW
class aspect(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ValuesOfFOSP(*args) -> "Standard_Real &, Standard_Real &":
        """
        * Returns the format size according to the default LENGTH unit of the required format <aFOSP>. Returns more the normalized format name.

        :param aFOSP:
        :type aFOSP: Aspect_FormatOfSheetPaper
        :param aWidth:
        :type aWidth: Quantity_Length &
        :param aHeight:
        :type aHeight: Quantity_Length &
        :rtype: char *

        """
        return _Aspect.aspect_ValuesOfFOSP(*args)

    ValuesOfFOSP = staticmethod(ValuesOfFOSP)

    def ToCString(*args) -> "char const *":
        """
        * Translates an ExtendedString to a CString depending of the local format.

        :param aString:
        :type aString: TCollection_ExtendedString &
        :rtype: char *

        """
        return _Aspect.aspect_ToCString(*args)

    ToCString = staticmethod(ToCString)

    def Inverse(*args) -> "Standard_Boolean":
        """
        * Inverses <aMat> a 4x4 matrix.

        :param aMat:
        :type aMat: TColStd_Array2OfReal &
        :param Inv:
        :type Inv: TColStd_Array2OfReal &
        :rtype: bool

        """
        return _Aspect.aspect_Inverse(*args)

    Inverse = staticmethod(Inverse)

    __repr__ = _dumps_object


    def __init__(self):
        _Aspect.aspect_swiginit(self, _Aspect.new_aspect())
    __swig_destroy__ = _Aspect.delete_aspect
aspect_swigregister = _Aspect.aspect_swigregister
aspect_swigregister(aspect)

def aspect_ValuesOfFOSP(*args) -> "Standard_Real &, Standard_Real &":
    """
    * Returns the format size according to the default LENGTH unit of the required format <aFOSP>. Returns more the normalized format name.

    :param aFOSP:
    :type aFOSP: Aspect_FormatOfSheetPaper
    :param aWidth:
    :type aWidth: Quantity_Length &
    :param aHeight:
    :type aHeight: Quantity_Length &
    :rtype: char *

    """
    return _Aspect.aspect_ValuesOfFOSP(*args)

def aspect_ToCString(*args) -> "char const *":
    """
    * Translates an ExtendedString to a CString depending of the local format.

    :param aString:
    :type aString: TCollection_ExtendedString &
    :rtype: char *

    """
    return _Aspect.aspect_ToCString(*args)

def aspect_Inverse(*args) -> "Standard_Boolean":
    """
    * Inverses <aMat> a 4x4 matrix.

    :param aMat:
    :type aMat: TColStd_Array2OfReal &
    :param Inv:
    :type Inv: TColStd_Array2OfReal &
    :rtype: bool

    """
    return _Aspect.aspect_Inverse(*args)

class Aspect_Array1OfEdge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Aspect_Edge &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _Aspect.Aspect_Array1OfEdge_swiginit(self, _Aspect.new_Aspect_Array1OfEdge(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Aspect_Edge &
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Aspect.Aspect_Array1OfEdge_IsAllocated(self, *args)


    def Assign(self, *args) -> "Aspect_Array1OfEdge const &":
        """
        :param Other:
        :type Other: Aspect_Array1OfEdge &
        :rtype: Aspect_Array1OfEdge

        """
        return _Aspect.Aspect_Array1OfEdge_Assign(self, *args)


    def Set(self, *args) -> "Aspect_Array1OfEdge const &":
        """
        :param Other:
        :type Other: Aspect_Array1OfEdge &
        :rtype: Aspect_Array1OfEdge

        """
        return _Aspect.Aspect_Array1OfEdge_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Aspect.Aspect_Array1OfEdge_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Aspect_Edge &
        :rtype: None

        """
        return _Aspect.Aspect_Array1OfEdge_SetValue(self, *args)


    def Value(self, *args) -> "Aspect_Edge const &":
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_Edge

        """
        return _Aspect.Aspect_Array1OfEdge_Value(self, *args)


    def ChangeValue(self, *args) -> "Aspect_Edge &":
        """
        :param Index:
        :type Index: int
        :rtype: Aspect_Edge

        """
        return _Aspect.Aspect_Array1OfEdge_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Array1OfEdge
Aspect_Array1OfEdge.Init = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Init, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Destroy = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Destroy, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.IsAllocated = new_instancemethod(_Aspect.Aspect_Array1OfEdge_IsAllocated, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Assign = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Assign, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Set = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Set, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Length = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Length, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Lower = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Lower, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Upper = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Upper, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.SetValue = new_instancemethod(_Aspect.Aspect_Array1OfEdge_SetValue, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.Value = new_instancemethod(_Aspect.Aspect_Array1OfEdge_Value, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge.ChangeValue = new_instancemethod(_Aspect.Aspect_Array1OfEdge_ChangeValue, None, Aspect_Array1OfEdge)
Aspect_Array1OfEdge_swigregister = _Aspect.Aspect_Array1OfEdge_swigregister
Aspect_Array1OfEdge_swigregister(Aspect_Array1OfEdge)

class Aspect_AspectFillArea(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetEdgeColor(self, *args) -> "void":
        """
        * Modifies the colour of the edge of the face

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeColor(self, *args)


    def SetEdgeLineType(self, *args) -> "void":
        """
        * Modifies the edge line type

        :param AType:
        :type AType: Aspect_TypeOfLine
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeLineType(self, *args)


    def SetEdgeWidth(self, *args) -> "void":
        """
        * Modifies the edge thickness //! Category: Methods to modify the class definition //! Warning: Raises AspectFillAreaDefinitionError if the width is a negative value.

        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetEdgeWidth(self, *args)


    def SetHatchStyle(self, *args) -> "void":
        """
        * Modifies the hatch type used when InteriorStyle is IS_HATCH

        :param AStyle:
        :type AStyle: Aspect_HatchStyle
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetHatchStyle(self, *args)


    def SetInteriorColor(self, *args) -> "void":
        """
        * Modifies the colour of the interior of the face

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetInteriorColor(self, *args)


    def SetBackInteriorColor(self, *args) -> "void":
        """
        * Modifies the colour of the interior of the back face

        :param color:
        :type color: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetBackInteriorColor(self, *args)


    def SetInteriorStyle(self, *args) -> "void":
        """
        * Modifies the interior type used for rendering //! InteriorStyle : IS_EMPTY	no interior IS_HOLLOW	display the boundaries of the surface IS_HATCH	display hatching IS_SOLID	display interior entirely filled

        :param AStyle:
        :type AStyle: Aspect_InteriorStyle
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_SetInteriorStyle(self, *args)


    def HatchStyle(self, *args) -> "Aspect_HatchStyle":
        """
        * Returns the hatch type used when InteriorStyle is IS_HATCH

        :rtype: Aspect_HatchStyle

        """
        return _Aspect.Aspect_AspectFillArea_HatchStyle(self, *args)


    def Values(self, *args) -> "void":
        """
        :param AStyle:
        :type AStyle: Aspect_InteriorStyle &
        :param AIntColor:
        :type AIntColor: Quantity_Color &
        :param AEdgeColor:
        :type AEdgeColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        * Returns the current values of the <self> group.

        :param AStyle:
        :type AStyle: Aspect_InteriorStyle &
        :param AIntColor:
        :type AIntColor: Quantity_Color &
        :param BackIntColor:
        :type BackIntColor: Quantity_Color &
        :param AEdgeColor:
        :type AEdgeColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectFillArea_Values(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_AspectFillArea(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_AspectFillArea
Aspect_AspectFillArea.SetEdgeColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetEdgeLineType = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeLineType, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetEdgeWidth = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetEdgeWidth, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetHatchStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetHatchStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetInteriorColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetInteriorColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetBackInteriorColor = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetBackInteriorColor, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.SetInteriorStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_SetInteriorStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.HatchStyle = new_instancemethod(_Aspect.Aspect_AspectFillArea_HatchStyle, None, Aspect_AspectFillArea)
Aspect_AspectFillArea.Values = new_instancemethod(_Aspect.Aspect_AspectFillArea_Values, None, Aspect_AspectFillArea)
Aspect_AspectFillArea_swigregister = _Aspect.Aspect_AspectFillArea_swigregister
Aspect_AspectFillArea_swigregister(Aspect_AspectFillArea)

class Handle_Aspect_AspectFillArea(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectFillArea_swiginit(self, _Aspect.new_Handle_Aspect_AspectFillArea(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectFillArea_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_AspectFillArea
Handle_Aspect_AspectFillArea.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea_Nullify, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea_IsNull, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea._get_reference = new_instancemethod(_Aspect.Handle_Aspect_AspectFillArea__get_reference, None, Handle_Aspect_AspectFillArea)
Handle_Aspect_AspectFillArea_swigregister = _Aspect.Handle_Aspect_AspectFillArea_swigregister
Handle_Aspect_AspectFillArea_swigregister(Handle_Aspect_AspectFillArea)

def Handle_Aspect_AspectFillArea_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_AspectFillArea const":
    return _Aspect.Handle_Aspect_AspectFillArea_DownCast(AnObject)
Handle_Aspect_AspectFillArea_DownCast = _Aspect.Handle_Aspect_AspectFillArea_DownCast

class Aspect_AspectLine(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetColor(self, *args) -> "void":
        """
        * Modifies the colour of <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetColor(self, *args)


    def SetType(self, *args) -> "void":
        """
        * Modifies the type of <self>.

        :param AType:
        :type AType: Aspect_TypeOfLine
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetType(self, *args)


    def SetWidth(self, *args) -> "void":
        """
        * Modifies the thickness of <self>. Category: Methods to modify the class definition Warning: Raises AspectLineDefinitionError if the width is a negative value.

        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_SetWidth(self, *args)


    def Values(self, *args) -> "void":
        """
        * Returns the current values of the group <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfLine &
        :param AWidth:
        :type AWidth: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectLine_Values(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_AspectLine(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_AspectLine
Aspect_AspectLine.SetColor = new_instancemethod(_Aspect.Aspect_AspectLine_SetColor, None, Aspect_AspectLine)
Aspect_AspectLine.SetType = new_instancemethod(_Aspect.Aspect_AspectLine_SetType, None, Aspect_AspectLine)
Aspect_AspectLine.SetWidth = new_instancemethod(_Aspect.Aspect_AspectLine_SetWidth, None, Aspect_AspectLine)
Aspect_AspectLine.Values = new_instancemethod(_Aspect.Aspect_AspectLine_Values, None, Aspect_AspectLine)
Aspect_AspectLine_swigregister = _Aspect.Aspect_AspectLine_swigregister
Aspect_AspectLine_swigregister(Aspect_AspectLine)

class Handle_Aspect_AspectLine(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectLine_swiginit(self, _Aspect.new_Handle_Aspect_AspectLine(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectLine_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_AspectLine
Handle_Aspect_AspectLine.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectLine_Nullify, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectLine_IsNull, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine._get_reference = new_instancemethod(_Aspect.Handle_Aspect_AspectLine__get_reference, None, Handle_Aspect_AspectLine)
Handle_Aspect_AspectLine_swigregister = _Aspect.Handle_Aspect_AspectLine_swigregister
Handle_Aspect_AspectLine_swigregister(Handle_Aspect_AspectLine)

def Handle_Aspect_AspectLine_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_AspectLine const":
    return _Aspect.Handle_Aspect_AspectLine_DownCast(AnObject)
Handle_Aspect_AspectLine_DownCast = _Aspect.Handle_Aspect_AspectLine_DownCast

class Aspect_AspectMarker(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetColor(self, *args) -> "void":
        """
        * Modifies the colour of <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetColor(self, *args)


    def SetScale(self, *args) -> "void":
        """
        * Modifies the scale factor of <self>. Marker type Aspect_TOM_POINT is not affected by the marker size scale factor. It is always the smallest displayable dot. Warning: Raises AspectMarkerDefinitionError if the scale is a negative value.

        :param AScale:
        :type AScale: float
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetScale(self, *args)


    def SetType(self, *args) -> "void":
        """
        * Modifies the type of marker <self>.

        :param AType:
        :type AType: Aspect_TypeOfMarker
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_SetType(self, *args)


    def Values(self, *args) -> "void":
        """
        * Returns the current values of the group <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :param AType:
        :type AType: Aspect_TypeOfMarker &
        :param AScale:
        :type AScale: float &
        :rtype: None

        """
        return _Aspect.Aspect_AspectMarker_Values(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_AspectMarker(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_AspectMarker
Aspect_AspectMarker.SetColor = new_instancemethod(_Aspect.Aspect_AspectMarker_SetColor, None, Aspect_AspectMarker)
Aspect_AspectMarker.SetScale = new_instancemethod(_Aspect.Aspect_AspectMarker_SetScale, None, Aspect_AspectMarker)
Aspect_AspectMarker.SetType = new_instancemethod(_Aspect.Aspect_AspectMarker_SetType, None, Aspect_AspectMarker)
Aspect_AspectMarker.Values = new_instancemethod(_Aspect.Aspect_AspectMarker_Values, None, Aspect_AspectMarker)
Aspect_AspectMarker_swigregister = _Aspect.Aspect_AspectMarker_swigregister
Aspect_AspectMarker_swigregister(Aspect_AspectMarker)

class Handle_Aspect_AspectMarker(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_AspectMarker_swiginit(self, _Aspect.new_Handle_Aspect_AspectMarker(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_AspectMarker_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_AspectMarker
Handle_Aspect_AspectMarker.Nullify = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker_Nullify, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker.IsNull = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker_IsNull, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker._get_reference = new_instancemethod(_Aspect.Handle_Aspect_AspectMarker__get_reference, None, Handle_Aspect_AspectMarker)
Handle_Aspect_AspectMarker_swigregister = _Aspect.Handle_Aspect_AspectMarker_swigregister
Handle_Aspect_AspectMarker_swigregister(Handle_Aspect_AspectMarker)

def Handle_Aspect_AspectMarker_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_AspectMarker const":
    return _Aspect.Handle_Aspect_AspectMarker_DownCast(AnObject)
Handle_Aspect_AspectMarker_DownCast = _Aspect.Handle_Aspect_AspectMarker_DownCast

class Aspect_Background(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a window background. Default color : NOC_MATRAGRAY.

        :rtype: None

        * Creates a window background with the colour <AColor>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        _Aspect.Aspect_Background_swiginit(self, _Aspect.new_Aspect_Background(*args))

    def SetColor(self, *args) -> "void":
        """
        * Modifies the colour of the window background <self>.

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_Background_SetColor(self, *args)


    def Color(self, *args) -> "Quantity_Color":
        """
        * Returns the colour of the window background <self>.

        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_Background_Color(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Background
Aspect_Background.SetColor = new_instancemethod(_Aspect.Aspect_Background_SetColor, None, Aspect_Background)
Aspect_Background.Color = new_instancemethod(_Aspect.Aspect_Background_Color, None, Aspect_Background)
Aspect_Background_swigregister = _Aspect.Aspect_Background_swigregister
Aspect_Background_swigregister(Aspect_Background)

class Aspect_ColorScale(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def FindColor(*args) -> "Standard_Boolean":
        """
        * Calculate color according passed value; returns true if value is in range or false, if isn't

        :param Value:
        :type Value: float
        :param Color:
        :type Color: Quantity_Color &
        :rtype: bool

        :param Value:
        :type Value: float
        :param Min:
        :type Min: float
        :param Max:
        :type Max: float
        :param ColorsCount:
        :type ColorsCount: int
        :param Color:
        :type Color: Quantity_Color &
        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_FindColor(*args)

    FindColor = staticmethod(FindColor)

    def GetMin(self, *args) -> "Standard_Real":
        """
        * Returns minimal value of color scale;

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetMin(self, *args)


    def GetMax(self, *args) -> "Standard_Real":
        """
        * Returns maximal value of color scale;

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetMax(self, *args)


    def GetRange(self, *args) -> "void":
        """
        * Returns minimal and maximal values of color scale;

        :param aMin:
        :type aMin: float &
        :param aMax:
        :type aMax: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetRange(self, *args)


    def GetLabelType(self, *args) -> "Aspect_TypeOfColorScaleData":
        """
        * Returns the type of labels; Aspect_TOCSD_AUTO - labels as boundary values for intervals Aspect_TOCSD_USER - user specified label is used

        :rtype: Aspect_TypeOfColorScaleData

        """
        return _Aspect.Aspect_ColorScale_GetLabelType(self, *args)


    def GetColorType(self, *args) -> "Aspect_TypeOfColorScaleData":
        """
        * Returns the type of colors; Aspect_TOCSD_AUTO - value between Red and Blue Aspect_TOCSD_USER - user specified color from color map

        :rtype: Aspect_TypeOfColorScaleData

        """
        return _Aspect.Aspect_ColorScale_GetColorType(self, *args)


    def GetNumberOfIntervals(self, *args) -> "Standard_Integer":
        """
        * Returns the number of color scale intervals;

        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_GetNumberOfIntervals(self, *args)


    def GetTitle(self, *args) -> "TCollection_ExtendedString":
        """
        * Returns the color scale title string;

        :rtype: TCollection_ExtendedString

        """
        return _Aspect.Aspect_ColorScale_GetTitle(self, *args)


    def GetFormat(self, *args) -> "TCollection_AsciiString":
        """
        * Returns the format for numbers. The same like format for function printf(). Used if GetLabelType() is TOCSD_AUTO;

        :rtype: TCollection_AsciiString

        """
        return _Aspect.Aspect_ColorScale_GetFormat(self, *args)


    def GetLabel(self, *args) -> "TCollection_ExtendedString":
        """
        * Returns the user specified label with index <anIndex>. Returns empty string if label not defined.

        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_ExtendedString

        """
        return _Aspect.Aspect_ColorScale_GetLabel(self, *args)


    def GetColor(self, *args) -> "Quantity_Color":
        """
        * Returns the user specified color from color map with index <anIndex>. Returns default color if index out of range in color map.

        :param anIndex:
        :type anIndex: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_ColorScale_GetColor(self, *args)


    def GetLabels(self, *args) -> "void":
        """
        * Returns the user specified labels.

        :param aLabels:
        :type aLabels: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetLabels(self, *args)


    def GetColors(self, *args) -> "void":
        """
        * Returns the user specified colors.

        :param aColors:
        :type aColors: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetColors(self, *args)


    def GetLabelPosition(self, *args) -> "Aspect_TypeOfColorScalePosition":
        """
        * Returns the position of labels concerning color filled rectangles.

        :rtype: Aspect_TypeOfColorScalePosition

        """
        return _Aspect.Aspect_ColorScale_GetLabelPosition(self, *args)


    def GetTitlePosition(self, *args) -> "Aspect_TypeOfColorScalePosition":
        """
        * Returns the position of color scale title.

        :rtype: Aspect_TypeOfColorScalePosition

        """
        return _Aspect.Aspect_ColorScale_GetTitlePosition(self, *args)


    def IsReversed(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the labels and colors used in reversed order.

        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_IsReversed(self, *args)


    def IsLabelAtBorder(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the labels placed at border of color filled rectangles.

        :rtype: bool

        """
        return _Aspect.Aspect_ColorScale_IsLabelAtBorder(self, *args)


    def SetMin(self, *args) -> "void":
        """
        * Sets the minimal value of color scale.

        :param aMin:
        :type aMin: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetMin(self, *args)


    def SetMax(self, *args) -> "void":
        """
        * Sets the maximal value of color scale.

        :param aMax:
        :type aMax: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetMax(self, *args)


    def SetRange(self, *args) -> "void":
        """
        * Sets the minimal and maximal value of color scale.

        :param aMin:
        :type aMin: float
        :param aMax:
        :type aMax: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetRange(self, *args)


    def SetLabelType(self, *args) -> "void":
        """
        * Sets the type of labels. Aspect_TOCSD_AUTO - labels as boundary values for intervals Aspect_TOCSD_USER - user specified label is used

        :param aType:
        :type aType: Aspect_TypeOfColorScaleData
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelType(self, *args)


    def SetColorType(self, *args) -> "void":
        """
        * Sets the type of colors. Aspect_TOCSD_AUTO - value between Red and Blue Aspect_TOCSD_USER - user specified color from color map

        :param aType:
        :type aType: Aspect_TypeOfColorScaleData
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColorType(self, *args)


    def SetNumberOfIntervals(self, *args) -> "void":
        """
        * Sets the number of color scale intervals.

        :param aNum:
        :type aNum: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetNumberOfIntervals(self, *args)


    def SetTitle(self, *args) -> "void":
        """
        * Sets the color scale title string.

        :param aTitle:
        :type aTitle: TCollection_ExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTitle(self, *args)


    def SetFormat(self, *args) -> "void":
        """
        * Sets the color scale auto label format specification.

        :param aFormat:
        :type aFormat: TCollection_AsciiString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetFormat(self, *args)


    def SetLabel(self, *args) -> "void":
        """
        * Sets the color scale label at index. Index started from 1.

        :param aLabel:
        :type aLabel: TCollection_ExtendedString &
        :param anIndex: default value is -1
        :type anIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabel(self, *args)


    def SetColor(self, *args) -> "void":
        """
        * Sets the color scale color at index. Index started from 1.

        :param aColor:
        :type aColor: Quantity_Color &
        :param anIndex: default value is -1
        :type anIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColor(self, *args)


    def SetLabels(self, *args) -> "void":
        """
        * Sets the color scale labels.

        :param aSeq:
        :type aSeq: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabels(self, *args)


    def SetColors(self, *args) -> "void":
        """
        * Sets the color scale colors.

        :param aSeq:
        :type aSeq: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetColors(self, *args)


    def SetLabelPosition(self, *args) -> "void":
        """
        * Sets the color scale labels position concerning color filled rectangles.

        :param aPos:
        :type aPos: Aspect_TypeOfColorScalePosition
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelPosition(self, *args)


    def SetTitlePosition(self, *args) -> "void":
        """
        * Sets the color scale title position.

        :param aPos:
        :type aPos: Aspect_TypeOfColorScalePosition
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTitlePosition(self, *args)


    def SetReversed(self, *args) -> "void":
        """
        * Sets true if the labels and colors used in reversed order.

        :param aReverse:
        :type aReverse: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetReversed(self, *args)


    def SetLabelAtBorder(self, *args) -> "void":
        """
        * Sets true if the labels placed at border of color filled rectangles.

        :param anOn:
        :type anOn: bool
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetLabelAtBorder(self, *args)


    def GetSize(self, *args) -> "void":
        """
        * Returns the size of color scale.

        :param aWidth:
        :type aWidth: float &
        :param aHeight:
        :type aHeight: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetSize(self, *args)


    def GetWidth(self, *args) -> "Standard_Real":
        """
        * Returns the width of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetWidth(self, *args)


    def GetHeight(self, *args) -> "Standard_Real":
        """
        * Returns the height of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetHeight(self, *args)


    def SetSize(self, *args) -> "void":
        """
        * Sets the size of color scale.

        :param aWidth:
        :type aWidth: float
        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetSize(self, *args)


    def SetWidth(self, *args) -> "void":
        """
        * Sets the width of color scale.

        :param aWidth:
        :type aWidth: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetWidth(self, *args)


    def SetHeight(self, *args) -> "void":
        """
        * Sets the height of color scale.

        :param aHeight:
        :type aHeight: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetHeight(self, *args)


    def GetPosition(self, *args) -> "void":
        """
        * Returns the position of color scale.

        :param aX:
        :type aX: float &
        :param aY:
        :type aY: float &
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_GetPosition(self, *args)


    def GetXPosition(self, *args) -> "Standard_Real":
        """
        * Returns the X position of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetXPosition(self, *args)


    def GetYPosition(self, *args) -> "Standard_Real":
        """
        * Returns the height of color scale.

        :rtype: float

        """
        return _Aspect.Aspect_ColorScale_GetYPosition(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        * Sets the position of color scale.

        :param aX:
        :type aX: float
        :param aY:
        :type aY: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetPosition(self, *args)


    def SetXPosition(self, *args) -> "void":
        """
        * Sets the X position of color scale.

        :param aX:
        :type aX: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetXPosition(self, *args)


    def SetYPosition(self, *args) -> "void":
        """
        * Sets the Y position of color scale.

        :param aY:
        :type aY: float
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetYPosition(self, *args)


    def GetTextHeight(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_GetTextHeight(self, *args)


    def SetTextHeight(self, *args) -> "void":
        """
        :param aHeigh:
        :type aHeigh: int
        :rtype: None

        """
        return _Aspect.Aspect_ColorScale_SetTextHeight(self, *args)


    def PaintRect(self, *args) -> "void":
        """
        :param X:
        :type X: int
        :param Y:
        :type Y: int
        :param W:
        :type W: int
        :param H:
        :type H: int
        :param aColor:
        :type aColor: Quantity_Color &
        :param aFilled: default value is Standard_False
        :type aFilled: bool
        :rtype: void

        """
        return _Aspect.Aspect_ColorScale_PaintRect(self, *args)


    def PaintText(self, *args) -> "void":
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :param X:
        :type X: int
        :param Y:
        :type Y: int
        :param aColor:
        :type aColor: Quantity_Color &
        :rtype: void

        """
        return _Aspect.Aspect_ColorScale_PaintText(self, *args)


    def TextWidth(self, *args) -> "Standard_Integer":
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_TextWidth(self, *args)


    def TextHeight(self, *args) -> "Standard_Integer":
        """
        :param aText:
        :type aText: TCollection_ExtendedString &
        :rtype: int

        """
        return _Aspect.Aspect_ColorScale_TextHeight(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_ColorScale(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_ColorScale
Aspect_ColorScale.GetMin = new_instancemethod(_Aspect.Aspect_ColorScale_GetMin, None, Aspect_ColorScale)
Aspect_ColorScale.GetMax = new_instancemethod(_Aspect.Aspect_ColorScale_GetMax, None, Aspect_ColorScale)
Aspect_ColorScale.GetRange = new_instancemethod(_Aspect.Aspect_ColorScale_GetRange, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabelType = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabelType, None, Aspect_ColorScale)
Aspect_ColorScale.GetColorType = new_instancemethod(_Aspect.Aspect_ColorScale_GetColorType, None, Aspect_ColorScale)
Aspect_ColorScale.GetNumberOfIntervals = new_instancemethod(_Aspect.Aspect_ColorScale_GetNumberOfIntervals, None, Aspect_ColorScale)
Aspect_ColorScale.GetTitle = new_instancemethod(_Aspect.Aspect_ColorScale_GetTitle, None, Aspect_ColorScale)
Aspect_ColorScale.GetFormat = new_instancemethod(_Aspect.Aspect_ColorScale_GetFormat, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabel = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabel, None, Aspect_ColorScale)
Aspect_ColorScale.GetColor = new_instancemethod(_Aspect.Aspect_ColorScale_GetColor, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabels = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabels, None, Aspect_ColorScale)
Aspect_ColorScale.GetColors = new_instancemethod(_Aspect.Aspect_ColorScale_GetColors, None, Aspect_ColorScale)
Aspect_ColorScale.GetLabelPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetLabelPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetTitlePosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetTitlePosition, None, Aspect_ColorScale)
Aspect_ColorScale.IsReversed = new_instancemethod(_Aspect.Aspect_ColorScale_IsReversed, None, Aspect_ColorScale)
Aspect_ColorScale.IsLabelAtBorder = new_instancemethod(_Aspect.Aspect_ColorScale_IsLabelAtBorder, None, Aspect_ColorScale)
Aspect_ColorScale.SetMin = new_instancemethod(_Aspect.Aspect_ColorScale_SetMin, None, Aspect_ColorScale)
Aspect_ColorScale.SetMax = new_instancemethod(_Aspect.Aspect_ColorScale_SetMax, None, Aspect_ColorScale)
Aspect_ColorScale.SetRange = new_instancemethod(_Aspect.Aspect_ColorScale_SetRange, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelType = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelType, None, Aspect_ColorScale)
Aspect_ColorScale.SetColorType = new_instancemethod(_Aspect.Aspect_ColorScale_SetColorType, None, Aspect_ColorScale)
Aspect_ColorScale.SetNumberOfIntervals = new_instancemethod(_Aspect.Aspect_ColorScale_SetNumberOfIntervals, None, Aspect_ColorScale)
Aspect_ColorScale.SetTitle = new_instancemethod(_Aspect.Aspect_ColorScale_SetTitle, None, Aspect_ColorScale)
Aspect_ColorScale.SetFormat = new_instancemethod(_Aspect.Aspect_ColorScale_SetFormat, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabel = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabel, None, Aspect_ColorScale)
Aspect_ColorScale.SetColor = new_instancemethod(_Aspect.Aspect_ColorScale_SetColor, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabels = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabels, None, Aspect_ColorScale)
Aspect_ColorScale.SetColors = new_instancemethod(_Aspect.Aspect_ColorScale_SetColors, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetTitlePosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetTitlePosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetReversed = new_instancemethod(_Aspect.Aspect_ColorScale_SetReversed, None, Aspect_ColorScale)
Aspect_ColorScale.SetLabelAtBorder = new_instancemethod(_Aspect.Aspect_ColorScale_SetLabelAtBorder, None, Aspect_ColorScale)
Aspect_ColorScale.GetSize = new_instancemethod(_Aspect.Aspect_ColorScale_GetSize, None, Aspect_ColorScale)
Aspect_ColorScale.GetWidth = new_instancemethod(_Aspect.Aspect_ColorScale_GetWidth, None, Aspect_ColorScale)
Aspect_ColorScale.GetHeight = new_instancemethod(_Aspect.Aspect_ColorScale_GetHeight, None, Aspect_ColorScale)
Aspect_ColorScale.SetSize = new_instancemethod(_Aspect.Aspect_ColorScale_SetSize, None, Aspect_ColorScale)
Aspect_ColorScale.SetWidth = new_instancemethod(_Aspect.Aspect_ColorScale_SetWidth, None, Aspect_ColorScale)
Aspect_ColorScale.SetHeight = new_instancemethod(_Aspect.Aspect_ColorScale_SetHeight, None, Aspect_ColorScale)
Aspect_ColorScale.GetPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetXPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetXPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetYPosition = new_instancemethod(_Aspect.Aspect_ColorScale_GetYPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetXPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetXPosition, None, Aspect_ColorScale)
Aspect_ColorScale.SetYPosition = new_instancemethod(_Aspect.Aspect_ColorScale_SetYPosition, None, Aspect_ColorScale)
Aspect_ColorScale.GetTextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_GetTextHeight, None, Aspect_ColorScale)
Aspect_ColorScale.SetTextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_SetTextHeight, None, Aspect_ColorScale)
Aspect_ColorScale.PaintRect = new_instancemethod(_Aspect.Aspect_ColorScale_PaintRect, None, Aspect_ColorScale)
Aspect_ColorScale.PaintText = new_instancemethod(_Aspect.Aspect_ColorScale_PaintText, None, Aspect_ColorScale)
Aspect_ColorScale.TextWidth = new_instancemethod(_Aspect.Aspect_ColorScale_TextWidth, None, Aspect_ColorScale)
Aspect_ColorScale.TextHeight = new_instancemethod(_Aspect.Aspect_ColorScale_TextHeight, None, Aspect_ColorScale)
Aspect_ColorScale_swigregister = _Aspect.Aspect_ColorScale_swigregister
Aspect_ColorScale_swigregister(Aspect_ColorScale)

def Aspect_ColorScale_FindColor(*args) -> "Standard_Boolean":
    """
    * Calculate color according passed value; returns true if value is in range or false, if isn't

    :param Value:
    :type Value: float
    :param Color:
    :type Color: Quantity_Color &
    :rtype: bool

    :param Value:
    :type Value: float
    :param Min:
    :type Min: float
    :param Max:
    :type Max: float
    :param ColorsCount:
    :type ColorsCount: int
    :param Color:
    :type Color: Quantity_Color &
    :rtype: bool

    """
    return _Aspect.Aspect_ColorScale_FindColor(*args)

class Handle_Aspect_ColorScale(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_ColorScale_swiginit(self, _Aspect.new_Handle_Aspect_ColorScale(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_ColorScale_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_ColorScale
Handle_Aspect_ColorScale.Nullify = new_instancemethod(_Aspect.Handle_Aspect_ColorScale_Nullify, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale.IsNull = new_instancemethod(_Aspect.Handle_Aspect_ColorScale_IsNull, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale._get_reference = new_instancemethod(_Aspect.Handle_Aspect_ColorScale__get_reference, None, Handle_Aspect_ColorScale)
Handle_Aspect_ColorScale_swigregister = _Aspect.Handle_Aspect_ColorScale_swigregister
Handle_Aspect_ColorScale_swigregister(Handle_Aspect_ColorScale)

def Handle_Aspect_ColorScale_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_ColorScale const":
    return _Aspect.Handle_Aspect_ColorScale_DownCast(AnObject)
Handle_Aspect_ColorScale_DownCast = _Aspect.Handle_Aspect_ColorScale_DownCast

class Aspect_Edge(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an edge.

        :rtype: None

        * Creates an edge from an index of vertices in a table of vertices. <AType> indicates if this edge is seen or not. Warning: Raises EdgeDefinitionError if AIndex1 == AIndex2.

        :param AIndex1:
        :type AIndex1: int
        :param AIndex2:
        :type AIndex2: int
        :param AType:
        :type AType: Aspect_TypeOfEdge
        :rtype: None

        """
        _Aspect.Aspect_Edge_swiginit(self, _Aspect.new_Aspect_Edge(*args))

    def SetValues(self, *args) -> "void":
        """
        * Updates the values of an edge <self>. Warning: Raises EdgeDefinitionError if AIndex1 == AIndex2.

        :param AIndex1:
        :type AIndex1: int
        :param AIndex2:
        :type AIndex2: int
        :param AType:
        :type AType: Aspect_TypeOfEdge
        :rtype: None

        """
        return _Aspect.Aspect_Edge_SetValues(self, *args)


    def Values(self, *args) -> "void":
        """
        * Returns the index of the vertices and the type of edge <self>.

        :param AIndex1:
        :type AIndex1: int &
        :param AIndex2:
        :type AIndex2: int &
        :param AType:
        :type AType: Aspect_TypeOfEdge &
        :rtype: None

        """
        return _Aspect.Aspect_Edge_Values(self, *args)


    def FirstIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the begin of the edge <self>.

        :rtype: int

        """
        return _Aspect.Aspect_Edge_FirstIndex(self, *args)


    def LastIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the index of the end of the edge <self>.

        :rtype: int

        """
        return _Aspect.Aspect_Edge_LastIndex(self, *args)


    def Type(self, *args) -> "Aspect_TypeOfEdge":
        """
        * Returns the type of the edge <self>.

        :rtype: Aspect_TypeOfEdge

        """
        return _Aspect.Aspect_Edge_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Edge
Aspect_Edge.SetValues = new_instancemethod(_Aspect.Aspect_Edge_SetValues, None, Aspect_Edge)
Aspect_Edge.Values = new_instancemethod(_Aspect.Aspect_Edge_Values, None, Aspect_Edge)
Aspect_Edge.FirstIndex = new_instancemethod(_Aspect.Aspect_Edge_FirstIndex, None, Aspect_Edge)
Aspect_Edge.LastIndex = new_instancemethod(_Aspect.Aspect_Edge_LastIndex, None, Aspect_Edge)
Aspect_Edge.Type = new_instancemethod(_Aspect.Aspect_Edge_Type, None, Aspect_Edge)
Aspect_Edge_swigregister = _Aspect.Aspect_Edge_swigregister
Aspect_Edge_swigregister(Aspect_Edge)

class Aspect_GenId(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates an available set of identifiers with the lower bound 0 and the upper bound INT_MAX / 2.

        :rtype: None

        * Creates an available set of identifiers with specified range. Raises IdentDefinitionError if theUpper is less than theLow.

        :param theLow:
        :type theLow: int
        :param theUpper:
        :type theUpper: int
        :rtype: None

        """
        _Aspect.Aspect_GenId_swiginit(self, _Aspect.new_Aspect_GenId(*args))

    def Free(self, *args) -> "void":
        """
        * Free all identifiers - make the whole range available again.

        :rtype: None

        * Free specified identifier. Warning - method has no protection against double-freeing!

        :param theId:
        :type theId: int
        :rtype: None

        """
        return _Aspect.Aspect_GenId_Free(self, *args)


    def HasFree(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there are available identifiers in range.

        :rtype: bool

        """
        return _Aspect.Aspect_GenId_HasFree(self, *args)


    def Available(self, *args) -> "Standard_Integer":
        """
        * Returns the number of available identifiers.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Available(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        * Returns the lower identifier in range.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Lower(self, *args)


    def Next(self, *args) -> "Standard_Integer":
        """
        * Returns the next available identifier. Warning: Raises IdentDefinitionError if all identifiers are busy.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Next(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        * Returns the upper identifier in range.

        :rtype: int

        """
        return _Aspect.Aspect_GenId_Upper(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_GenId
Aspect_GenId.Free = new_instancemethod(_Aspect.Aspect_GenId_Free, None, Aspect_GenId)
Aspect_GenId.HasFree = new_instancemethod(_Aspect.Aspect_GenId_HasFree, None, Aspect_GenId)
Aspect_GenId.Available = new_instancemethod(_Aspect.Aspect_GenId_Available, None, Aspect_GenId)
Aspect_GenId.Lower = new_instancemethod(_Aspect.Aspect_GenId_Lower, None, Aspect_GenId)
Aspect_GenId.Next = new_instancemethod(_Aspect.Aspect_GenId_Next, None, Aspect_GenId)
Aspect_GenId.Upper = new_instancemethod(_Aspect.Aspect_GenId_Upper, None, Aspect_GenId)
Aspect_GenId_swigregister = _Aspect.Aspect_GenId_swigregister
Aspect_GenId_swigregister(Aspect_GenId)

class Aspect_GraphicCallbackStruct(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    reason = _swig_property(_Aspect.Aspect_GraphicCallbackStruct_reason_get, _Aspect.Aspect_GraphicCallbackStruct_reason_set)
    wsID = _swig_property(_Aspect.Aspect_GraphicCallbackStruct_wsID_get, _Aspect.Aspect_GraphicCallbackStruct_wsID_set)
    viewID = _swig_property(_Aspect.Aspect_GraphicCallbackStruct_viewID_get, _Aspect.Aspect_GraphicCallbackStruct_viewID_set)
    glContext = _swig_property(_Aspect.Aspect_GraphicCallbackStruct_glContext_get, _Aspect.Aspect_GraphicCallbackStruct_glContext_set)

    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_GraphicCallbackStruct
Aspect_GraphicCallbackStruct_swigregister = _Aspect.Aspect_GraphicCallbackStruct_swigregister
Aspect_GraphicCallbackStruct_swigregister(Aspect_GraphicCallbackStruct)

class Aspect_Grid(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetXOrigin(self, *args) -> "void":
        """
        * defines the x Origin of the grid.

        :param anOrigin:
        :type anOrigin: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetXOrigin(self, *args)


    def SetYOrigin(self, *args) -> "void":
        """
        * defines the y Origin of the grid.

        :param anOrigin:
        :type anOrigin: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetYOrigin(self, *args)


    def SetRotationAngle(self, *args) -> "void":
        """
        * defines the orientation of the the grid.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetRotationAngle(self, *args)


    def Rotate(self, *args) -> "void":
        """
        * Rotate the grid from a relative angle.

        :param anAngle:
        :type anAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Rotate(self, *args)


    def Translate(self, *args) -> "void":
        """
        * Translate the grid from a relative distance.

        :param aDx:
        :type aDx: Quantity_Length
        :param aDy:
        :type aDy: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Translate(self, *args)


    def SetColors(self, *args) -> "void":
        """
        * Change the colors of the grid

        :param aColor:
        :type aColor: Quantity_Color &
        :param aTenthColor:
        :type aTenthColor: Quantity_Color &
        :rtype: void

        """
        return _Aspect.Aspect_Grid_SetColors(self, *args)


    def Hit(self, *args) -> "void":
        """
        * returns the point of the grid the closest to the point X,Y if the grid is active. If the grid is not active returns X,Y.

        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param gridX:
        :type gridX: Quantity_Length &
        :param gridY:
        :type gridY: Quantity_Length &
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Hit(self, *args)


    def Compute(self, *args) -> "void":
        """
        * returns the point of the grid the closest to the point X,Y

        :param X:
        :type X: Quantity_Length
        :param Y:
        :type Y: Quantity_Length
        :param gridX:
        :type gridX: Quantity_Length &
        :param gridY:
        :type gridY: Quantity_Length &
        :rtype: void

        """
        return _Aspect.Aspect_Grid_Compute(self, *args)


    def Activate(self, *args) -> "void":
        """
        * activates the grid. The Hit method will return gridx and gridx computed according to the steps of the grid.

        :rtype: None

        """
        return _Aspect.Aspect_Grid_Activate(self, *args)


    def Deactivate(self, *args) -> "void":
        """
        * deactivates the grid. The hit method will return gridx and gridx as the enter value X & Y.

        :rtype: None

        """
        return _Aspect.Aspect_Grid_Deactivate(self, *args)


    def XOrigin(self, *args) -> "Quantity_Length":
        """
        * returns the x Origin of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_Grid_XOrigin(self, *args)


    def YOrigin(self, *args) -> "Quantity_Length":
        """
        * returns the x Origin of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_Grid_YOrigin(self, *args)


    def RotationAngle(self, *args) -> "Quantity_PlaneAngle":
        """
        * returns the x Angle of the grid.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_Grid_RotationAngle(self, *args)


    def IsActive(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the grid is active.

        :rtype: bool

        """
        return _Aspect.Aspect_Grid_IsActive(self, *args)


    def Colors(self, *args) -> "void":
        """
        * Returns the colors of the grid.

        :param aColor:
        :type aColor: Quantity_Color &
        :param aTenthColor:
        :type aTenthColor: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_Grid_Colors(self, *args)


    def SetDrawMode(self, *args) -> "void":
        """
        * Change the grid aspect.

        :param aDrawMode:
        :type aDrawMode: Aspect_GridDrawMode
        :rtype: None

        """
        return _Aspect.Aspect_Grid_SetDrawMode(self, *args)


    def DrawMode(self, *args) -> "Aspect_GridDrawMode":
        """
        * Returns the grid aspect.

        :rtype: Aspect_GridDrawMode

        """
        return _Aspect.Aspect_Grid_DrawMode(self, *args)


    def Display(self, *args) -> "void":
        """
        * Display the grid at screen.

        :rtype: void

        """
        return _Aspect.Aspect_Grid_Display(self, *args)


    def Erase(self, *args) -> "void":
        """
        * Erase the grid from screen.

        :rtype: void

        """
        return _Aspect.Aspect_Grid_Erase(self, *args)


    def IsDisplayed(self, *args) -> "Standard_Boolean":
        """
        * Returns True when the grid is displayed at screen.

        :rtype: bool

        """
        return _Aspect.Aspect_Grid_IsDisplayed(self, *args)


    def Init(self, *args) -> "void":
        """
        :rtype: void

        """
        return _Aspect.Aspect_Grid_Init(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_Grid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Grid
Aspect_Grid.SetXOrigin = new_instancemethod(_Aspect.Aspect_Grid_SetXOrigin, None, Aspect_Grid)
Aspect_Grid.SetYOrigin = new_instancemethod(_Aspect.Aspect_Grid_SetYOrigin, None, Aspect_Grid)
Aspect_Grid.SetRotationAngle = new_instancemethod(_Aspect.Aspect_Grid_SetRotationAngle, None, Aspect_Grid)
Aspect_Grid.Rotate = new_instancemethod(_Aspect.Aspect_Grid_Rotate, None, Aspect_Grid)
Aspect_Grid.Translate = new_instancemethod(_Aspect.Aspect_Grid_Translate, None, Aspect_Grid)
Aspect_Grid.SetColors = new_instancemethod(_Aspect.Aspect_Grid_SetColors, None, Aspect_Grid)
Aspect_Grid.Hit = new_instancemethod(_Aspect.Aspect_Grid_Hit, None, Aspect_Grid)
Aspect_Grid.Compute = new_instancemethod(_Aspect.Aspect_Grid_Compute, None, Aspect_Grid)
Aspect_Grid.Activate = new_instancemethod(_Aspect.Aspect_Grid_Activate, None, Aspect_Grid)
Aspect_Grid.Deactivate = new_instancemethod(_Aspect.Aspect_Grid_Deactivate, None, Aspect_Grid)
Aspect_Grid.XOrigin = new_instancemethod(_Aspect.Aspect_Grid_XOrigin, None, Aspect_Grid)
Aspect_Grid.YOrigin = new_instancemethod(_Aspect.Aspect_Grid_YOrigin, None, Aspect_Grid)
Aspect_Grid.RotationAngle = new_instancemethod(_Aspect.Aspect_Grid_RotationAngle, None, Aspect_Grid)
Aspect_Grid.IsActive = new_instancemethod(_Aspect.Aspect_Grid_IsActive, None, Aspect_Grid)
Aspect_Grid.Colors = new_instancemethod(_Aspect.Aspect_Grid_Colors, None, Aspect_Grid)
Aspect_Grid.SetDrawMode = new_instancemethod(_Aspect.Aspect_Grid_SetDrawMode, None, Aspect_Grid)
Aspect_Grid.DrawMode = new_instancemethod(_Aspect.Aspect_Grid_DrawMode, None, Aspect_Grid)
Aspect_Grid.Display = new_instancemethod(_Aspect.Aspect_Grid_Display, None, Aspect_Grid)
Aspect_Grid.Erase = new_instancemethod(_Aspect.Aspect_Grid_Erase, None, Aspect_Grid)
Aspect_Grid.IsDisplayed = new_instancemethod(_Aspect.Aspect_Grid_IsDisplayed, None, Aspect_Grid)
Aspect_Grid.Init = new_instancemethod(_Aspect.Aspect_Grid_Init, None, Aspect_Grid)
Aspect_Grid_swigregister = _Aspect.Aspect_Grid_swigregister
Aspect_Grid_swigregister(Aspect_Grid)

class Handle_Aspect_Grid(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_Grid_swiginit(self, _Aspect.new_Handle_Aspect_Grid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_Grid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_Grid
Handle_Aspect_Grid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_Grid_Nullify, None, Handle_Aspect_Grid)
Handle_Aspect_Grid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_Grid_IsNull, None, Handle_Aspect_Grid)
Handle_Aspect_Grid._get_reference = new_instancemethod(_Aspect.Handle_Aspect_Grid__get_reference, None, Handle_Aspect_Grid)
Handle_Aspect_Grid_swigregister = _Aspect.Handle_Aspect_Grid_swigregister
Handle_Aspect_Grid_swigregister(Handle_Aspect_Grid)

def Handle_Aspect_Grid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_Grid const":
    return _Aspect.Handle_Aspect_Grid_DownCast(AnObject)
Handle_Aspect_Grid_DownCast = _Aspect.Handle_Aspect_Grid_DownCast

class Aspect_SequenceNodeOfSequenceOfColor(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Quantity_Color &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Aspect.Aspect_SequenceNodeOfSequenceOfColor_swiginit(self, _Aspect.new_Aspect_SequenceNodeOfSequenceOfColor(*args))

    def Value(self, *args) -> "Quantity_Color &":
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceNodeOfSequenceOfColor_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_SequenceNodeOfSequenceOfColor(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_SequenceNodeOfSequenceOfColor
Aspect_SequenceNodeOfSequenceOfColor.Value = new_instancemethod(_Aspect.Aspect_SequenceNodeOfSequenceOfColor_Value, None, Aspect_SequenceNodeOfSequenceOfColor)
Aspect_SequenceNodeOfSequenceOfColor_swigregister = _Aspect.Aspect_SequenceNodeOfSequenceOfColor_swigregister
Aspect_SequenceNodeOfSequenceOfColor_swigregister(Aspect_SequenceNodeOfSequenceOfColor)

class Handle_Aspect_SequenceNodeOfSequenceOfColor(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_swiginit(self, _Aspect.new_Handle_Aspect_SequenceNodeOfSequenceOfColor(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_SequenceNodeOfSequenceOfColor
Handle_Aspect_SequenceNodeOfSequenceOfColor.Nullify = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_Nullify, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor.IsNull = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_IsNull, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor._get_reference = new_instancemethod(_Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor__get_reference, None, Handle_Aspect_SequenceNodeOfSequenceOfColor)
Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister
Handle_Aspect_SequenceNodeOfSequenceOfColor_swigregister(Handle_Aspect_SequenceNodeOfSequenceOfColor)

def Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_SequenceNodeOfSequenceOfColor const":
    return _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast(AnObject)
Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast = _Aspect.Handle_Aspect_SequenceNodeOfSequenceOfColor_DownCast

class Aspect_SequenceOfColor(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Aspect_SequenceOfColor &
        :rtype: None

        """
        _Aspect.Aspect_SequenceOfColor_swiginit(self, _Aspect.new_Aspect_SequenceOfColor(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Clear(self, *args)


    def Assign(self, *args) -> "Aspect_SequenceOfColor const &":
        """
        :param Other:
        :type Other: Aspect_SequenceOfColor &
        :rtype: Aspect_SequenceOfColor

        """
        return _Aspect.Aspect_SequenceOfColor_Assign(self, *args)


    def Set(self, *args) -> "Aspect_SequenceOfColor const &":
        """
        :param Other:
        :type Other: Aspect_SequenceOfColor &
        :rtype: Aspect_SequenceOfColor

        """
        return _Aspect.Aspect_SequenceOfColor_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Quantity_Color &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_InsertAfter(self, *args)


    def First(self, *args) -> "Quantity_Color const &":
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_First(self, *args)


    def Last(self, *args) -> "Quantity_Color const &":
        """
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Aspect_SequenceOfColor &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Split(self, *args)


    def Value(self, *args) -> "Quantity_Color const &":
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Quantity_Color &":
        """
        :param Index:
        :type Index: int
        :rtype: Quantity_Color

        """
        return _Aspect.Aspect_SequenceOfColor_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Aspect.Aspect_SequenceOfColor_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_SequenceOfColor
Aspect_SequenceOfColor.Clear = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Clear, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Assign = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Assign, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Set = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Set, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Append = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Append, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Prepend = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Prepend, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.InsertBefore = new_instancemethod(_Aspect.Aspect_SequenceOfColor_InsertBefore, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.InsertAfter = new_instancemethod(_Aspect.Aspect_SequenceOfColor_InsertAfter, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.First = new_instancemethod(_Aspect.Aspect_SequenceOfColor_First, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Last = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Last, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Split = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Split, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Value = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Value, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.SetValue = new_instancemethod(_Aspect.Aspect_SequenceOfColor_SetValue, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.ChangeValue = new_instancemethod(_Aspect.Aspect_SequenceOfColor_ChangeValue, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor.Remove = new_instancemethod(_Aspect.Aspect_SequenceOfColor_Remove, None, Aspect_SequenceOfColor)
Aspect_SequenceOfColor_swigregister = _Aspect.Aspect_SequenceOfColor_swigregister
Aspect_SequenceOfColor_swigregister(Aspect_SequenceOfColor)

class Aspect_Window(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetBackground(self, *args) -> "void":
        """
        * Modifies the window background.

        :param ABack:
        :type ABack: Aspect_Background &
        :rtype: None

        * Modifies the window background from a Named Color.

        :param theNameOfColor:
        :type theNameOfColor: Quantity_NameOfColor
        :rtype: None

        * Modifies the window background.

        :param color:
        :type color: Quantity_Color &
        :rtype: None

        * Modifies the window gradient background.

        :param ABackground:
        :type ABackground: Aspect_GradientBackground &
        :rtype: None

        * Modifies the window gradient background.

        :param theFirstColor:
        :type theFirstColor: Quantity_Color &
        :param theSecondColor:
        :type theSecondColor: Quantity_Color &
        :param theFillMethod:
        :type theFillMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        return _Aspect.Aspect_Window_SetBackground(self, *args)


    def Map(self, *args) -> "void":
        """
        * Opens the window <self>.

        :rtype: void

        """
        return _Aspect.Aspect_Window_Map(self, *args)


    def Unmap(self, *args) -> "void":
        """
        * Closes the window <self>.

        :rtype: void

        """
        return _Aspect.Aspect_Window_Unmap(self, *args)


    def DoResize(self, *args) -> "Aspect_TypeOfResize":
        """
        * Apply the resizing to the window <self>.

        :rtype: Aspect_TypeOfResize

        """
        return _Aspect.Aspect_Window_DoResize(self, *args)


    def DoMapping(self, *args) -> "Standard_Boolean":
        """
        * Apply the mapping change to the window <self>. and returns True if the window is mapped at screen.

        :rtype: bool

        """
        return _Aspect.Aspect_Window_DoMapping(self, *args)


    def Destroy(self, *args) -> "void":
        """
        * Destroy the Window

        :rtype: void

        """
        return _Aspect.Aspect_Window_Destroy(self, *args)


    def Background(self, *args) -> "Aspect_Background":
        """
        * Returns the window background.

        :rtype: Aspect_Background

        """
        return _Aspect.Aspect_Window_Background(self, *args)


    def BackgroundFillMethod(self, *args) -> "Aspect_FillMethod":
        """
        * Returns the current image background fill mode.

        :rtype: Aspect_FillMethod

        """
        return _Aspect.Aspect_Window_BackgroundFillMethod(self, *args)


    def GradientBackground(self, *args) -> "Aspect_GradientBackground":
        """
        * Returns the window gradient background.

        :rtype: Aspect_GradientBackground

        """
        return _Aspect.Aspect_Window_GradientBackground(self, *args)


    def IsMapped(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the window <self> is opened and False if the window is closed.

        :rtype: bool

        """
        return _Aspect.Aspect_Window_IsMapped(self, *args)


    def IsVirtual(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the window <self> is virtual

        :rtype: bool

        """
        return _Aspect.Aspect_Window_IsVirtual(self, *args)


    def SetVirtual(self, *args) -> "void":
        """
        * Setup the virtual state

        :param theVirtual:
        :type theVirtual: bool
        :rtype: None

        """
        return _Aspect.Aspect_Window_SetVirtual(self, *args)


    def Ratio(self, *args) -> "Quantity_Ratio":
        """
        * Returns The Window RATIO equal to the physical WIDTH/HEIGHT dimensions

        :rtype: Quantity_Ratio

        """
        return _Aspect.Aspect_Window_Ratio(self, *args)


    def Position(self, *args) -> "void":
        """
        * Returns The Window POSITION in PIXEL

        :param X1:
        :type X1: int &
        :param Y1:
        :type Y1: int &
        :param X2:
        :type X2: int &
        :param Y2:
        :type Y2: int &
        :rtype: void

        """
        return _Aspect.Aspect_Window_Position(self, *args)


    def Size(self, *args) -> "void":
        """
        * Returns The Window SIZE in PIXEL

        :param Width:
        :type Width: int &
        :param Height:
        :type Height: int &
        :rtype: void

        """
        return _Aspect.Aspect_Window_Size(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_Window(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_Window
Aspect_Window.SetBackground = new_instancemethod(_Aspect.Aspect_Window_SetBackground, None, Aspect_Window)
Aspect_Window.Map = new_instancemethod(_Aspect.Aspect_Window_Map, None, Aspect_Window)
Aspect_Window.Unmap = new_instancemethod(_Aspect.Aspect_Window_Unmap, None, Aspect_Window)
Aspect_Window.DoResize = new_instancemethod(_Aspect.Aspect_Window_DoResize, None, Aspect_Window)
Aspect_Window.DoMapping = new_instancemethod(_Aspect.Aspect_Window_DoMapping, None, Aspect_Window)
Aspect_Window.Destroy = new_instancemethod(_Aspect.Aspect_Window_Destroy, None, Aspect_Window)
Aspect_Window.Background = new_instancemethod(_Aspect.Aspect_Window_Background, None, Aspect_Window)
Aspect_Window.BackgroundFillMethod = new_instancemethod(_Aspect.Aspect_Window_BackgroundFillMethod, None, Aspect_Window)
Aspect_Window.GradientBackground = new_instancemethod(_Aspect.Aspect_Window_GradientBackground, None, Aspect_Window)
Aspect_Window.IsMapped = new_instancemethod(_Aspect.Aspect_Window_IsMapped, None, Aspect_Window)
Aspect_Window.IsVirtual = new_instancemethod(_Aspect.Aspect_Window_IsVirtual, None, Aspect_Window)
Aspect_Window.SetVirtual = new_instancemethod(_Aspect.Aspect_Window_SetVirtual, None, Aspect_Window)
Aspect_Window.Ratio = new_instancemethod(_Aspect.Aspect_Window_Ratio, None, Aspect_Window)
Aspect_Window.Position = new_instancemethod(_Aspect.Aspect_Window_Position, None, Aspect_Window)
Aspect_Window.Size = new_instancemethod(_Aspect.Aspect_Window_Size, None, Aspect_Window)
Aspect_Window_swigregister = _Aspect.Aspect_Window_swigregister
Aspect_Window_swigregister(Aspect_Window)

class Handle_Aspect_Window(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_Window_swiginit(self, _Aspect.new_Handle_Aspect_Window(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_Window_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_Window
Handle_Aspect_Window.Nullify = new_instancemethod(_Aspect.Handle_Aspect_Window_Nullify, None, Handle_Aspect_Window)
Handle_Aspect_Window.IsNull = new_instancemethod(_Aspect.Handle_Aspect_Window_IsNull, None, Handle_Aspect_Window)
Handle_Aspect_Window._get_reference = new_instancemethod(_Aspect.Handle_Aspect_Window__get_reference, None, Handle_Aspect_Window)
Handle_Aspect_Window_swigregister = _Aspect.Handle_Aspect_Window_swigregister
Handle_Aspect_Window_swigregister(Handle_Aspect_Window)

def Handle_Aspect_Window_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_Window const":
    return _Aspect.Handle_Aspect_Window_DownCast(AnObject)
Handle_Aspect_Window_DownCast = _Aspect.Handle_Aspect_Window_DownCast

class Aspect_CircularGrid(Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates a new grid. By default this grid is not active.

        :param aRadiusStep:
        :type aRadiusStep: Quantity_Length
        :param aDivisionNumber:
        :type aDivisionNumber: int
        :param XOrigin: default value is 0
        :type XOrigin: Quantity_Length
        :param anYOrigin: default value is 0
        :type anYOrigin: Quantity_Length
        :param aRotationAngle: default value is 0
        :type aRotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        _Aspect.Aspect_CircularGrid_swiginit(self, _Aspect.new_Aspect_CircularGrid(*args))

    def SetRadiusStep(self, *args) -> "void":
        """
        * defines the x step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetRadiusStep(self, *args)


    def SetDivisionNumber(self, *args) -> "void":
        """
        * defines the step of the grid.

        :param aNumber:
        :type aNumber: int
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetDivisionNumber(self, *args)


    def SetGridValues(self, *args) -> "void":
        """
        :param XOrigin:
        :type XOrigin: Quantity_Length
        :param YOrigin:
        :type YOrigin: Quantity_Length
        :param RadiusStep:
        :type RadiusStep: Quantity_Length
        :param DivisionNumber:
        :type DivisionNumber: int
        :param RotationAngle:
        :type RotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_CircularGrid_SetGridValues(self, *args)


    def RadiusStep(self, *args) -> "Quantity_Length":
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_CircularGrid_RadiusStep(self, *args)


    def DivisionNumber(self, *args) -> "Standard_Integer":
        """
        * returns the x step of the grid.

        :rtype: int

        """
        return _Aspect.Aspect_CircularGrid_DivisionNumber(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_CircularGrid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_CircularGrid
Aspect_CircularGrid.SetRadiusStep = new_instancemethod(_Aspect.Aspect_CircularGrid_SetRadiusStep, None, Aspect_CircularGrid)
Aspect_CircularGrid.SetDivisionNumber = new_instancemethod(_Aspect.Aspect_CircularGrid_SetDivisionNumber, None, Aspect_CircularGrid)
Aspect_CircularGrid.SetGridValues = new_instancemethod(_Aspect.Aspect_CircularGrid_SetGridValues, None, Aspect_CircularGrid)
Aspect_CircularGrid.RadiusStep = new_instancemethod(_Aspect.Aspect_CircularGrid_RadiusStep, None, Aspect_CircularGrid)
Aspect_CircularGrid.DivisionNumber = new_instancemethod(_Aspect.Aspect_CircularGrid_DivisionNumber, None, Aspect_CircularGrid)
Aspect_CircularGrid_swigregister = _Aspect.Aspect_CircularGrid_swigregister
Aspect_CircularGrid_swigregister(Aspect_CircularGrid)

class Handle_Aspect_CircularGrid(Handle_Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_CircularGrid_swiginit(self, _Aspect.new_Handle_Aspect_CircularGrid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_CircularGrid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_CircularGrid
Handle_Aspect_CircularGrid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid_Nullify, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid_IsNull, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid._get_reference = new_instancemethod(_Aspect.Handle_Aspect_CircularGrid__get_reference, None, Handle_Aspect_CircularGrid)
Handle_Aspect_CircularGrid_swigregister = _Aspect.Handle_Aspect_CircularGrid_swigregister
Handle_Aspect_CircularGrid_swigregister(Handle_Aspect_CircularGrid)

def Handle_Aspect_CircularGrid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_CircularGrid const":
    return _Aspect.Handle_Aspect_CircularGrid_DownCast(AnObject)
Handle_Aspect_CircularGrid_DownCast = _Aspect.Handle_Aspect_CircularGrid_DownCast

class Aspect_GradientBackground(Aspect_Background):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a window gradient background. Default colors : Quantity_NOC_BLACK. Default fill method : Aspect_GFM_NONE

        :rtype: None

        * Creates a window gradient background with colours <AColor1, AColor2>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :param AMethod: default value is Aspect_GFM_HOR
        :type AMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        _Aspect.Aspect_GradientBackground_swiginit(self, _Aspect.new_Aspect_GradientBackground(*args))

    def SetColors(self, *args) -> "void":
        """
        * Modifies the colours of the window gradient background <self>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :param AMethod: default value is Aspect_GFM_HOR
        :type AMethod: Aspect_GradientFillMethod
        :rtype: None

        """
        return _Aspect.Aspect_GradientBackground_SetColors(self, *args)


    def Colors(self, *args) -> "void":
        """
        * Returns colours of the window gradient background <self>.

        :param AColor1:
        :type AColor1: Quantity_Color &
        :param AColor2:
        :type AColor2: Quantity_Color &
        :rtype: None

        """
        return _Aspect.Aspect_GradientBackground_Colors(self, *args)


    def BgGradientFillMethod(self, *args) -> "Aspect_GradientFillMethod":
        """
        * Returns the current gradient background fill mode.

        :rtype: Aspect_GradientFillMethod

        """
        return _Aspect.Aspect_GradientBackground_BgGradientFillMethod(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_GradientBackground
Aspect_GradientBackground.SetColors = new_instancemethod(_Aspect.Aspect_GradientBackground_SetColors, None, Aspect_GradientBackground)
Aspect_GradientBackground.Colors = new_instancemethod(_Aspect.Aspect_GradientBackground_Colors, None, Aspect_GradientBackground)
Aspect_GradientBackground.BgGradientFillMethod = new_instancemethod(_Aspect.Aspect_GradientBackground_BgGradientFillMethod, None, Aspect_GradientBackground)
Aspect_GradientBackground_swigregister = _Aspect.Aspect_GradientBackground_swigregister
Aspect_GradientBackground_swigregister(Aspect_GradientBackground)

class Aspect_RectangularGrid(Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * creates a new grid. By default this grid is not active. The first angle is given relatively to the horizontal. The second angle is given relatively to the vertical.

        :param aXStep:
        :type aXStep: Quantity_Length
        :param aYStep:
        :type aYStep: Quantity_Length
        :param anXOrigin: default value is 0
        :type anXOrigin: Quantity_Length
        :param anYOrigin: default value is 0
        :type anYOrigin: Quantity_Length
        :param aFirstAngle: default value is 0
        :type aFirstAngle: Quantity_PlaneAngle
        :param aSecondAngle: default value is 0
        :type aSecondAngle: Quantity_PlaneAngle
        :param aRotationAngle: default value is 0
        :type aRotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        _Aspect.Aspect_RectangularGrid_swiginit(self, _Aspect.new_Aspect_RectangularGrid(*args))

    def SetXStep(self, *args) -> "void":
        """
        * defines the x step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetXStep(self, *args)


    def SetYStep(self, *args) -> "void":
        """
        * defines the y step of the grid.

        :param aStep:
        :type aStep: Quantity_Length
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetYStep(self, *args)


    def SetAngle(self, *args) -> "void":
        """
        * defines the angle of the second network the fist angle is given relatively to the horizontal. the second angle is given relatively to the vertical.

        :param anAngle1:
        :type anAngle1: Quantity_PlaneAngle
        :param anAngle2:
        :type anAngle2: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetAngle(self, *args)


    def SetGridValues(self, *args) -> "void":
        """
        :param XOrigin:
        :type XOrigin: Quantity_Length
        :param YOrigin:
        :type YOrigin: Quantity_Length
        :param XStep:
        :type XStep: Quantity_Length
        :param YStep:
        :type YStep: Quantity_Length
        :param RotationAngle:
        :type RotationAngle: Quantity_PlaneAngle
        :rtype: None

        """
        return _Aspect.Aspect_RectangularGrid_SetGridValues(self, *args)


    def XStep(self, *args) -> "Quantity_Length":
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_RectangularGrid_XStep(self, *args)


    def YStep(self, *args) -> "Quantity_Length":
        """
        * returns the x step of the grid.

        :rtype: Quantity_Length

        """
        return _Aspect.Aspect_RectangularGrid_YStep(self, *args)


    def FirstAngle(self, *args) -> "Quantity_PlaneAngle":
        """
        * returns the x Angle of the grid, relatively to the horizontal.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_RectangularGrid_FirstAngle(self, *args)


    def SecondAngle(self, *args) -> "Quantity_PlaneAngle":
        """
        * returns the y Angle of the grid, relatively to the vertical.

        :rtype: Quantity_PlaneAngle

        """
        return _Aspect.Aspect_RectangularGrid_SecondAngle(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Aspect_RectangularGrid(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Aspect.delete_Aspect_RectangularGrid
Aspect_RectangularGrid.SetXStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetXStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetYStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetYStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SetGridValues = new_instancemethod(_Aspect.Aspect_RectangularGrid_SetGridValues, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.XStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_XStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.YStep = new_instancemethod(_Aspect.Aspect_RectangularGrid_YStep, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.FirstAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_FirstAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid.SecondAngle = new_instancemethod(_Aspect.Aspect_RectangularGrid_SecondAngle, None, Aspect_RectangularGrid)
Aspect_RectangularGrid_swigregister = _Aspect.Aspect_RectangularGrid_swigregister
Aspect_RectangularGrid_swigregister(Aspect_RectangularGrid)

class Handle_Aspect_RectangularGrid(Handle_Aspect_Grid):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Aspect.Handle_Aspect_RectangularGrid_swiginit(self, _Aspect.new_Handle_Aspect_RectangularGrid(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Aspect.Handle_Aspect_RectangularGrid_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Aspect.delete_Handle_Aspect_RectangularGrid
Handle_Aspect_RectangularGrid.Nullify = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid_Nullify, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid.IsNull = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid_IsNull, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid._get_reference = new_instancemethod(_Aspect.Handle_Aspect_RectangularGrid__get_reference, None, Handle_Aspect_RectangularGrid)
Handle_Aspect_RectangularGrid_swigregister = _Aspect.Handle_Aspect_RectangularGrid_swigregister
Handle_Aspect_RectangularGrid_swigregister(Handle_Aspect_RectangularGrid)

def Handle_Aspect_RectangularGrid_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Aspect_RectangularGrid const":
    return _Aspect.Handle_Aspect_RectangularGrid_DownCast(AnObject)
Handle_Aspect_RectangularGrid_DownCast = _Aspect.Handle_Aspect_RectangularGrid_DownCast



