# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _MAT.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MAT')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MAT')
    _MAT = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MAT', [dirname(__file__)])
        except ImportError:
            import _MAT
            return _MAT
        try:
            _mod = imp.load_module('_MAT', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MAT = swig_import_helper()
    del swig_import_helper
else:
    import _MAT
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MAT.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_MAT.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_MAT.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_MAT.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_MAT.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_MAT.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_MAT.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_MAT.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_MAT.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_MAT.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_MAT.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_MAT.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_MAT.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_MAT.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_MAT.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_MAT.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_MAT.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _MAT.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.MMgt
import OCC.Standard
import OCC.TCollection

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

MAT_Left = _MAT.MAT_Left
MAT_Right = _MAT.MAT_Right
class MAT_Arc(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param ArcIndex:
        :type ArcIndex: int
        :param GeomIndex:
        :type GeomIndex: int
        :param FirstElement:
        :type FirstElement: Handle_MAT_BasicElt &
        :param SecondElement:
        :type SecondElement: Handle_MAT_BasicElt &
        :rtype: None

        """
        _MAT.MAT_Arc_swiginit(self, _MAT.new_MAT_Arc(*args))

    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index of <self> in Graph.theArcs.

        :rtype: int

        """
        return _MAT.MAT_Arc_Index(self, *args)


    def GeomIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the index associated of the geometric representation of <self>.

        :rtype: int

        """
        return _MAT.MAT_Arc_GeomIndex(self, *args)


    def FirstElement(self, *args) -> "Handle_MAT_BasicElt":
        """
        * Returns one of the BasicElt equidistant from <self>.

        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_Arc_FirstElement(self, *args)


    def SecondElement(self, *args) -> "Handle_MAT_BasicElt":
        """
        * Returns the other BasicElt equidistant from <self>.

        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_Arc_SecondElement(self, *args)


    def FirstNode(self, *args) -> "Handle_MAT_Node":
        """
        * Returns one Node extremity of <self>.

        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_Arc_FirstNode(self, *args)


    def SecondNode(self, *args) -> "Handle_MAT_Node":
        """
        * Returns the other Node extremity of <self>.

        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_Arc_SecondNode(self, *args)


    def TheOtherNode(self, *args) -> "Handle_MAT_Node":
        """
        * an Arc has two Node, if <aNode> egal one Returns the other. //! if <aNode> is not oh <self>

        :param aNode:
        :type aNode: Handle_MAT_Node &
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_Arc_TheOtherNode(self, *args)


    def HasNeighbour(self, *args) -> "Standard_Boolean":
        """
        * Returnst True is there is an arc linked to the Node <aNode> located on the side <aSide> of <self>; if <aNode> is not on <self>

        :param aNode:
        :type aNode: Handle_MAT_Node &
        :param aSide:
        :type aSide: MAT_Side
        :rtype: bool

        """
        return _MAT.MAT_Arc_HasNeighbour(self, *args)


    def Neighbour(self, *args) -> "Handle_MAT_Arc":
        """
        * Returns the first arc linked to the Node <aNode> located on the side <aSide> of <self>; if HasNeighbour() returns False.

        :param aNode:
        :type aNode: Handle_MAT_Node &
        :param aSide:
        :type aSide: MAT_Side
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_Arc_Neighbour(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        :param anInteger:
        :type anInteger: int
        :rtype: None

        """
        return _MAT.MAT_Arc_SetIndex(self, *args)


    def SetGeomIndex(self, *args) -> "void":
        """
        :param anInteger:
        :type anInteger: int
        :rtype: None

        """
        return _MAT.MAT_Arc_SetGeomIndex(self, *args)


    def SetFirstElement(self, *args) -> "void":
        """
        :param aBasicElt:
        :type aBasicElt: Handle_MAT_BasicElt &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetFirstElement(self, *args)


    def SetSecondElement(self, *args) -> "void":
        """
        :param aBasicElt:
        :type aBasicElt: Handle_MAT_BasicElt &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetSecondElement(self, *args)


    def SetFirstNode(self, *args) -> "void":
        """
        :param aNode:
        :type aNode: Handle_MAT_Node &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetFirstNode(self, *args)


    def SetSecondNode(self, *args) -> "void":
        """
        :param aNode:
        :type aNode: Handle_MAT_Node &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetSecondNode(self, *args)


    def SetFirstArc(self, *args) -> "void":
        """
        :param aSide:
        :type aSide: MAT_Side
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetFirstArc(self, *args)


    def SetSecondArc(self, *args) -> "void":
        """
        :param aSide:
        :type aSide: MAT_Side
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetSecondArc(self, *args)


    def SetNeighbour(self, *args) -> "void":
        """
        :param aSide:
        :type aSide: MAT_Side
        :param aNode:
        :type aNode: Handle_MAT_Node &
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_Arc_SetNeighbour(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Arc(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Arc
MAT_Arc.Index = new_instancemethod(_MAT.MAT_Arc_Index, None, MAT_Arc)
MAT_Arc.GeomIndex = new_instancemethod(_MAT.MAT_Arc_GeomIndex, None, MAT_Arc)
MAT_Arc.FirstElement = new_instancemethod(_MAT.MAT_Arc_FirstElement, None, MAT_Arc)
MAT_Arc.SecondElement = new_instancemethod(_MAT.MAT_Arc_SecondElement, None, MAT_Arc)
MAT_Arc.FirstNode = new_instancemethod(_MAT.MAT_Arc_FirstNode, None, MAT_Arc)
MAT_Arc.SecondNode = new_instancemethod(_MAT.MAT_Arc_SecondNode, None, MAT_Arc)
MAT_Arc.TheOtherNode = new_instancemethod(_MAT.MAT_Arc_TheOtherNode, None, MAT_Arc)
MAT_Arc.HasNeighbour = new_instancemethod(_MAT.MAT_Arc_HasNeighbour, None, MAT_Arc)
MAT_Arc.Neighbour = new_instancemethod(_MAT.MAT_Arc_Neighbour, None, MAT_Arc)
MAT_Arc.SetIndex = new_instancemethod(_MAT.MAT_Arc_SetIndex, None, MAT_Arc)
MAT_Arc.SetGeomIndex = new_instancemethod(_MAT.MAT_Arc_SetGeomIndex, None, MAT_Arc)
MAT_Arc.SetFirstElement = new_instancemethod(_MAT.MAT_Arc_SetFirstElement, None, MAT_Arc)
MAT_Arc.SetSecondElement = new_instancemethod(_MAT.MAT_Arc_SetSecondElement, None, MAT_Arc)
MAT_Arc.SetFirstNode = new_instancemethod(_MAT.MAT_Arc_SetFirstNode, None, MAT_Arc)
MAT_Arc.SetSecondNode = new_instancemethod(_MAT.MAT_Arc_SetSecondNode, None, MAT_Arc)
MAT_Arc.SetFirstArc = new_instancemethod(_MAT.MAT_Arc_SetFirstArc, None, MAT_Arc)
MAT_Arc.SetSecondArc = new_instancemethod(_MAT.MAT_Arc_SetSecondArc, None, MAT_Arc)
MAT_Arc.SetNeighbour = new_instancemethod(_MAT.MAT_Arc_SetNeighbour, None, MAT_Arc)
MAT_Arc_swigregister = _MAT.MAT_Arc_swigregister
MAT_Arc_swigregister(MAT_Arc)

class Handle_MAT_Arc(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Arc_swiginit(self, _MAT.new_Handle_MAT_Arc(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Arc_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Arc
Handle_MAT_Arc.Nullify = new_instancemethod(_MAT.Handle_MAT_Arc_Nullify, None, Handle_MAT_Arc)
Handle_MAT_Arc.IsNull = new_instancemethod(_MAT.Handle_MAT_Arc_IsNull, None, Handle_MAT_Arc)
Handle_MAT_Arc._get_reference = new_instancemethod(_MAT.Handle_MAT_Arc__get_reference, None, Handle_MAT_Arc)
Handle_MAT_Arc_swigregister = _MAT.Handle_MAT_Arc_swigregister
Handle_MAT_Arc_swigregister(Handle_MAT_Arc)

def Handle_MAT_Arc_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Arc const":
    return _MAT.Handle_MAT_Arc_DownCast(AnObject)
Handle_MAT_Arc_DownCast = _MAT.Handle_MAT_Arc_DownCast

class MAT_BasicElt(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Constructor, <anInteger> is the <index> of <self>.

        :param anInteger:
        :type anInteger: int
        :rtype: None

        """
        _MAT.MAT_BasicElt_swiginit(self, _MAT.new_MAT_BasicElt(*args))

    def StartArc(self, *args) -> "Handle_MAT_Arc":
        """
        * Return <startArcLeft> or <startArcRight> corresponding to <aSide>.

        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_BasicElt_StartArc(self, *args)


    def EndArc(self, *args) -> "Handle_MAT_Arc":
        """
        * Return <endArcLeft> or <endArcRight> corresponding to <aSide>.

        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_BasicElt_EndArc(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Return the <index> of <self> in Graph.TheBasicElts.

        :rtype: int

        """
        return _MAT.MAT_BasicElt_Index(self, *args)


    def GeomIndex(self, *args) -> "Standard_Integer":
        """
        * Return the <GeomIndex> of <self>.

        :rtype: int

        """
        return _MAT.MAT_BasicElt_GeomIndex(self, *args)


    def SetStartArc(self, *args) -> "void":
        """
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_BasicElt_SetStartArc(self, *args)


    def SetEndArc(self, *args) -> "void":
        """
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_BasicElt_SetEndArc(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        :param anInteger:
        :type anInteger: int
        :rtype: None

        """
        return _MAT.MAT_BasicElt_SetIndex(self, *args)


    def SetGeomIndex(self, *args) -> "void":
        """
        :param anInteger:
        :type anInteger: int
        :rtype: None

        """
        return _MAT.MAT_BasicElt_SetGeomIndex(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_BasicElt(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_BasicElt
MAT_BasicElt.StartArc = new_instancemethod(_MAT.MAT_BasicElt_StartArc, None, MAT_BasicElt)
MAT_BasicElt.EndArc = new_instancemethod(_MAT.MAT_BasicElt_EndArc, None, MAT_BasicElt)
MAT_BasicElt.Index = new_instancemethod(_MAT.MAT_BasicElt_Index, None, MAT_BasicElt)
MAT_BasicElt.GeomIndex = new_instancemethod(_MAT.MAT_BasicElt_GeomIndex, None, MAT_BasicElt)
MAT_BasicElt.SetStartArc = new_instancemethod(_MAT.MAT_BasicElt_SetStartArc, None, MAT_BasicElt)
MAT_BasicElt.SetEndArc = new_instancemethod(_MAT.MAT_BasicElt_SetEndArc, None, MAT_BasicElt)
MAT_BasicElt.SetIndex = new_instancemethod(_MAT.MAT_BasicElt_SetIndex, None, MAT_BasicElt)
MAT_BasicElt.SetGeomIndex = new_instancemethod(_MAT.MAT_BasicElt_SetGeomIndex, None, MAT_BasicElt)
MAT_BasicElt_swigregister = _MAT.MAT_BasicElt_swigregister
MAT_BasicElt_swigregister(MAT_BasicElt)

class Handle_MAT_BasicElt(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_BasicElt_swiginit(self, _MAT.new_Handle_MAT_BasicElt(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_BasicElt_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_BasicElt
Handle_MAT_BasicElt.Nullify = new_instancemethod(_MAT.Handle_MAT_BasicElt_Nullify, None, Handle_MAT_BasicElt)
Handle_MAT_BasicElt.IsNull = new_instancemethod(_MAT.Handle_MAT_BasicElt_IsNull, None, Handle_MAT_BasicElt)
Handle_MAT_BasicElt._get_reference = new_instancemethod(_MAT.Handle_MAT_BasicElt__get_reference, None, Handle_MAT_BasicElt)
Handle_MAT_BasicElt_swigregister = _MAT.Handle_MAT_BasicElt_swigregister
Handle_MAT_BasicElt_swigregister(Handle_MAT_BasicElt)

def Handle_MAT_BasicElt_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_BasicElt const":
    return _MAT.Handle_MAT_BasicElt_DownCast(AnObject)
Handle_MAT_BasicElt_DownCast = _MAT.Handle_MAT_BasicElt_DownCast

class MAT_Bisector(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT.MAT_Bisector_swiginit(self, _MAT.new_MAT_Bisector(*args))

    def AddBisector(self, *args) -> "void":
        """
        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_Bisector_AddBisector(self, *args)


    def List(self, *args) -> "Handle_MAT_ListOfBisector":
        """
        :rtype: Handle_MAT_ListOfBisector

        """
        return _MAT.MAT_Bisector_List(self, *args)


    def FirstBisector(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_Bisector_FirstBisector(self, *args)


    def LastBisector(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_Bisector_LastBisector(self, *args)


    def BisectorNumber(self, *args) -> "Standard_Integer":
        """
        :param anumber:
        :type anumber: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_BisectorNumber(self, *args)


    def IndexNumber(self, *args) -> "Standard_Integer":
        """
        :param anumber:
        :type anumber: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_IndexNumber(self, *args)


    def FirstEdge(self, *args) -> "Handle_MAT_Edge":
        """
        :param anedge:
        :type anedge: Handle_MAT_Edge &
        :rtype: None

        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_Bisector_FirstEdge(self, *args)


    def SecondEdge(self, *args) -> "Handle_MAT_Edge":
        """
        :param anedge:
        :type anedge: Handle_MAT_Edge &
        :rtype: None

        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_Bisector_SecondEdge(self, *args)


    def IssuePoint(self, *args) -> "Standard_Integer":
        """
        :param apoint:
        :type apoint: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_IssuePoint(self, *args)


    def EndPoint(self, *args) -> "Standard_Integer":
        """
        :param apoint:
        :type apoint: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_EndPoint(self, *args)


    def DistIssuePoint(self, *args) -> "Standard_Real":
        """
        :param areal:
        :type areal: float
        :rtype: None

        :rtype: float

        """
        return _MAT.MAT_Bisector_DistIssuePoint(self, *args)


    def FirstVector(self, *args) -> "Standard_Integer":
        """
        :param avector:
        :type avector: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_FirstVector(self, *args)


    def SecondVector(self, *args) -> "Standard_Integer":
        """
        :param avector:
        :type avector: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Bisector_SecondVector(self, *args)


    def Sense(self, *args) -> "Standard_Real":
        """
        :param asense:
        :type asense: float
        :rtype: None

        :rtype: float

        """
        return _MAT.MAT_Bisector_Sense(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        :param aparameter:
        :type aparameter: float
        :rtype: None

        :rtype: float

        """
        return _MAT.MAT_Bisector_FirstParameter(self, *args)


    def SecondParameter(self, *args) -> "Standard_Real":
        """
        :param aparameter:
        :type aparameter: float
        :rtype: None

        :rtype: float

        """
        return _MAT.MAT_Bisector_SecondParameter(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param ashift:
        :type ashift: int
        :param alevel:
        :type alevel: int
        :rtype: None

        """
        return _MAT.MAT_Bisector_Dump(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Bisector(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Bisector
MAT_Bisector.AddBisector = new_instancemethod(_MAT.MAT_Bisector_AddBisector, None, MAT_Bisector)
MAT_Bisector.List = new_instancemethod(_MAT.MAT_Bisector_List, None, MAT_Bisector)
MAT_Bisector.FirstBisector = new_instancemethod(_MAT.MAT_Bisector_FirstBisector, None, MAT_Bisector)
MAT_Bisector.LastBisector = new_instancemethod(_MAT.MAT_Bisector_LastBisector, None, MAT_Bisector)
MAT_Bisector.BisectorNumber = new_instancemethod(_MAT.MAT_Bisector_BisectorNumber, None, MAT_Bisector)
MAT_Bisector.IndexNumber = new_instancemethod(_MAT.MAT_Bisector_IndexNumber, None, MAT_Bisector)
MAT_Bisector.FirstEdge = new_instancemethod(_MAT.MAT_Bisector_FirstEdge, None, MAT_Bisector)
MAT_Bisector.SecondEdge = new_instancemethod(_MAT.MAT_Bisector_SecondEdge, None, MAT_Bisector)
MAT_Bisector.IssuePoint = new_instancemethod(_MAT.MAT_Bisector_IssuePoint, None, MAT_Bisector)
MAT_Bisector.EndPoint = new_instancemethod(_MAT.MAT_Bisector_EndPoint, None, MAT_Bisector)
MAT_Bisector.DistIssuePoint = new_instancemethod(_MAT.MAT_Bisector_DistIssuePoint, None, MAT_Bisector)
MAT_Bisector.FirstVector = new_instancemethod(_MAT.MAT_Bisector_FirstVector, None, MAT_Bisector)
MAT_Bisector.SecondVector = new_instancemethod(_MAT.MAT_Bisector_SecondVector, None, MAT_Bisector)
MAT_Bisector.Sense = new_instancemethod(_MAT.MAT_Bisector_Sense, None, MAT_Bisector)
MAT_Bisector.FirstParameter = new_instancemethod(_MAT.MAT_Bisector_FirstParameter, None, MAT_Bisector)
MAT_Bisector.SecondParameter = new_instancemethod(_MAT.MAT_Bisector_SecondParameter, None, MAT_Bisector)
MAT_Bisector.Dump = new_instancemethod(_MAT.MAT_Bisector_Dump, None, MAT_Bisector)
MAT_Bisector_swigregister = _MAT.MAT_Bisector_swigregister
MAT_Bisector_swigregister(MAT_Bisector)

class Handle_MAT_Bisector(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Bisector_swiginit(self, _MAT.new_Handle_MAT_Bisector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Bisector_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Bisector
Handle_MAT_Bisector.Nullify = new_instancemethod(_MAT.Handle_MAT_Bisector_Nullify, None, Handle_MAT_Bisector)
Handle_MAT_Bisector.IsNull = new_instancemethod(_MAT.Handle_MAT_Bisector_IsNull, None, Handle_MAT_Bisector)
Handle_MAT_Bisector._get_reference = new_instancemethod(_MAT.Handle_MAT_Bisector__get_reference, None, Handle_MAT_Bisector)
Handle_MAT_Bisector_swigregister = _MAT.Handle_MAT_Bisector_swigregister
Handle_MAT_Bisector_swigregister(Handle_MAT_Bisector)

def Handle_MAT_Bisector_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Bisector const":
    return _MAT.Handle_MAT_Bisector_DownCast(AnObject)
Handle_MAT_Bisector_DownCast = _MAT.Handle_MAT_Bisector_DownCast

class MAT_DataMapIteratorOfDataMapOfIntegerArc(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT_DataMapOfIntegerArc &
        :rtype: None

        """
        _MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_swiginit(self, _MAT.new_MAT_DataMapIteratorOfDataMapOfIntegerArc(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: MAT_DataMapOfIntegerArc &
        :rtype: None

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Key(self, *args)


    def Value(self, *args) -> "Handle_MAT_Arc":
        """
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapIteratorOfDataMapOfIntegerArc
MAT_DataMapIteratorOfDataMapOfIntegerArc.Initialize = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Initialize, None, MAT_DataMapIteratorOfDataMapOfIntegerArc)
MAT_DataMapIteratorOfDataMapOfIntegerArc.Key = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Key, None, MAT_DataMapIteratorOfDataMapOfIntegerArc)
MAT_DataMapIteratorOfDataMapOfIntegerArc.Value = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_Value, None, MAT_DataMapIteratorOfDataMapOfIntegerArc)
MAT_DataMapIteratorOfDataMapOfIntegerArc_swigregister = _MAT.MAT_DataMapIteratorOfDataMapOfIntegerArc_swigregister
MAT_DataMapIteratorOfDataMapOfIntegerArc_swigregister(MAT_DataMapIteratorOfDataMapOfIntegerArc)

class MAT_DataMapIteratorOfDataMapOfIntegerBasicElt(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT_DataMapOfIntegerBasicElt &
        :rtype: None

        """
        _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_swiginit(self, _MAT.new_MAT_DataMapIteratorOfDataMapOfIntegerBasicElt(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: MAT_DataMapOfIntegerBasicElt &
        :rtype: None

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Key(self, *args)


    def Value(self, *args) -> "Handle_MAT_BasicElt":
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapIteratorOfDataMapOfIntegerBasicElt
MAT_DataMapIteratorOfDataMapOfIntegerBasicElt.Initialize = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Initialize, None, MAT_DataMapIteratorOfDataMapOfIntegerBasicElt)
MAT_DataMapIteratorOfDataMapOfIntegerBasicElt.Key = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Key, None, MAT_DataMapIteratorOfDataMapOfIntegerBasicElt)
MAT_DataMapIteratorOfDataMapOfIntegerBasicElt.Value = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_Value, None, MAT_DataMapIteratorOfDataMapOfIntegerBasicElt)
MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_swigregister = _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_swigregister
MAT_DataMapIteratorOfDataMapOfIntegerBasicElt_swigregister(MAT_DataMapIteratorOfDataMapOfIntegerBasicElt)

class MAT_DataMapIteratorOfDataMapOfIntegerBisector(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT_DataMapOfIntegerBisector &
        :rtype: None

        """
        _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_swiginit(self, _MAT.new_MAT_DataMapIteratorOfDataMapOfIntegerBisector(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: MAT_DataMapOfIntegerBisector &
        :rtype: None

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Key(self, *args)


    def Value(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapIteratorOfDataMapOfIntegerBisector
MAT_DataMapIteratorOfDataMapOfIntegerBisector.Initialize = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Initialize, None, MAT_DataMapIteratorOfDataMapOfIntegerBisector)
MAT_DataMapIteratorOfDataMapOfIntegerBisector.Key = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Key, None, MAT_DataMapIteratorOfDataMapOfIntegerBisector)
MAT_DataMapIteratorOfDataMapOfIntegerBisector.Value = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_Value, None, MAT_DataMapIteratorOfDataMapOfIntegerBisector)
MAT_DataMapIteratorOfDataMapOfIntegerBisector_swigregister = _MAT.MAT_DataMapIteratorOfDataMapOfIntegerBisector_swigregister
MAT_DataMapIteratorOfDataMapOfIntegerBisector_swigregister(MAT_DataMapIteratorOfDataMapOfIntegerBisector)

class MAT_DataMapIteratorOfDataMapOfIntegerNode(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: MAT_DataMapOfIntegerNode &
        :rtype: None

        """
        _MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_swiginit(self, _MAT.new_MAT_DataMapIteratorOfDataMapOfIntegerNode(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: MAT_DataMapOfIntegerNode &
        :rtype: None

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Key(self, *args)


    def Value(self, *args) -> "Handle_MAT_Node":
        """
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapIteratorOfDataMapOfIntegerNode
MAT_DataMapIteratorOfDataMapOfIntegerNode.Initialize = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Initialize, None, MAT_DataMapIteratorOfDataMapOfIntegerNode)
MAT_DataMapIteratorOfDataMapOfIntegerNode.Key = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Key, None, MAT_DataMapIteratorOfDataMapOfIntegerNode)
MAT_DataMapIteratorOfDataMapOfIntegerNode.Value = new_instancemethod(_MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_Value, None, MAT_DataMapIteratorOfDataMapOfIntegerNode)
MAT_DataMapIteratorOfDataMapOfIntegerNode_swigregister = _MAT.MAT_DataMapIteratorOfDataMapOfIntegerNode_swigregister
MAT_DataMapIteratorOfDataMapOfIntegerNode_swigregister(MAT_DataMapIteratorOfDataMapOfIntegerNode)

class MAT_DataMapNodeOfDataMapOfIntegerArc(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Arc &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_swiginit(self, _MAT.new_MAT_DataMapNodeOfDataMapOfIntegerArc(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(MAT_DataMapNodeOfDataMapOfIntegerArc self) -> Standard_Integer"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(MAT_DataMapNodeOfDataMapOfIntegerArc self, Standard_Integer value)"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_SetKey(self, value)


    def Value(self, *args) -> "Handle_MAT_Arc":
        """
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_DataMapNodeOfDataMapOfIntegerArc(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapNodeOfDataMapOfIntegerArc
MAT_DataMapNodeOfDataMapOfIntegerArc.GetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_GetKey, None, MAT_DataMapNodeOfDataMapOfIntegerArc)
MAT_DataMapNodeOfDataMapOfIntegerArc.SetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_SetKey, None, MAT_DataMapNodeOfDataMapOfIntegerArc)
MAT_DataMapNodeOfDataMapOfIntegerArc.Value = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_Value, None, MAT_DataMapNodeOfDataMapOfIntegerArc)
MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister = _MAT.MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister
MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister(MAT_DataMapNodeOfDataMapOfIntegerArc)

class Handle_MAT_DataMapNodeOfDataMapOfIntegerArc(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_swiginit(self, _MAT.new_Handle_MAT_DataMapNodeOfDataMapOfIntegerArc(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_DataMapNodeOfDataMapOfIntegerArc
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc.Nullify = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_Nullify, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerArc)
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc.IsNull = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_IsNull, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerArc)
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc._get_reference = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc__get_reference, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerArc)
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_swigregister(Handle_MAT_DataMapNodeOfDataMapOfIntegerArc)

def Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_DataMapNodeOfDataMapOfIntegerArc const":
    return _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_DownCast(AnObject)
Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_DownCast = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerArc_DownCast

class MAT_DataMapNodeOfDataMapOfIntegerBasicElt(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_BasicElt &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swiginit(self, _MAT.new_MAT_DataMapNodeOfDataMapOfIntegerBasicElt(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(MAT_DataMapNodeOfDataMapOfIntegerBasicElt self) -> Standard_Integer"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(MAT_DataMapNodeOfDataMapOfIntegerBasicElt self, Standard_Integer value)"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_SetKey(self, value)


    def Value(self, *args) -> "Handle_MAT_BasicElt":
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapNodeOfDataMapOfIntegerBasicElt
MAT_DataMapNodeOfDataMapOfIntegerBasicElt.GetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_GetKey, None, MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
MAT_DataMapNodeOfDataMapOfIntegerBasicElt.SetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_SetKey, None, MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
MAT_DataMapNodeOfDataMapOfIntegerBasicElt.Value = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_Value, None, MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister = _MAT.MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister
MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister(MAT_DataMapNodeOfDataMapOfIntegerBasicElt)

class Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swiginit(self, _MAT.new_Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt.Nullify = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_Nullify, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt.IsNull = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_IsNull, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt._get_reference = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt__get_reference, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_swigregister(Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt)

def Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt const":
    return _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_DownCast(AnObject)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_DownCast = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBasicElt_DownCast

class MAT_DataMapNodeOfDataMapOfIntegerBisector(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Bisector &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_swiginit(self, _MAT.new_MAT_DataMapNodeOfDataMapOfIntegerBisector(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(MAT_DataMapNodeOfDataMapOfIntegerBisector self) -> Standard_Integer"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(MAT_DataMapNodeOfDataMapOfIntegerBisector self, Standard_Integer value)"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_SetKey(self, value)


    def Value(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapNodeOfDataMapOfIntegerBisector
MAT_DataMapNodeOfDataMapOfIntegerBisector.GetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_GetKey, None, MAT_DataMapNodeOfDataMapOfIntegerBisector)
MAT_DataMapNodeOfDataMapOfIntegerBisector.SetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_SetKey, None, MAT_DataMapNodeOfDataMapOfIntegerBisector)
MAT_DataMapNodeOfDataMapOfIntegerBisector.Value = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_Value, None, MAT_DataMapNodeOfDataMapOfIntegerBisector)
MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister = _MAT.MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister
MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister(MAT_DataMapNodeOfDataMapOfIntegerBisector)

class Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_swiginit(self, _MAT.new_Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector.Nullify = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_Nullify, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector.IsNull = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_IsNull, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector._get_reference = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector__get_reference, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_swigregister(Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector)

def Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector const":
    return _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_DownCast(AnObject)
Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_DownCast = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerBisector_DownCast

class MAT_DataMapNodeOfDataMapOfIntegerNode(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Node &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_swiginit(self, _MAT.new_MAT_DataMapNodeOfDataMapOfIntegerNode(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(MAT_DataMapNodeOfDataMapOfIntegerNode self) -> Standard_Integer"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(MAT_DataMapNodeOfDataMapOfIntegerNode self, Standard_Integer value)"""
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_SetKey(self, value)


    def Value(self, *args) -> "Handle_MAT_Node":
        """
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_DataMapNodeOfDataMapOfIntegerNode(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapNodeOfDataMapOfIntegerNode
MAT_DataMapNodeOfDataMapOfIntegerNode.GetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_GetKey, None, MAT_DataMapNodeOfDataMapOfIntegerNode)
MAT_DataMapNodeOfDataMapOfIntegerNode.SetKey = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_SetKey, None, MAT_DataMapNodeOfDataMapOfIntegerNode)
MAT_DataMapNodeOfDataMapOfIntegerNode.Value = new_instancemethod(_MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_Value, None, MAT_DataMapNodeOfDataMapOfIntegerNode)
MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister = _MAT.MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister
MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister(MAT_DataMapNodeOfDataMapOfIntegerNode)

class Handle_MAT_DataMapNodeOfDataMapOfIntegerNode(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_swiginit(self, _MAT.new_Handle_MAT_DataMapNodeOfDataMapOfIntegerNode(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_DataMapNodeOfDataMapOfIntegerNode
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode.Nullify = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_Nullify, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerNode)
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode.IsNull = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_IsNull, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerNode)
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode._get_reference = new_instancemethod(_MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode__get_reference, None, Handle_MAT_DataMapNodeOfDataMapOfIntegerNode)
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_swigregister(Handle_MAT_DataMapNodeOfDataMapOfIntegerNode)

def Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_DataMapNodeOfDataMapOfIntegerNode const":
    return _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_DownCast(AnObject)
Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_DownCast = _MAT.Handle_MAT_DataMapNodeOfDataMapOfIntegerNode_DownCast

class MAT_DataMapOfIntegerArc(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT.MAT_DataMapOfIntegerArc_swiginit(self, _MAT.new_MAT_DataMapOfIntegerArc(*args))

    def Assign(self, *args) -> "MAT_DataMapOfIntegerArc &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerArc &
        :rtype: MAT_DataMapOfIntegerArc

        """
        return _MAT.MAT_DataMapOfIntegerArc_Assign(self, *args)


    def Set(self, *args) -> "MAT_DataMapOfIntegerArc &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerArc &
        :rtype: MAT_DataMapOfIntegerArc

        """
        return _MAT.MAT_DataMapOfIntegerArc_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerArc_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerArc_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Arc &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerArc_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerArc_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerArc_UnBind(self, *args)


    def Find(self, *args) -> "Handle_MAT_Arc":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_DataMapOfIntegerArc_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_MAT_Arc":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_DataMapOfIntegerArc_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerArc_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerArc_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapOfIntegerArc
MAT_DataMapOfIntegerArc.Assign = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Assign, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.Set = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Set, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.ReSize = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_ReSize, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.Clear = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Clear, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.Bind = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Bind, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.IsBound = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_IsBound, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.UnBind = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_UnBind, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.Find = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Find, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.ChangeFind = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_ChangeFind, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.Find1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_Find1, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc.ChangeFind1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerArc_ChangeFind1, None, MAT_DataMapOfIntegerArc)
MAT_DataMapOfIntegerArc_swigregister = _MAT.MAT_DataMapOfIntegerArc_swigregister
MAT_DataMapOfIntegerArc_swigregister(MAT_DataMapOfIntegerArc)

class MAT_DataMapOfIntegerBasicElt(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT.MAT_DataMapOfIntegerBasicElt_swiginit(self, _MAT.new_MAT_DataMapOfIntegerBasicElt(*args))

    def Assign(self, *args) -> "MAT_DataMapOfIntegerBasicElt &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerBasicElt &
        :rtype: MAT_DataMapOfIntegerBasicElt

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Assign(self, *args)


    def Set(self, *args) -> "MAT_DataMapOfIntegerBasicElt &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerBasicElt &
        :rtype: MAT_DataMapOfIntegerBasicElt

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_BasicElt &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_UnBind(self, *args)


    def Find(self, *args) -> "Handle_MAT_BasicElt":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_MAT_BasicElt":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerBasicElt_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapOfIntegerBasicElt
MAT_DataMapOfIntegerBasicElt.Assign = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Assign, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.Set = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Set, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.ReSize = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_ReSize, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.Clear = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Clear, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.Bind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Bind, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.IsBound = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_IsBound, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.UnBind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_UnBind, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.Find = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Find, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.ChangeFind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_ChangeFind, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.Find1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_Find1, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt.ChangeFind1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerBasicElt_ChangeFind1, None, MAT_DataMapOfIntegerBasicElt)
MAT_DataMapOfIntegerBasicElt_swigregister = _MAT.MAT_DataMapOfIntegerBasicElt_swigregister
MAT_DataMapOfIntegerBasicElt_swigregister(MAT_DataMapOfIntegerBasicElt)

class MAT_DataMapOfIntegerBisector(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT.MAT_DataMapOfIntegerBisector_swiginit(self, _MAT.new_MAT_DataMapOfIntegerBisector(*args))

    def Assign(self, *args) -> "MAT_DataMapOfIntegerBisector &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerBisector &
        :rtype: MAT_DataMapOfIntegerBisector

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Assign(self, *args)


    def Set(self, *args) -> "MAT_DataMapOfIntegerBisector &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerBisector &
        :rtype: MAT_DataMapOfIntegerBisector

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerBisector_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Bisector &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBisector_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerBisector_UnBind(self, *args)


    def Find(self, *args) -> "Handle_MAT_Bisector":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_MAT_Bisector":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_DataMapOfIntegerBisector_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerBisector_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerBisector_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapOfIntegerBisector
MAT_DataMapOfIntegerBisector.Assign = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Assign, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.Set = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Set, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.ReSize = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_ReSize, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.Clear = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Clear, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.Bind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Bind, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.IsBound = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_IsBound, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.UnBind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_UnBind, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.Find = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Find, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.ChangeFind = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_ChangeFind, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.Find1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_Find1, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector.ChangeFind1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerBisector_ChangeFind1, None, MAT_DataMapOfIntegerBisector)
MAT_DataMapOfIntegerBisector_swigregister = _MAT.MAT_DataMapOfIntegerBisector_swigregister
MAT_DataMapOfIntegerBisector_swigregister(MAT_DataMapOfIntegerBisector)

class MAT_DataMapOfIntegerNode(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _MAT.MAT_DataMapOfIntegerNode_swiginit(self, _MAT.new_MAT_DataMapOfIntegerNode(*args))

    def Assign(self, *args) -> "MAT_DataMapOfIntegerNode &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerNode &
        :rtype: MAT_DataMapOfIntegerNode

        """
        return _MAT.MAT_DataMapOfIntegerNode_Assign(self, *args)


    def Set(self, *args) -> "MAT_DataMapOfIntegerNode &":
        """
        :param Other:
        :type Other: MAT_DataMapOfIntegerNode &
        :rtype: MAT_DataMapOfIntegerNode

        """
        return _MAT.MAT_DataMapOfIntegerNode_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerNode_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_DataMapOfIntegerNode_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_MAT_Node &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerNode_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerNode_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _MAT.MAT_DataMapOfIntegerNode_UnBind(self, *args)


    def Find(self, *args) -> "Handle_MAT_Node":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_DataMapOfIntegerNode_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_MAT_Node":
        """
        :param K:
        :type K: int &
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_DataMapOfIntegerNode_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerNode_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _MAT.MAT_DataMapOfIntegerNode_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_DataMapOfIntegerNode
MAT_DataMapOfIntegerNode.Assign = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Assign, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.Set = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Set, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.ReSize = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_ReSize, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.Clear = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Clear, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.Bind = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Bind, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.IsBound = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_IsBound, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.UnBind = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_UnBind, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.Find = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Find, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.ChangeFind = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_ChangeFind, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.Find1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_Find1, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode.ChangeFind1 = new_instancemethod(_MAT.MAT_DataMapOfIntegerNode_ChangeFind1, None, MAT_DataMapOfIntegerNode)
MAT_DataMapOfIntegerNode_swigregister = _MAT.MAT_DataMapOfIntegerNode_swigregister
MAT_DataMapOfIntegerNode_swigregister(MAT_DataMapOfIntegerNode)

class MAT_Edge(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT.MAT_Edge_swiginit(self, _MAT.new_MAT_Edge(*args))

    def EdgeNumber(self, *args) -> "Standard_Integer":
        """
        :param anumber:
        :type anumber: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Edge_EdgeNumber(self, *args)


    def FirstBisector(self, *args) -> "Handle_MAT_Bisector":
        """
        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :rtype: None

        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_Edge_FirstBisector(self, *args)


    def SecondBisector(self, *args) -> "Handle_MAT_Bisector":
        """
        :param abisector:
        :type abisector: Handle_MAT_Bisector &
        :rtype: None

        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_Edge_SecondBisector(self, *args)


    def Distance(self, *args) -> "Standard_Real":
        """
        :param adistance:
        :type adistance: float
        :rtype: None

        :rtype: float

        """
        return _MAT.MAT_Edge_Distance(self, *args)


    def IntersectionPoint(self, *args) -> "Standard_Integer":
        """
        :param apoint:
        :type apoint: int
        :rtype: None

        :rtype: int

        """
        return _MAT.MAT_Edge_IntersectionPoint(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param ashift:
        :type ashift: int
        :param alevel:
        :type alevel: int
        :rtype: None

        """
        return _MAT.MAT_Edge_Dump(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Edge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Edge
MAT_Edge.EdgeNumber = new_instancemethod(_MAT.MAT_Edge_EdgeNumber, None, MAT_Edge)
MAT_Edge.FirstBisector = new_instancemethod(_MAT.MAT_Edge_FirstBisector, None, MAT_Edge)
MAT_Edge.SecondBisector = new_instancemethod(_MAT.MAT_Edge_SecondBisector, None, MAT_Edge)
MAT_Edge.Distance = new_instancemethod(_MAT.MAT_Edge_Distance, None, MAT_Edge)
MAT_Edge.IntersectionPoint = new_instancemethod(_MAT.MAT_Edge_IntersectionPoint, None, MAT_Edge)
MAT_Edge.Dump = new_instancemethod(_MAT.MAT_Edge_Dump, None, MAT_Edge)
MAT_Edge_swigregister = _MAT.MAT_Edge_swigregister
MAT_Edge_swigregister(MAT_Edge)

class Handle_MAT_Edge(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Edge_swiginit(self, _MAT.new_Handle_MAT_Edge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Edge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Edge
Handle_MAT_Edge.Nullify = new_instancemethod(_MAT.Handle_MAT_Edge_Nullify, None, Handle_MAT_Edge)
Handle_MAT_Edge.IsNull = new_instancemethod(_MAT.Handle_MAT_Edge_IsNull, None, Handle_MAT_Edge)
Handle_MAT_Edge._get_reference = new_instancemethod(_MAT.Handle_MAT_Edge__get_reference, None, Handle_MAT_Edge)
Handle_MAT_Edge_swigregister = _MAT.Handle_MAT_Edge_swigregister
Handle_MAT_Edge_swigregister(Handle_MAT_Edge)

def Handle_MAT_Edge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Edge const":
    return _MAT.Handle_MAT_Edge_DownCast(AnObject)
Handle_MAT_Edge_DownCast = _MAT.Handle_MAT_Edge_DownCast

class MAT_Graph(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor.

        :rtype: None

        """
        _MAT.MAT_Graph_swiginit(self, _MAT.new_MAT_Graph(*args))

    def Perform(self, *args) -> "void":
        """
        * Construct <self> from the result of the method <CreateMat> of the class <MAT> from <MAT>. //! <SemiInfinite> : if some bisector are infinites. <TheRoots> : Set of the bisectors. <NbBasicElts> : Number of Basic Elements. <NbArcs> : Number of Arcs = Number of Bisectors.

        :param SemiInfinite:
        :type SemiInfinite: bool
        :param TheRoots:
        :type TheRoots: Handle_MAT_ListOfBisector &
        :param NbBasicElts:
        :type NbBasicElts: int
        :param NbArcs:
        :type NbArcs: int
        :rtype: None

        """
        return _MAT.MAT_Graph_Perform(self, *args)


    def Arc(self, *args) -> "Handle_MAT_Arc":
        """
        * Return the Arc of index <Index> in <theArcs>.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_Graph_Arc(self, *args)


    def BasicElt(self, *args) -> "Handle_MAT_BasicElt":
        """
        * Return the BasicElt of index <Index> in <theBasicElts>.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_Graph_BasicElt(self, *args)


    def Node(self, *args) -> "Handle_MAT_Node":
        """
        * Return the Node of index <Index> in <theNodes>.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT_Node

        """
        return _MAT.MAT_Graph_Node(self, *args)


    def NumberOfArcs(self, *args) -> "Standard_Integer":
        """
        * Return the number of arcs of <self>.

        :rtype: int

        """
        return _MAT.MAT_Graph_NumberOfArcs(self, *args)


    def NumberOfNodes(self, *args) -> "Standard_Integer":
        """
        * Return the number of nodes of <self>.

        :rtype: int

        """
        return _MAT.MAT_Graph_NumberOfNodes(self, *args)


    def NumberOfBasicElts(self, *args) -> "Standard_Integer":
        """
        * Return the number of basic elements of <self>.

        :rtype: int

        """
        return _MAT.MAT_Graph_NumberOfBasicElts(self, *args)


    def NumberOfInfiniteNodes(self, *args) -> "Standard_Integer":
        """
        * Return the number of infinites nodes of <self>.

        :rtype: int

        """
        return _MAT.MAT_Graph_NumberOfInfiniteNodes(self, *args)


    def FusionOfBasicElts(self, *args) -> "void":
        """
        * Merge two BasicElts. The End of the BasicElt Elt1 of IndexElt1 becomes The End of the BasicElt Elt2 of IndexElt2. Elt2 is replaced in the arcs by Elt1, Elt2 is eliminated. //! <MergeArc1> is True if the fusion of the BasicElts => a fusion of two Arcs which separated the same elements. In this case <GeomIndexArc1> and <GeomIndexArc2> are the Geometric Index of this arcs. //! If the BasicElt corresponds to a close line , the StartArc and the EndArc of Elt1 can separate the same elements . In this case there is a fusion of this arcs, <MergeArc2> is true and <GeomIndexArc3> and <GeomIndexArc4> are the Geometric Index of this arcs.

        :param IndexElt1:
        :type IndexElt1: int
        :param IndexElt2:
        :type IndexElt2: int
        :param MergeArc1:
        :type MergeArc1: bool
        :param GeomIndexArc1:
        :type GeomIndexArc1: int &
        :param GeomIndexArc2:
        :type GeomIndexArc2: int &
        :param MergeArc2:
        :type MergeArc2: bool
        :param GeomIndexArc3:
        :type GeomIndexArc3: int &
        :param GeomIndexArc4:
        :type GeomIndexArc4: int &
        :rtype: None

        """
        return _MAT.MAT_Graph_FusionOfBasicElts(self, *args)


    def CompactArcs(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_Graph_CompactArcs(self, *args)


    def CompactNodes(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_Graph_CompactNodes(self, *args)


    def ChangeBasicElts(self, *args) -> "void":
        """
        :param NewMap:
        :type NewMap: MAT_DataMapOfIntegerBasicElt &
        :rtype: None

        """
        return _MAT.MAT_Graph_ChangeBasicElts(self, *args)


    def ChangeBasicElt(self, *args) -> "Handle_MAT_BasicElt":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_Graph_ChangeBasicElt(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Graph(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Graph
MAT_Graph.Perform = new_instancemethod(_MAT.MAT_Graph_Perform, None, MAT_Graph)
MAT_Graph.Arc = new_instancemethod(_MAT.MAT_Graph_Arc, None, MAT_Graph)
MAT_Graph.BasicElt = new_instancemethod(_MAT.MAT_Graph_BasicElt, None, MAT_Graph)
MAT_Graph.Node = new_instancemethod(_MAT.MAT_Graph_Node, None, MAT_Graph)
MAT_Graph.NumberOfArcs = new_instancemethod(_MAT.MAT_Graph_NumberOfArcs, None, MAT_Graph)
MAT_Graph.NumberOfNodes = new_instancemethod(_MAT.MAT_Graph_NumberOfNodes, None, MAT_Graph)
MAT_Graph.NumberOfBasicElts = new_instancemethod(_MAT.MAT_Graph_NumberOfBasicElts, None, MAT_Graph)
MAT_Graph.NumberOfInfiniteNodes = new_instancemethod(_MAT.MAT_Graph_NumberOfInfiniteNodes, None, MAT_Graph)
MAT_Graph.FusionOfBasicElts = new_instancemethod(_MAT.MAT_Graph_FusionOfBasicElts, None, MAT_Graph)
MAT_Graph.CompactArcs = new_instancemethod(_MAT.MAT_Graph_CompactArcs, None, MAT_Graph)
MAT_Graph.CompactNodes = new_instancemethod(_MAT.MAT_Graph_CompactNodes, None, MAT_Graph)
MAT_Graph.ChangeBasicElts = new_instancemethod(_MAT.MAT_Graph_ChangeBasicElts, None, MAT_Graph)
MAT_Graph.ChangeBasicElt = new_instancemethod(_MAT.MAT_Graph_ChangeBasicElt, None, MAT_Graph)
MAT_Graph_swigregister = _MAT.MAT_Graph_swigregister
MAT_Graph_swigregister(MAT_Graph)

class Handle_MAT_Graph(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Graph_swiginit(self, _MAT.new_Handle_MAT_Graph(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Graph_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Graph
Handle_MAT_Graph.Nullify = new_instancemethod(_MAT.Handle_MAT_Graph_Nullify, None, Handle_MAT_Graph)
Handle_MAT_Graph.IsNull = new_instancemethod(_MAT.Handle_MAT_Graph_IsNull, None, Handle_MAT_Graph)
Handle_MAT_Graph._get_reference = new_instancemethod(_MAT.Handle_MAT_Graph__get_reference, None, Handle_MAT_Graph)
Handle_MAT_Graph_swigregister = _MAT.Handle_MAT_Graph_swigregister
Handle_MAT_Graph_swigregister(Handle_MAT_Graph)

def Handle_MAT_Graph_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Graph const":
    return _MAT.Handle_MAT_Graph_DownCast(AnObject)
Handle_MAT_Graph_DownCast = _MAT.Handle_MAT_Graph_DownCast

class MAT_ListOfBisector(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT.MAT_ListOfBisector_swiginit(self, _MAT.new_MAT_ListOfBisector(*args))

    def First(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_First(self, *args)


    def Last(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Last(self, *args)


    def Init(self, *args) -> "void":
        """
        :param aniten:
        :type aniten: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Init(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Next(self, *args)


    def Previous(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Previous(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _MAT.MAT_ListOfBisector_More(self, *args)


    def Current(self, *args) -> "void":
        """
        :rtype: Handle_MAT_Bisector

        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Current(self, *args)


    def FirstItem(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_ListOfBisector_FirstItem(self, *args)


    def LastItem(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_ListOfBisector_LastItem(self, *args)


    def PreviousItem(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_ListOfBisector_PreviousItem(self, *args)


    def NextItem(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_ListOfBisector_NextItem(self, *args)


    def Number(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _MAT.MAT_ListOfBisector_Number(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _MAT.MAT_ListOfBisector_Index(self, *args)


    def Brackets(self, *args) -> "Handle_MAT_Bisector":
        """
        :param anindex:
        :type anindex: int
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_ListOfBisector_Brackets(self, *args)


    def Unlink(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Unlink(self, *args)


    def LinkBefore(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_LinkBefore(self, *args)


    def LinkAfter(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_LinkAfter(self, *args)


    def FrontAdd(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_FrontAdd(self, *args)


    def BackAdd(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_BackAdd(self, *args)


    def Permute(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Permute(self, *args)


    def Loop(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Loop(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _MAT.MAT_ListOfBisector_IsEmpty(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param ashift:
        :type ashift: int
        :param alevel:
        :type alevel: int
        :rtype: None

        """
        return _MAT.MAT_ListOfBisector_Dump(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_ListOfBisector(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_ListOfBisector
MAT_ListOfBisector.First = new_instancemethod(_MAT.MAT_ListOfBisector_First, None, MAT_ListOfBisector)
MAT_ListOfBisector.Last = new_instancemethod(_MAT.MAT_ListOfBisector_Last, None, MAT_ListOfBisector)
MAT_ListOfBisector.Init = new_instancemethod(_MAT.MAT_ListOfBisector_Init, None, MAT_ListOfBisector)
MAT_ListOfBisector.Next = new_instancemethod(_MAT.MAT_ListOfBisector_Next, None, MAT_ListOfBisector)
MAT_ListOfBisector.Previous = new_instancemethod(_MAT.MAT_ListOfBisector_Previous, None, MAT_ListOfBisector)
MAT_ListOfBisector.More = new_instancemethod(_MAT.MAT_ListOfBisector_More, None, MAT_ListOfBisector)
MAT_ListOfBisector.Current = new_instancemethod(_MAT.MAT_ListOfBisector_Current, None, MAT_ListOfBisector)
MAT_ListOfBisector.FirstItem = new_instancemethod(_MAT.MAT_ListOfBisector_FirstItem, None, MAT_ListOfBisector)
MAT_ListOfBisector.LastItem = new_instancemethod(_MAT.MAT_ListOfBisector_LastItem, None, MAT_ListOfBisector)
MAT_ListOfBisector.PreviousItem = new_instancemethod(_MAT.MAT_ListOfBisector_PreviousItem, None, MAT_ListOfBisector)
MAT_ListOfBisector.NextItem = new_instancemethod(_MAT.MAT_ListOfBisector_NextItem, None, MAT_ListOfBisector)
MAT_ListOfBisector.Number = new_instancemethod(_MAT.MAT_ListOfBisector_Number, None, MAT_ListOfBisector)
MAT_ListOfBisector.Index = new_instancemethod(_MAT.MAT_ListOfBisector_Index, None, MAT_ListOfBisector)
MAT_ListOfBisector.Brackets = new_instancemethod(_MAT.MAT_ListOfBisector_Brackets, None, MAT_ListOfBisector)
MAT_ListOfBisector.Unlink = new_instancemethod(_MAT.MAT_ListOfBisector_Unlink, None, MAT_ListOfBisector)
MAT_ListOfBisector.LinkBefore = new_instancemethod(_MAT.MAT_ListOfBisector_LinkBefore, None, MAT_ListOfBisector)
MAT_ListOfBisector.LinkAfter = new_instancemethod(_MAT.MAT_ListOfBisector_LinkAfter, None, MAT_ListOfBisector)
MAT_ListOfBisector.FrontAdd = new_instancemethod(_MAT.MAT_ListOfBisector_FrontAdd, None, MAT_ListOfBisector)
MAT_ListOfBisector.BackAdd = new_instancemethod(_MAT.MAT_ListOfBisector_BackAdd, None, MAT_ListOfBisector)
MAT_ListOfBisector.Permute = new_instancemethod(_MAT.MAT_ListOfBisector_Permute, None, MAT_ListOfBisector)
MAT_ListOfBisector.Loop = new_instancemethod(_MAT.MAT_ListOfBisector_Loop, None, MAT_ListOfBisector)
MAT_ListOfBisector.IsEmpty = new_instancemethod(_MAT.MAT_ListOfBisector_IsEmpty, None, MAT_ListOfBisector)
MAT_ListOfBisector.Dump = new_instancemethod(_MAT.MAT_ListOfBisector_Dump, None, MAT_ListOfBisector)
MAT_ListOfBisector_swigregister = _MAT.MAT_ListOfBisector_swigregister
MAT_ListOfBisector_swigregister(MAT_ListOfBisector)

class Handle_MAT_ListOfBisector(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_ListOfBisector_swiginit(self, _MAT.new_Handle_MAT_ListOfBisector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_ListOfBisector_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_ListOfBisector
Handle_MAT_ListOfBisector.Nullify = new_instancemethod(_MAT.Handle_MAT_ListOfBisector_Nullify, None, Handle_MAT_ListOfBisector)
Handle_MAT_ListOfBisector.IsNull = new_instancemethod(_MAT.Handle_MAT_ListOfBisector_IsNull, None, Handle_MAT_ListOfBisector)
Handle_MAT_ListOfBisector._get_reference = new_instancemethod(_MAT.Handle_MAT_ListOfBisector__get_reference, None, Handle_MAT_ListOfBisector)
Handle_MAT_ListOfBisector_swigregister = _MAT.Handle_MAT_ListOfBisector_swigregister
Handle_MAT_ListOfBisector_swigregister(Handle_MAT_ListOfBisector)

def Handle_MAT_ListOfBisector_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_ListOfBisector const":
    return _MAT.Handle_MAT_ListOfBisector_DownCast(AnObject)
Handle_MAT_ListOfBisector_DownCast = _MAT.Handle_MAT_ListOfBisector_DownCast

class MAT_ListOfEdge(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _MAT.MAT_ListOfEdge_swiginit(self, _MAT.new_MAT_ListOfEdge(*args))

    def First(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_First(self, *args)


    def Last(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Last(self, *args)


    def Init(self, *args) -> "void":
        """
        :param aniten:
        :type aniten: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Init(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Next(self, *args)


    def Previous(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Previous(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _MAT.MAT_ListOfEdge_More(self, *args)


    def Current(self, *args) -> "void":
        """
        :rtype: Handle_MAT_Edge

        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Current(self, *args)


    def FirstItem(self, *args) -> "Handle_MAT_Edge":
        """
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_ListOfEdge_FirstItem(self, *args)


    def LastItem(self, *args) -> "Handle_MAT_Edge":
        """
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_ListOfEdge_LastItem(self, *args)


    def PreviousItem(self, *args) -> "Handle_MAT_Edge":
        """
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_ListOfEdge_PreviousItem(self, *args)


    def NextItem(self, *args) -> "Handle_MAT_Edge":
        """
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_ListOfEdge_NextItem(self, *args)


    def Number(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _MAT.MAT_ListOfEdge_Number(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _MAT.MAT_ListOfEdge_Index(self, *args)


    def Brackets(self, *args) -> "Handle_MAT_Edge":
        """
        :param anindex:
        :type anindex: int
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_ListOfEdge_Brackets(self, *args)


    def Unlink(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Unlink(self, *args)


    def LinkBefore(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_LinkBefore(self, *args)


    def LinkAfter(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_LinkAfter(self, *args)


    def FrontAdd(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_FrontAdd(self, *args)


    def BackAdd(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_BackAdd(self, *args)


    def Permute(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Permute(self, *args)


    def Loop(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Loop(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _MAT.MAT_ListOfEdge_IsEmpty(self, *args)


    def Dump(self, *args) -> "void":
        """
        :param ashift:
        :type ashift: int
        :param alevel:
        :type alevel: int
        :rtype: None

        """
        return _MAT.MAT_ListOfEdge_Dump(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_ListOfEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_ListOfEdge
MAT_ListOfEdge.First = new_instancemethod(_MAT.MAT_ListOfEdge_First, None, MAT_ListOfEdge)
MAT_ListOfEdge.Last = new_instancemethod(_MAT.MAT_ListOfEdge_Last, None, MAT_ListOfEdge)
MAT_ListOfEdge.Init = new_instancemethod(_MAT.MAT_ListOfEdge_Init, None, MAT_ListOfEdge)
MAT_ListOfEdge.Next = new_instancemethod(_MAT.MAT_ListOfEdge_Next, None, MAT_ListOfEdge)
MAT_ListOfEdge.Previous = new_instancemethod(_MAT.MAT_ListOfEdge_Previous, None, MAT_ListOfEdge)
MAT_ListOfEdge.More = new_instancemethod(_MAT.MAT_ListOfEdge_More, None, MAT_ListOfEdge)
MAT_ListOfEdge.Current = new_instancemethod(_MAT.MAT_ListOfEdge_Current, None, MAT_ListOfEdge)
MAT_ListOfEdge.FirstItem = new_instancemethod(_MAT.MAT_ListOfEdge_FirstItem, None, MAT_ListOfEdge)
MAT_ListOfEdge.LastItem = new_instancemethod(_MAT.MAT_ListOfEdge_LastItem, None, MAT_ListOfEdge)
MAT_ListOfEdge.PreviousItem = new_instancemethod(_MAT.MAT_ListOfEdge_PreviousItem, None, MAT_ListOfEdge)
MAT_ListOfEdge.NextItem = new_instancemethod(_MAT.MAT_ListOfEdge_NextItem, None, MAT_ListOfEdge)
MAT_ListOfEdge.Number = new_instancemethod(_MAT.MAT_ListOfEdge_Number, None, MAT_ListOfEdge)
MAT_ListOfEdge.Index = new_instancemethod(_MAT.MAT_ListOfEdge_Index, None, MAT_ListOfEdge)
MAT_ListOfEdge.Brackets = new_instancemethod(_MAT.MAT_ListOfEdge_Brackets, None, MAT_ListOfEdge)
MAT_ListOfEdge.Unlink = new_instancemethod(_MAT.MAT_ListOfEdge_Unlink, None, MAT_ListOfEdge)
MAT_ListOfEdge.LinkBefore = new_instancemethod(_MAT.MAT_ListOfEdge_LinkBefore, None, MAT_ListOfEdge)
MAT_ListOfEdge.LinkAfter = new_instancemethod(_MAT.MAT_ListOfEdge_LinkAfter, None, MAT_ListOfEdge)
MAT_ListOfEdge.FrontAdd = new_instancemethod(_MAT.MAT_ListOfEdge_FrontAdd, None, MAT_ListOfEdge)
MAT_ListOfEdge.BackAdd = new_instancemethod(_MAT.MAT_ListOfEdge_BackAdd, None, MAT_ListOfEdge)
MAT_ListOfEdge.Permute = new_instancemethod(_MAT.MAT_ListOfEdge_Permute, None, MAT_ListOfEdge)
MAT_ListOfEdge.Loop = new_instancemethod(_MAT.MAT_ListOfEdge_Loop, None, MAT_ListOfEdge)
MAT_ListOfEdge.IsEmpty = new_instancemethod(_MAT.MAT_ListOfEdge_IsEmpty, None, MAT_ListOfEdge)
MAT_ListOfEdge.Dump = new_instancemethod(_MAT.MAT_ListOfEdge_Dump, None, MAT_ListOfEdge)
MAT_ListOfEdge_swigregister = _MAT.MAT_ListOfEdge_swigregister
MAT_ListOfEdge_swigregister(MAT_ListOfEdge)

class Handle_MAT_ListOfEdge(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_ListOfEdge_swiginit(self, _MAT.new_Handle_MAT_ListOfEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_ListOfEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_ListOfEdge
Handle_MAT_ListOfEdge.Nullify = new_instancemethod(_MAT.Handle_MAT_ListOfEdge_Nullify, None, Handle_MAT_ListOfEdge)
Handle_MAT_ListOfEdge.IsNull = new_instancemethod(_MAT.Handle_MAT_ListOfEdge_IsNull, None, Handle_MAT_ListOfEdge)
Handle_MAT_ListOfEdge._get_reference = new_instancemethod(_MAT.Handle_MAT_ListOfEdge__get_reference, None, Handle_MAT_ListOfEdge)
Handle_MAT_ListOfEdge_swigregister = _MAT.Handle_MAT_ListOfEdge_swigregister
Handle_MAT_ListOfEdge_swigregister(Handle_MAT_ListOfEdge)

def Handle_MAT_ListOfEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_ListOfEdge const":
    return _MAT.Handle_MAT_ListOfEdge_DownCast(AnObject)
Handle_MAT_ListOfEdge_DownCast = _MAT.Handle_MAT_ListOfEdge_DownCast

class MAT_Node(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param GeomIndex:
        :type GeomIndex: int
        :param LinkedArc:
        :type LinkedArc: Handle_MAT_Arc &
        :param Distance:
        :type Distance: float
        :rtype: None

        """
        _MAT.MAT_Node_swiginit(self, _MAT.new_MAT_Node(*args))

    def GeomIndex(self, *args) -> "Standard_Integer":
        """
        * Returns the index associated of the geometric representation of <self>.

        :rtype: int

        """
        return _MAT.MAT_Node_GeomIndex(self, *args)


    def Index(self, *args) -> "Standard_Integer":
        """
        * Returns the index associated of the node

        :rtype: int

        """
        return _MAT.MAT_Node_Index(self, *args)


    def LinkedArcs(self, *args) -> "void":
        """
        * Returns in <S> the Arcs linked to <self>.

        :param S:
        :type S: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_Node_LinkedArcs(self, *args)


    def NearElts(self, *args) -> "void":
        """
        * Returns in <S> the BasicElts equidistant to <self>.

        :param S:
        :type S: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_Node_NearElts(self, *args)


    def Distance(self, *args) -> "Standard_Real":
        """
        :rtype: float

        """
        return _MAT.MAT_Node_Distance(self, *args)


    def PendingNode(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> is a pending Node. (ie : the number of Arc Linked = 1)

        :rtype: bool

        """
        return _MAT.MAT_Node_PendingNode(self, *args)


    def OnBasicElt(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <self> belongs to the figure.

        :rtype: bool

        """
        return _MAT.MAT_Node_OnBasicElt(self, *args)


    def Infinite(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the distance of <self> is Infinite

        :rtype: bool

        """
        return _MAT.MAT_Node_Infinite(self, *args)


    def SetIndex(self, *args) -> "void":
        """
        * Set the index associated of the node

        :param anIndex:
        :type anIndex: int
        :rtype: None

        """
        return _MAT.MAT_Node_SetIndex(self, *args)


    def SetLinkedArc(self, *args) -> "void":
        """
        :param anArc:
        :type anArc: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_Node_SetLinkedArc(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Node(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Node
MAT_Node.GeomIndex = new_instancemethod(_MAT.MAT_Node_GeomIndex, None, MAT_Node)
MAT_Node.Index = new_instancemethod(_MAT.MAT_Node_Index, None, MAT_Node)
MAT_Node.LinkedArcs = new_instancemethod(_MAT.MAT_Node_LinkedArcs, None, MAT_Node)
MAT_Node.NearElts = new_instancemethod(_MAT.MAT_Node_NearElts, None, MAT_Node)
MAT_Node.Distance = new_instancemethod(_MAT.MAT_Node_Distance, None, MAT_Node)
MAT_Node.PendingNode = new_instancemethod(_MAT.MAT_Node_PendingNode, None, MAT_Node)
MAT_Node.OnBasicElt = new_instancemethod(_MAT.MAT_Node_OnBasicElt, None, MAT_Node)
MAT_Node.Infinite = new_instancemethod(_MAT.MAT_Node_Infinite, None, MAT_Node)
MAT_Node.SetIndex = new_instancemethod(_MAT.MAT_Node_SetIndex, None, MAT_Node)
MAT_Node.SetLinkedArc = new_instancemethod(_MAT.MAT_Node_SetLinkedArc, None, MAT_Node)
MAT_Node_swigregister = _MAT.MAT_Node_swigregister
MAT_Node_swigregister(MAT_Node)

class Handle_MAT_Node(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Node_swiginit(self, _MAT.new_Handle_MAT_Node(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Node_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Node
Handle_MAT_Node.Nullify = new_instancemethod(_MAT.Handle_MAT_Node_Nullify, None, Handle_MAT_Node)
Handle_MAT_Node.IsNull = new_instancemethod(_MAT.Handle_MAT_Node_IsNull, None, Handle_MAT_Node)
Handle_MAT_Node._get_reference = new_instancemethod(_MAT.Handle_MAT_Node__get_reference, None, Handle_MAT_Node)
Handle_MAT_Node_swigregister = _MAT.Handle_MAT_Node_swigregister
Handle_MAT_Node_swigregister(Handle_MAT_Node)

def Handle_MAT_Node_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Node const":
    return _MAT.Handle_MAT_Node_DownCast(AnObject)
Handle_MAT_Node_DownCast = _MAT.Handle_MAT_Node_DownCast

class MAT_SequenceNodeOfSequenceOfArc(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_MAT_Arc &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MAT.MAT_SequenceNodeOfSequenceOfArc_swiginit(self, _MAT.new_MAT_SequenceNodeOfSequenceOfArc(*args))

    def Value(self, *args) -> "Handle_MAT_Arc":
        """
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_SequenceNodeOfSequenceOfArc_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_SequenceNodeOfSequenceOfArc(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_SequenceNodeOfSequenceOfArc
MAT_SequenceNodeOfSequenceOfArc.Value = new_instancemethod(_MAT.MAT_SequenceNodeOfSequenceOfArc_Value, None, MAT_SequenceNodeOfSequenceOfArc)
MAT_SequenceNodeOfSequenceOfArc_swigregister = _MAT.MAT_SequenceNodeOfSequenceOfArc_swigregister
MAT_SequenceNodeOfSequenceOfArc_swigregister(MAT_SequenceNodeOfSequenceOfArc)

class Handle_MAT_SequenceNodeOfSequenceOfArc(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_swiginit(self, _MAT.new_Handle_MAT_SequenceNodeOfSequenceOfArc(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_SequenceNodeOfSequenceOfArc
Handle_MAT_SequenceNodeOfSequenceOfArc.Nullify = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_Nullify, None, Handle_MAT_SequenceNodeOfSequenceOfArc)
Handle_MAT_SequenceNodeOfSequenceOfArc.IsNull = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_IsNull, None, Handle_MAT_SequenceNodeOfSequenceOfArc)
Handle_MAT_SequenceNodeOfSequenceOfArc._get_reference = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfArc__get_reference, None, Handle_MAT_SequenceNodeOfSequenceOfArc)
Handle_MAT_SequenceNodeOfSequenceOfArc_swigregister = _MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_swigregister
Handle_MAT_SequenceNodeOfSequenceOfArc_swigregister(Handle_MAT_SequenceNodeOfSequenceOfArc)

def Handle_MAT_SequenceNodeOfSequenceOfArc_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_SequenceNodeOfSequenceOfArc const":
    return _MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_DownCast(AnObject)
Handle_MAT_SequenceNodeOfSequenceOfArc_DownCast = _MAT.Handle_MAT_SequenceNodeOfSequenceOfArc_DownCast

class MAT_SequenceNodeOfSequenceOfBasicElt(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_MAT_BasicElt &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _MAT.MAT_SequenceNodeOfSequenceOfBasicElt_swiginit(self, _MAT.new_MAT_SequenceNodeOfSequenceOfBasicElt(*args))

    def Value(self, *args) -> "Handle_MAT_BasicElt":
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_SequenceNodeOfSequenceOfBasicElt_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_SequenceNodeOfSequenceOfBasicElt(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_SequenceNodeOfSequenceOfBasicElt
MAT_SequenceNodeOfSequenceOfBasicElt.Value = new_instancemethod(_MAT.MAT_SequenceNodeOfSequenceOfBasicElt_Value, None, MAT_SequenceNodeOfSequenceOfBasicElt)
MAT_SequenceNodeOfSequenceOfBasicElt_swigregister = _MAT.MAT_SequenceNodeOfSequenceOfBasicElt_swigregister
MAT_SequenceNodeOfSequenceOfBasicElt_swigregister(MAT_SequenceNodeOfSequenceOfBasicElt)

class Handle_MAT_SequenceNodeOfSequenceOfBasicElt(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_swiginit(self, _MAT.new_Handle_MAT_SequenceNodeOfSequenceOfBasicElt(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_SequenceNodeOfSequenceOfBasicElt
Handle_MAT_SequenceNodeOfSequenceOfBasicElt.Nullify = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_Nullify, None, Handle_MAT_SequenceNodeOfSequenceOfBasicElt)
Handle_MAT_SequenceNodeOfSequenceOfBasicElt.IsNull = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_IsNull, None, Handle_MAT_SequenceNodeOfSequenceOfBasicElt)
Handle_MAT_SequenceNodeOfSequenceOfBasicElt._get_reference = new_instancemethod(_MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt__get_reference, None, Handle_MAT_SequenceNodeOfSequenceOfBasicElt)
Handle_MAT_SequenceNodeOfSequenceOfBasicElt_swigregister = _MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_swigregister
Handle_MAT_SequenceNodeOfSequenceOfBasicElt_swigregister(Handle_MAT_SequenceNodeOfSequenceOfBasicElt)

def Handle_MAT_SequenceNodeOfSequenceOfBasicElt_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_SequenceNodeOfSequenceOfBasicElt const":
    return _MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_DownCast(AnObject)
Handle_MAT_SequenceNodeOfSequenceOfBasicElt_DownCast = _MAT.Handle_MAT_SequenceNodeOfSequenceOfBasicElt_DownCast

class MAT_SequenceOfArc(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: MAT_SequenceOfArc &
        :rtype: None

        """
        _MAT.MAT_SequenceOfArc_swiginit(self, _MAT.new_MAT_SequenceOfArc(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_Clear(self, *args)


    def Assign(self, *args) -> "MAT_SequenceOfArc const &":
        """
        :param Other:
        :type Other: MAT_SequenceOfArc &
        :rtype: MAT_SequenceOfArc

        """
        return _MAT.MAT_SequenceOfArc_Assign(self, *args)


    def Set(self, *args) -> "MAT_SequenceOfArc const &":
        """
        :param Other:
        :type Other: MAT_SequenceOfArc &
        :rtype: MAT_SequenceOfArc

        """
        return _MAT.MAT_SequenceOfArc_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_MAT_Arc &
        :rtype: None

        :param S:
        :type S: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_MAT_Arc &
        :rtype: None

        :param S:
        :type S: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_Arc &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_Arc &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_MAT_Arc":
        """
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_SequenceOfArc_First(self, *args)


    def Last(self, *args) -> "Handle_MAT_Arc":
        """
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_SequenceOfArc_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MAT_SequenceOfArc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_Split(self, *args)


    def Value(self, *args) -> "Handle_MAT_Arc":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_SequenceOfArc_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_MAT_Arc &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_MAT_Arc":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_SequenceOfArc_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MAT.MAT_SequenceOfArc_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_SequenceOfArc
MAT_SequenceOfArc.Clear = new_instancemethod(_MAT.MAT_SequenceOfArc_Clear, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Assign = new_instancemethod(_MAT.MAT_SequenceOfArc_Assign, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Set = new_instancemethod(_MAT.MAT_SequenceOfArc_Set, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Append = new_instancemethod(_MAT.MAT_SequenceOfArc_Append, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Prepend = new_instancemethod(_MAT.MAT_SequenceOfArc_Prepend, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.InsertBefore = new_instancemethod(_MAT.MAT_SequenceOfArc_InsertBefore, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.InsertAfter = new_instancemethod(_MAT.MAT_SequenceOfArc_InsertAfter, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.First = new_instancemethod(_MAT.MAT_SequenceOfArc_First, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Last = new_instancemethod(_MAT.MAT_SequenceOfArc_Last, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Split = new_instancemethod(_MAT.MAT_SequenceOfArc_Split, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Value = new_instancemethod(_MAT.MAT_SequenceOfArc_Value, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.SetValue = new_instancemethod(_MAT.MAT_SequenceOfArc_SetValue, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.ChangeValue = new_instancemethod(_MAT.MAT_SequenceOfArc_ChangeValue, None, MAT_SequenceOfArc)
MAT_SequenceOfArc.Remove = new_instancemethod(_MAT.MAT_SequenceOfArc_Remove, None, MAT_SequenceOfArc)
MAT_SequenceOfArc_swigregister = _MAT.MAT_SequenceOfArc_swigregister
MAT_SequenceOfArc_swigregister(MAT_SequenceOfArc)

class MAT_SequenceOfBasicElt(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        _MAT.MAT_SequenceOfBasicElt_swiginit(self, _MAT.new_MAT_SequenceOfBasicElt(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_Clear(self, *args)


    def Assign(self, *args) -> "MAT_SequenceOfBasicElt const &":
        """
        :param Other:
        :type Other: MAT_SequenceOfBasicElt &
        :rtype: MAT_SequenceOfBasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_Assign(self, *args)


    def Set(self, *args) -> "MAT_SequenceOfBasicElt const &":
        """
        :param Other:
        :type Other: MAT_SequenceOfBasicElt &
        :rtype: MAT_SequenceOfBasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param S:
        :type S: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param S:
        :type S: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_MAT_BasicElt &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_MAT_BasicElt":
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_First(self, *args)


    def Last(self, *args) -> "Handle_MAT_BasicElt":
        """
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: MAT_SequenceOfBasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_Split(self, *args)


    def Value(self, *args) -> "Handle_MAT_BasicElt":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_MAT_BasicElt &
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_MAT_BasicElt":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_MAT_BasicElt

        """
        return _MAT.MAT_SequenceOfBasicElt_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _MAT.MAT_SequenceOfBasicElt_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_SequenceOfBasicElt
MAT_SequenceOfBasicElt.Clear = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Clear, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Assign = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Assign, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Set = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Set, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Append = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Append, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Prepend = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Prepend, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.InsertBefore = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_InsertBefore, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.InsertAfter = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_InsertAfter, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.First = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_First, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Last = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Last, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Split = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Split, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Value = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Value, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.SetValue = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_SetValue, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.ChangeValue = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_ChangeValue, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt.Remove = new_instancemethod(_MAT.MAT_SequenceOfBasicElt_Remove, None, MAT_SequenceOfBasicElt)
MAT_SequenceOfBasicElt_swigregister = _MAT.MAT_SequenceOfBasicElt_swigregister
MAT_SequenceOfBasicElt_swigregister(MAT_SequenceOfBasicElt)

class MAT_TListNodeOfListOfBisector(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        _MAT.MAT_TListNodeOfListOfBisector_swiginit(self, _MAT.new_MAT_TListNodeOfListOfBisector(*args))

    def GetItem(self, *args) -> "Handle_MAT_Bisector":
        """
        :rtype: Handle_MAT_Bisector

        """
        return _MAT.MAT_TListNodeOfListOfBisector_GetItem(self, *args)


    def SetItem(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Bisector &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfBisector_SetItem(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: Handle_MAT_TListNodeOfListOfBisector

        :param atlistnode:
        :type atlistnode: Handle_MAT_TListNodeOfListOfBisector &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfBisector_Next(self, *args)


    def Previous(self, *args) -> "void":
        """
        :rtype: Handle_MAT_TListNodeOfListOfBisector

        :param atlistnode:
        :type atlistnode: Handle_MAT_TListNodeOfListOfBisector &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfBisector_Previous(self, *args)


    def Dummy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfBisector_Dummy(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_TListNodeOfListOfBisector(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_TListNodeOfListOfBisector
MAT_TListNodeOfListOfBisector.GetItem = new_instancemethod(_MAT.MAT_TListNodeOfListOfBisector_GetItem, None, MAT_TListNodeOfListOfBisector)
MAT_TListNodeOfListOfBisector.SetItem = new_instancemethod(_MAT.MAT_TListNodeOfListOfBisector_SetItem, None, MAT_TListNodeOfListOfBisector)
MAT_TListNodeOfListOfBisector.Next = new_instancemethod(_MAT.MAT_TListNodeOfListOfBisector_Next, None, MAT_TListNodeOfListOfBisector)
MAT_TListNodeOfListOfBisector.Previous = new_instancemethod(_MAT.MAT_TListNodeOfListOfBisector_Previous, None, MAT_TListNodeOfListOfBisector)
MAT_TListNodeOfListOfBisector.Dummy = new_instancemethod(_MAT.MAT_TListNodeOfListOfBisector_Dummy, None, MAT_TListNodeOfListOfBisector)
MAT_TListNodeOfListOfBisector_swigregister = _MAT.MAT_TListNodeOfListOfBisector_swigregister
MAT_TListNodeOfListOfBisector_swigregister(MAT_TListNodeOfListOfBisector)

class Handle_MAT_TListNodeOfListOfBisector(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_TListNodeOfListOfBisector_swiginit(self, _MAT.new_Handle_MAT_TListNodeOfListOfBisector(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_TListNodeOfListOfBisector_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_TListNodeOfListOfBisector
Handle_MAT_TListNodeOfListOfBisector.Nullify = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfBisector_Nullify, None, Handle_MAT_TListNodeOfListOfBisector)
Handle_MAT_TListNodeOfListOfBisector.IsNull = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfBisector_IsNull, None, Handle_MAT_TListNodeOfListOfBisector)
Handle_MAT_TListNodeOfListOfBisector._get_reference = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfBisector__get_reference, None, Handle_MAT_TListNodeOfListOfBisector)
Handle_MAT_TListNodeOfListOfBisector_swigregister = _MAT.Handle_MAT_TListNodeOfListOfBisector_swigregister
Handle_MAT_TListNodeOfListOfBisector_swigregister(Handle_MAT_TListNodeOfListOfBisector)

def Handle_MAT_TListNodeOfListOfBisector_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_TListNodeOfListOfBisector const":
    return _MAT.Handle_MAT_TListNodeOfListOfBisector_DownCast(AnObject)
Handle_MAT_TListNodeOfListOfBisector_DownCast = _MAT.Handle_MAT_TListNodeOfListOfBisector_DownCast

class MAT_TListNodeOfListOfEdge(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        _MAT.MAT_TListNodeOfListOfEdge_swiginit(self, _MAT.new_MAT_TListNodeOfListOfEdge(*args))

    def GetItem(self, *args) -> "Handle_MAT_Edge":
        """
        :rtype: Handle_MAT_Edge

        """
        return _MAT.MAT_TListNodeOfListOfEdge_GetItem(self, *args)


    def SetItem(self, *args) -> "void":
        """
        :param anitem:
        :type anitem: Handle_MAT_Edge &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfEdge_SetItem(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: Handle_MAT_TListNodeOfListOfEdge

        :param atlistnode:
        :type atlistnode: Handle_MAT_TListNodeOfListOfEdge &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfEdge_Next(self, *args)


    def Previous(self, *args) -> "void":
        """
        :rtype: Handle_MAT_TListNodeOfListOfEdge

        :param atlistnode:
        :type atlistnode: Handle_MAT_TListNodeOfListOfEdge &
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfEdge_Previous(self, *args)


    def Dummy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _MAT.MAT_TListNodeOfListOfEdge_Dummy(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_TListNodeOfListOfEdge(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_TListNodeOfListOfEdge
MAT_TListNodeOfListOfEdge.GetItem = new_instancemethod(_MAT.MAT_TListNodeOfListOfEdge_GetItem, None, MAT_TListNodeOfListOfEdge)
MAT_TListNodeOfListOfEdge.SetItem = new_instancemethod(_MAT.MAT_TListNodeOfListOfEdge_SetItem, None, MAT_TListNodeOfListOfEdge)
MAT_TListNodeOfListOfEdge.Next = new_instancemethod(_MAT.MAT_TListNodeOfListOfEdge_Next, None, MAT_TListNodeOfListOfEdge)
MAT_TListNodeOfListOfEdge.Previous = new_instancemethod(_MAT.MAT_TListNodeOfListOfEdge_Previous, None, MAT_TListNodeOfListOfEdge)
MAT_TListNodeOfListOfEdge.Dummy = new_instancemethod(_MAT.MAT_TListNodeOfListOfEdge_Dummy, None, MAT_TListNodeOfListOfEdge)
MAT_TListNodeOfListOfEdge_swigregister = _MAT.MAT_TListNodeOfListOfEdge_swigregister
MAT_TListNodeOfListOfEdge_swigregister(MAT_TListNodeOfListOfEdge)

class Handle_MAT_TListNodeOfListOfEdge(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_TListNodeOfListOfEdge_swiginit(self, _MAT.new_Handle_MAT_TListNodeOfListOfEdge(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_TListNodeOfListOfEdge_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_TListNodeOfListOfEdge
Handle_MAT_TListNodeOfListOfEdge.Nullify = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfEdge_Nullify, None, Handle_MAT_TListNodeOfListOfEdge)
Handle_MAT_TListNodeOfListOfEdge.IsNull = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfEdge_IsNull, None, Handle_MAT_TListNodeOfListOfEdge)
Handle_MAT_TListNodeOfListOfEdge._get_reference = new_instancemethod(_MAT.Handle_MAT_TListNodeOfListOfEdge__get_reference, None, Handle_MAT_TListNodeOfListOfEdge)
Handle_MAT_TListNodeOfListOfEdge_swigregister = _MAT.Handle_MAT_TListNodeOfListOfEdge_swigregister
Handle_MAT_TListNodeOfListOfEdge_swigregister(Handle_MAT_TListNodeOfListOfEdge)

def Handle_MAT_TListNodeOfListOfEdge_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_TListNodeOfListOfEdge const":
    return _MAT.Handle_MAT_TListNodeOfListOfEdge_DownCast(AnObject)
Handle_MAT_TListNodeOfListOfEdge_DownCast = _MAT.Handle_MAT_TListNodeOfListOfEdge_DownCast

class MAT_Zone(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        * Compute the frontier of the Zone of proximity.

        :param aBasicElt:
        :type aBasicElt: Handle_MAT_BasicElt &
        :rtype: None

        """
        _MAT.MAT_Zone_swiginit(self, _MAT.new_MAT_Zone(*args))

    def Perform(self, *args) -> "void":
        """
        * Compute the frontier of the Zone of proximity.

        :param aBasicElt:
        :type aBasicElt: Handle_MAT_BasicElt &
        :rtype: None

        """
        return _MAT.MAT_Zone_Perform(self, *args)


    def NumberOfArcs(self, *args) -> "Standard_Integer":
        """
        * Return the number Of Arcs On the frontier of <self>.

        :rtype: int

        """
        return _MAT.MAT_Zone_NumberOfArcs(self, *args)


    def ArcOnFrontier(self, *args) -> "Handle_MAT_Arc":
        """
        * Return the Arc number <Index> on the frontier. of <self>.

        :param Index:
        :type Index: int
        :rtype: Handle_MAT_Arc

        """
        return _MAT.MAT_Zone_ArcOnFrontier(self, *args)


    def NoEmptyZone(self, *args) -> "Standard_Boolean":
        """
        * Return True if <self> is not empty .

        :rtype: bool

        """
        return _MAT.MAT_Zone_NoEmptyZone(self, *args)


    def Limited(self, *args) -> "Standard_Boolean":
        """
        * Return True if <self> is Limited.

        :rtype: bool

        """
        return _MAT.MAT_Zone_Limited(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_MAT_Zone(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _MAT.delete_MAT_Zone
MAT_Zone.Perform = new_instancemethod(_MAT.MAT_Zone_Perform, None, MAT_Zone)
MAT_Zone.NumberOfArcs = new_instancemethod(_MAT.MAT_Zone_NumberOfArcs, None, MAT_Zone)
MAT_Zone.ArcOnFrontier = new_instancemethod(_MAT.MAT_Zone_ArcOnFrontier, None, MAT_Zone)
MAT_Zone.NoEmptyZone = new_instancemethod(_MAT.MAT_Zone_NoEmptyZone, None, MAT_Zone)
MAT_Zone.Limited = new_instancemethod(_MAT.MAT_Zone_Limited, None, MAT_Zone)
MAT_Zone_swigregister = _MAT.MAT_Zone_swigregister
MAT_Zone_swigregister(MAT_Zone)

class Handle_MAT_Zone(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _MAT.Handle_MAT_Zone_swiginit(self, _MAT.new_Handle_MAT_Zone(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_MAT.Handle_MAT_Zone_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _MAT.delete_Handle_MAT_Zone
Handle_MAT_Zone.Nullify = new_instancemethod(_MAT.Handle_MAT_Zone_Nullify, None, Handle_MAT_Zone)
Handle_MAT_Zone.IsNull = new_instancemethod(_MAT.Handle_MAT_Zone_IsNull, None, Handle_MAT_Zone)
Handle_MAT_Zone._get_reference = new_instancemethod(_MAT.Handle_MAT_Zone__get_reference, None, Handle_MAT_Zone)
Handle_MAT_Zone_swigregister = _MAT.Handle_MAT_Zone_swigregister
Handle_MAT_Zone_swigregister(Handle_MAT_Zone)

def Handle_MAT_Zone_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_MAT_Zone const":
    return _MAT.Handle_MAT_Zone_DownCast(AnObject)
Handle_MAT_Zone_DownCast = _MAT.Handle_MAT_Zone_DownCast



