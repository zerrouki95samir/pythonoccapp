# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BRepOffset.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BRepOffset')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BRepOffset')
    _BRepOffset = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BRepOffset', [dirname(__file__)])
        except ImportError:
            import _BRepOffset
            return _BRepOffset
        try:
            _mod = imp.load_module('_BRepOffset', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BRepOffset = swig_import_helper()
    del swig_import_helper
else:
    import _BRepOffset
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepOffset.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BRepOffset.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BRepOffset.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BRepOffset.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BRepOffset.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BRepOffset.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BRepOffset.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BRepOffset.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BRepOffset.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BRepOffset.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BRepOffset.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BRepOffset.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BRepOffset.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BRepOffset.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BRepOffset.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BRepOffset.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BRepOffset.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BRepOffset.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Geom
import OCC.MMgt
import OCC.Standard
import OCC.gp
import OCC.TCollection
import OCC.GeomAbs
import OCC.TColgp
import OCC.TColStd
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.TopTools
import OCC.Message
import OCC.BRepAlgo
import OCC.BRepBuilderAPI
import OCC.BRepTools
import OCC.Bnd
import OCC.BRep
import OCC.Poly
import OCC.NCollection
import OCC.TShort
import OCC.Geom2d
import OCC.TopOpeBRepBuild
import OCC.TopOpeBRepTool
import OCC.GeomAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.math
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.BRepAdaptor
import OCC.Geom2dAdaptor
import OCC.IntCurvesFace
import OCC.Extrema
import OCC.TopOpeBRepDS

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

BRepOffset_NoError = _BRepOffset.BRepOffset_NoError
BRepOffset_OffsetSurfaceFailed = _BRepOffset.BRepOffset_OffsetSurfaceFailed
BRepOffset_UnCorrectClosingFace = _BRepOffset.BRepOffset_UnCorrectClosingFace
BRepOffset_ExtentFaceFailed = _BRepOffset.BRepOffset_ExtentFaceFailed
BRepOffset_RadiusEqualOffset = _BRepOffset.BRepOffset_RadiusEqualOffset
BRepOffset_UnknownError = _BRepOffset.BRepOffset_UnknownError
BRepOffset_Skin = _BRepOffset.BRepOffset_Skin
BRepOffset_Pipe = _BRepOffset.BRepOffset_Pipe
BRepOffset_RectoVerso = _BRepOffset.BRepOffset_RectoVerso
BRepOffset_Good = _BRepOffset.BRepOffset_Good
BRepOffset_Reversed = _BRepOffset.BRepOffset_Reversed
BRepOffset_Degenerated = _BRepOffset.BRepOffset_Degenerated
BRepOffset_Unknown = _BRepOffset.BRepOffset_Unknown
BRepOffset_Concave = _BRepOffset.BRepOffset_Concave
BRepOffset_Convex = _BRepOffset.BRepOffset_Convex
BRepOffset_Tangent = _BRepOffset.BRepOffset_Tangent
BRepOffset_FreeBoundary = _BRepOffset.BRepOffset_FreeBoundary
BRepOffset_Other = _BRepOffset.BRepOffset_Other
class brepoffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Surface(*args) -> "Handle_Geom_Surface":
        """
        * returns the Offset surface computed from the surface <Surface> at an OffsetDistance <Offset>. //! If possible, this method returns the real type of the surface ( e.g. An Offset of a plane is a plane). //! If no particular case is detected, the returned surface will have the Type Geom_OffsetSurface.

        :param Surface:
        :type Surface: Handle_Geom_Surface &
        :param Offset:
        :type Offset: float
        :param Status:
        :type Status: BRepOffset_Status &
        :rtype: Handle_Geom_Surface

        """
        return _BRepOffset.brepoffset_Surface(*args)

    Surface = staticmethod(Surface)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.brepoffset_swiginit(self, _BRepOffset.new_brepoffset())
    __swig_destroy__ = _BRepOffset.delete_brepoffset
brepoffset_swigregister = _BRepOffset.brepoffset_swigregister
brepoffset_swigregister(brepoffset)

def brepoffset_Surface(*args) -> "Handle_Geom_Surface":
    """
    * returns the Offset surface computed from the surface <Surface> at an OffsetDistance <Offset>. //! If possible, this method returns the real type of the surface ( e.g. An Offset of a plane is a plane). //! If no particular case is detected, the returned surface will have the Type Geom_OffsetSurface.

    :param Surface:
    :type Surface: Handle_Geom_Surface &
    :param Offset:
    :type Offset: float
    :param Status:
    :type Status: BRepOffset_Status &
    :rtype: Handle_Geom_Surface

    """
    return _BRepOffset.brepoffset_Surface(*args)

class BRepOffset_Analyse(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        _BRepOffset.BRepOffset_Analyse_swiginit(self, _BRepOffset.new_BRepOffset_Analyse(*args))

    def Perform(self, *args) -> "void":
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Angle:
        :type Angle: float
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_Perform(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Analyse_IsDone(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_Clear(self, *args)


    def Type(self, *args) -> "BRepOffset_ListOfInterval const &":
        """
        :param E:
        :type E: TopoDS_Edge &
        :rtype: BRepOffset_ListOfInterval

        """
        return _BRepOffset.BRepOffset_Analyse_Type(self, *args)


    def Edges(self, *args) -> "void":
        """
        * Stores in <L> all the edges of Type <T> on the vertex <V>.

        :param V:
        :type V: TopoDS_Vertex &
        :param T:
        :type T: BRepOffset_Type
        :param L:
        :type L: TopTools_ListOfShape &
        :rtype: None

        * Stores in <L> all the edges of Type <T> on the face <F>.

        :param F:
        :type F: TopoDS_Face &
        :param T:
        :type T: BRepOffset_Type
        :param L:
        :type L: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_Edges(self, *args)


    def TangentEdges(self, *args) -> "void":
        """
        * set in <Edges> all the Edges of <Shape> which are tangent to <Edge> at the vertex <Vertex>.

        :param Edge:
        :type Edge: TopoDS_Edge &
        :param Vertex:
        :type Vertex: TopoDS_Vertex &
        :param Edges:
        :type Edges: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_TangentEdges(self, *args)


    def HasAncestor(self, *args) -> "Standard_Boolean":
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Analyse_HasAncestor(self, *args)


    def Ancestors(self, *args) -> "TopTools_ListOfShape const &":
        """
        :param S:
        :type S: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BRepOffset.BRepOffset_Analyse_Ancestors(self, *args)


    def Explode(self, *args) -> "void":
        """
        * Explode in compounds of faces where all the connex edges are of type <Side>

        :param L:
        :type L: TopTools_ListOfShape &
        :param Type:
        :type Type: BRepOffset_Type
        :rtype: None

        * Explode in compounds of faces where all the connex edges are of type <Side1> or <Side2>

        :param L:
        :type L: TopTools_ListOfShape &
        :param Type1:
        :type Type1: BRepOffset_Type
        :param Type2:
        :type Type2: BRepOffset_Type
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_Explode(self, *args)


    def AddFaces(self, *args) -> "void":
        """
        * Add in <CO> the faces of the shell containing <Face> where all the connex edges are of type <Side>.

        :param Face:
        :type Face: TopoDS_Face &
        :param Co:
        :type Co: TopoDS_Compound &
        :param Map:
        :type Map: TopTools_MapOfShape &
        :param Type:
        :type Type: BRepOffset_Type
        :rtype: None

        * Add in <CO> the faces of the shell containing <Face> where all the connex edges are of type <Side1> or <Side2>.

        :param Face:
        :type Face: TopoDS_Face &
        :param Co:
        :type Co: TopoDS_Compound &
        :param Map:
        :type Map: TopTools_MapOfShape &
        :param Type1:
        :type Type1: BRepOffset_Type
        :param Type2:
        :type Type2: BRepOffset_Type
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Analyse_AddFaces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Analyse
BRepOffset_Analyse.Perform = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Perform, None, BRepOffset_Analyse)
BRepOffset_Analyse.IsDone = new_instancemethod(_BRepOffset.BRepOffset_Analyse_IsDone, None, BRepOffset_Analyse)
BRepOffset_Analyse.Clear = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Clear, None, BRepOffset_Analyse)
BRepOffset_Analyse.Type = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Type, None, BRepOffset_Analyse)
BRepOffset_Analyse.Edges = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Edges, None, BRepOffset_Analyse)
BRepOffset_Analyse.TangentEdges = new_instancemethod(_BRepOffset.BRepOffset_Analyse_TangentEdges, None, BRepOffset_Analyse)
BRepOffset_Analyse.HasAncestor = new_instancemethod(_BRepOffset.BRepOffset_Analyse_HasAncestor, None, BRepOffset_Analyse)
BRepOffset_Analyse.Ancestors = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Ancestors, None, BRepOffset_Analyse)
BRepOffset_Analyse.Explode = new_instancemethod(_BRepOffset.BRepOffset_Analyse_Explode, None, BRepOffset_Analyse)
BRepOffset_Analyse.AddFaces = new_instancemethod(_BRepOffset.BRepOffset_Analyse_AddFaces, None, BRepOffset_Analyse)
BRepOffset_Analyse_swigregister = _BRepOffset.BRepOffset_Analyse_swigregister
BRepOffset_Analyse_swigregister(BRepOffset_Analyse)

class BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeListOfInterval &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Initialize(self, *args)


    def Key(self, *args) -> "TopoDS_Shape const":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Key(self, *args)


    def Value(self, *args) -> "BRepOffset_ListOfInterval const &":
        """
        :rtype: BRepOffset_ListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval
BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval.Initialize = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Initialize, None, BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval)
BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Key, None, BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval)
BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_Value, None, BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval)
BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_swigregister = _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_swigregister
BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval_swigregister(BRepOffset_DataMapIteratorOfDataMapOfShapeListOfInterval)

class BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeMapOfShape &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_swiginit(self, _BRepOffset.new_BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeMapOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Initialize(self, *args)


    def Key(self, *args) -> "TopoDS_Shape const":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Key(self, *args)


    def Value(self, *args) -> "TopTools_MapOfShape const &":
        """
        :rtype: TopTools_MapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape
BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape.Initialize = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Initialize, None, BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape)
BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Key, None, BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape)
BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_Value, None, BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape)
BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_swigregister = _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_swigregister
BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape_swigregister(BRepOffset_DataMapIteratorOfDataMapOfShapeMapOfShape)

class BRepOffset_DataMapIteratorOfDataMapOfShapeOffset(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeOffset &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_swiginit(self, _BRepOffset.new_BRepOffset_DataMapIteratorOfDataMapOfShapeOffset(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: BRepOffset_DataMapOfShapeOffset &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Initialize(self, *args)


    def Key(self, *args) -> "TopoDS_Shape const":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Key(self, *args)


    def Value(self, *args) -> "BRepOffset_Offset const &":
        """
        :rtype: BRepOffset_Offset

        """
        return _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapIteratorOfDataMapOfShapeOffset
BRepOffset_DataMapIteratorOfDataMapOfShapeOffset.Initialize = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Initialize, None, BRepOffset_DataMapIteratorOfDataMapOfShapeOffset)
BRepOffset_DataMapIteratorOfDataMapOfShapeOffset.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Key, None, BRepOffset_DataMapIteratorOfDataMapOfShapeOffset)
BRepOffset_DataMapIteratorOfDataMapOfShapeOffset.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_Value, None, BRepOffset_DataMapIteratorOfDataMapOfShapeOffset)
BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_swigregister = _BRepOffset.BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_swigregister
BRepOffset_DataMapIteratorOfDataMapOfShapeOffset_swigregister(BRepOffset_DataMapIteratorOfDataMapOfShapeOffset)

class BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepOffset_ListOfInterval &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval(*args))

    def Key(self, *args) -> "TopoDS_Shape":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_Key(self, *args)


    def Value(self, *args) -> "BRepOffset_ListOfInterval &":
        """
        :rtype: BRepOffset_ListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval
BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_Key, None, BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)
BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_Value, None, BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)
BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister = _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister
BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister(BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)

class Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swiginit(self, _BRepOffset.new_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _BRepOffset.delete_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval.Nullify = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_Nullify, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval.IsNull = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_IsNull, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval._get_reference = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval__get_reference, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_swigregister(Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval)

def Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval const":
    return _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_DownCast(AnObject)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_DownCast = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeListOfInterval_DownCast

class BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_MapOfShape &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swiginit(self, _BRepOffset.new_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape(*args))

    def Key(self, *args) -> "TopoDS_Shape":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_Key(self, *args)


    def Value(self, *args) -> "TopTools_MapOfShape &":
        """
        :rtype: TopTools_MapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape
BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_Key, None, BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)
BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_Value, None, BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)
BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister = _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister
BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister(BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)

class Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swiginit(self, _BRepOffset.new_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _BRepOffset.delete_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape.Nullify = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_Nullify, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape.IsNull = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_IsNull, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape._get_reference = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape__get_reference, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_swigregister(Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape)

def Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape const":
    return _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_DownCast(AnObject)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_DownCast = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeMapOfShape_DownCast

class BRepOffset_DataMapNodeOfDataMapOfShapeOffset(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepOffset_Offset &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swiginit(self, _BRepOffset.new_BRepOffset_DataMapNodeOfDataMapOfShapeOffset(*args))

    def Key(self, *args) -> "TopoDS_Shape":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_Key(self, *args)


    def Value(self, *args) -> "BRepOffset_Offset &":
        """
        :rtype: BRepOffset_Offset

        """
        return _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapNodeOfDataMapOfShapeOffset
BRepOffset_DataMapNodeOfDataMapOfShapeOffset.Key = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_Key, None, BRepOffset_DataMapNodeOfDataMapOfShapeOffset)
BRepOffset_DataMapNodeOfDataMapOfShapeOffset.Value = new_instancemethod(_BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_Value, None, BRepOffset_DataMapNodeOfDataMapOfShapeOffset)
BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister = _BRepOffset.BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister
BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister(BRepOffset_DataMapNodeOfDataMapOfShapeOffset)

class Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swiginit(self, _BRepOffset.new_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _BRepOffset.delete_Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset.Nullify = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_Nullify, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset.IsNull = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_IsNull, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset._get_reference = new_instancemethod(_BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset__get_reference, None, Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_swigregister(Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset)

def Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset const":
    return _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_DownCast(AnObject)
Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_DownCast = _BRepOffset.Handle_BRepOffset_DataMapNodeOfDataMapOfShapeOffset_DownCast

class BRepOffset_DataMapOfShapeListOfInterval(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeListOfInterval(*args))

    def Assign(self, *args) -> "BRepOffset_DataMapOfShapeListOfInterval &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeListOfInterval &
        :rtype: BRepOffset_DataMapOfShapeListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Assign(self, *args)


    def Set(self, *args) -> "BRepOffset_DataMapOfShapeListOfInterval &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeListOfInterval &
        :rtype: BRepOffset_DataMapOfShapeListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepOffset_ListOfInterval &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_UnBind(self, *args)


    def Find(self, *args) -> "BRepOffset_ListOfInterval const &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepOffset_ListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Find(self, *args)


    def ChangeFind(self, *args) -> "BRepOffset_ListOfInterval &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepOffset_ListOfInterval

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeListOfInterval
BRepOffset_DataMapOfShapeListOfInterval.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Assign, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Set, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ReSize, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Clear, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Bind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_IsBound, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_UnBind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Find, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeFind, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.Find1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_Find1, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval.ChangeFind1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_ChangeFind1, None, BRepOffset_DataMapOfShapeListOfInterval)
BRepOffset_DataMapOfShapeListOfInterval_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeListOfInterval_swigregister
BRepOffset_DataMapOfShapeListOfInterval_swigregister(BRepOffset_DataMapOfShapeListOfInterval)

class BRepOffset_DataMapOfShapeMapOfShape(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeMapOfShape(*args))

    def Assign(self, *args) -> "BRepOffset_DataMapOfShapeMapOfShape &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeMapOfShape &
        :rtype: BRepOffset_DataMapOfShapeMapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Assign(self, *args)


    def Set(self, *args) -> "BRepOffset_DataMapOfShapeMapOfShape &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeMapOfShape &
        :rtype: BRepOffset_DataMapOfShapeMapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: TopTools_MapOfShape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_UnBind(self, *args)


    def Find(self, *args) -> "TopTools_MapOfShape const &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_MapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Find(self, *args)


    def ChangeFind(self, *args) -> "TopTools_MapOfShape &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: TopTools_MapOfShape

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeMapOfShape
BRepOffset_DataMapOfShapeMapOfShape.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Assign, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Set, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ReSize, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Clear, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Bind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_IsBound, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_UnBind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Find, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeFind, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.Find1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_Find1, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape.ChangeFind1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_ChangeFind1, None, BRepOffset_DataMapOfShapeMapOfShape)
BRepOffset_DataMapOfShapeMapOfShape_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeMapOfShape_swigregister
BRepOffset_DataMapOfShapeMapOfShape_swigregister(BRepOffset_DataMapOfShapeMapOfShape)

class BRepOffset_DataMapOfShapeOffset(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _BRepOffset.BRepOffset_DataMapOfShapeOffset_swiginit(self, _BRepOffset.new_BRepOffset_DataMapOfShapeOffset(*args))

    def Assign(self, *args) -> "BRepOffset_DataMapOfShapeOffset &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeOffset &
        :rtype: BRepOffset_DataMapOfShapeOffset

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Assign(self, *args)


    def Set(self, *args) -> "BRepOffset_DataMapOfShapeOffset &":
        """
        :param Other:
        :type Other: BRepOffset_DataMapOfShapeOffset &
        :rtype: BRepOffset_DataMapOfShapeOffset

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :param I:
        :type I: BRepOffset_Offset &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_UnBind(self, *args)


    def Find(self, *args) -> "BRepOffset_Offset const &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepOffset_Offset

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Find(self, *args)


    def ChangeFind(self, *args) -> "BRepOffset_Offset &":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: BRepOffset_Offset

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TopoDS_Shape &
        :rtype: Standard_Address

        """
        return _BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_DataMapOfShapeOffset
BRepOffset_DataMapOfShapeOffset.Assign = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Assign, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Set = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Set, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ReSize = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ReSize, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Clear = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Clear, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Bind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Bind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.IsBound = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_IsBound, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.UnBind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_UnBind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Find = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Find, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ChangeFind = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeFind, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.Find1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_Find1, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset.ChangeFind1 = new_instancemethod(_BRepOffset.BRepOffset_DataMapOfShapeOffset_ChangeFind1, None, BRepOffset_DataMapOfShapeOffset)
BRepOffset_DataMapOfShapeOffset_swigregister = _BRepOffset.BRepOffset_DataMapOfShapeOffset_swigregister
BRepOffset_DataMapOfShapeOffset_swigregister(BRepOffset_DataMapOfShapeOffset)

class BRepOffset_Inter2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Compute(*args) -> "void":
        """
        * Computes the intersections between the edges stored is AsDes as descendants of <F> . Intersections is computed between two edges if one of them is bound in NewEdges.

        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param F:
        :type F: TopoDS_Face &
        :param NewEdges:
        :type NewEdges: TopTools_IndexedMapOfShape &
        :param Tol:
        :type Tol: float
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Inter2d_Compute(*args)

    Compute = staticmethod(Compute)

    def ConnexIntByInt(*args) -> "void":
        """
        :param FI:
        :type FI: TopoDS_Face &
        :param OFI:
        :type OFI: BRepOffset_Offset &
        :param MES:
        :type MES: TopTools_DataMapOfShapeShape &
        :param Build:
        :type Build: TopTools_DataMapOfShapeShape &
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param Offset:
        :type Offset: float
        :param Tol:
        :type Tol: float
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Inter2d_ConnexIntByInt(*args)

    ConnexIntByInt = staticmethod(ConnexIntByInt)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.BRepOffset_Inter2d_swiginit(self, _BRepOffset.new_BRepOffset_Inter2d())
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Inter2d
BRepOffset_Inter2d_swigregister = _BRepOffset.BRepOffset_Inter2d_swigregister
BRepOffset_Inter2d_swigregister(BRepOffset_Inter2d)

def BRepOffset_Inter2d_Compute(*args) -> "void":
    """
    * Computes the intersections between the edges stored is AsDes as descendants of <F> . Intersections is computed between two edges if one of them is bound in NewEdges.

    :param AsDes:
    :type AsDes: Handle_BRepAlgo_AsDes &
    :param F:
    :type F: TopoDS_Face &
    :param NewEdges:
    :type NewEdges: TopTools_IndexedMapOfShape &
    :param Tol:
    :type Tol: float
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Inter2d_Compute(*args)

def BRepOffset_Inter2d_ConnexIntByInt(*args) -> "void":
    """
    :param FI:
    :type FI: TopoDS_Face &
    :param OFI:
    :type OFI: BRepOffset_Offset &
    :param MES:
    :type MES: TopTools_DataMapOfShapeShape &
    :param Build:
    :type Build: TopTools_DataMapOfShapeShape &
    :param AsDes:
    :type AsDes: Handle_BRepAlgo_AsDes &
    :param Offset:
    :type Offset: float
    :param Tol:
    :type Tol: float
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Inter2d_ConnexIntByInt(*args)

class BRepOffset_Inter3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param Side:
        :type Side: TopAbs_State
        :param Tol:
        :type Tol: float
        :rtype: None

        """
        _BRepOffset.BRepOffset_Inter3d_swiginit(self, _BRepOffset.new_BRepOffset_Inter3d(*args))

    def CompletInt(self, *args) -> "void":
        """
        :param SetOfFaces:
        :type SetOfFaces: TopTools_ListOfShape &
        :param InitOffsetFace:
        :type InitOffsetFace: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_CompletInt(self, *args)


    def FaceInter(self, *args) -> "void":
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param InitOffsetFace:
        :type InitOffsetFace: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_FaceInter(self, *args)


    def ConnexIntByArc(self, *args) -> "void":
        """
        :param SetOfFaces:
        :type SetOfFaces: TopTools_ListOfShape &
        :param ShapeInit:
        :type ShapeInit: TopoDS_Shape &
        :param Analyse:
        :type Analyse: BRepOffset_Analyse &
        :param InitOffsetFace:
        :type InitOffsetFace: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_ConnexIntByArc(self, *args)


    def ConnexIntByInt(self, *args) -> "void":
        """
        :param SI:
        :type SI: TopoDS_Shape &
        :param MapSF:
        :type MapSF: BRepOffset_DataMapOfShapeOffset &
        :param A:
        :type A: BRepOffset_Analyse &
        :param MES:
        :type MES: TopTools_DataMapOfShapeShape &
        :param Build:
        :type Build: TopTools_DataMapOfShapeShape &
        :param Failed:
        :type Failed: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_ConnexIntByInt(self, *args)


    def ContextIntByInt(self, *args) -> "void":
        """
        :param ContextFaces:
        :type ContextFaces: TopTools_IndexedMapOfShape &
        :param ExtentContext:
        :type ExtentContext: bool
        :param MapSF:
        :type MapSF: BRepOffset_DataMapOfShapeOffset &
        :param A:
        :type A: BRepOffset_Analyse &
        :param MES:
        :type MES: TopTools_DataMapOfShapeShape &
        :param Build:
        :type Build: TopTools_DataMapOfShapeShape &
        :param Failed:
        :type Failed: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_ContextIntByInt(self, *args)


    def ContextIntByArc(self, *args) -> "void":
        """
        :param ContextFaces:
        :type ContextFaces: TopTools_IndexedMapOfShape &
        :param ExtentContext:
        :type ExtentContext: bool
        :param Analyse:
        :type Analyse: BRepOffset_Analyse &
        :param InitOffsetFace:
        :type InitOffsetFace: BRepAlgo_Image &
        :param InitOffsetEdge:
        :type InitOffsetEdge: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_ContextIntByArc(self, *args)


    def AddCommonEdges(self, *args) -> "void":
        """
        :param SetOfFaces:
        :type SetOfFaces: TopTools_ListOfShape &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_AddCommonEdges(self, *args)


    def SetDone(self, *args) -> "void":
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Inter3d_SetDone(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Inter3d_IsDone(self, *args)


    def TouchedFaces(self, *args) -> "TopTools_IndexedMapOfShape &":
        """
        :rtype: TopTools_IndexedMapOfShape

        """
        return _BRepOffset.BRepOffset_Inter3d_TouchedFaces(self, *args)


    def AsDes(self, *args) -> "Handle_BRepAlgo_AsDes":
        """
        :rtype: Handle_BRepAlgo_AsDes

        """
        return _BRepOffset.BRepOffset_Inter3d_AsDes(self, *args)


    def NewEdges(self, *args) -> "TopTools_IndexedMapOfShape &":
        """
        :rtype: TopTools_IndexedMapOfShape

        """
        return _BRepOffset.BRepOffset_Inter3d_NewEdges(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Inter3d
BRepOffset_Inter3d.CompletInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_CompletInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.FaceInter = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_FaceInter, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ConnexIntByArc = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ConnexIntByArc, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ConnexIntByInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ConnexIntByInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ContextIntByInt = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ContextIntByInt, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.ContextIntByArc = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_ContextIntByArc, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.AddCommonEdges = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_AddCommonEdges, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.SetDone = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_SetDone, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.IsDone = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_IsDone, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.TouchedFaces = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_TouchedFaces, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.AsDes = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_AsDes, None, BRepOffset_Inter3d)
BRepOffset_Inter3d.NewEdges = new_instancemethod(_BRepOffset.BRepOffset_Inter3d_NewEdges, None, BRepOffset_Inter3d)
BRepOffset_Inter3d_swigregister = _BRepOffset.BRepOffset_Inter3d_swigregister
BRepOffset_Inter3d_swigregister(BRepOffset_Inter3d)

class BRepOffset_Interval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param U1:
        :type U1: float
        :param U2:
        :type U2: float
        :param Type:
        :type Type: BRepOffset_Type
        :rtype: None

        """
        _BRepOffset.BRepOffset_Interval_swiginit(self, _BRepOffset.new_BRepOffset_Interval(*args))

    def First(self, *args) -> "Standard_Real":
        """
        :param U:
        :type U: float
        :rtype: None

        :rtype: float

        """
        return _BRepOffset.BRepOffset_Interval_First(self, *args)


    def Last(self, *args) -> "Standard_Real":
        """
        :param U:
        :type U: float
        :rtype: None

        :rtype: float

        """
        return _BRepOffset.BRepOffset_Interval_Last(self, *args)


    def Type(self, *args) -> "BRepOffset_Type":
        """
        :param T:
        :type T: BRepOffset_Type
        :rtype: None

        :rtype: BRepOffset_Type

        """
        return _BRepOffset.BRepOffset_Interval_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Interval
BRepOffset_Interval.First = new_instancemethod(_BRepOffset.BRepOffset_Interval_First, None, BRepOffset_Interval)
BRepOffset_Interval.Last = new_instancemethod(_BRepOffset.BRepOffset_Interval_Last, None, BRepOffset_Interval)
BRepOffset_Interval.Type = new_instancemethod(_BRepOffset.BRepOffset_Interval_Type, None, BRepOffset_Interval)
BRepOffset_Interval_swigregister = _BRepOffset.BRepOffset_Interval_swigregister
BRepOffset_Interval_swigregister(BRepOffset_Interval)

class BRepOffset_ListIteratorOfListOfInterval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: BRepOffset_ListOfInterval &
        :rtype: None

        """
        _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_ListIteratorOfListOfInterval(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: BRepOffset_ListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Next(self, *args)


    def Value(self, *args) -> "BRepOffset_Interval &":
        """
        :rtype: BRepOffset_Interval

        """
        return _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_ListIteratorOfListOfInterval
BRepOffset_ListIteratorOfListOfInterval.Initialize = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Initialize, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.More = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_More, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.Next = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Next, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval.Value = new_instancemethod(_BRepOffset.BRepOffset_ListIteratorOfListOfInterval_Value, None, BRepOffset_ListIteratorOfListOfInterval)
BRepOffset_ListIteratorOfListOfInterval_swigregister = _BRepOffset.BRepOffset_ListIteratorOfListOfInterval_swigregister
BRepOffset_ListIteratorOfListOfInterval_swigregister(BRepOffset_ListIteratorOfListOfInterval)

class BRepOffset_ListNodeOfListOfInterval(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: BRepOffset_Interval &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _BRepOffset.BRepOffset_ListNodeOfListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_ListNodeOfListOfInterval(*args))

    def Value(self, *args) -> "BRepOffset_Interval &":
        """
        :rtype: BRepOffset_Interval

        """
        return _BRepOffset.BRepOffset_ListNodeOfListOfInterval_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_BRepOffset_ListNodeOfListOfInterval(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_ListNodeOfListOfInterval
BRepOffset_ListNodeOfListOfInterval.Value = new_instancemethod(_BRepOffset.BRepOffset_ListNodeOfListOfInterval_Value, None, BRepOffset_ListNodeOfListOfInterval)
BRepOffset_ListNodeOfListOfInterval_swigregister = _BRepOffset.BRepOffset_ListNodeOfListOfInterval_swigregister
BRepOffset_ListNodeOfListOfInterval_swigregister(BRepOffset_ListNodeOfListOfInterval)

class Handle_BRepOffset_ListNodeOfListOfInterval(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_swiginit(self, _BRepOffset.new_Handle_BRepOffset_ListNodeOfListOfInterval(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _BRepOffset.delete_Handle_BRepOffset_ListNodeOfListOfInterval
Handle_BRepOffset_ListNodeOfListOfInterval.Nullify = new_instancemethod(_BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_Nullify, None, Handle_BRepOffset_ListNodeOfListOfInterval)
Handle_BRepOffset_ListNodeOfListOfInterval.IsNull = new_instancemethod(_BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_IsNull, None, Handle_BRepOffset_ListNodeOfListOfInterval)
Handle_BRepOffset_ListNodeOfListOfInterval._get_reference = new_instancemethod(_BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval__get_reference, None, Handle_BRepOffset_ListNodeOfListOfInterval)
Handle_BRepOffset_ListNodeOfListOfInterval_swigregister = _BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_swigregister
Handle_BRepOffset_ListNodeOfListOfInterval_swigregister(Handle_BRepOffset_ListNodeOfListOfInterval)

def Handle_BRepOffset_ListNodeOfListOfInterval_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_BRepOffset_ListNodeOfListOfInterval const":
    return _BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_DownCast(AnObject)
Handle_BRepOffset_ListNodeOfListOfInterval_DownCast = _BRepOffset.Handle_BRepOffset_ListNodeOfListOfInterval_DownCast

class BRepOffset_ListOfInterval(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :rtype: None

        """
        _BRepOffset.BRepOffset_ListOfInterval_swiginit(self, _BRepOffset.new_BRepOffset_ListOfInterval(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_ListOfInterval_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: BRepOffset_Interval &
        :rtype: None

        :param I:
        :type I: BRepOffset_Interval &
        :param theIt:
        :type theIt: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: BRepOffset_Interval &
        :rtype: None

        :param I:
        :type I: BRepOffset_Interval &
        :param theIt:
        :type theIt: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Append(self, *args)


    def First(self, *args) -> "BRepOffset_Interval &":
        """
        :rtype: BRepOffset_Interval

        """
        return _BRepOffset.BRepOffset_ListOfInterval_First(self, *args)


    def Last(self, *args) -> "BRepOffset_Interval &":
        """
        :rtype: BRepOffset_Interval

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: BRepOffset_Interval &
        :param It:
        :type It: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :param It:
        :type It: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: BRepOffset_Interval &
        :param It:
        :type It: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        :param Other:
        :type Other: BRepOffset_ListOfInterval &
        :param It:
        :type It: BRepOffset_ListIteratorOfListOfInterval &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_ListOfInterval_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_ListOfInterval
BRepOffset_ListOfInterval.Assign = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Assign, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Set = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Set, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Extent = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Extent, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Clear = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Clear, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.IsEmpty = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_IsEmpty, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Prepend = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Prepend, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Append = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Append, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.First = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_First, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Last = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Last, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.RemoveFirst = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_RemoveFirst, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.Remove = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_Remove, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.InsertBefore = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_InsertBefore, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval.InsertAfter = new_instancemethod(_BRepOffset.BRepOffset_ListOfInterval_InsertAfter, None, BRepOffset_ListOfInterval)
BRepOffset_ListOfInterval_swigregister = _BRepOffset.BRepOffset_ListOfInterval_swigregister
BRepOffset_ListOfInterval_swigregister(BRepOffset_ListOfInterval)

class BRepOffset_MakeLoops(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BRepOffset.BRepOffset_MakeLoops_swiginit(self, _BRepOffset.new_BRepOffset_MakeLoops(*args))

    def Build(self, *args) -> "void":
        """
        :param LF:
        :type LF: TopTools_ListOfShape &
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param Image:
        :type Image: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeLoops_Build(self, *args)


    def BuildOnContext(self, *args) -> "void":
        """
        :param LContext:
        :type LContext: TopTools_ListOfShape &
        :param Analyse:
        :type Analyse: BRepOffset_Analyse &
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param Image:
        :type Image: BRepAlgo_Image &
        :param InSide:
        :type InSide: bool
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeLoops_BuildOnContext(self, *args)


    def BuildFaces(self, *args) -> "void":
        """
        :param LF:
        :type LF: TopTools_ListOfShape &
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param Image:
        :type Image: BRepAlgo_Image &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeLoops_BuildFaces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_MakeLoops
BRepOffset_MakeLoops.Build = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_Build, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops.BuildOnContext = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_BuildOnContext, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops.BuildFaces = new_instancemethod(_BRepOffset.BRepOffset_MakeLoops_BuildFaces, None, BRepOffset_MakeLoops)
BRepOffset_MakeLoops_swigregister = _BRepOffset.BRepOffset_MakeLoops_swigregister
BRepOffset_MakeLoops_swigregister(BRepOffset_MakeLoops)

class BRepOffset_MakeOffset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param S:
        :type S: TopoDS_Shape &
        :param Offset:
        :type Offset: float
        :param Tol:
        :type Tol: float
        :param Mode: default value is BRepOffset_Skin
        :type Mode: BRepOffset_Mode
        :param Intersection: default value is Standard_False
        :type Intersection: bool
        :param SelfInter: default value is Standard_False
        :type SelfInter: bool
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Thickening: default value is Standard_False
        :type Thickening: bool
        :rtype: None

        """
        _BRepOffset.BRepOffset_MakeOffset_swiginit(self, _BRepOffset.new_BRepOffset_MakeOffset(*args))

    def Initialize(self, *args) -> "void":
        """
        :param S:
        :type S: TopoDS_Shape &
        :param Offset:
        :type Offset: float
        :param Tol:
        :type Tol: float
        :param Mode: default value is BRepOffset_Skin
        :type Mode: BRepOffset_Mode
        :param Intersection: default value is Standard_False
        :type Intersection: bool
        :param SelfInter: default value is Standard_False
        :type SelfInter: bool
        :param Join: default value is GeomAbs_Arc
        :type Join: GeomAbs_JoinType
        :param Thickening: default value is Standard_False
        :type Thickening: bool
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_Initialize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_Clear(self, *args)


    def AddFace(self, *args) -> "void":
        """
        * Add Closing Faces, <F> has to be in the initial shape S.

        :param F:
        :type F: TopoDS_Face &
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_AddFace(self, *args)


    def SetOffsetOnFace(self, *args) -> "void":
        """
        * set the offset <Off> on the Face <F>

        :param F:
        :type F: TopoDS_Face &
        :param Off:
        :type Off: float
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_SetOffsetOnFace(self, *args)


    def MakeOffsetShape(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_MakeOffsetShape(self, *args)


    def MakeThickSolid(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BRepOffset.BRepOffset_MakeOffset_MakeThickSolid(self, *args)


    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_MakeOffset_IsDone(self, *args)


    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_MakeOffset_Shape(self, *args)


    def Error(self, *args) -> "BRepOffset_Error":
        """
        * returns information if IsDone() = False.

        :rtype: BRepOffset_Error

        """
        return _BRepOffset.BRepOffset_MakeOffset_Error(self, *args)


    def OffsetFacesFromShapes(self, *args) -> "BRepAlgo_Image const &":
        """
        * Returns <Image> containing links between initials shapes and offset faces.

        :rtype: BRepAlgo_Image

        """
        return _BRepOffset.BRepOffset_MakeOffset_OffsetFacesFromShapes(self, *args)


    def GetJoinType(self, *args) -> "GeomAbs_JoinType":
        """
        * Returns myJoin.

        :rtype: GeomAbs_JoinType

        """
        return _BRepOffset.BRepOffset_MakeOffset_GetJoinType(self, *args)


    def OffsetEdgesFromShapes(self, *args) -> "BRepAlgo_Image const &":
        """
        * Returns <Image> containing links between initials shapes and offset edges.

        :rtype: BRepAlgo_Image

        """
        return _BRepOffset.BRepOffset_MakeOffset_OffsetEdgesFromShapes(self, *args)


    def ClosingFaces(self, *args) -> "TopTools_IndexedMapOfShape const &":
        """
        * Returns the list of closing faces stores by AddFace

        :rtype: TopTools_IndexedMapOfShape

        """
        return _BRepOffset.BRepOffset_MakeOffset_ClosingFaces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_MakeOffset
BRepOffset_MakeOffset.Initialize = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Initialize, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Clear = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Clear, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.AddFace = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_AddFace, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.SetOffsetOnFace = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_SetOffsetOnFace, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.MakeOffsetShape = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_MakeOffsetShape, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.MakeThickSolid = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_MakeThickSolid, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.IsDone = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_IsDone, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Shape = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Shape, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.Error = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_Error, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.OffsetFacesFromShapes = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_OffsetFacesFromShapes, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.GetJoinType = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_GetJoinType, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.OffsetEdgesFromShapes = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_OffsetEdgesFromShapes, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset.ClosingFaces = new_instancemethod(_BRepOffset.BRepOffset_MakeOffset_ClosingFaces, None, BRepOffset_MakeOffset)
BRepOffset_MakeOffset_swigregister = _BRepOffset.BRepOffset_MakeOffset_swigregister
BRepOffset_MakeOffset_swigregister(BRepOffset_MakeOffset)

class BRepOffset_Offset(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Face:
        :type Face: TopoDS_Face &
        :param Offset:
        :type Offset: float
        :param OffsetOutside: default value is Standard_True
        :type OffsetOutside: bool
        :param JoinType: default value is GeomAbs_Arc
        :type JoinType: GeomAbs_JoinType
        :rtype: None

        * This method will be called when you want to share the edges soon generated from an other face. e.g. when two faces are tangents the common edge will generate only one edge ( no pipe). //! The Map will be fill as follow: //! Created(E) = E' with: E = an edge of <Face> E' = the image of E in the offseting of another face sharing E with a continuity at least G1

        :param Face:
        :type Face: TopoDS_Face &
        :param Offset:
        :type Offset: float
        :param Created:
        :type Created: TopTools_DataMapOfShapeShape &
        :param OffsetOutside: default value is Standard_True
        :type OffsetOutside: bool
        :param JoinType: default value is GeomAbs_Arc
        :type JoinType: GeomAbs_JoinType
        :rtype: None

        :param Path:
        :type Path: TopoDS_Edge &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Offset:
        :type Offset: float
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        :param Path:
        :type Path: TopoDS_Edge &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Offset:
        :type Offset: float
        :param FirstEdge:
        :type FirstEdge: TopoDS_Edge &
        :param LastEdge:
        :type LastEdge: TopoDS_Edge &
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        * Tol and Conti are only used if Polynomial is True (Used to perfrom the approximation)

        :param Vertex:
        :type Vertex: TopoDS_Vertex &
        :param LEdge:
        :type LEdge: TopTools_ListOfShape &
        :param Offset:
        :type Offset: float
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        """
        _BRepOffset.BRepOffset_Offset_swiginit(self, _BRepOffset.new_BRepOffset_Offset(*args))

    def Init(self, *args) -> "void":
        """
        :param Face:
        :type Face: TopoDS_Face &
        :param Offset:
        :type Offset: float
        :param OffsetOutside: default value is Standard_True
        :type OffsetOutside: bool
        :param JoinType: default value is GeomAbs_Arc
        :type JoinType: GeomAbs_JoinType
        :rtype: None

        :param Face:
        :type Face: TopoDS_Face &
        :param Offset:
        :type Offset: float
        :param Created:
        :type Created: TopTools_DataMapOfShapeShape &
        :param OffsetOutside: default value is Standard_True
        :type OffsetOutside: bool
        :param JoinType: default value is GeomAbs_Arc
        :type JoinType: GeomAbs_JoinType
        :rtype: None

        :param Path:
        :type Path: TopoDS_Edge &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Offset:
        :type Offset: float
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        :param Path:
        :type Path: TopoDS_Edge &
        :param Edge1:
        :type Edge1: TopoDS_Edge &
        :param Edge2:
        :type Edge2: TopoDS_Edge &
        :param Offset:
        :type Offset: float
        :param FirstEdge:
        :type FirstEdge: TopoDS_Edge &
        :param LastEdge:
        :type LastEdge: TopoDS_Edge &
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        * Tol and Conti are only used if Polynomial is True (Used to perfrom the approximation)

        :param Vertex:
        :type Vertex: TopoDS_Vertex &
        :param LEdge:
        :type LEdge: TopTools_ListOfShape &
        :param Offset:
        :type Offset: float
        :param Polynomial: default value is Standard_False
        :type Polynomial: bool
        :param Tol: default value is 1.0e-4
        :type Tol: float
        :param Conti: default value is GeomAbs_C1
        :type Conti: GeomAbs_Shape
        :rtype: None

        * Only used in Rolling Ball. Pipe on Free Boundary

        :param Edge:
        :type Edge: TopoDS_Edge &
        :param Offset:
        :type Offset: float
        :rtype: None

        """
        return _BRepOffset.BRepOffset_Offset_Init(self, *args)


    def InitialShape(self, *args) -> "TopoDS_Shape const":
        """
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_Offset_InitialShape(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        :rtype: TopoDS_Face

        """
        return _BRepOffset.BRepOffset_Offset_Face(self, *args)


    def Generated(self, *args) -> "TopoDS_Shape":
        """
        :param Shape:
        :type Shape: TopoDS_Shape &
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_Offset_Generated(self, *args)


    def Status(self, *args) -> "BRepOffset_Status":
        """
        :rtype: BRepOffset_Status

        """
        return _BRepOffset.BRepOffset_Offset_Status(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Offset
BRepOffset_Offset.Init = new_instancemethod(_BRepOffset.BRepOffset_Offset_Init, None, BRepOffset_Offset)
BRepOffset_Offset.InitialShape = new_instancemethod(_BRepOffset.BRepOffset_Offset_InitialShape, None, BRepOffset_Offset)
BRepOffset_Offset.Face = new_instancemethod(_BRepOffset.BRepOffset_Offset_Face, None, BRepOffset_Offset)
BRepOffset_Offset.Generated = new_instancemethod(_BRepOffset.BRepOffset_Offset_Generated, None, BRepOffset_Offset)
BRepOffset_Offset.Status = new_instancemethod(_BRepOffset.BRepOffset_Offset_Status, None, BRepOffset_Offset)
BRepOffset_Offset_swigregister = _BRepOffset.BRepOffset_Offset_swigregister
BRepOffset_Offset_swigregister(BRepOffset_Offset)

class BRepOffset_Tool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def EdgeVertices(*args) -> "void":
        """
        * <V1> is the FirstVertex ,<V2> is the Last Vertex of <Edge> taking account the orientation of Edge.

        :param E:
        :type E: TopoDS_Edge &
        :param V1:
        :type V1: TopoDS_Vertex &
        :param V2:
        :type V2: TopoDS_Vertex &
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_EdgeVertices(*args)

    EdgeVertices = staticmethod(EdgeVertices)

    def OriEdgeInFace(*args) -> "TopAbs_Orientation":
        """
        * returns the cumul of the orientation of <Edge> and thc containing wire in <Face>

        :param E:
        :type E: TopoDS_Edge &
        :param F:
        :type F: TopoDS_Face &
        :rtype: TopAbs_Orientation

        """
        return _BRepOffset.BRepOffset_Tool_OriEdgeInFace(*args)

    OriEdgeInFace = staticmethod(OriEdgeInFace)

    def OrientSection(*args) -> "void":
        """
        * <E> is a section between <F1> and <F2>. Computes <O1> the orientation of <E> in <F1> influenced by <F2>. idem for <O2>.

        :param E:
        :type E: TopoDS_Edge &
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param O1:
        :type O1: TopAbs_Orientation &
        :param O2:
        :type O2: TopAbs_Orientation &
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_OrientSection(*args)

    OrientSection = staticmethod(OrientSection)

    def HasCommonShapes(*args) -> "Standard_Boolean":
        """
        * Returns True if <F1> and <F2> has common Vertices or edges , <LE> contains the common edges. <LV> the common vertices.

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param LE:
        :type LE: TopTools_ListOfShape &
        :param LV:
        :type LV: TopTools_ListOfShape &
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Tool_HasCommonShapes(*args)

    HasCommonShapes = staticmethod(HasCommonShapes)

    def Inter3D(*args) -> "void":
        """
        * Computes the Section betwwen <F1> and <F2> the edges solution are stored in <LInt1> with the orientation on <F1>, the sames edges are stored in <Lint2> with the orientation on <F2>.

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param LInt1:
        :type LInt1: TopTools_ListOfShape &
        :param LInt2:
        :type LInt2: TopTools_ListOfShape &
        :param Side:
        :type Side: TopAbs_State
        :param RefEdge:
        :type RefEdge: TopoDS_Edge &
        :param IsRefEdgeDefined: default value is Standard_False
        :type IsRefEdgeDefined: bool
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_Inter3D(*args)

    Inter3D = staticmethod(Inter3D)

    def TryProject(*args) -> "Standard_Boolean":
        """
        * Find if the edges <Edges> of the face <F2> are on the face <F1>. Set in <LInt1> <LInt2> the updated edges. If all the edges are computed, returns true.

        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param Edges:
        :type Edges: TopTools_ListOfShape &
        :param LInt1:
        :type LInt1: TopTools_ListOfShape &
        :param LInt2:
        :type LInt2: TopTools_ListOfShape &
        :param Side:
        :type Side: TopAbs_State
        :param TolConf:
        :type TolConf: float
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Tool_TryProject(*args)

    TryProject = staticmethod(TryProject)

    def PipeInter(*args) -> "void":
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param LInt1:
        :type LInt1: TopTools_ListOfShape &
        :param LInt2:
        :type LInt2: TopTools_ListOfShape &
        :param Side:
        :type Side: TopAbs_State
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_PipeInter(*args)

    PipeInter = staticmethod(PipeInter)

    def Inter2d(*args) -> "void":
        """
        :param F:
        :type F: TopoDS_Face &
        :param E1:
        :type E1: TopoDS_Edge &
        :param E2:
        :type E2: TopoDS_Edge &
        :param LV:
        :type LV: TopTools_ListOfShape &
        :param Tol:
        :type Tol: float
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_Inter2d(*args)

    Inter2d = staticmethod(Inter2d)

    def InterOrExtent(*args) -> "void":
        """
        :param F1:
        :type F1: TopoDS_Face &
        :param F2:
        :type F2: TopoDS_Face &
        :param LInt1:
        :type LInt1: TopTools_ListOfShape &
        :param LInt2:
        :type LInt2: TopTools_ListOfShape &
        :param Side:
        :type Side: TopAbs_State
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_InterOrExtent(*args)

    InterOrExtent = staticmethod(InterOrExtent)

    def CheckBounds(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Boolean &":
        """
        :param F:
        :type F: TopoDS_Face &
        :param Analyse:
        :type Analyse: BRepOffset_Analyse &
        :param enlargeU:
        :type enlargeU: bool
        :param enlargeVfirst:
        :type enlargeVfirst: bool
        :param enlargeVlast:
        :type enlargeVlast: bool
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_CheckBounds(*args)

    CheckBounds = staticmethod(CheckBounds)

    def EnLargeFace(*args) -> "Standard_Boolean":
        """
        * if <ChangeGeom> is True , the surface can be changed . if <UpdatePCurve> is True, update the pcurves of the edges of <F> on the new surface.if the surface has been changed, Returns True if The Surface of <NF> has changed.

        :param F:
        :type F: TopoDS_Face &
        :param NF:
        :type NF: TopoDS_Face &
        :param ChangeGeom:
        :type ChangeGeom: bool
        :param UpDatePCurve: default value is Standard_False
        :type UpDatePCurve: bool
        :param enlargeU: default value is Standard_True
        :type enlargeU: bool
        :param enlargeVfirst: default value is Standard_True
        :type enlargeVfirst: bool
        :param enlargeVlast: default value is Standard_True
        :type enlargeVlast: bool
        :rtype: bool

        """
        return _BRepOffset.BRepOffset_Tool_EnLargeFace(*args)

    EnLargeFace = staticmethod(EnLargeFace)

    def ExtentFace(*args) -> "void":
        """
        :param F:
        :type F: TopoDS_Face &
        :param ConstShapes:
        :type ConstShapes: TopTools_DataMapOfShapeShape &
        :param ToBuild:
        :type ToBuild: TopTools_DataMapOfShapeShape &
        :param Side:
        :type Side: TopAbs_State
        :param TolConf:
        :type TolConf: float
        :param NF:
        :type NF: TopoDS_Face &
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_ExtentFace(*args)

    ExtentFace = staticmethod(ExtentFace)

    def BuildNeighbour(*args) -> "void":
        """
        * Via the wire explorer store in <NOnV1> for an Edge <E> of <W> his Edge neighbour on the first vertex <V1> of <E>. Store in NOnV2 the Neighbour of <E>on the last vertex <V2> of <E>.

        :param W:
        :type W: TopoDS_Wire &
        :param F:
        :type F: TopoDS_Face &
        :param NOnV1:
        :type NOnV1: TopTools_DataMapOfShapeShape &
        :param NOnV2:
        :type NOnV2: TopTools_DataMapOfShapeShape &
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_BuildNeighbour(*args)

    BuildNeighbour = staticmethod(BuildNeighbour)

    def MapVertexEdges(*args) -> "void":
        """
        * Store in MVE for a vertex <V> in <S> the incident edges <E> in <S>. An Edge is Store only one Time for a vertex.

        :param S:
        :type S: TopoDS_Shape &
        :param MVE:
        :type MVE: TopTools_DataMapOfShapeListOfShape &
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_MapVertexEdges(*args)

    MapVertexEdges = staticmethod(MapVertexEdges)

    def Deboucle3D(*args) -> "TopoDS_Shape":
        """
        * Remove the non valid part of an offsetshape 1 - Remove all the free boundary and the faces connex to such edges. 2 - Remove all the shapes not valid in the result (according to the side of offseting) in this verion only the first point is implemented.

        :param S:
        :type S: TopoDS_Shape &
        :param Boundary:
        :type Boundary: TopTools_MapOfShape &
        :rtype: TopoDS_Shape

        """
        return _BRepOffset.BRepOffset_Tool_Deboucle3D(*args)

    Deboucle3D = staticmethod(Deboucle3D)

    def CorrectOrientation(*args) -> "void":
        """
        :param SI:
        :type SI: TopoDS_Shape &
        :param NewEdges:
        :type NewEdges: TopTools_IndexedMapOfShape &
        :param AsDes:
        :type AsDes: Handle_BRepAlgo_AsDes &
        :param InitOffset:
        :type InitOffset: BRepAlgo_Image &
        :param Offset:
        :type Offset: float
        :rtype: void

        """
        return _BRepOffset.BRepOffset_Tool_CorrectOrientation(*args)

    CorrectOrientation = staticmethod(CorrectOrientation)

    def Gabarit(*args) -> "Standard_Real":
        """
        :param aCurve:
        :type aCurve: Handle_Geom_Curve &
        :rtype: float

        """
        return _BRepOffset.BRepOffset_Tool_Gabarit(*args)

    Gabarit = staticmethod(Gabarit)

    __repr__ = _dumps_object


    def __init__(self):
        _BRepOffset.BRepOffset_Tool_swiginit(self, _BRepOffset.new_BRepOffset_Tool())
    __swig_destroy__ = _BRepOffset.delete_BRepOffset_Tool
BRepOffset_Tool_swigregister = _BRepOffset.BRepOffset_Tool_swigregister
BRepOffset_Tool_swigregister(BRepOffset_Tool)

def BRepOffset_Tool_EdgeVertices(*args) -> "void":
    """
    * <V1> is the FirstVertex ,<V2> is the Last Vertex of <Edge> taking account the orientation of Edge.

    :param E:
    :type E: TopoDS_Edge &
    :param V1:
    :type V1: TopoDS_Vertex &
    :param V2:
    :type V2: TopoDS_Vertex &
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_EdgeVertices(*args)

def BRepOffset_Tool_OriEdgeInFace(*args) -> "TopAbs_Orientation":
    """
    * returns the cumul of the orientation of <Edge> and thc containing wire in <Face>

    :param E:
    :type E: TopoDS_Edge &
    :param F:
    :type F: TopoDS_Face &
    :rtype: TopAbs_Orientation

    """
    return _BRepOffset.BRepOffset_Tool_OriEdgeInFace(*args)

def BRepOffset_Tool_OrientSection(*args) -> "void":
    """
    * <E> is a section between <F1> and <F2>. Computes <O1> the orientation of <E> in <F1> influenced by <F2>. idem for <O2>.

    :param E:
    :type E: TopoDS_Edge &
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param O1:
    :type O1: TopAbs_Orientation &
    :param O2:
    :type O2: TopAbs_Orientation &
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_OrientSection(*args)

def BRepOffset_Tool_HasCommonShapes(*args) -> "Standard_Boolean":
    """
    * Returns True if <F1> and <F2> has common Vertices or edges , <LE> contains the common edges. <LV> the common vertices.

    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param LE:
    :type LE: TopTools_ListOfShape &
    :param LV:
    :type LV: TopTools_ListOfShape &
    :rtype: bool

    """
    return _BRepOffset.BRepOffset_Tool_HasCommonShapes(*args)

def BRepOffset_Tool_Inter3D(*args) -> "void":
    """
    * Computes the Section betwwen <F1> and <F2> the edges solution are stored in <LInt1> with the orientation on <F1>, the sames edges are stored in <Lint2> with the orientation on <F2>.

    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param LInt1:
    :type LInt1: TopTools_ListOfShape &
    :param LInt2:
    :type LInt2: TopTools_ListOfShape &
    :param Side:
    :type Side: TopAbs_State
    :param RefEdge:
    :type RefEdge: TopoDS_Edge &
    :param IsRefEdgeDefined: default value is Standard_False
    :type IsRefEdgeDefined: bool
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_Inter3D(*args)

def BRepOffset_Tool_TryProject(*args) -> "Standard_Boolean":
    """
    * Find if the edges <Edges> of the face <F2> are on the face <F1>. Set in <LInt1> <LInt2> the updated edges. If all the edges are computed, returns true.

    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param Edges:
    :type Edges: TopTools_ListOfShape &
    :param LInt1:
    :type LInt1: TopTools_ListOfShape &
    :param LInt2:
    :type LInt2: TopTools_ListOfShape &
    :param Side:
    :type Side: TopAbs_State
    :param TolConf:
    :type TolConf: float
    :rtype: bool

    """
    return _BRepOffset.BRepOffset_Tool_TryProject(*args)

def BRepOffset_Tool_PipeInter(*args) -> "void":
    """
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param LInt1:
    :type LInt1: TopTools_ListOfShape &
    :param LInt2:
    :type LInt2: TopTools_ListOfShape &
    :param Side:
    :type Side: TopAbs_State
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_PipeInter(*args)

def BRepOffset_Tool_Inter2d(*args) -> "void":
    """
    :param F:
    :type F: TopoDS_Face &
    :param E1:
    :type E1: TopoDS_Edge &
    :param E2:
    :type E2: TopoDS_Edge &
    :param LV:
    :type LV: TopTools_ListOfShape &
    :param Tol:
    :type Tol: float
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_Inter2d(*args)

def BRepOffset_Tool_InterOrExtent(*args) -> "void":
    """
    :param F1:
    :type F1: TopoDS_Face &
    :param F2:
    :type F2: TopoDS_Face &
    :param LInt1:
    :type LInt1: TopTools_ListOfShape &
    :param LInt2:
    :type LInt2: TopTools_ListOfShape &
    :param Side:
    :type Side: TopAbs_State
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_InterOrExtent(*args)

def BRepOffset_Tool_CheckBounds(*args) -> "Standard_Boolean &, Standard_Boolean &, Standard_Boolean &":
    """
    :param F:
    :type F: TopoDS_Face &
    :param Analyse:
    :type Analyse: BRepOffset_Analyse &
    :param enlargeU:
    :type enlargeU: bool
    :param enlargeVfirst:
    :type enlargeVfirst: bool
    :param enlargeVlast:
    :type enlargeVlast: bool
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_CheckBounds(*args)

def BRepOffset_Tool_EnLargeFace(*args) -> "Standard_Boolean":
    """
    * if <ChangeGeom> is True , the surface can be changed . if <UpdatePCurve> is True, update the pcurves of the edges of <F> on the new surface.if the surface has been changed, Returns True if The Surface of <NF> has changed.

    :param F:
    :type F: TopoDS_Face &
    :param NF:
    :type NF: TopoDS_Face &
    :param ChangeGeom:
    :type ChangeGeom: bool
    :param UpDatePCurve: default value is Standard_False
    :type UpDatePCurve: bool
    :param enlargeU: default value is Standard_True
    :type enlargeU: bool
    :param enlargeVfirst: default value is Standard_True
    :type enlargeVfirst: bool
    :param enlargeVlast: default value is Standard_True
    :type enlargeVlast: bool
    :rtype: bool

    """
    return _BRepOffset.BRepOffset_Tool_EnLargeFace(*args)

def BRepOffset_Tool_ExtentFace(*args) -> "void":
    """
    :param F:
    :type F: TopoDS_Face &
    :param ConstShapes:
    :type ConstShapes: TopTools_DataMapOfShapeShape &
    :param ToBuild:
    :type ToBuild: TopTools_DataMapOfShapeShape &
    :param Side:
    :type Side: TopAbs_State
    :param TolConf:
    :type TolConf: float
    :param NF:
    :type NF: TopoDS_Face &
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_ExtentFace(*args)

def BRepOffset_Tool_BuildNeighbour(*args) -> "void":
    """
    * Via the wire explorer store in <NOnV1> for an Edge <E> of <W> his Edge neighbour on the first vertex <V1> of <E>. Store in NOnV2 the Neighbour of <E>on the last vertex <V2> of <E>.

    :param W:
    :type W: TopoDS_Wire &
    :param F:
    :type F: TopoDS_Face &
    :param NOnV1:
    :type NOnV1: TopTools_DataMapOfShapeShape &
    :param NOnV2:
    :type NOnV2: TopTools_DataMapOfShapeShape &
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_BuildNeighbour(*args)

def BRepOffset_Tool_MapVertexEdges(*args) -> "void":
    """
    * Store in MVE for a vertex <V> in <S> the incident edges <E> in <S>. An Edge is Store only one Time for a vertex.

    :param S:
    :type S: TopoDS_Shape &
    :param MVE:
    :type MVE: TopTools_DataMapOfShapeListOfShape &
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_MapVertexEdges(*args)

def BRepOffset_Tool_Deboucle3D(*args) -> "TopoDS_Shape":
    """
    * Remove the non valid part of an offsetshape 1 - Remove all the free boundary and the faces connex to such edges. 2 - Remove all the shapes not valid in the result (according to the side of offseting) in this verion only the first point is implemented.

    :param S:
    :type S: TopoDS_Shape &
    :param Boundary:
    :type Boundary: TopTools_MapOfShape &
    :rtype: TopoDS_Shape

    """
    return _BRepOffset.BRepOffset_Tool_Deboucle3D(*args)

def BRepOffset_Tool_CorrectOrientation(*args) -> "void":
    """
    :param SI:
    :type SI: TopoDS_Shape &
    :param NewEdges:
    :type NewEdges: TopTools_IndexedMapOfShape &
    :param AsDes:
    :type AsDes: Handle_BRepAlgo_AsDes &
    :param InitOffset:
    :type InitOffset: BRepAlgo_Image &
    :param Offset:
    :type Offset: float
    :rtype: void

    """
    return _BRepOffset.BRepOffset_Tool_CorrectOrientation(*args)

def BRepOffset_Tool_Gabarit(*args) -> "Standard_Real":
    """
    :param aCurve:
    :type aCurve: Handle_Geom_Curve &
    :rtype: float

    """
    return _BRepOffset.BRepOffset_Tool_Gabarit(*args)



