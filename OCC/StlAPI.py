# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StlAPI.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StlAPI')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StlAPI')
    _StlAPI = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StlAPI', [dirname(__file__)])
        except ImportError:
            import _StlAPI
            return _StlAPI
        try:
            _mod = imp.load_module('_StlAPI', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _StlAPI = swig_import_helper()
    del swig_import_helper
else:
    import _StlAPI
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _StlAPI.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_StlAPI.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_StlAPI.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_StlAPI.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_StlAPI.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_StlAPI.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_StlAPI.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_StlAPI.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_StlAPI.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_StlAPI.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_StlAPI.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_StlAPI.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_StlAPI.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_StlAPI.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_StlAPI.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_StlAPI.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_StlAPI.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _StlAPI.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.TopoDS
import OCC.MMgt
import OCC.Standard
import OCC.TCollection
import OCC.TopLoc
import OCC.gp
import OCC.TopAbs

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class stlapi(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Write(*args) -> "void":
        """
        * Convert and write shape to STL format. file is written in binary if aAsciiMode is False otherwise it is written in Ascii (by default)

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aFile:
        :type aFile: char *
        :param aAsciiMode: default value is Standard_True
        :type aAsciiMode: bool
        :rtype: void

        """
        return _StlAPI.stlapi_Write(*args)

    Write = staticmethod(Write)

    def Read(*args) -> "void":
        """
        * Create a shape from a STL format.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aFile:
        :type aFile: char *
        :rtype: void

        """
        return _StlAPI.stlapi_Read(*args)

    Read = staticmethod(Read)

    __repr__ = _dumps_object


    def __init__(self):
        _StlAPI.stlapi_swiginit(self, _StlAPI.new_stlapi())
    __swig_destroy__ = _StlAPI.delete_stlapi
stlapi_swigregister = _StlAPI.stlapi_swigregister
stlapi_swigregister(stlapi)

def stlapi_Write(*args) -> "void":
    """
    * Convert and write shape to STL format. file is written in binary if aAsciiMode is False otherwise it is written in Ascii (by default)

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param aFile:
    :type aFile: char *
    :param aAsciiMode: default value is Standard_True
    :type aAsciiMode: bool
    :rtype: void

    """
    return _StlAPI.stlapi_Write(*args)

def stlapi_Read(*args) -> "void":
    """
    * Create a shape from a STL format.

    :param aShape:
    :type aShape: TopoDS_Shape &
    :param aFile:
    :type aFile: char *
    :rtype: void

    """
    return _StlAPI.stlapi_Read(*args)

class StlAPI_Reader(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _StlAPI.StlAPI_Reader_swiginit(self, _StlAPI.new_StlAPI_Reader(*args))

    def Read(self, *args) -> "void":
        """
        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aFileName:
        :type aFileName: char *
        :rtype: None

        """
        return _StlAPI.StlAPI_Reader_Read(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StlAPI.delete_StlAPI_Reader
StlAPI_Reader.Read = new_instancemethod(_StlAPI.StlAPI_Reader_Read, None, StlAPI_Reader)
StlAPI_Reader_swigregister = _StlAPI.StlAPI_Reader_swigregister
StlAPI_Reader_swigregister(StlAPI_Reader)

class StlAPI_Writer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a writer object with default parameters: ASCIIMode, RelativeMode, SetCoefficent, SetDeflection. These parameters may be modified.

        :rtype: None

        """
        _StlAPI.StlAPI_Writer_swiginit(self, _StlAPI.new_StlAPI_Writer(*args))

    def SetDeflection(self, *args) -> "void":
        """
        * Sets the deflection of the meshing algorithm. Deflection is used, only if relative mode is false

        :param aDeflection:
        :type aDeflection: float
        :rtype: None

        """
        return _StlAPI.StlAPI_Writer_SetDeflection(self, *args)


    def SetCoefficient(self, *args) -> "void":
        """
        * Sets the coeffiecient for computation of deflection through relative size of shape. Default value = 0.001

        :param aCoefficient:
        :type aCoefficient: float
        :rtype: None

        """
        return _StlAPI.StlAPI_Writer_SetCoefficient(self, *args)


    def GetRelativeMode(self) -> "Standard_Boolean":
        """GetRelativeMode(StlAPI_Writer self) -> Standard_Boolean"""
        return _StlAPI.StlAPI_Writer_GetRelativeMode(self)


    def SetRelativeMode(self, value: 'Standard_Boolean') -> "void":
        """SetRelativeMode(StlAPI_Writer self, Standard_Boolean value)"""
        return _StlAPI.StlAPI_Writer_SetRelativeMode(self, value)


    def GetASCIIMode(self) -> "Standard_Boolean":
        """GetASCIIMode(StlAPI_Writer self) -> Standard_Boolean"""
        return _StlAPI.StlAPI_Writer_GetASCIIMode(self)


    def SetASCIIMode(self, value: 'Standard_Boolean') -> "void":
        """SetASCIIMode(StlAPI_Writer self, Standard_Boolean value)"""
        return _StlAPI.StlAPI_Writer_SetASCIIMode(self, value)


    def Write(self, *args) -> "void":
        """
        * Converts a given shape to STL format and writes it to file with a given filename.

        :param aShape:
        :type aShape: TopoDS_Shape &
        :param aFileName:
        :type aFileName: char *
        :param InParallel: default value is Standard_False
        :type InParallel: bool
        :rtype: None

        """
        return _StlAPI.StlAPI_Writer_Write(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _StlAPI.delete_StlAPI_Writer
StlAPI_Writer.SetDeflection = new_instancemethod(_StlAPI.StlAPI_Writer_SetDeflection, None, StlAPI_Writer)
StlAPI_Writer.SetCoefficient = new_instancemethod(_StlAPI.StlAPI_Writer_SetCoefficient, None, StlAPI_Writer)
StlAPI_Writer.GetRelativeMode = new_instancemethod(_StlAPI.StlAPI_Writer_GetRelativeMode, None, StlAPI_Writer)
StlAPI_Writer.SetRelativeMode = new_instancemethod(_StlAPI.StlAPI_Writer_SetRelativeMode, None, StlAPI_Writer)
StlAPI_Writer.GetASCIIMode = new_instancemethod(_StlAPI.StlAPI_Writer_GetASCIIMode, None, StlAPI_Writer)
StlAPI_Writer.SetASCIIMode = new_instancemethod(_StlAPI.StlAPI_Writer_SetASCIIMode, None, StlAPI_Writer)
StlAPI_Writer.Write = new_instancemethod(_StlAPI.StlAPI_Writer_Write, None, StlAPI_Writer)
StlAPI_Writer_swigregister = _StlAPI.StlAPI_Writer_swigregister
StlAPI_Writer_swigregister(StlAPI_Writer)



