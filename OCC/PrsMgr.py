# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _PrsMgr.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PrsMgr')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PrsMgr')
    _PrsMgr = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PrsMgr', [dirname(__file__)])
        except ImportError:
            import _PrsMgr
            return _PrsMgr
        try:
            _mod = imp.load_module('_PrsMgr', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PrsMgr = swig_import_helper()
    del swig_import_helper
else:
    import _PrsMgr
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _PrsMgr.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_PrsMgr.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_PrsMgr.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_PrsMgr.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_PrsMgr.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_PrsMgr.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_PrsMgr.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_PrsMgr.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_PrsMgr.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_PrsMgr.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_PrsMgr.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_PrsMgr.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_PrsMgr.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_PrsMgr.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_PrsMgr.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_PrsMgr.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_PrsMgr.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _PrsMgr.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.MMgt
import OCC.Prs3d
import OCC.Quantity
import OCC.TCollection
import OCC.gp
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.Aspect
import OCC.TColStd
import OCC.Graphic3d
import OCC.Image
import OCC.NCollection
import OCC.Bnd
import OCC.OSD
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.HLRAlgo
import OCC.TopTools
import OCC.Message
import OCC.Poly
import OCC.TShort
import OCC.V3d
import OCC.Visual3d

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

PrsMgr_TOP_AllView = _PrsMgr.PrsMgr_TOP_AllView
PrsMgr_TOP_ProjectorDependant = _PrsMgr.PrsMgr_TOP_ProjectorDependant
class PrsMgr_ModedPresentation(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param thePrs:
        :type thePrs: Handle_PrsMgr_Presentation &
        :param theMode:
        :type theMode: int
        :rtype: None

        """
        _PrsMgr.PrsMgr_ModedPresentation_swiginit(self, _PrsMgr.new_PrsMgr_ModedPresentation(*args))

    def Presentation(self, *args) -> "Handle_PrsMgr_Presentation":
        """
        :rtype: Handle_PrsMgr_Presentation

        """
        return _PrsMgr.PrsMgr_ModedPresentation_Presentation(self, *args)


    def Mode(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _PrsMgr.PrsMgr_ModedPresentation_Mode(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_ModedPresentation
PrsMgr_ModedPresentation.Presentation = new_instancemethod(_PrsMgr.PrsMgr_ModedPresentation_Presentation, None, PrsMgr_ModedPresentation)
PrsMgr_ModedPresentation.Mode = new_instancemethod(_PrsMgr.PrsMgr_ModedPresentation_Mode, None, PrsMgr_ModedPresentation)
PrsMgr_ModedPresentation_swigregister = _PrsMgr.PrsMgr_ModedPresentation_swigregister
PrsMgr_ModedPresentation_swigregister(PrsMgr_ModedPresentation)

class PrsMgr_Presentation(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Destroy(self, *args) -> "void":
        """
        * Destructor

        :rtype: void

        """
        return _PrsMgr.PrsMgr_Presentation_Destroy(self, *args)


    def Presentation(self, *args) -> "Handle_Prs3d_Presentation":
        """
        :rtype: Handle_Prs3d_Presentation

        """
        return _PrsMgr.PrsMgr_Presentation_Presentation(self, *args)


    def PresentationManager(self, *args) -> "Handle_PrsMgr_PresentationManager":
        """
        * returns the PresentationManager in which the presentation has been created.

        :rtype: Handle_PrsMgr_PresentationManager

        """
        return _PrsMgr.PrsMgr_Presentation_PresentationManager(self, *args)


    def SetUpdateStatus(self, *args) -> "void":
        """
        :param theStat:
        :type theStat: bool
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentation_SetUpdateStatus(self, *args)


    def MustBeUpdated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_Presentation_MustBeUpdated(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_PrsMgr_Presentation(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_Presentation
PrsMgr_Presentation.Destroy = new_instancemethod(_PrsMgr.PrsMgr_Presentation_Destroy, None, PrsMgr_Presentation)
PrsMgr_Presentation.Presentation = new_instancemethod(_PrsMgr.PrsMgr_Presentation_Presentation, None, PrsMgr_Presentation)
PrsMgr_Presentation.PresentationManager = new_instancemethod(_PrsMgr.PrsMgr_Presentation_PresentationManager, None, PrsMgr_Presentation)
PrsMgr_Presentation.SetUpdateStatus = new_instancemethod(_PrsMgr.PrsMgr_Presentation_SetUpdateStatus, None, PrsMgr_Presentation)
PrsMgr_Presentation.MustBeUpdated = new_instancemethod(_PrsMgr.PrsMgr_Presentation_MustBeUpdated, None, PrsMgr_Presentation)
PrsMgr_Presentation_swigregister = _PrsMgr.PrsMgr_Presentation_swigregister
PrsMgr_Presentation_swigregister(PrsMgr_Presentation)

class Handle_PrsMgr_Presentation(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_Presentation_swiginit(self, _PrsMgr.new_Handle_PrsMgr_Presentation(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Presentation_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_Presentation
Handle_PrsMgr_Presentation.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation_Nullify, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation_IsNull, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation._get_reference = new_instancemethod(_PrsMgr.Handle_PrsMgr_Presentation__get_reference, None, Handle_PrsMgr_Presentation)
Handle_PrsMgr_Presentation_swigregister = _PrsMgr.Handle_PrsMgr_Presentation_swigregister
Handle_PrsMgr_Presentation_swigregister(Handle_PrsMgr_Presentation)

def Handle_PrsMgr_Presentation_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_PrsMgr_Presentation const":
    return _PrsMgr.Handle_PrsMgr_Presentation_DownCast(AnObject)
Handle_PrsMgr_Presentation_DownCast = _PrsMgr.Handle_PrsMgr_Presentation_DownCast

class PrsMgr_PresentationManager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a framework to manage displays and graphic entities with the 3D view theStructureManager.

        :param theStructureManager:
        :type theStructureManager: Handle_Graphic3d_StructureManager &
        :rtype: None

        """
        _PrsMgr.PrsMgr_PresentationManager_swiginit(self, _PrsMgr.new_PrsMgr_PresentationManager(*args))

    def Display(self, *args) -> "void":
        """
        * Displays the presentation of the object in the given Presentation manager with the given mode. The mode should be enumerated by the object which inherits PresentableObject.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Display(self, *args)


    def Erase(self, *args) -> "void":
        """
        * erases the presentation of the object in the given Presentation manager with the given mode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Erase(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clears the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: void

        """
        return _PrsMgr.PrsMgr_PresentationManager_Clear(self, *args)


    def SetVisibility(self, *args) -> "void":
        """
        * Sets the visibility of presentable object.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode:
        :type theMode: int
        :param theValue:
        :type theValue: bool
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetVisibility(self, *args)


    def Highlight(self, *args) -> "void":
        """
        * Highlights the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Highlight(self, *args)


    def Unhighlight(self, *args) -> "void":
        """
        * Removes highlighting from the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Unhighlight(self, *args)


    def SetDisplayPriority(self, *args) -> "void":
        """
        * Sets the display priority theNewPrior of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode:
        :type theMode: int
        :param theNewPrior:
        :type theNewPrior: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetDisplayPriority(self, *args)


    def DisplayPriority(self, *args) -> "Standard_Integer":
        """
        * Returns the display priority of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode:
        :type theMode: int
        :rtype: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_DisplayPriority(self, *args)


    def SetZLayer(self, *args) -> "void":
        """
        * Set Z layer ID for all presentations of the object.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theLayerId:
        :type theLayerId: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetZLayer(self, *args)


    def GetZLayer(self, *args) -> "Standard_Integer":
        """
        * Get Z layer ID assigned to all presentations of the object. Method returns -1 value if object has no presentations and is impossible to get layer index.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :rtype: int

        """
        return _PrsMgr.PrsMgr_PresentationManager_GetZLayer(self, *args)


    def IsDisplayed(self, *args) -> "Standard_Boolean":
        """
        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsDisplayed(self, *args)


    def IsHighlighted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the presentation of the presentable object thePrsObject in this framework with the display mode theMode is highlighted.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsHighlighted(self, *args)


    def Update(self, *args) -> "void":
        """
        * Updates the presentation of the presentable object thePrsObject in this framework with the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Update(self, *args)


    def BeginImmediateDraw(self, *args) -> "void":
        """
        * Resets the transient list of presentations previously displayed in immediate mode and begins accumulation of new list by following AddToImmediateList()/Color()/Highlight() calls.

        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_BeginImmediateDraw(self, *args)


    def ClearImmediateDraw(self, *args) -> "void":
        """
        * Resets the transient list of presentations previously displayed in immediate mode.

        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_ClearImmediateDraw(self, *args)


    def AddToImmediateList(self, *args) -> "void":
        """
        * Stores thePrs in the transient list of presentations to be displayed in immediate mode. Will be taken in account in EndImmediateDraw method.

        :param thePrs:
        :type thePrs: Handle_Prs3d_Presentation &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_AddToImmediateList(self, *args)


    def EndImmediateDraw(self, *args) -> "void":
        """
        * Allows rapid drawing of the view theView by avoiding an update of the whole background.

        :param theView:
        :type theView: Handle_V3d_View &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_EndImmediateDraw(self, *args)


    def IsImmediateModeOn(self, *args) -> "Standard_Boolean":
        """
        * Returns true if Presentation Manager is accumulating transient list of presentations to be displayed in immediate mode.

        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_IsImmediateModeOn(self, *args)


    def Color(self, *args) -> "void":
        """
        * Highlights the graphic object thePrsObject in the color theColor. thePrsObject has the display mode theMode; this has the default value of 0, that is, the wireframe display mode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theColor: default value is Quantity_NOC_YELLOW
        :type theColor: Quantity_NameOfColor
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Color(self, *args)


    def BoundBox(self, *args) -> "void":
        """
        * highlights the boundbox of the presentation

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_BoundBox(self, *args)


    def Connect(self, *args) -> "void":
        """
        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theOtherObject:
        :type theOtherObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :param theOtherMode: default value is 0
        :type theOtherMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Connect(self, *args)


    def Transform(self, *args) -> "void":
        """
        * Sets the transformation theTransformation for the presentable object thePrsObject. thePrsObject has the display mode theMode; this has the default value of 0, that is, the wireframe display mode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theTransformation:
        :type theTransformation: Handle_Geom_Transformation &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_Transform(self, *args)


    def StructureManager(self, *args) -> "Handle_Graphic3d_StructureManager":
        """
        * Returns the structure manager.

        :rtype: Handle_Graphic3d_StructureManager

        """
        return _PrsMgr.PrsMgr_PresentationManager_StructureManager(self, *args)


    def SetShadingAspect(self, *args) -> "void":
        """
        * this method will change the color and the aspect of the presentations containing shaded structures.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theColor:
        :type theColor: Quantity_NameOfColor
        :param theMaterial:
        :type theMaterial: Graphic3d_NameOfMaterial
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        * this method will change the color and the aspect of the presentations containing shaded structures.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theShadingAspect:
        :type theShadingAspect: Handle_Prs3d_ShadingAspect &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_PresentationManager_SetShadingAspect(self, *args)


    def HasPresentation(self, *args) -> "Standard_Boolean":
        """
        * Returns true if there is a presentation of the presentable object thePrsObject in this framework, thePrsObject having the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: bool

        """
        return _PrsMgr.PrsMgr_PresentationManager_HasPresentation(self, *args)


    def Presentation(self, *args) -> "Handle_PrsMgr_Presentation":
        """
        * Returns the presentation Presentation of the presentable object thePrsObject in this framework. thePrsObject has the display mode theMode.

        :param thePrsObject:
        :type thePrsObject: Handle_PrsMgr_PresentableObject &
        :param theMode: default value is 0
        :type theMode: int
        :rtype: Handle_PrsMgr_Presentation

        """
        return _PrsMgr.PrsMgr_PresentationManager_Presentation(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_PrsMgr_PresentationManager(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_PresentationManager
PrsMgr_PresentationManager.Display = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Display, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Erase = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Erase, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Clear = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Clear, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetVisibility = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetVisibility, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Highlight = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Highlight, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Unhighlight = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Unhighlight, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetDisplayPriority = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetDisplayPriority, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.DisplayPriority = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_DisplayPriority, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetZLayer, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.GetZLayer = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_GetZLayer, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsDisplayed = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsDisplayed, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsHighlighted = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsHighlighted, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Update = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Update, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.BeginImmediateDraw = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_BeginImmediateDraw, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.ClearImmediateDraw = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_ClearImmediateDraw, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.AddToImmediateList = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_AddToImmediateList, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.EndImmediateDraw = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_EndImmediateDraw, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.IsImmediateModeOn = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_IsImmediateModeOn, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Color = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Color, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.BoundBox = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_BoundBox, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Connect = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Connect, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Transform = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Transform, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.StructureManager = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_StructureManager, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.SetShadingAspect = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_SetShadingAspect, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.HasPresentation = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_HasPresentation, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager.Presentation = new_instancemethod(_PrsMgr.PrsMgr_PresentationManager_Presentation, None, PrsMgr_PresentationManager)
PrsMgr_PresentationManager_swigregister = _PrsMgr.PrsMgr_PresentationManager_swigregister
PrsMgr_PresentationManager_swigregister(PrsMgr_PresentationManager)

class Handle_PrsMgr_PresentationManager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_PresentationManager_swiginit(self, _PrsMgr.new_Handle_PrsMgr_PresentationManager(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_PresentationManager_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_PresentationManager
Handle_PrsMgr_PresentationManager.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager_Nullify, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager_IsNull, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager._get_reference = new_instancemethod(_PrsMgr.Handle_PrsMgr_PresentationManager__get_reference, None, Handle_PrsMgr_PresentationManager)
Handle_PrsMgr_PresentationManager_swigregister = _PrsMgr.Handle_PrsMgr_PresentationManager_swigregister
Handle_PrsMgr_PresentationManager_swigregister(Handle_PrsMgr_PresentationManager)

def Handle_PrsMgr_PresentationManager_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_PrsMgr_PresentationManager const":
    return _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast(AnObject)
Handle_PrsMgr_PresentationManager_DownCast = _PrsMgr.Handle_PrsMgr_PresentationManager_DownCast

class PrsMgr_Presentations(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: PrsMgr_Presentations &
        :rtype: None

        """
        _PrsMgr.PrsMgr_Presentations_swiginit(self, _PrsMgr.new_PrsMgr_Presentations(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Clear(self, *args)


    def Assign(self, *args) -> "PrsMgr_Presentations const &":
        """
        :param Other:
        :type Other: PrsMgr_Presentations &
        :rtype: PrsMgr_Presentations

        """
        return _PrsMgr.PrsMgr_Presentations_Assign(self, *args)


    def Set(self, *args) -> "PrsMgr_Presentations const &":
        """
        :param Other:
        :type Other: PrsMgr_Presentations &
        :rtype: PrsMgr_Presentations

        """
        return _PrsMgr.PrsMgr_Presentations_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: PrsMgr_ModedPresentation &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_InsertAfter(self, *args)


    def First(self, *args) -> "PrsMgr_ModedPresentation const &":
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_First(self, *args)


    def Last(self, *args) -> "PrsMgr_ModedPresentation const &":
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: PrsMgr_Presentations &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Split(self, *args)


    def Value(self, *args) -> "PrsMgr_ModedPresentation const &":
        """
        :param Index:
        :type Index: int
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: PrsMgr_ModedPresentation &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_SetValue(self, *args)


    def ChangeValue(self, *args) -> "PrsMgr_ModedPresentation &":
        """
        :param Index:
        :type Index: int
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_Presentations_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Presentations_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_Presentations
PrsMgr_Presentations.Clear = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Clear, None, PrsMgr_Presentations)
PrsMgr_Presentations.Assign = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Assign, None, PrsMgr_Presentations)
PrsMgr_Presentations.Set = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Set, None, PrsMgr_Presentations)
PrsMgr_Presentations.Append = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Append, None, PrsMgr_Presentations)
PrsMgr_Presentations.Prepend = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Prepend, None, PrsMgr_Presentations)
PrsMgr_Presentations.InsertBefore = new_instancemethod(_PrsMgr.PrsMgr_Presentations_InsertBefore, None, PrsMgr_Presentations)
PrsMgr_Presentations.InsertAfter = new_instancemethod(_PrsMgr.PrsMgr_Presentations_InsertAfter, None, PrsMgr_Presentations)
PrsMgr_Presentations.First = new_instancemethod(_PrsMgr.PrsMgr_Presentations_First, None, PrsMgr_Presentations)
PrsMgr_Presentations.Last = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Last, None, PrsMgr_Presentations)
PrsMgr_Presentations.Split = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Split, None, PrsMgr_Presentations)
PrsMgr_Presentations.Value = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Value, None, PrsMgr_Presentations)
PrsMgr_Presentations.SetValue = new_instancemethod(_PrsMgr.PrsMgr_Presentations_SetValue, None, PrsMgr_Presentations)
PrsMgr_Presentations.ChangeValue = new_instancemethod(_PrsMgr.PrsMgr_Presentations_ChangeValue, None, PrsMgr_Presentations)
PrsMgr_Presentations.Remove = new_instancemethod(_PrsMgr.PrsMgr_Presentations_Remove, None, PrsMgr_Presentations)
PrsMgr_Presentations_swigregister = _PrsMgr.PrsMgr_Presentations_swigregister
PrsMgr_Presentations_swigregister(PrsMgr_Presentations)

class PrsMgr_Prs(OCC.Prs3d.Prs3d_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param theStructManager:
        :type theStructManager: Handle_Graphic3d_StructureManager &
        :param thePresentation:
        :type thePresentation: PrsMgr_PresentationPointer &
        :param theTypeOfPresentation3d:
        :type theTypeOfPresentation3d: PrsMgr_TypeOfPresentation3d
        :rtype: None

        """
        _PrsMgr.PrsMgr_Prs_swiginit(self, _PrsMgr.new_PrsMgr_Prs(*args))

    def Compute(self, *args) -> "void":
        """
        :rtype: None

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: Handle_Graphic3d_Structure

        * the 'degenerated' Structure is displayed with a transformation defined by <AMatrix> which is not a Pure Translation. We have to take in account this Transformation in the computation of hidden line removal... returns a filled Graphic Structure.

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :rtype: Handle_Graphic3d_Structure

        * No need to return a structure, just to fill <ComputedStruct> ....

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param ComputedStruct:
        :type ComputedStruct: Handle_Graphic3d_Structure &
        :rtype: None

        * No Need to return a Structure, just to Fill <aStructure>. The Trsf has to be taken in account in the computation (Rotation Part....)

        :param aProjector:
        :type aProjector: Handle_Graphic3d_DataStructureManager &
        :param AMatrix:
        :type AMatrix: TColStd_Array2OfReal &
        :param aStructure:
        :type aStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _PrsMgr.PrsMgr_Prs_Compute(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_PrsMgr_Prs(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_Prs
PrsMgr_Prs.Compute = new_instancemethod(_PrsMgr.PrsMgr_Prs_Compute, None, PrsMgr_Prs)
PrsMgr_Prs_swigregister = _PrsMgr.PrsMgr_Prs_swigregister
PrsMgr_Prs_swigregister(PrsMgr_Prs)

class Handle_PrsMgr_Prs(OCC.Prs3d.Handle_Prs3d_Presentation):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_Prs_swiginit(self, _PrsMgr.new_Handle_PrsMgr_Prs(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_Prs_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_Prs
Handle_PrsMgr_Prs.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs_Nullify, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs_IsNull, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs._get_reference = new_instancemethod(_PrsMgr.Handle_PrsMgr_Prs__get_reference, None, Handle_PrsMgr_Prs)
Handle_PrsMgr_Prs_swigregister = _PrsMgr.Handle_PrsMgr_Prs_swigregister
Handle_PrsMgr_Prs_swigregister(Handle_PrsMgr_Prs)

def Handle_PrsMgr_Prs_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_PrsMgr_Prs const":
    return _PrsMgr.Handle_PrsMgr_Prs_DownCast(AnObject)
Handle_PrsMgr_Prs_DownCast = _PrsMgr.Handle_PrsMgr_Prs_DownCast

class PrsMgr_SequenceNodeOfPresentations(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: PrsMgr_ModedPresentation &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _PrsMgr.PrsMgr_SequenceNodeOfPresentations_swiginit(self, _PrsMgr.new_PrsMgr_SequenceNodeOfPresentations(*args))

    def Value(self, *args) -> "PrsMgr_ModedPresentation &":
        """
        :rtype: PrsMgr_ModedPresentation

        """
        return _PrsMgr.PrsMgr_SequenceNodeOfPresentations_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_PrsMgr_SequenceNodeOfPresentations(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _PrsMgr.delete_PrsMgr_SequenceNodeOfPresentations
PrsMgr_SequenceNodeOfPresentations.Value = new_instancemethod(_PrsMgr.PrsMgr_SequenceNodeOfPresentations_Value, None, PrsMgr_SequenceNodeOfPresentations)
PrsMgr_SequenceNodeOfPresentations_swigregister = _PrsMgr.PrsMgr_SequenceNodeOfPresentations_swigregister
PrsMgr_SequenceNodeOfPresentations_swigregister(PrsMgr_SequenceNodeOfPresentations)

class Handle_PrsMgr_SequenceNodeOfPresentations(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_swiginit(self, _PrsMgr.new_Handle_PrsMgr_SequenceNodeOfPresentations(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _PrsMgr.delete_Handle_PrsMgr_SequenceNodeOfPresentations
Handle_PrsMgr_SequenceNodeOfPresentations.Nullify = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_Nullify, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations.IsNull = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_IsNull, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations._get_reference = new_instancemethod(_PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations__get_reference, None, Handle_PrsMgr_SequenceNodeOfPresentations)
Handle_PrsMgr_SequenceNodeOfPresentations_swigregister = _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_swigregister
Handle_PrsMgr_SequenceNodeOfPresentations_swigregister(Handle_PrsMgr_SequenceNodeOfPresentations)

def Handle_PrsMgr_SequenceNodeOfPresentations_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_PrsMgr_SequenceNodeOfPresentations const":
    return _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast(AnObject)
Handle_PrsMgr_SequenceNodeOfPresentations_DownCast = _PrsMgr.Handle_PrsMgr_SequenceNodeOfPresentations_DownCast



