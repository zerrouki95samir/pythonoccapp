# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TopBas.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TopBas')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TopBas')
    _TopBas = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TopBas', [dirname(__file__)])
        except ImportError:
            import _TopBas
            return _TopBas
        try:
            _mod = imp.load_module('_TopBas', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TopBas = swig_import_helper()
    del swig_import_helper
else:
    import _TopBas
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopBas.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TopBas.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TopBas.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TopBas.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TopBas.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TopBas.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TopBas.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TopBas.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TopBas.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TopBas.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TopBas.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TopBas.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TopBas.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TopBas.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TopBas.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TopBas.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TopBas.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TopBas.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.TCollection
import OCC.MMgt
import OCC.TopAbs

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class TopBas_ListIteratorOfListOfTestInterference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TopBas_ListOfTestInterference &
        :rtype: None

        """
        _TopBas.TopBas_ListIteratorOfListOfTestInterference_swiginit(self, _TopBas.new_TopBas_ListIteratorOfListOfTestInterference(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: TopBas_ListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListIteratorOfListOfTestInterference_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TopBas.TopBas_ListIteratorOfListOfTestInterference_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TopBas.TopBas_ListIteratorOfListOfTestInterference_Next(self, *args)


    def Value(self, *args) -> "TopBas_TestInterference &":
        """
        :rtype: TopBas_TestInterference

        """
        return _TopBas.TopBas_ListIteratorOfListOfTestInterference_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopBas.delete_TopBas_ListIteratorOfListOfTestInterference
TopBas_ListIteratorOfListOfTestInterference.Initialize = new_instancemethod(_TopBas.TopBas_ListIteratorOfListOfTestInterference_Initialize, None, TopBas_ListIteratorOfListOfTestInterference)
TopBas_ListIteratorOfListOfTestInterference.More = new_instancemethod(_TopBas.TopBas_ListIteratorOfListOfTestInterference_More, None, TopBas_ListIteratorOfListOfTestInterference)
TopBas_ListIteratorOfListOfTestInterference.Next = new_instancemethod(_TopBas.TopBas_ListIteratorOfListOfTestInterference_Next, None, TopBas_ListIteratorOfListOfTestInterference)
TopBas_ListIteratorOfListOfTestInterference.Value = new_instancemethod(_TopBas.TopBas_ListIteratorOfListOfTestInterference_Value, None, TopBas_ListIteratorOfListOfTestInterference)
TopBas_ListIteratorOfListOfTestInterference_swigregister = _TopBas.TopBas_ListIteratorOfListOfTestInterference_swigregister
TopBas_ListIteratorOfListOfTestInterference_swigregister(TopBas_ListIteratorOfListOfTestInterference)

class TopBas_ListNodeOfListOfTestInterference(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TopBas_TestInterference &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TopBas.TopBas_ListNodeOfListOfTestInterference_swiginit(self, _TopBas.new_TopBas_ListNodeOfListOfTestInterference(*args))

    def Value(self, *args) -> "TopBas_TestInterference &":
        """
        :rtype: TopBas_TestInterference

        """
        return _TopBas.TopBas_ListNodeOfListOfTestInterference_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TopBas_ListNodeOfListOfTestInterference(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TopBas.delete_TopBas_ListNodeOfListOfTestInterference
TopBas_ListNodeOfListOfTestInterference.Value = new_instancemethod(_TopBas.TopBas_ListNodeOfListOfTestInterference_Value, None, TopBas_ListNodeOfListOfTestInterference)
TopBas_ListNodeOfListOfTestInterference_swigregister = _TopBas.TopBas_ListNodeOfListOfTestInterference_swigregister
TopBas_ListNodeOfListOfTestInterference_swigregister(TopBas_ListNodeOfListOfTestInterference)

class Handle_TopBas_ListNodeOfListOfTestInterference(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_swiginit(self, _TopBas.new_Handle_TopBas_ListNodeOfListOfTestInterference(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TopBas.delete_Handle_TopBas_ListNodeOfListOfTestInterference
Handle_TopBas_ListNodeOfListOfTestInterference.Nullify = new_instancemethod(_TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_Nullify, None, Handle_TopBas_ListNodeOfListOfTestInterference)
Handle_TopBas_ListNodeOfListOfTestInterference.IsNull = new_instancemethod(_TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_IsNull, None, Handle_TopBas_ListNodeOfListOfTestInterference)
Handle_TopBas_ListNodeOfListOfTestInterference._get_reference = new_instancemethod(_TopBas.Handle_TopBas_ListNodeOfListOfTestInterference__get_reference, None, Handle_TopBas_ListNodeOfListOfTestInterference)
Handle_TopBas_ListNodeOfListOfTestInterference_swigregister = _TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_swigregister
Handle_TopBas_ListNodeOfListOfTestInterference_swigregister(Handle_TopBas_ListNodeOfListOfTestInterference)

def Handle_TopBas_ListNodeOfListOfTestInterference_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TopBas_ListNodeOfListOfTestInterference const":
    return _TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_DownCast(AnObject)
Handle_TopBas_ListNodeOfListOfTestInterference_DownCast = _TopBas.Handle_TopBas_ListNodeOfListOfTestInterference_DownCast

class TopBas_ListOfTestInterference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :rtype: None

        """
        _TopBas.TopBas_ListOfTestInterference_swiginit(self, _TopBas.new_TopBas_ListOfTestInterference(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TopBas.TopBas_ListOfTestInterference_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TopBas.TopBas_ListOfTestInterference_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: TopBas_TestInterference &
        :rtype: None

        :param I:
        :type I: TopBas_TestInterference &
        :param theIt:
        :type theIt: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: TopBas_TestInterference &
        :rtype: None

        :param I:
        :type I: TopBas_TestInterference &
        :param theIt:
        :type theIt: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Append(self, *args)


    def First(self, *args) -> "TopBas_TestInterference &":
        """
        :rtype: TopBas_TestInterference

        """
        return _TopBas.TopBas_ListOfTestInterference_First(self, *args)


    def Last(self, *args) -> "TopBas_TestInterference &":
        """
        :rtype: TopBas_TestInterference

        """
        return _TopBas.TopBas_ListOfTestInterference_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: TopBas_TestInterference &
        :param It:
        :type It: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :param It:
        :type It: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: TopBas_TestInterference &
        :param It:
        :type It: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        :param Other:
        :type Other: TopBas_ListOfTestInterference &
        :param It:
        :type It: TopBas_ListIteratorOfListOfTestInterference &
        :rtype: None

        """
        return _TopBas.TopBas_ListOfTestInterference_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopBas.delete_TopBas_ListOfTestInterference
TopBas_ListOfTestInterference.Assign = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Assign, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Set = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Set, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Extent = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Extent, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Clear = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Clear, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.IsEmpty = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_IsEmpty, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Prepend = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Prepend, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Append = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Append, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.First = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_First, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Last = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Last, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.RemoveFirst = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_RemoveFirst, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.Remove = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_Remove, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.InsertBefore = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_InsertBefore, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference.InsertAfter = new_instancemethod(_TopBas.TopBas_ListOfTestInterference_InsertAfter, None, TopBas_ListOfTestInterference)
TopBas_ListOfTestInterference_swigregister = _TopBas.TopBas_ListOfTestInterference_swigregister
TopBas_ListOfTestInterference_swigregister(TopBas_ListOfTestInterference)

class TopBas_TestInterference(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Inters:
        :type Inters: float &
        :param Bound:
        :type Bound: int &
        :param Orient:
        :type Orient: TopAbs_Orientation
        :param Trans:
        :type Trans: TopAbs_Orientation
        :param BTrans:
        :type BTrans: TopAbs_Orientation
        :rtype: None

        """
        _TopBas.TopBas_TestInterference_swiginit(self, _TopBas.new_TopBas_TestInterference(*args))

    def Intersection(self, *args) -> "Standard_Real const &":
        """
        :param I:
        :type I: float &
        :rtype: None

        :rtype: float

        """
        return _TopBas.TopBas_TestInterference_Intersection(self, *args)


    def GetChangeIntersection(self) -> "Standard_Real":
        """GetChangeIntersection(TopBas_TestInterference self) -> Standard_Real"""
        return _TopBas.TopBas_TestInterference_GetChangeIntersection(self)


    def SetChangeIntersection(self, value: 'Standard_Real') -> "void":
        """SetChangeIntersection(TopBas_TestInterference self, Standard_Real value)"""
        return _TopBas.TopBas_TestInterference_SetChangeIntersection(self, value)


    def Boundary(self, *args) -> "Standard_Integer const &":
        """
        :param B:
        :type B: int &
        :rtype: None

        :rtype: int

        """
        return _TopBas.TopBas_TestInterference_Boundary(self, *args)


    def GetChangeBoundary(self) -> "Standard_Integer":
        """GetChangeBoundary(TopBas_TestInterference self) -> Standard_Integer"""
        return _TopBas.TopBas_TestInterference_GetChangeBoundary(self)


    def SetChangeBoundary(self, value: 'Standard_Integer') -> "void":
        """SetChangeBoundary(TopBas_TestInterference self, Standard_Integer value)"""
        return _TopBas.TopBas_TestInterference_SetChangeBoundary(self, value)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :param O:
        :type O: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _TopBas.TopBas_TestInterference_Orientation(self, *args)


    def Transition(self, *args) -> "TopAbs_Orientation":
        """
        :param Tr:
        :type Tr: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _TopBas.TopBas_TestInterference_Transition(self, *args)


    def BoundaryTransition(self, *args) -> "TopAbs_Orientation":
        """
        :param BTr:
        :type BTr: TopAbs_Orientation
        :rtype: None

        :rtype: TopAbs_Orientation

        """
        return _TopBas.TopBas_TestInterference_BoundaryTransition(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopBas.delete_TopBas_TestInterference
TopBas_TestInterference.Intersection = new_instancemethod(_TopBas.TopBas_TestInterference_Intersection, None, TopBas_TestInterference)
TopBas_TestInterference.GetChangeIntersection = new_instancemethod(_TopBas.TopBas_TestInterference_GetChangeIntersection, None, TopBas_TestInterference)
TopBas_TestInterference.SetChangeIntersection = new_instancemethod(_TopBas.TopBas_TestInterference_SetChangeIntersection, None, TopBas_TestInterference)
TopBas_TestInterference.Boundary = new_instancemethod(_TopBas.TopBas_TestInterference_Boundary, None, TopBas_TestInterference)
TopBas_TestInterference.GetChangeBoundary = new_instancemethod(_TopBas.TopBas_TestInterference_GetChangeBoundary, None, TopBas_TestInterference)
TopBas_TestInterference.SetChangeBoundary = new_instancemethod(_TopBas.TopBas_TestInterference_SetChangeBoundary, None, TopBas_TestInterference)
TopBas_TestInterference.Orientation = new_instancemethod(_TopBas.TopBas_TestInterference_Orientation, None, TopBas_TestInterference)
TopBas_TestInterference.Transition = new_instancemethod(_TopBas.TopBas_TestInterference_Transition, None, TopBas_TestInterference)
TopBas_TestInterference.BoundaryTransition = new_instancemethod(_TopBas.TopBas_TestInterference_BoundaryTransition, None, TopBas_TestInterference)
TopBas_TestInterference_swigregister = _TopBas.TopBas_TestInterference_swigregister
TopBas_TestInterference_swigregister(TopBas_TestInterference)



