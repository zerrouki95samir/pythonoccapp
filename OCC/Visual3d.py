# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Visual3d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Visual3d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Visual3d')
    _Visual3d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Visual3d', [dirname(__file__)])
        except ImportError:
            import _Visual3d
            return _Visual3d
        try:
            _mod = imp.load_module('_Visual3d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Visual3d = swig_import_helper()
    del swig_import_helper
else:
    import _Visual3d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Visual3d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Visual3d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Visual3d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Visual3d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Visual3d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Visual3d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Visual3d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Visual3d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Visual3d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Visual3d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Visual3d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Visual3d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Visual3d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Visual3d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Visual3d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Visual3d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Visual3d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Visual3d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.Graphic3d
import OCC.MMgt
import OCC.gp
import OCC.Quantity
import OCC.TCollection
import OCC.Aspect
import OCC.TColStd
import OCC.Image
import OCC.NCollection
import OCC.Bnd
import OCC.OSD

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

Visual3d_TOA_YES = _Visual3d.Visual3d_TOA_YES
Visual3d_TOA_NO = _Visual3d.Visual3d_TOA_NO
Visual3d_TOA_COMPUTE = _Visual3d.Visual3d_TOA_COMPUTE
Visual3d_TOBM_AUTOMATIC = _Visual3d.Visual3d_TOBM_AUTOMATIC
Visual3d_TOBM_FORCE = _Visual3d.Visual3d_TOBM_FORCE
Visual3d_TOBM_DISABLE = _Visual3d.Visual3d_TOBM_DISABLE
Visual3d_TOLS_AMBIENT = _Visual3d.Visual3d_TOLS_AMBIENT
Visual3d_TOLS_DIRECTIONAL = _Visual3d.Visual3d_TOLS_DIRECTIONAL
Visual3d_TOLS_POSITIONAL = _Visual3d.Visual3d_TOLS_POSITIONAL
Visual3d_TOLS_SPOT = _Visual3d.Visual3d_TOLS_SPOT
Visual3d_TOM_NONE = _Visual3d.Visual3d_TOM_NONE
Visual3d_TOM_FACET = _Visual3d.Visual3d_TOM_FACET
Visual3d_TOM_VERTEX = _Visual3d.Visual3d_TOM_VERTEX
Visual3d_TOM_FRAGMENT = _Visual3d.Visual3d_TOM_FRAGMENT
Visual3d_TOO_TOPFIRST = _Visual3d.Visual3d_TOO_TOPFIRST
Visual3d_TOO_BOTTOMFIRST = _Visual3d.Visual3d_TOO_BOTTOMFIRST
Visual3d_TOP_PERSPECTIVE = _Visual3d.Visual3d_TOP_PERSPECTIVE
Visual3d_TOP_PARALLEL = _Visual3d.Visual3d_TOP_PARALLEL
Visual3d_TOD_NONE = _Visual3d.Visual3d_TOD_NONE
Visual3d_TOD_ENVIRONMENT = _Visual3d.Visual3d_TOD_ENVIRONMENT
Visual3d_TOD_ALL = _Visual3d.Visual3d_TOD_ALL
Visual3d_TOV_WIREFRAME = _Visual3d.Visual3d_TOV_WIREFRAME
Visual3d_TOV_SHADING = _Visual3d.Visual3d_TOV_SHADING
class Visual3d_ContextPick(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context from default values //! Aperture	: 4.0 Depth	: 10 Order	: TOO_TOPFIRST

        :rtype: None

        * Creates a context with the values defined Warning: Raises ContextPickDefinitionError if <Depth> or <Aperture> is a negative value.

        :param Aperture:
        :type Aperture: float
        :param Depth:
        :type Depth: int
        :param Order:
        :type Order: Visual3d_TypeOfOrder
        :rtype: None

        """
        _Visual3d.Visual3d_ContextPick_swiginit(self, _Visual3d.new_Visual3d_ContextPick(*args))

    def SetAperture(self, *args) -> "void":
        """
        * Modifies the size of the pick window. Category: Methods to modifies the class definition Warning: Raises ContextPickDefinitionError if <Aperture> is a negative value.

        :param Aperture:
        :type Aperture: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetAperture(self, *args)


    def SetDepth(self, *args) -> "void":
        """
        * Modifies the pick depth a priori. Category: Methods to modifies the class definition Warning: Raises ContextPickDefinitionError if <Depth> is a negative value.

        :param Depth:
        :type Depth: int
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetDepth(self, *args)


    def SetOrder(self, *args) -> "void":
        """
        * Modifies the order of picking. //! TypeOfOrder : TOO_TOPFIRST TOO_BOTTOMFIRST

        :param Order:
        :type Order: Visual3d_TypeOfOrder
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextPick_SetOrder(self, *args)


    def Aperture(self, *args) -> "Standard_Real":
        """
        * Returns the size of the pick window <self>.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextPick_Aperture(self, *args)


    def Depth(self, *args) -> "Standard_Integer":
        """
        * Returns the effective pick depth of <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_ContextPick_Depth(self, *args)


    def Order(self, *args) -> "Visual3d_TypeOfOrder":
        """
        * Returns the order of picking of <self>. //! TypeOfOrder	: TOO_TOPFIRST TOO_BOTTOMFIRST

        :rtype: Visual3d_TypeOfOrder

        """
        return _Visual3d.Visual3d_ContextPick_Order(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_ContextPick
Visual3d_ContextPick.SetAperture = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetAperture, None, Visual3d_ContextPick)
Visual3d_ContextPick.SetDepth = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetDepth, None, Visual3d_ContextPick)
Visual3d_ContextPick.SetOrder = new_instancemethod(_Visual3d.Visual3d_ContextPick_SetOrder, None, Visual3d_ContextPick)
Visual3d_ContextPick.Aperture = new_instancemethod(_Visual3d.Visual3d_ContextPick_Aperture, None, Visual3d_ContextPick)
Visual3d_ContextPick.Depth = new_instancemethod(_Visual3d.Visual3d_ContextPick_Depth, None, Visual3d_ContextPick)
Visual3d_ContextPick.Order = new_instancemethod(_Visual3d.Visual3d_ContextPick_Order, None, Visual3d_ContextPick)
Visual3d_ContextPick_swigregister = _Visual3d.Visual3d_ContextPick_swigregister
Visual3d_ContextPick_swigregister(Visual3d_ContextPick)

class Visual3d_ContextView(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a context from default values //! Aliasing		 : OFF BackZClipping	 : OFF FrontZClipping	 : OFF Depth-cueing	 : OFF Light source	 : 0 Clipping plane	 : 0 Type Of Visualization : TOV_WIREFRAME Type Of Model	 : TOM_NONE Type Of SurfaceDetail : TOSD_NONE

        :rtype: None

        """
        _Visual3d.Visual3d_ContextView_swiginit(self, _Visual3d.new_Visual3d_ContextView(*args))

    def SetSurfaceDetail(self, *args) -> "void":
        """
        * Selects the kind of rendering default to: TOSD_NONE

        :param TOSD:
        :type TOSD: Visual3d_TypeOfSurfaceDetail
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetSurfaceDetail(self, *args)


    def SetTextureEnv(self, *args) -> "void":
        """
        * Sets the environment texture to use no environment texture by default

        :param ATexture:
        :type ATexture: Handle_Graphic3d_TextureEnv &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetTextureEnv(self, *args)


    def SetAliasingOn(self, *args) -> "void":
        """
        * Activates antialiasing. Antialiasing can be activated on all the structures in the view

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetAliasingOn(self, *args)


    def SetAliasingOff(self, *args) -> "void":
        """
        * Deactivates the antialiasing.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetAliasingOff(self, *args)


    def SetDepthCueingBackPlane(self, *args) -> "void":
        """
        * Modifies the back depth-cueing plane. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> is front of <FrontPlane> and DepthCueing is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingBackPlane(self, *args)


    def SetDepthCueingFrontPlane(self, *args) -> "void":
        """
        * Modifies the front depth-cueing plane. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> is front of <FrontPlane> and DepthCueing is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingFrontPlane(self, *args)


    def SetDepthCueingOn(self, *args) -> "void":
        """
        * Activates the depth-cueing. Depth-cueing can be activated on all structures present in the view. Category: Methods to modify the class definition Warning: Raises DepthCueingDefinitionError if <BackPlane> is front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingOn(self, *args)


    def SetDepthCueingOff(self, *args) -> "void":
        """
        * Deactivates the depth-cueing.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetDepthCueingOff(self, *args)


    def ClipPlanes(self, *args) -> "Graphic3d_SequenceOfHClipPlane const &":
        """
        * Returns sequence of clip planes. returns sequence of clip planes.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _Visual3d.Visual3d_ContextView_ClipPlanes(self, *args)


    def ChangeClipPlanes(self, *args) -> "Graphic3d_SequenceOfHClipPlane &":
        """
        * Change clip planes. returns sequence of clip planes.

        :rtype: Graphic3d_SequenceOfHClipPlane

        """
        return _Visual3d.Visual3d_ContextView_ChangeClipPlanes(self, *args)


    def SetLightOn(self, *args) -> "void":
        """
        * Activates the light source <ALight>

        :param ALight:
        :type ALight: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetLightOn(self, *args)


    def SetLightOff(self, *args) -> "void":
        """
        * Deactivates the light source <ALight>

        :param ALight:
        :type ALight: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetLightOff(self, *args)


    def SetModel(self, *args) -> "void":
        """
        * Modifies the shading model when the type of visualization is TOV_SHADING

        :param AModel:
        :type AModel: Visual3d_TypeOfModel
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetModel(self, *args)


    def SetVisualization(self, *args) -> "void":
        """
        * Modifies the mode of visualization. //! TypeOfVisualization	: TOV_WIREFRAME TOV_SHADING

        :param AVisual:
        :type AVisual: Visual3d_TypeOfVisualization
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetVisualization(self, *args)


    def SetZClippingBackPlane(self, *args) -> "void":
        """
        * Modifies the back Z-clipping plane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is front of <FrontPlane> and ZClipping is ON.

        :param ABack:
        :type ABack: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingBackPlane(self, *args)


    def SetZClippingFrontPlane(self, *args) -> "void":
        """
        * Modifies the front Z-clipping plane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is front of <FrontPlane> and ZClipping is ON.

        :param AFront:
        :type AFront: float
        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingFrontPlane(self, *args)


    def SetZClippingOn(self, *args) -> "void":
        """
        * Activates the Z-clipping planes defined by SetZClippingFrontPlane and SetZClippingBackPlane. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingOn(self, *args)


    def SetZClippingOff(self, *args) -> "void":
        """
        * Deactivates the Z-clipping planes defined by SetFrontPlane and SetBackPlane.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetZClippingOff(self, *args)


    def SetFrontZClippingOn(self, *args) -> "void":
        """
        * Activates the front Z-clipping plane defined by SetFrontPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetFrontZClippingOn(self, *args)


    def SetFrontZClippingOff(self, *args) -> "void":
        """
        * Deactivates the front Z-clipping plane defined by SetFrontPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetFrontZClippingOff(self, *args)


    def SetBackZClippingOn(self, *args) -> "void":
        """
        * Activates the back Z-clipping plane defined by SetBackPlane method. Category: Methods to modify the class definition Warning: Raises ZClippingDefinitionError if <BackPlane> is front of <FrontPlane>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetBackZClippingOn(self, *args)


    def SetBackZClippingOff(self, *args) -> "void":
        """
        * Deactivates the back Z-clipping plane defined by SetBackPlane method.

        :rtype: None

        """
        return _Visual3d.Visual3d_ContextView_SetBackZClippingOff(self, *args)


    def ActivatedLights(self, *args) -> "Handle_Visual3d_HSequenceOfLight":
        """
        * Returns the group of active light sources in the view of context <self>.

        :rtype: Handle_Visual3d_HSequenceOfLight

        """
        return _Visual3d.Visual3d_ContextView_ActivatedLights(self, *args)


    def NumberOfActivatedLights(self, *args) -> "Standard_Integer":
        """
        * Returns the number of active light sources in the view of context <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_ContextView_NumberOfActivatedLights(self, *args)


    def ActivatedLight(self, *args) -> "Handle_Visual3d_Light":
        """
        :param AnIndex:
        :type AnIndex: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_ContextView_ActivatedLight(self, *args)


    def AliasingIsOn(self, *args) -> "Standard_Boolean":
        """
        * Returns the activity of the aliasing.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_AliasingIsOn(self, *args)


    def BackZClippingIsOn(self, *args) -> "Standard_Boolean":
        """
        * Returns the activity of the ZClipping.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_BackZClippingIsOn(self, *args)


    def DepthCueingBackPlane(self, *args) -> "Standard_Real":
        """
        * Returns the definition of the back depth-cueing plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingBackPlane(self, *args)


    def DepthCueingFrontPlane(self, *args) -> "Standard_Real":
        """
        * Returns the definition of the front depth-cueing plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingFrontPlane(self, *args)


    def DepthCueingIsOn(self, *args) -> "Standard_Boolean":
        """
        * Returns the activity of the depth-cueing.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_DepthCueingIsOn(self, *args)


    def FrontZClippingIsOn(self, *args) -> "Standard_Boolean":
        """
        * Returns the activity of the ZClipping.

        :rtype: bool

        """
        return _Visual3d.Visual3d_ContextView_FrontZClippingIsOn(self, *args)


    def Model(self, *args) -> "Visual3d_TypeOfModel":
        """
        * Returns the shading model.

        :rtype: Visual3d_TypeOfModel

        """
        return _Visual3d.Visual3d_ContextView_Model(self, *args)


    def Visualization(self, *args) -> "Visual3d_TypeOfVisualization":
        """
        * Returns the mode of visualization.

        :rtype: Visual3d_TypeOfVisualization

        """
        return _Visual3d.Visual3d_ContextView_Visualization(self, *args)


    def ZClippingBackPlane(self, *args) -> "Standard_Real":
        """
        * Returns the definition of the back Z-clipping plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_ZClippingBackPlane(self, *args)


    def ZClippingFrontPlane(self, *args) -> "Standard_Real":
        """
        * Returns the definition of the front Z-clipping plane.

        :rtype: float

        """
        return _Visual3d.Visual3d_ContextView_ZClippingFrontPlane(self, *args)


    def SurfaceDetail(self, *args) -> "Visual3d_TypeOfSurfaceDetail":
        """
        :rtype: Visual3d_TypeOfSurfaceDetail

        """
        return _Visual3d.Visual3d_ContextView_SurfaceDetail(self, *args)


    def TextureEnv(self, *args) -> "Handle_Graphic3d_TextureEnv":
        """
        :rtype: Handle_Graphic3d_TextureEnv

        """
        return _Visual3d.Visual3d_ContextView_TextureEnv(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_ContextView
Visual3d_ContextView.SetSurfaceDetail = new_instancemethod(_Visual3d.Visual3d_ContextView_SetSurfaceDetail, None, Visual3d_ContextView)
Visual3d_ContextView.SetTextureEnv = new_instancemethod(_Visual3d.Visual3d_ContextView_SetTextureEnv, None, Visual3d_ContextView)
Visual3d_ContextView.SetAliasingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetAliasingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetAliasingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetAliasingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetDepthCueingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetDepthCueingOff, None, Visual3d_ContextView)
Visual3d_ContextView.ClipPlanes = new_instancemethod(_Visual3d.Visual3d_ContextView_ClipPlanes, None, Visual3d_ContextView)
Visual3d_ContextView.ChangeClipPlanes = new_instancemethod(_Visual3d.Visual3d_ContextView_ChangeClipPlanes, None, Visual3d_ContextView)
Visual3d_ContextView.SetLightOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetLightOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetLightOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetLightOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetModel = new_instancemethod(_Visual3d.Visual3d_ContextView_SetModel, None, Visual3d_ContextView)
Visual3d_ContextView.SetVisualization = new_instancemethod(_Visual3d.Visual3d_ContextView_SetVisualization, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetFrontZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetFrontZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetFrontZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetFrontZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.SetBackZClippingOn = new_instancemethod(_Visual3d.Visual3d_ContextView_SetBackZClippingOn, None, Visual3d_ContextView)
Visual3d_ContextView.SetBackZClippingOff = new_instancemethod(_Visual3d.Visual3d_ContextView_SetBackZClippingOff, None, Visual3d_ContextView)
Visual3d_ContextView.ActivatedLights = new_instancemethod(_Visual3d.Visual3d_ContextView_ActivatedLights, None, Visual3d_ContextView)
Visual3d_ContextView.NumberOfActivatedLights = new_instancemethod(_Visual3d.Visual3d_ContextView_NumberOfActivatedLights, None, Visual3d_ContextView)
Visual3d_ContextView.ActivatedLight = new_instancemethod(_Visual3d.Visual3d_ContextView_ActivatedLight, None, Visual3d_ContextView)
Visual3d_ContextView.AliasingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_AliasingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.BackZClippingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_BackZClippingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.DepthCueingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_DepthCueingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.FrontZClippingIsOn = new_instancemethod(_Visual3d.Visual3d_ContextView_FrontZClippingIsOn, None, Visual3d_ContextView)
Visual3d_ContextView.Model = new_instancemethod(_Visual3d.Visual3d_ContextView_Model, None, Visual3d_ContextView)
Visual3d_ContextView.Visualization = new_instancemethod(_Visual3d.Visual3d_ContextView_Visualization, None, Visual3d_ContextView)
Visual3d_ContextView.ZClippingBackPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_ZClippingBackPlane, None, Visual3d_ContextView)
Visual3d_ContextView.ZClippingFrontPlane = new_instancemethod(_Visual3d.Visual3d_ContextView_ZClippingFrontPlane, None, Visual3d_ContextView)
Visual3d_ContextView.SurfaceDetail = new_instancemethod(_Visual3d.Visual3d_ContextView_SurfaceDetail, None, Visual3d_ContextView)
Visual3d_ContextView.TextureEnv = new_instancemethod(_Visual3d.Visual3d_ContextView_TextureEnv, None, Visual3d_ContextView)
Visual3d_ContextView_swigregister = _Visual3d.Visual3d_ContextView_swigregister
Visual3d_ContextView_swigregister(Visual3d_ContextView)

class Visual3d_HSequenceOfLight(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_HSequenceOfLight_swiginit(self, _Visual3d.new_Visual3d_HSequenceOfLight(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSequenceOfLight_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Visual3d_Light &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Visual3d_Light &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_Light &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_Light &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Exchange(self, *args)


    def Split(self, *args) -> "Handle_Visual3d_HSequenceOfLight":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_HSequenceOfLight

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Visual3d_Light":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Visual3d_Light":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_HSequenceOfLight_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Remove(self, *args)


    def Sequence(self, *args) -> "Visual3d_SequenceOfLight const &":
        """
        :rtype: Visual3d_SequenceOfLight

        """
        return _Visual3d.Visual3d_HSequenceOfLight_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "Visual3d_SequenceOfLight &":
        """
        :rtype: Visual3d_SequenceOfLight

        """
        return _Visual3d.Visual3d_HSequenceOfLight_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_HSequenceOfLight(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_HSequenceOfLight
Visual3d_HSequenceOfLight.IsEmpty = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_IsEmpty, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Length = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Length, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Clear = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Clear, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Append = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Append, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Prepend = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Prepend, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Reverse = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Reverse, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.InsertBefore = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_InsertBefore, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.InsertAfter = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_InsertAfter, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Exchange = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Exchange, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Split = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Split, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.SetValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_SetValue, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Value = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Value, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.ChangeValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_ChangeValue, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Remove = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Remove, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.Sequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_Sequence, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight.ChangeSequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfLight_ChangeSequence, None, Visual3d_HSequenceOfLight)
Visual3d_HSequenceOfLight_swigregister = _Visual3d.Visual3d_HSequenceOfLight_swigregister
Visual3d_HSequenceOfLight_swigregister(Visual3d_HSequenceOfLight)

class Handle_Visual3d_HSequenceOfLight(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_HSequenceOfLight_swiginit(self, _Visual3d.new_Handle_Visual3d_HSequenceOfLight(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_HSequenceOfLight_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_HSequenceOfLight
Handle_Visual3d_HSequenceOfLight.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfLight_Nullify, None, Handle_Visual3d_HSequenceOfLight)
Handle_Visual3d_HSequenceOfLight.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfLight_IsNull, None, Handle_Visual3d_HSequenceOfLight)
Handle_Visual3d_HSequenceOfLight._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfLight__get_reference, None, Handle_Visual3d_HSequenceOfLight)
Handle_Visual3d_HSequenceOfLight_swigregister = _Visual3d.Handle_Visual3d_HSequenceOfLight_swigregister
Handle_Visual3d_HSequenceOfLight_swigregister(Handle_Visual3d_HSequenceOfLight)

def Handle_Visual3d_HSequenceOfLight_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_HSequenceOfLight const":
    return _Visual3d.Handle_Visual3d_HSequenceOfLight_DownCast(AnObject)
Handle_Visual3d_HSequenceOfLight_DownCast = _Visual3d.Handle_Visual3d_HSequenceOfLight_DownCast

class Visual3d_HSequenceOfView(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Visual3d.Visual3d_HSequenceOfView_swiginit(self, _Visual3d.new_Visual3d_HSequenceOfView(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_HSequenceOfView_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _Visual3d.Visual3d_HSequenceOfView_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Visual3d_View &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Visual3d_View &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_View &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_View &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_Visual3d_HSequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Exchange(self, *args)


    def Split(self, *args) -> "Handle_Visual3d_HSequenceOfView":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_HSequenceOfView

        """
        return _Visual3d.Visual3d_HSequenceOfView_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Visual3d_View &
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Visual3d_View":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_HSequenceOfView_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Visual3d_View":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_HSequenceOfView_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_HSequenceOfView_Remove(self, *args)


    def Sequence(self, *args) -> "Visual3d_SequenceOfView const &":
        """
        :rtype: Visual3d_SequenceOfView

        """
        return _Visual3d.Visual3d_HSequenceOfView_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "Visual3d_SequenceOfView &":
        """
        :rtype: Visual3d_SequenceOfView

        """
        return _Visual3d.Visual3d_HSequenceOfView_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_HSequenceOfView(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_HSequenceOfView
Visual3d_HSequenceOfView.IsEmpty = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_IsEmpty, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Length = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Length, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Clear = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Clear, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Append = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Append, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Prepend = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Prepend, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Reverse = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Reverse, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.InsertBefore = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_InsertBefore, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.InsertAfter = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_InsertAfter, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Exchange = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Exchange, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Split = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Split, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.SetValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_SetValue, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Value = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Value, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.ChangeValue = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_ChangeValue, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Remove = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Remove, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.Sequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_Sequence, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView.ChangeSequence = new_instancemethod(_Visual3d.Visual3d_HSequenceOfView_ChangeSequence, None, Visual3d_HSequenceOfView)
Visual3d_HSequenceOfView_swigregister = _Visual3d.Visual3d_HSequenceOfView_swigregister
Visual3d_HSequenceOfView_swigregister(Visual3d_HSequenceOfView)

class Handle_Visual3d_HSequenceOfView(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_HSequenceOfView_swiginit(self, _Visual3d.new_Handle_Visual3d_HSequenceOfView(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_HSequenceOfView_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_HSequenceOfView
Handle_Visual3d_HSequenceOfView.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfView_Nullify, None, Handle_Visual3d_HSequenceOfView)
Handle_Visual3d_HSequenceOfView.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfView_IsNull, None, Handle_Visual3d_HSequenceOfView)
Handle_Visual3d_HSequenceOfView._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_HSequenceOfView__get_reference, None, Handle_Visual3d_HSequenceOfView)
Handle_Visual3d_HSequenceOfView_swigregister = _Visual3d.Handle_Visual3d_HSequenceOfView_swigregister
Handle_Visual3d_HSequenceOfView_swigregister(Handle_Visual3d_HSequenceOfView)

def Handle_Visual3d_HSequenceOfView_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_HSequenceOfView const":
    return _Visual3d.Handle_Visual3d_HSequenceOfView_DownCast(AnObject)
Handle_Visual3d_HSequenceOfView_DownCast = _Visual3d.Handle_Visual3d_HSequenceOfView_DownCast

class Visual3d_Layer(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a layer with the type <Atype>. if <AFlag> == Standard_True then the layer is 'size dependent'. The mapping of the layer is dependent of each window's size. if <AFlag> == Standard_False then the mapping of the layer is dependent of the highest window and the largest window of all the views of the viewer <AViewer>. When the viewer <AViewer> have only one view, the result will be the same with <AFlag> == Standard_False or <AFlag> == Standard_True.

        :param AViewer:
        :type AViewer: Handle_Visual3d_ViewManager &
        :param AType: default value is Aspect_TOL_OVERLAY
        :type AType: Aspect_TypeOfLayer
        :param AFlag: default value is Standard_False
        :type AFlag: bool
        :rtype: None

        """
        _Visual3d.Visual3d_Layer_swiginit(self, _Visual3d.new_Visual3d_Layer(*args))

    def Destroy(self, *args) -> "void":
        """
        * Suppress the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Destroy(self, *args)


    def Begin(self, *args) -> "void":
        """
        * Begins the definition of the layer <self> Warning: No default attributes

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Begin(self, *args)


    def End(self, *args) -> "void":
        """
        * Finishs the definition of the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_End(self, *args)


    def Clear(self, *args) -> "void":
        """
        * Clear all graphics managed by the layer <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_Clear(self, *args)


    def BeginPolyline(self, *args) -> "void":
        """
        * After this call, <self> is ready to receive a definition of a polyline with AddVertex().

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_BeginPolyline(self, *args)


    def BeginPolygon(self, *args) -> "void":
        """
        * After this call, <self> is ready to receive a definition of a polygon with AddEdge().

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_BeginPolygon(self, *args)


    def AddVertex(self, *args) -> "void":
        """
        * Puts <X, Y> as a new point in the current primitive. If <AFlag> then it is a draw between last point and this point else it is a move between last point and this point.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param AFlag: default value is Standard_True
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_AddVertex(self, *args)


    def ClosePrimitive(self, *args) -> "void":
        """
        * After this call, <self> stops the reception of a definition of a Begin... primitive.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_ClosePrimitive(self, *args)


    def DrawRectangle(self, *args) -> "void":
        """
        * Draws the rectangle at position <X,Y>.

        :param X:
        :type X: float
        :param Y:
        :type Y: float
        :param Width:
        :type Width: float
        :param Height:
        :type Height: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_DrawRectangle(self, *args)


    def TextSize(self, *args) -> "void":
        """
        * Get the size of text. The attributes are given with respect to the plane of projection. <AHeight> : Height of text. (Relative to the Normalized Projection Coordinates (NPC) Space).

        :param AText:
        :type AText: char *
        :param AHeight:
        :type AHeight: float
        :param AWidth:
        :type AWidth: float &
        :param AnAscent:
        :type AnAscent: float &
        :param ADescent:
        :type ADescent: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_TextSize(self, *args)


    def SetColor(self, *args) -> "void":
        """
        * Modifies the current color. Warning: No default color

        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetColor(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        * Modifies the current transparency. Warning: No default transparency

        :param ATransparency:
        :type ATransparency: Standard_ShortReal
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetTransparency(self, *args)


    def UnsetTransparency(self, *args) -> "void":
        """
        * Unsets the transparency.

        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_UnsetTransparency(self, *args)


    def SetLineAttributes(self, *args) -> "void":
        """
        * Modifies the current lines attributes. Warning: No default attributes

        :param AType:
        :type AType: Aspect_TypeOfLine
        :param AWidth:
        :type AWidth: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetLineAttributes(self, *args)


    def SetTextAttributes(self, *args) -> "void":
        """
        * Modifies the current texts attributes. <AFont> defines the name of the font to be used. <AType> defines the display type of the text. <AColor> defines the color of decal or subtitle background. To set the color of the text you can use the SetColor method. Warning: No default attributes

        :param AFont:
        :type AFont: char *
        :param AType:
        :type AType: Aspect_TypeOfDisplayText
        :param AColor:
        :type AColor: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetTextAttributes(self, *args)


    def SetOrtho(self, *args) -> "void":
        """
        * Modifies the current coordinates system of the layer <self>.

        :param Left:
        :type Left: float
        :param Right:
        :type Right: float
        :param Bottom:
        :type Bottom: float
        :param Top:
        :type Top: float
        :param Attach: default value is Aspect_TOC_BOTTOM_LEFT
        :type Attach: Aspect_TypeOfConstraint
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetOrtho(self, *args)


    def SetViewport(self, *args) -> "void":
        """
        * Modifies the current viewport of the layer <self>.

        :param Width:
        :type Width: int
        :param Height:
        :type Height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_SetViewport(self, *args)


    def CLayer(self, *args) -> "Aspect_CLayer2d":
        """
        * Returns the associated C structure.

        :rtype: Aspect_CLayer2d

        """
        return _Visual3d.Visual3d_Layer_CLayer(self, *args)


    def Type(self, *args) -> "Aspect_TypeOfLayer":
        """
        * Returns the type.

        :rtype: Aspect_TypeOfLayer

        """
        return _Visual3d.Visual3d_Layer_Type(self, *args)


    def AddLayerItem(self, *args) -> "void":
        """
        :param Item:
        :type Item: Handle_Visual3d_LayerItem &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_AddLayerItem(self, *args)


    def RemoveLayerItem(self, *args) -> "void":
        """
        :param Item:
        :type Item: Handle_Visual3d_LayerItem &
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RemoveLayerItem(self, *args)


    def RemoveAllLayerItems(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RemoveAllLayerItems(self, *args)


    def GetLayerItemList(self, *args) -> "Visual3d_NListOfLayerItem const &":
        """
        :rtype: Visual3d_NListOfLayerItem

        """
        return _Visual3d.Visual3d_Layer_GetLayerItemList(self, *args)


    def RenderLayerItems(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_Layer_RenderLayerItems(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_Layer(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_Layer
Visual3d_Layer.Destroy = new_instancemethod(_Visual3d.Visual3d_Layer_Destroy, None, Visual3d_Layer)
Visual3d_Layer.Begin = new_instancemethod(_Visual3d.Visual3d_Layer_Begin, None, Visual3d_Layer)
Visual3d_Layer.End = new_instancemethod(_Visual3d.Visual3d_Layer_End, None, Visual3d_Layer)
Visual3d_Layer.Clear = new_instancemethod(_Visual3d.Visual3d_Layer_Clear, None, Visual3d_Layer)
Visual3d_Layer.BeginPolyline = new_instancemethod(_Visual3d.Visual3d_Layer_BeginPolyline, None, Visual3d_Layer)
Visual3d_Layer.BeginPolygon = new_instancemethod(_Visual3d.Visual3d_Layer_BeginPolygon, None, Visual3d_Layer)
Visual3d_Layer.AddVertex = new_instancemethod(_Visual3d.Visual3d_Layer_AddVertex, None, Visual3d_Layer)
Visual3d_Layer.ClosePrimitive = new_instancemethod(_Visual3d.Visual3d_Layer_ClosePrimitive, None, Visual3d_Layer)
Visual3d_Layer.DrawRectangle = new_instancemethod(_Visual3d.Visual3d_Layer_DrawRectangle, None, Visual3d_Layer)
Visual3d_Layer.TextSize = new_instancemethod(_Visual3d.Visual3d_Layer_TextSize, None, Visual3d_Layer)
Visual3d_Layer.SetColor = new_instancemethod(_Visual3d.Visual3d_Layer_SetColor, None, Visual3d_Layer)
Visual3d_Layer.SetTransparency = new_instancemethod(_Visual3d.Visual3d_Layer_SetTransparency, None, Visual3d_Layer)
Visual3d_Layer.UnsetTransparency = new_instancemethod(_Visual3d.Visual3d_Layer_UnsetTransparency, None, Visual3d_Layer)
Visual3d_Layer.SetLineAttributes = new_instancemethod(_Visual3d.Visual3d_Layer_SetLineAttributes, None, Visual3d_Layer)
Visual3d_Layer.SetTextAttributes = new_instancemethod(_Visual3d.Visual3d_Layer_SetTextAttributes, None, Visual3d_Layer)
Visual3d_Layer.SetOrtho = new_instancemethod(_Visual3d.Visual3d_Layer_SetOrtho, None, Visual3d_Layer)
Visual3d_Layer.SetViewport = new_instancemethod(_Visual3d.Visual3d_Layer_SetViewport, None, Visual3d_Layer)
Visual3d_Layer.CLayer = new_instancemethod(_Visual3d.Visual3d_Layer_CLayer, None, Visual3d_Layer)
Visual3d_Layer.Type = new_instancemethod(_Visual3d.Visual3d_Layer_Type, None, Visual3d_Layer)
Visual3d_Layer.AddLayerItem = new_instancemethod(_Visual3d.Visual3d_Layer_AddLayerItem, None, Visual3d_Layer)
Visual3d_Layer.RemoveLayerItem = new_instancemethod(_Visual3d.Visual3d_Layer_RemoveLayerItem, None, Visual3d_Layer)
Visual3d_Layer.RemoveAllLayerItems = new_instancemethod(_Visual3d.Visual3d_Layer_RemoveAllLayerItems, None, Visual3d_Layer)
Visual3d_Layer.GetLayerItemList = new_instancemethod(_Visual3d.Visual3d_Layer_GetLayerItemList, None, Visual3d_Layer)
Visual3d_Layer.RenderLayerItems = new_instancemethod(_Visual3d.Visual3d_Layer_RenderLayerItems, None, Visual3d_Layer)
Visual3d_Layer_swigregister = _Visual3d.Visual3d_Layer_swigregister
Visual3d_Layer_swigregister(Visual3d_Layer)

class Handle_Visual3d_Layer(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_Layer_swiginit(self, _Visual3d.new_Handle_Visual3d_Layer(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_Layer_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_Layer
Handle_Visual3d_Layer.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_Layer_Nullify, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_Layer_IsNull, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_Layer__get_reference, None, Handle_Visual3d_Layer)
Handle_Visual3d_Layer_swigregister = _Visual3d.Handle_Visual3d_Layer_swigregister
Handle_Visual3d_Layer_swigregister(Handle_Visual3d_Layer)

def Handle_Visual3d_Layer_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_Layer const":
    return _Visual3d.Handle_Visual3d_Layer_DownCast(AnObject)
Handle_Visual3d_Layer_DownCast = _Visual3d.Handle_Visual3d_Layer_DownCast

class Visual3d_LayerItem(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a layer item

        :rtype: None

        """
        _Visual3d.Visual3d_LayerItem_swiginit(self, _Visual3d.new_Visual3d_LayerItem(*args))

    def ComputeLayerPrs(self, *args) -> "void":
        """
        * virtual function for recompute 2D presentation (empty by default)

        :rtype: void

        """
        return _Visual3d.Visual3d_LayerItem_ComputeLayerPrs(self, *args)


    def RedrawLayerPrs(self, *args) -> "void":
        """
        * virtual function for recompute 2D presentation (empty by default)

        :rtype: void

        """
        return _Visual3d.Visual3d_LayerItem_RedrawLayerPrs(self, *args)


    def IsNeedToRecompute(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Visual3d.Visual3d_LayerItem_IsNeedToRecompute(self, *args)


    def SetNeedToRecompute(self, *args) -> "void":
        """
        :param NeedToRecompute: default value is Standard_True
        :type NeedToRecompute: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_LayerItem_SetNeedToRecompute(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_LayerItem(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_LayerItem
Visual3d_LayerItem.ComputeLayerPrs = new_instancemethod(_Visual3d.Visual3d_LayerItem_ComputeLayerPrs, None, Visual3d_LayerItem)
Visual3d_LayerItem.RedrawLayerPrs = new_instancemethod(_Visual3d.Visual3d_LayerItem_RedrawLayerPrs, None, Visual3d_LayerItem)
Visual3d_LayerItem.IsNeedToRecompute = new_instancemethod(_Visual3d.Visual3d_LayerItem_IsNeedToRecompute, None, Visual3d_LayerItem)
Visual3d_LayerItem.SetNeedToRecompute = new_instancemethod(_Visual3d.Visual3d_LayerItem_SetNeedToRecompute, None, Visual3d_LayerItem)
Visual3d_LayerItem_swigregister = _Visual3d.Visual3d_LayerItem_swigregister
Visual3d_LayerItem_swigregister(Visual3d_LayerItem)

class Handle_Visual3d_LayerItem(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_LayerItem_swiginit(self, _Visual3d.new_Handle_Visual3d_LayerItem(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_LayerItem_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_LayerItem
Handle_Visual3d_LayerItem.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem_Nullify, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem_IsNull, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_LayerItem__get_reference, None, Handle_Visual3d_LayerItem)
Handle_Visual3d_LayerItem_swigregister = _Visual3d.Handle_Visual3d_LayerItem_swigregister
Handle_Visual3d_LayerItem_swigregister(Handle_Visual3d_LayerItem)

def Handle_Visual3d_LayerItem_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_LayerItem const":
    return _Visual3d.Handle_Visual3d_LayerItem_DownCast(AnObject)
Handle_Visual3d_LayerItem_DownCast = _Visual3d.Handle_Visual3d_LayerItem_DownCast

class Visual3d_Light(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a light from default values. Light sources are created in a visualiser and are activated in one of its views. //! Type	= TOLS_AMBIENT Color	= WHITE

        :rtype: None

        * Creates an AMBIENT light source. Light sources are created in a visualiser and are activated in one of its views.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        * Creates a DIRECTIONAL light source. Light sources are created in a visualiser and are activated in one of its views. Warning: Raises LightDefinitionError if <Direction> is null.

        :param Color:
        :type Color: Quantity_Color &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Headlight: default value is Standard_False
        :type Headlight: bool
        :rtype: None

        * Creates a POSITIONAL light source. Light sources are created in a visualiser and are activated in one of its views. Warning: Raises LightDefinitionError if <Fact1> and <Fact2> are null. if <Fact1> is a negative value or greater than 1.0. if <Fact2> is a negative value or greater than 1.0.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Fact1:
        :type Fact1: float
        :param Fact2:
        :type Fact2: float
        :rtype: None

        * Creates a SPOT light source. Light sources are created in a visualiser and are activated in one of its views. <Concentration> specifies the intensity distribution of the light. <AngleCone> specifies the angle (radians) of the cone created by the spot. the global attenuation is equal : 1 / (Fact1 + Fact2 * (norm(ObjectPosition - LightPosition))) Warning: Raises LightDefinitionError if <Direction> is null. if <Concentration> is a negative value or greater than 1.0. if <Fact1> and <Fact2> are null. if <Fact1> is a negative value or greater than 1.0. if <Fact2> is a negative value or greater than 1.0. if <AngleCone> is a negative value or greater than PI/2.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Concentration:
        :type Concentration: float
        :param Fact1:
        :type Fact1: float
        :param Fact2:
        :type Fact2: float
        :param AngleCone:
        :type AngleCone: float
        :rtype: None

        """
        _Visual3d.Visual3d_Light_swiginit(self, _Visual3d.new_Visual3d_Light(*args))

    def SetAngle(self, *args) -> "void":
        """
        * Modifies the angle (radians) of the cone created by the spot. Works only on TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_SPOT. if <AngleCone> is a negative value or greater than PI/2.

        :param AngleCone:
        :type AngleCone: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAngle(self, *args)


    def SetAttenuation1(self, *args) -> "void":
        """
        * Modifies the attenuation factor of the light. Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_SPOT or TOLS_POSITIONAL. if <Fact1> is a negative value or greater than 1.0.

        :param Fact1:
        :type Fact1: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAttenuation1(self, *args)


    def SetAttenuation2(self, *args) -> "void":
        """
        * Modifies the attenuation factor of the light. Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_POSITIONAL or TOLS_SPOT. if <Fact2> is a negative value or greater than 1.0..

        :param Fact2:
        :type Fact2: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetAttenuation2(self, *args)


    def SetColor(self, *args) -> "void":
        """
        * Modifies the colour of the light.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetColor(self, *args)


    def SetConcentration(self, *args) -> "void":
        """
        * Modifies the intensity distribution of the light. Works only on the TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_SPOT. if <Concentration> is a negative value or greater than 1.0.

        :param Concentration:
        :type Concentration: float
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetConcentration(self, *args)


    def SetDirection(self, *args) -> "void":
        """
        * Modifies the light direction. Works only on the TOLS_DIRECTIONAL and TOLS_SPOT lights. Default z Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_DIRECTIONAL or TOLS_SPOT. if <Direction> is null.

        :param Direction:
        :type Direction: Graphic3d_Vector &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetDirection(self, *args)


    def SetPosition(self, *args) -> "void":
        """
        * Modifies the position of the light. Works only on the TOLS_POSITIONAL and TOLS_SPOT lights. Category: Methods to modify the class definition Warning: Raises LightDefinitionError if the type of the light is not TOLS_POSITIONAL or TOLS_SPOT.

        :param Position:
        :type Position: Graphic3d_Vertex &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetPosition(self, *args)


    def Headlight(self, *args) -> "Standard_Boolean":
        """
        * Returns the headlight state of the light <self>

        :rtype: bool

        """
        return _Visual3d.Visual3d_Light_Headlight(self, *args)


    def SetHeadlight(self, *args) -> "void":
        """
        * Setup headlight flag.

        :param theValue:
        :type theValue: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_SetHeadlight(self, *args)


    def Color(self, *args) -> "Quantity_Color":
        """
        * Returns the colour of the light <self>.

        :rtype: Quantity_Color

        """
        return _Visual3d.Visual3d_Light_Color(self, *args)


    def LightType(self, *args) -> "Visual3d_TypeOfLightSource":
        """
        * Returns the light type of <self>. //! TypeOfLightSource = TOLS_AMBIENT TOLS_DIRECTIONAL TOLS_POSITIONAL TOLS_SPOT

        :rtype: Visual3d_TypeOfLightSource

        """
        return _Visual3d.Visual3d_Light_LightType(self, *args)


    def Values(self, *args) -> "void":
        """
        * Returns the definition of <self> if <self> is a light source of the TOLS_AMBIENT type. Category: Inquire methods Warning: Raises LightDefinitionError if the type of the light is not TOLS_AMBIENT.

        :param Color:
        :type Color: Quantity_Color &
        :rtype: None

        * Returns the definition of <self> if <self> is a light source of the TOLS_DIRECTIONAL type. Category: Inquire methods Warning: Raises LightDefinitionError if the type of the light is not TOLS_DIRECTIONAL.

        :param Color:
        :type Color: Quantity_Color &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :rtype: None

        * Returns the definition of <self> if <self> is a light source of the TOLS_POSITIONAL type. Category: Inquire methods Warning: Raises LightDefinitionError if the type of the light is not TOLS_POSITIONAL.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Fact1:
        :type Fact1: float &
        :param Fact2:
        :type Fact2: float &
        :rtype: None

        * Returns the definition of <self> if <self> is a light source of the TOLS_SPOT type. Category: Inquire methods Warning: Raises LightDefinitionError if the type of the light is not TOLS_SPOT.

        :param Color:
        :type Color: Quantity_Color &
        :param Position:
        :type Position: Graphic3d_Vertex &
        :param Direction:
        :type Direction: Graphic3d_Vector &
        :param Concentration:
        :type Concentration: float &
        :param Fact1:
        :type Fact1: float &
        :param Fact2:
        :type Fact2: float &
        :param AngleCone:
        :type AngleCone: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_Light_Values(self, *args)


    def CLight(self, *args) -> "Graphic3d_CLight const &":
        """
        * Returns the light defintion.

        :rtype: Graphic3d_CLight

        """
        return _Visual3d.Visual3d_Light_CLight(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_Light(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_Light
Visual3d_Light.SetAngle = new_instancemethod(_Visual3d.Visual3d_Light_SetAngle, None, Visual3d_Light)
Visual3d_Light.SetAttenuation1 = new_instancemethod(_Visual3d.Visual3d_Light_SetAttenuation1, None, Visual3d_Light)
Visual3d_Light.SetAttenuation2 = new_instancemethod(_Visual3d.Visual3d_Light_SetAttenuation2, None, Visual3d_Light)
Visual3d_Light.SetColor = new_instancemethod(_Visual3d.Visual3d_Light_SetColor, None, Visual3d_Light)
Visual3d_Light.SetConcentration = new_instancemethod(_Visual3d.Visual3d_Light_SetConcentration, None, Visual3d_Light)
Visual3d_Light.SetDirection = new_instancemethod(_Visual3d.Visual3d_Light_SetDirection, None, Visual3d_Light)
Visual3d_Light.SetPosition = new_instancemethod(_Visual3d.Visual3d_Light_SetPosition, None, Visual3d_Light)
Visual3d_Light.Headlight = new_instancemethod(_Visual3d.Visual3d_Light_Headlight, None, Visual3d_Light)
Visual3d_Light.SetHeadlight = new_instancemethod(_Visual3d.Visual3d_Light_SetHeadlight, None, Visual3d_Light)
Visual3d_Light.Color = new_instancemethod(_Visual3d.Visual3d_Light_Color, None, Visual3d_Light)
Visual3d_Light.LightType = new_instancemethod(_Visual3d.Visual3d_Light_LightType, None, Visual3d_Light)
Visual3d_Light.Values = new_instancemethod(_Visual3d.Visual3d_Light_Values, None, Visual3d_Light)
Visual3d_Light.CLight = new_instancemethod(_Visual3d.Visual3d_Light_CLight, None, Visual3d_Light)
Visual3d_Light_swigregister = _Visual3d.Visual3d_Light_swigregister
Visual3d_Light_swigregister(Visual3d_Light)

class Handle_Visual3d_Light(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_Light_swiginit(self, _Visual3d.new_Handle_Visual3d_Light(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_Light_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_Light
Handle_Visual3d_Light.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_Light_Nullify, None, Handle_Visual3d_Light)
Handle_Visual3d_Light.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_Light_IsNull, None, Handle_Visual3d_Light)
Handle_Visual3d_Light._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_Light__get_reference, None, Handle_Visual3d_Light)
Handle_Visual3d_Light_swigregister = _Visual3d.Handle_Visual3d_Light_swigregister
Handle_Visual3d_Light_swigregister(Handle_Visual3d_Light)

def Handle_Visual3d_Light_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_Light const":
    return _Visual3d.Handle_Visual3d_Light_DownCast(AnObject)
Handle_Visual3d_Light_DownCast = _Visual3d.Handle_Visual3d_Light_DownCast

class Visual3d_SequenceNodeOfSequenceOfLight(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_Light &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceNodeOfSequenceOfLight_swiginit(self, _Visual3d.new_Visual3d_SequenceNodeOfSequenceOfLight(*args))

    def Value(self, *args) -> "Handle_Visual3d_Light":
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SequenceNodeOfSequenceOfLight_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_SequenceNodeOfSequenceOfLight(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_SequenceNodeOfSequenceOfLight
Visual3d_SequenceNodeOfSequenceOfLight.Value = new_instancemethod(_Visual3d.Visual3d_SequenceNodeOfSequenceOfLight_Value, None, Visual3d_SequenceNodeOfSequenceOfLight)
Visual3d_SequenceNodeOfSequenceOfLight_swigregister = _Visual3d.Visual3d_SequenceNodeOfSequenceOfLight_swigregister
Visual3d_SequenceNodeOfSequenceOfLight_swigregister(Visual3d_SequenceNodeOfSequenceOfLight)

class Handle_Visual3d_SequenceNodeOfSequenceOfLight(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_swiginit(self, _Visual3d.new_Handle_Visual3d_SequenceNodeOfSequenceOfLight(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_SequenceNodeOfSequenceOfLight
Handle_Visual3d_SequenceNodeOfSequenceOfLight.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_Nullify, None, Handle_Visual3d_SequenceNodeOfSequenceOfLight)
Handle_Visual3d_SequenceNodeOfSequenceOfLight.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_IsNull, None, Handle_Visual3d_SequenceNodeOfSequenceOfLight)
Handle_Visual3d_SequenceNodeOfSequenceOfLight._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight__get_reference, None, Handle_Visual3d_SequenceNodeOfSequenceOfLight)
Handle_Visual3d_SequenceNodeOfSequenceOfLight_swigregister = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_swigregister
Handle_Visual3d_SequenceNodeOfSequenceOfLight_swigregister(Handle_Visual3d_SequenceNodeOfSequenceOfLight)

def Handle_Visual3d_SequenceNodeOfSequenceOfLight_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_SequenceNodeOfSequenceOfLight const":
    return _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_DownCast(AnObject)
Handle_Visual3d_SequenceNodeOfSequenceOfLight_DownCast = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfLight_DownCast

class Visual3d_SequenceNodeOfSequenceOfView(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Visual3d_View &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceNodeOfSequenceOfView_swiginit(self, _Visual3d.new_Visual3d_SequenceNodeOfSequenceOfView(*args))

    def Value(self, *args) -> "Handle_Visual3d_View":
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SequenceNodeOfSequenceOfView_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_SequenceNodeOfSequenceOfView(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_SequenceNodeOfSequenceOfView
Visual3d_SequenceNodeOfSequenceOfView.Value = new_instancemethod(_Visual3d.Visual3d_SequenceNodeOfSequenceOfView_Value, None, Visual3d_SequenceNodeOfSequenceOfView)
Visual3d_SequenceNodeOfSequenceOfView_swigregister = _Visual3d.Visual3d_SequenceNodeOfSequenceOfView_swigregister
Visual3d_SequenceNodeOfSequenceOfView_swigregister(Visual3d_SequenceNodeOfSequenceOfView)

class Handle_Visual3d_SequenceNodeOfSequenceOfView(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_swiginit(self, _Visual3d.new_Handle_Visual3d_SequenceNodeOfSequenceOfView(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_SequenceNodeOfSequenceOfView
Handle_Visual3d_SequenceNodeOfSequenceOfView.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_Nullify, None, Handle_Visual3d_SequenceNodeOfSequenceOfView)
Handle_Visual3d_SequenceNodeOfSequenceOfView.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_IsNull, None, Handle_Visual3d_SequenceNodeOfSequenceOfView)
Handle_Visual3d_SequenceNodeOfSequenceOfView._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView__get_reference, None, Handle_Visual3d_SequenceNodeOfSequenceOfView)
Handle_Visual3d_SequenceNodeOfSequenceOfView_swigregister = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_swigregister
Handle_Visual3d_SequenceNodeOfSequenceOfView_swigregister(Handle_Visual3d_SequenceNodeOfSequenceOfView)

def Handle_Visual3d_SequenceNodeOfSequenceOfView_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_SequenceNodeOfSequenceOfView const":
    return _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_DownCast(AnObject)
Handle_Visual3d_SequenceNodeOfSequenceOfView_DownCast = _Visual3d.Handle_Visual3d_SequenceNodeOfSequenceOfView_DownCast

class Visual3d_SequenceOfLight(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Visual3d_SequenceOfLight &
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceOfLight_swiginit(self, _Visual3d.new_Visual3d_SequenceOfLight(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_Clear(self, *args)


    def Assign(self, *args) -> "Visual3d_SequenceOfLight const &":
        """
        :param Other:
        :type Other: Visual3d_SequenceOfLight &
        :rtype: Visual3d_SequenceOfLight

        """
        return _Visual3d.Visual3d_SequenceOfLight_Assign(self, *args)


    def Set(self, *args) -> "Visual3d_SequenceOfLight const &":
        """
        :param Other:
        :type Other: Visual3d_SequenceOfLight &
        :rtype: Visual3d_SequenceOfLight

        """
        return _Visual3d.Visual3d_SequenceOfLight_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Visual3d_Light &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Visual3d_Light":
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SequenceOfLight_First(self, *args)


    def Last(self, *args) -> "Handle_Visual3d_Light":
        """
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SequenceOfLight_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Visual3d_SequenceOfLight &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_Split(self, *args)


    def Value(self, *args) -> "Handle_Visual3d_Light":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SequenceOfLight_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Visual3d_Light &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Visual3d_Light":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Visual3d_Light

        """
        return _Visual3d.Visual3d_SequenceOfLight_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfLight_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_SequenceOfLight
Visual3d_SequenceOfLight.Clear = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Clear, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Assign = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Assign, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Set = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Set, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Append = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Append, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Prepend = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Prepend, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.InsertBefore = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_InsertBefore, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.InsertAfter = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_InsertAfter, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.First = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_First, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Last = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Last, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Split = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Split, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Value = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Value, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.SetValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_SetValue, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.ChangeValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_ChangeValue, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight.Remove = new_instancemethod(_Visual3d.Visual3d_SequenceOfLight_Remove, None, Visual3d_SequenceOfLight)
Visual3d_SequenceOfLight_swigregister = _Visual3d.Visual3d_SequenceOfLight_swigregister
Visual3d_SequenceOfLight_swigregister(Visual3d_SequenceOfLight)

class Visual3d_SequenceOfView(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: Visual3d_SequenceOfView &
        :rtype: None

        """
        _Visual3d.Visual3d_SequenceOfView_swiginit(self, _Visual3d.new_Visual3d_SequenceOfView(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_Clear(self, *args)


    def Assign(self, *args) -> "Visual3d_SequenceOfView const &":
        """
        :param Other:
        :type Other: Visual3d_SequenceOfView &
        :rtype: Visual3d_SequenceOfView

        """
        return _Visual3d.Visual3d_SequenceOfView_Assign(self, *args)


    def Set(self, *args) -> "Visual3d_SequenceOfView const &":
        """
        :param Other:
        :type Other: Visual3d_SequenceOfView &
        :rtype: Visual3d_SequenceOfView

        """
        return _Visual3d.Visual3d_SequenceOfView_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: None

        :param S:
        :type S: Visual3d_SequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Visual3d_View &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: Visual3d_SequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Visual3d_View":
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SequenceOfView_First(self, *args)


    def Last(self, *args) -> "Handle_Visual3d_View":
        """
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SequenceOfView_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: Visual3d_SequenceOfView &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_Split(self, *args)


    def Value(self, *args) -> "Handle_Visual3d_View":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SequenceOfView_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Visual3d_View &
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Visual3d_View":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Visual3d_View

        """
        return _Visual3d.Visual3d_SequenceOfView_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _Visual3d.Visual3d_SequenceOfView_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_SequenceOfView
Visual3d_SequenceOfView.Clear = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Clear, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Assign = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Assign, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Set = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Set, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Append = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Append, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Prepend = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Prepend, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.InsertBefore = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_InsertBefore, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.InsertAfter = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_InsertAfter, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.First = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_First, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Last = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Last, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Split = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Split, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Value = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Value, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.SetValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_SetValue, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.ChangeValue = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_ChangeValue, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView.Remove = new_instancemethod(_Visual3d.Visual3d_SequenceOfView_Remove, None, Visual3d_SequenceOfView)
Visual3d_SequenceOfView_swigregister = _Visual3d.Visual3d_SequenceOfView_swigregister
Visual3d_SequenceOfView_swigregister(Visual3d_SequenceOfView)

class Visual3d_View(OCC.Graphic3d.Graphic3d_DataStructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a view in the viewer <AManager> with a default orientation and a default mapping.

        :param AManager:
        :type AManager: Handle_Visual3d_ViewManager &
        :rtype: None

        """
        _Visual3d.Visual3d_View_swiginit(self, _Visual3d.new_Visual3d_View(*args))

    def Activate(self, *args) -> "void":
        """
        * Activates the view <self>. Map the associated window on the screen and post the view in this window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Activate(self, *args)


    def Deactivate(self, *args) -> "void":
        """
        * Deactivates the view <self>. Unmap the associated window on the screen and unpost the view in this window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Deactivate(self, *args)


    def RedrawImmediate(self, *args) -> "void":
        """
        * Updates layer of immediate presentations.

        :rtype: None

        * Updates layer of immediate presentations.

        :param theUnderLayer:
        :type theUnderLayer: Handle_Visual3d_Layer &
        :param theOverLayer:
        :type theOverLayer: Handle_Visual3d_Layer &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_RedrawImmediate(self, *args)


    def Invalidate(self, *args) -> "void":
        """
        * Invalidates view content but does not redraw it.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Invalidate(self, *args)


    def Redraw(self, *args) -> "void":
        """
        * Updates screen in all cases.

        :rtype: None

        * Updates screen area in all cases. area is given by his xy min corner and size in pixel coordinates

        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        * Updates screen in all cases.

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :rtype: None

        * Updates screen area in all cases. area is given by his xy min corner and size in pixel coordinates

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Redraw(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Deletes and erases the view <self>. Warning: No more graphic operations in <self> after this call.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Remove(self, *args)


    def Resized(self, *args) -> "void":
        """
        * Updates the view <self> after the modification of the associated window. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_Resized(self, *args)


    def SetBackground(self, *args) -> "void":
        """
        * Modifies the default window background. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :param ABack:
        :type ABack: Aspect_Background &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackground(self, *args)


    def SetBackgroundImage(self, *args) -> "void":
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :param FileName:
        :type FileName: char *
        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackgroundImage(self, *args)


    def SetBgImageStyle(self, *args) -> "void":
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :param FillStyle:
        :type FillStyle: Aspect_FillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBgImageStyle(self, *args)


    def SetGradientBackground(self, *args) -> "void":
        """
        * Modifies the gradient window background. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :param ABack:
        :type ABack: Aspect_GradientBackground &
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetGradientBackground(self, *args)


    def SetBgGradientStyle(self, *args) -> "void":
        """
        * Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :param FillStyle:
        :type FillStyle: Aspect_GradientFillMethod
        :param update:
        :type update: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBgGradientStyle(self, *args)


    def SetBackFacingModel(self, *args) -> "void":
        """
        * Manages display of the back faces

        :param aModel:
        :type aModel: Visual3d_TypeOfBackfacingModel
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetBackFacingModel(self, *args)


    def BackFacingModel(self, *args) -> "Visual3d_TypeOfBackfacingModel":
        """
        * Returns current state of the back faces display

        :rtype: Visual3d_TypeOfBackfacingModel

        """
        return _Visual3d.Visual3d_View_BackFacingModel(self, *args)


    def SetContext(self, *args) -> "void":
        """
        * Sets the context <CTX> in the view <self>.

        :param CTX:
        :type CTX: Visual3d_ContextView &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetContext(self, *args)


    def SetViewMappingDefault(self, *args) -> "void":
        """
        * Saves the current mapping which will be the reference value for the reset of the mapping done by the ViewmappingReset method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewMappingDefault(self, *args)


    def SetViewOrientationDefault(self, *args) -> "void":
        """
        * Saves the current orientation which will be the reference value for the reset of the orientation done by the ViewOrientationReset method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetViewOrientationDefault(self, *args)


    def SetWindow(self, *args) -> "void":
        """
        * Associates the window <AWindow> to the view <self>. No new association if the window is already defined. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if it is impossible to associate a view and a window. (association already done or another problem) Modifies the viewmapping of the associated view when it calls the SetRatio method. //! After this call, each view is mapped in an unique window. //! Programming example : //! An example when we have 1 view and 1 window ------------------------------------------- //! Handle_Aspect_DisplayConnection aDisplayConnection; //! // Display connection initialization only needed on Linux platform // and on Mac OS X, in cases when you use Xlib for windows drawing. aDisplayConnection = new Aspect_DisplayConnection(); //! // Graphic driver initialization Handle_Graphic3d_GraphicDriver aGraphicDriver = Graphic3d::InitGraphicDriver (aDisplayConnection); //! // Define a view manager Handle_Visual3d_ViewManager aVisualManager = new Visual3d_ViewManager (aGraphicDriver); //! // Define a view Handle_Visual3d_View aView = new Visual3d_View (aVisaulManager); //! // Define a window Handle_Xw_Window aWindow = new Xw_Window (aDisplayConnection, 'Graphic View 1', 0.695, 0.695, 0.600, 0.600, Quantity_NOC_MATRAGRAY); //! // Associate the view and the window aView->SetWindow (aWindow); //! // Map the window aWindow->Map (); //! // Activate the view aView->Activate ();

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :rtype: None

        * Associates the window <AWindow> and context <AContext> to the view <self>. If <AContext> is not NULL the graphic context is used directly to draw something in this view. Otherwise an internal context is created. If <ADisplayCB> is not NULL then a user display CB is call at the end of the OCC graphic traversal and just before the swap of buffers. The <aClientData> is pass to this call back. No new association if the window is already defined. Category: Methods to modify the class definition Warning: Raises ViewDefinitionError if it is impossible to associate a view and a window. (association already done or another problem) Modifies the viewmapping of the associated view when it calls the SetRatio method. //! After this call, each view is mapped in an unique window.

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param AContext:
        :type AContext: Aspect_RenderingContext
        :param ADisplayCB:
        :type ADisplayCB: Aspect_GraphicCallbackProc &
        :param AClientData:
        :type AClientData: Standard_Address
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetWindow(self, *args)


    def Update(self, *args) -> "void":
        """
        * Updates screen in function of modifications of the structures.

        :param theUpdateMode:
        :type theUpdateMode: Aspect_TypeOfUpdate
        :rtype: None

        * Updates screen in function of modifications of the structures.

        :param AnUnderLayer:
        :type AnUnderLayer: Handle_Visual3d_Layer &
        :param AnOverLayer:
        :type AnOverLayer: Handle_Visual3d_Layer &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Update(self, *args)


    def SetAutoZFitMode(self, *args) -> "void":
        """
        * Sets the automatic z-fit mode and its parameters. The auto z-fit has extra parameters which can controlled from application level to ensure that the size of viewing volume will be sufficiently large to cover the depth of unmanaged objects, for example, transformation persistent ones. @param theScaleFactor [in] the scale factor for Z-range. The range between Z-min, Z-max projection volume planes evaluated by z fitting method will be scaled using this coefficient. Program error exception is thrown if negative or zero value is passed.

        :param theIsOn:
        :type theIsOn: bool
        :param theScaleFactor: default value is 1.0
        :type theScaleFactor: float
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetAutoZFitMode(self, *args)


    def AutoZFitMode(self, *args) -> "Standard_Boolean":
        """
        * returns True if automatic z-fit mode is turned on.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_AutoZFitMode(self, *args)


    def AutoZFitScaleFactor(self, *args) -> "Standard_Real":
        """
        * returns scale factor parameter of automatic z-fit mode.

        :rtype: float

        """
        return _Visual3d.Visual3d_View_AutoZFitScaleFactor(self, *args)


    def AutoZFit(self, *args) -> "void":
        """
        * If automatic z-range fitting is turned on, adjusts Z-min and Z-max projection volume planes with call to ZFitAll.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_AutoZFit(self, *args)


    def ZFitAll(self, *args) -> "void":
        """
        * Change Z-min and Z-max planes of projection volume to match the displayed objects.

        :param theScaleFactor: default value is 1.0
        :type theScaleFactor: float
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ZFitAll(self, *args)


    def ViewMappingReset(self, *args) -> "void":
        """
        * Sets the value of the mapping to be the same as the mapping saved by the SetViewMappingDefaut method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_ViewMappingReset(self, *args)


    def ViewOrientationReset(self, *args) -> "void":
        """
        * Sets the value of the orientation to be the same as the orientation saved by the SetViewOrientationDefaut method.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_ViewOrientationReset(self, *args)


    def SetComputedMode(self, *args) -> "void":
        """
        * Switches computed HLR mode in the view

        :param aMode:
        :type aMode: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetComputedMode(self, *args)


    def ComputedMode(self, *args) -> "Standard_Boolean":
        """
        * Returns the computed HLR mode state

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ComputedMode(self, *args)


    def ZBufferTriedronSetup(self, *args) -> "void":
        """
        * Customization of the ZBUFFER Triedron. Initializes Colors of X Y and axis Scale ratio defines decreasing of trihedron size when its position is out of a View

        :param XColor: default value is Quantity_NOC_RED
        :type XColor: Quantity_NameOfColor
        :param YColor: default value is Quantity_NOC_GREEN
        :type YColor: Quantity_NameOfColor
        :param ZColor: default value is Quantity_NOC_BLUE1
        :type ZColor: Quantity_NameOfColor
        :param SizeRatio: default value is 0.8
        :type SizeRatio: float
        :param AxisDiametr: default value is 0.05
        :type AxisDiametr: float
        :param NbFacettes: default value is 12
        :type NbFacettes: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ZBufferTriedronSetup(self, *args)


    def TriedronDisplay(self, *args) -> "void":
        """
        * Display of the Triedron. Initialize position, color and length of Triedron axes. The scale is a percent of the window width. If AsWireframe is False triedron is shown in shaded mode AColor is not considered for ZBUFFER mode

        :param APosition: default value is Aspect_TOTP_CENTER
        :type APosition: Aspect_TypeOfTriedronPosition
        :param AColor: default value is Quantity_NOC_WHITE
        :type AColor: Quantity_NameOfColor
        :param AScale: default value is 0.02
        :type AScale: float
        :param AsWireframe: default value is Standard_True
        :type AsWireframe: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronDisplay(self, *args)


    def TriedronErase(self, *args) -> "void":
        """
        * Erases the Triedron.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronErase(self, *args)


    def TriedronEcho(self, *args) -> "void":
        """
        * Highlights the echo zone of the Triedron.

        :param AType: default value is Aspect_TOTE_NONE
        :type AType: Aspect_TypeOfTriedronEcho
        :rtype: None

        """
        return _Visual3d.Visual3d_View_TriedronEcho(self, *args)


    def GetGraduatedTrihedron(self, *args) -> "Standard_Boolean":
        """
        * Returns data of a graduated trihedron if displayed (return value is True)

        :param xname:
        :type xname: TCollection_ExtendedString &
        :param yname:
        :type yname: TCollection_ExtendedString &
        :param zname:
        :type zname: TCollection_ExtendedString &
        :param xdrawname:
        :type xdrawname: bool
        :param ydrawname:
        :type ydrawname: bool
        :param zdrawname:
        :type zdrawname: bool
        :param xdrawvalues:
        :type xdrawvalues: bool
        :param ydrawvalues:
        :type ydrawvalues: bool
        :param zdrawvalues:
        :type zdrawvalues: bool
        :param drawgrid:
        :type drawgrid: bool
        :param drawaxes:
        :type drawaxes: bool
        :param nbx:
        :type nbx: int &
        :param nby:
        :type nby: int &
        :param nbz:
        :type nbz: int &
        :param xoffset:
        :type xoffset: int &
        :param yoffset:
        :type yoffset: int &
        :param zoffset:
        :type zoffset: int &
        :param xaxisoffset:
        :type xaxisoffset: int &
        :param yaxisoffset:
        :type yaxisoffset: int &
        :param zaxisoffset:
        :type zaxisoffset: int &
        :param xdrawtickmarks:
        :type xdrawtickmarks: bool
        :param ydrawtickmarks:
        :type ydrawtickmarks: bool
        :param zdrawtickmarks:
        :type zdrawtickmarks: bool
        :param xtickmarklength:
        :type xtickmarklength: int &
        :param ytickmarklength:
        :type ytickmarklength: int &
        :param ztickmarklength:
        :type ztickmarklength: int &
        :param gridcolor:
        :type gridcolor: Quantity_Color &
        :param xnamecolor:
        :type xnamecolor: Quantity_Color &
        :param ynamecolor:
        :type ynamecolor: Quantity_Color &
        :param znamecolor:
        :type znamecolor: Quantity_Color &
        :param xcolor:
        :type xcolor: Quantity_Color &
        :param ycolor:
        :type ycolor: Quantity_Color &
        :param zcolor:
        :type zcolor: Quantity_Color &
        :param fontOfNames:
        :type fontOfNames: TCollection_AsciiString &
        :param styleOfNames:
        :type styleOfNames: Font_FontAspect &
        :param sizeOfNames:
        :type sizeOfNames: int &
        :param fontOfValues:
        :type fontOfValues: TCollection_AsciiString &
        :param styleOfValues:
        :type styleOfValues: Font_FontAspect &
        :param sizeOfValues:
        :type sizeOfValues: int &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_GetGraduatedTrihedron(self, *args)


    def GraduatedTrihedronDisplay(self, *args) -> "void":
        """
        * Displays a graduated trihedron.

        :param xname:
        :type xname: TCollection_ExtendedString &
        :param yname:
        :type yname: TCollection_ExtendedString &
        :param zname:
        :type zname: TCollection_ExtendedString &
        :param xdrawname:
        :type xdrawname: bool
        :param ydrawname:
        :type ydrawname: bool
        :param zdrawname:
        :type zdrawname: bool
        :param xdrawvalues:
        :type xdrawvalues: bool
        :param ydrawvalues:
        :type ydrawvalues: bool
        :param zdrawvalues:
        :type zdrawvalues: bool
        :param drawgrid:
        :type drawgrid: bool
        :param drawaxes:
        :type drawaxes: bool
        :param nbx:
        :type nbx: int
        :param nby:
        :type nby: int
        :param nbz:
        :type nbz: int
        :param xoffset:
        :type xoffset: int
        :param yoffset:
        :type yoffset: int
        :param zoffset:
        :type zoffset: int
        :param xaxisoffset:
        :type xaxisoffset: int
        :param yaxisoffset:
        :type yaxisoffset: int
        :param zaxisoffset:
        :type zaxisoffset: int
        :param xdrawtickmarks:
        :type xdrawtickmarks: bool
        :param ydrawtickmarks:
        :type ydrawtickmarks: bool
        :param zdrawtickmarks:
        :type zdrawtickmarks: bool
        :param xtickmarklength:
        :type xtickmarklength: int
        :param ytickmarklength:
        :type ytickmarklength: int
        :param ztickmarklength:
        :type ztickmarklength: int
        :param gridcolor:
        :type gridcolor: Quantity_Color &
        :param xnamecolor:
        :type xnamecolor: Quantity_Color &
        :param ynamecolor:
        :type ynamecolor: Quantity_Color &
        :param znamecolor:
        :type znamecolor: Quantity_Color &
        :param xcolor:
        :type xcolor: Quantity_Color &
        :param ycolor:
        :type ycolor: Quantity_Color &
        :param zcolor:
        :type zcolor: Quantity_Color &
        :param fontOfNames:
        :type fontOfNames: TCollection_AsciiString &
        :param styleOfNames:
        :type styleOfNames: Font_FontAspect
        :param sizeOfNames:
        :type sizeOfNames: int
        :param fontOfValues:
        :type fontOfValues: TCollection_AsciiString &
        :param styleOfValues:
        :type styleOfValues: Font_FontAspect
        :param sizeOfValues:
        :type sizeOfValues: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_GraduatedTrihedronDisplay(self, *args)


    def GraduatedTrihedronErase(self, *args) -> "void":
        """
        * Erases a graduated trihedron from the view.

        :rtype: None

        """
        return _Visual3d.Visual3d_View_GraduatedTrihedronErase(self, *args)


    def Background(self, *args) -> "Aspect_Background":
        """
        * Returns the value of the default window background.

        :rtype: Aspect_Background

        """
        return _Visual3d.Visual3d_View_Background(self, *args)


    def GradientBackground(self, *args) -> "Aspect_GradientBackground":
        """
        * Returns the value of the window background.

        :rtype: Aspect_GradientBackground

        """
        return _Visual3d.Visual3d_View_GradientBackground(self, *args)


    def ContainsFacet(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if one of the structures displayed in the view <self> contains Polygons, Triangles or Quadrangles.

        :rtype: bool

        * Returns Standard_True if one of the structures in the set <ASet> contains Polygons, Triangles or Quadrangles.

        :param ASet:
        :type ASet: Graphic3d_MapOfStructure &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ContainsFacet(self, *args)


    def Context(self, *args) -> "Visual3d_ContextView const &":
        """
        * Returns the current context of the view <self>.

        :rtype: Visual3d_ContextView

        """
        return _Visual3d.Visual3d_View_Context(self, *args)


    def DisplayedStructures(self, *args) -> "void":
        """
        * Returns the set of structures displayed in the view <self>.

        :param SG:
        :type SG: Graphic3d_MapOfStructure &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_DisplayedStructures(self, *args)


    def IsActive(self, *args) -> "Standard_Boolean":
        """
        * Returns the activity flag of the view <self>.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsActive(self, *args)


    def IsDefined(self, *args) -> "Standard_Boolean":
        """
        * Returns True if the window associated to the view <self> is defined.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDefined(self, *args)


    def IsDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True is the view <self> is deleted. <self> is deleted after the call Remove (me).

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDeleted(self, *args)


    def MinMaxValues(self, *args) -> "Bnd_Box":
        """
        * Returns the coordinates of the boundary box of all structures displayed in the view <self>. If <theToIgnoreInfiniteFlag> is True, then the boundary box also includes minimum and maximum limits of graphical elements forming parts of infinite structures.

        :param theToIgnoreInfiniteFlag: default value is Standard_False
        :type theToIgnoreInfiniteFlag: bool
        :rtype: Bnd_Box

        * Returns the coordinates of the boundary box of all structures in the set <theSet>. If <theToIgnoreInfiniteFlag> is True, then the boundary box also includes minimum and maximum limits of graphical elements forming parts of infinite structures.

        :param theSet:
        :type theSet: Graphic3d_MapOfStructure &
        :param theToIgnoreInfiniteFlag: default value is Standard_False
        :type theToIgnoreInfiniteFlag: bool
        :rtype: Bnd_Box

        """
        return _Visual3d.Visual3d_View_MinMaxValues(self, *args)


    def NumberOfDisplayedStructures(self, *args) -> "Standard_Integer":
        """
        * Returns number of displayed structures in the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_NumberOfDisplayedStructures(self, *args)


    def Projects(self, *args) -> "void":
        """
        * Returns the coordinates of the projection of the 3d coordinates <AX>, <AY>, <AZ>.

        :param AX:
        :type AX: float
        :param AY:
        :type AY: float
        :param AZ:
        :type AZ: float
        :param APX:
        :type APX: float &
        :param APY:
        :type APY: float &
        :param APZ:
        :type APZ: float &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_Projects(self, *args)


    def DefaultCamera(self, *args) -> "Graphic3d_Camera_Handle const &":
        """
        * returns the default camera of <self>.

        :rtype: Graphic3d_Camera_Handle

        """
        return _Visual3d.Visual3d_View_DefaultCamera(self, *args)


    def Camera(self, *args) -> "Graphic3d_Camera_Handle const &":
        """
        * returns the camera of <self>.

        :rtype: Graphic3d_Camera_Handle

        """
        return _Visual3d.Visual3d_View_Camera(self, *args)


    def SetCamera(self, *args) -> "void":
        """
        * Set camera object to provide orientation and projection matrices for graphic driver.

        :param theCamera:
        :type theCamera: Graphic3d_Camera_Handle &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetCamera(self, *args)


    def Window(self, *args) -> "Handle_Aspect_Window":
        """
        * Returns the window associated to the view <self>. Warning: Raises ViewDefinitionError if the associated window isn't defined.

        :rtype: Handle_Aspect_Window

        """
        return _Visual3d.Visual3d_View_Window(self, *args)


    def LightLimit(self, *args) -> "Standard_Integer":
        """
        * Returns the MAX number of light associated to the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_LightLimit(self, *args)


    def PlaneLimit(self, *args) -> "Standard_Integer":
        """
        * Returns the MAX number of clipping planes associated to the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_PlaneLimit(self, *args)


    def ViewManager(self, *args) -> "Handle_Visual3d_ViewManager":
        """
        * Returns the view manager handle which manage this view

        :rtype: Handle_Visual3d_ViewManager

        """
        return _Visual3d.Visual3d_View_ViewManager(self, *args)


    def ReCompute(self, *args) -> "void":
        """
        * Computes the new presentation of the structure <AStructure> displayed in <self> with the type Graphic3d_TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ReCompute(self, *args)


    def DisplayImmediate(self, *args) -> "Standard_Boolean":
        """
        * Add structure to the list of immediate presentations. returns true if structure has not been registered in this view

        :param theStructure:
        :type theStructure: Handle_Graphic3d_Structure &
        :param theIsSingleView: default value is Standard_True
        :type theIsSingleView: bool
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_DisplayImmediate(self, *args)


    def EraseImmediate(self, *args) -> "Standard_Boolean":
        """
        * Removes the structure from the list of immediate presentations. returns true if structure has been registered in view

        :param theStructure:
        :type theStructure: Handle_Graphic3d_Structure &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_EraseImmediate(self, *args)


    def ClearImmediate(self, *args) -> "Standard_Boolean":
        """
        * Clears list of immediate presentations. returns true if list was not empty

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ClearImmediate(self, *args)


    def Identification(self, *args) -> "Standard_Integer":
        """
        * Returns the identification number of the view <self>.

        :rtype: int

        """
        return _Visual3d.Visual3d_View_Identification(self, *args)


    def CView(self, *args) -> "Standard_Address":
        """
        * Returns the c structure associated to <self>.

        :rtype: Standard_Address

        """
        return _Visual3d.Visual3d_View_CView(self, *args)


    def GraphicDriver(self, *args) -> "Handle_Graphic3d_GraphicDriver":
        """
        * Returns the associated GraphicDriver.

        :rtype: Handle_Graphic3d_GraphicDriver

        """
        return _Visual3d.Visual3d_View_GraphicDriver(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        * if <AFlag> is Standard_True then the transparency is managed in the view <self>. Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetTransparency(self, *args)


    def ZBufferIsActivated(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if the ZBuffer is activated in the view <self> and Standard_False if not.

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_ZBufferIsActivated(self, *args)


    def SetZBufferActivity(self, *args) -> "void":
        """
        * Activates the ZBuffer if the integer <AnActivity> is equal to 1. Deactivates the ZBuffer if the integer <AnActivity> is equal to 0. If the integer <AnActivity> is equal to -1 then - the ZBuffer is activated if me->Context ().Visualization () == Visual3d_TOV_SHADING - the ZBuffer is deactivated if me->Context ().Visualization () == Visual3d_TOV_WIREFRAME

        :param AnActivity:
        :type AnActivity: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_SetZBufferActivity(self, *args)


    def UnderLayer(self, *args) -> "Handle_Visual3d_Layer":
        """
        * Returns the underlay of the view <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_View_UnderLayer(self, *args)


    def OverLayer(self, *args) -> "Handle_Visual3d_Layer":
        """
        * Returns the underlay of the view <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_View_OverLayer(self, *args)


    def EnableDepthTest(self, *args) -> "void":
        """
        * turns on/off opengl depth

        :param enable:
        :type enable: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_EnableDepthTest(self, *args)


    def IsDepthTestEnabled(self, *args) -> "Standard_Boolean":
        """
        * returns current state of the opengl depth testing

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsDepthTestEnabled(self, *args)


    def ReadDepths(self, *args) -> "void":
        """
        * Reads depths of shown pixels of the given rectangle

        :param x:
        :type x: int
        :param y:
        :type y: int
        :param width:
        :type width: int
        :param height:
        :type height: int
        :param buffer:
        :type buffer: Standard_Address
        :rtype: None

        """
        return _Visual3d.Visual3d_View_ReadDepths(self, *args)


    def FBOCreate(self, *args) -> "Graphic3d_PtrFrameBuffer":
        """
        * Generate offscreen FBO in the graphic library

        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: Graphic3d_PtrFrameBuffer

        """
        return _Visual3d.Visual3d_View_FBOCreate(self, *args)


    def FBORelease(self, *args) -> "void":
        """
        * Remove offscreen FBO from the graphic library

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBORelease(self, *args)


    def FBOGetDimensions(self, *args) -> "void":
        """
        * Read offscreen FBO configuration.

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer
        :param width:
        :type width: int &
        :param height:
        :type height: int &
        :param widthMax:
        :type widthMax: int &
        :param heightMax:
        :type heightMax: int &
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBOGetDimensions(self, *args)


    def FBOChangeViewport(self, *args) -> "void":
        """
        * Change offscreen FBO viewport.

        :param fboPtr:
        :type fboPtr: Graphic3d_PtrFrameBuffer &
        :param width:
        :type width: int
        :param height:
        :type height: int
        :rtype: None

        """
        return _Visual3d.Visual3d_View_FBOChangeViewport(self, *args)


    def BufferDump(self, *args) -> "Standard_Boolean":
        """
        * Dump active rendering buffer into specified memory buffer.

        :param theImage:
        :type theImage: Image_PixMap &
        :param theBufferType:
        :type theBufferType: Graphic3d_BufferType &
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_BufferDump(self, *args)


    def EnableGLLight(self, *args) -> "void":
        """
        * turns on/off opengl lighting, currently used in triedron displaying

        :param enable:
        :type enable: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_View_EnableGLLight(self, *args)


    def IsGLLightEnabled(self, *args) -> "Standard_Boolean":
        """
        * returns the current state of the gl lighting currently used in triedron displaying

        :rtype: bool

        """
        return _Visual3d.Visual3d_View_IsGLLightEnabled(self, *args)


    def Export(self, *args) -> "Standard_Boolean":
        """
        * Export scene into the one of the Vector graphics formats (SVG, PS, PDF...). In contrast to Bitmaps, Vector graphics is scalable (so you may got quality benefits on printing to laser printer). Notice however that results may differ a lot and do not contain some elements.

        :param theFileName:
        :type theFileName: char *
        :param theFormat:
        :type theFormat: Graphic3d_ExportFormat
        :param theSortType: default value is Graphic3d_ST_BSP_Tree
        :type theSortType: Graphic3d_SortType
        :param thePrecision: default value is 0.005
        :type thePrecision: float
        :param theProgressBarFunc: default value is NULL
        :type theProgressBarFunc: Standard_Address
        :param theProgressObject: default value is NULL
        :type theProgressObject: Standard_Address
        :rtype: bool

        """
        return _Visual3d.Visual3d_View_Export(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_View(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_View
Visual3d_View.Activate = new_instancemethod(_Visual3d.Visual3d_View_Activate, None, Visual3d_View)
Visual3d_View.Deactivate = new_instancemethod(_Visual3d.Visual3d_View_Deactivate, None, Visual3d_View)
Visual3d_View.RedrawImmediate = new_instancemethod(_Visual3d.Visual3d_View_RedrawImmediate, None, Visual3d_View)
Visual3d_View.Invalidate = new_instancemethod(_Visual3d.Visual3d_View_Invalidate, None, Visual3d_View)
Visual3d_View.Redraw = new_instancemethod(_Visual3d.Visual3d_View_Redraw, None, Visual3d_View)
Visual3d_View.Remove = new_instancemethod(_Visual3d.Visual3d_View_Remove, None, Visual3d_View)
Visual3d_View.Resized = new_instancemethod(_Visual3d.Visual3d_View_Resized, None, Visual3d_View)
Visual3d_View.SetBackground = new_instancemethod(_Visual3d.Visual3d_View_SetBackground, None, Visual3d_View)
Visual3d_View.SetBackgroundImage = new_instancemethod(_Visual3d.Visual3d_View_SetBackgroundImage, None, Visual3d_View)
Visual3d_View.SetBgImageStyle = new_instancemethod(_Visual3d.Visual3d_View_SetBgImageStyle, None, Visual3d_View)
Visual3d_View.SetGradientBackground = new_instancemethod(_Visual3d.Visual3d_View_SetGradientBackground, None, Visual3d_View)
Visual3d_View.SetBgGradientStyle = new_instancemethod(_Visual3d.Visual3d_View_SetBgGradientStyle, None, Visual3d_View)
Visual3d_View.SetBackFacingModel = new_instancemethod(_Visual3d.Visual3d_View_SetBackFacingModel, None, Visual3d_View)
Visual3d_View.BackFacingModel = new_instancemethod(_Visual3d.Visual3d_View_BackFacingModel, None, Visual3d_View)
Visual3d_View.SetContext = new_instancemethod(_Visual3d.Visual3d_View_SetContext, None, Visual3d_View)
Visual3d_View.SetViewMappingDefault = new_instancemethod(_Visual3d.Visual3d_View_SetViewMappingDefault, None, Visual3d_View)
Visual3d_View.SetViewOrientationDefault = new_instancemethod(_Visual3d.Visual3d_View_SetViewOrientationDefault, None, Visual3d_View)
Visual3d_View.SetWindow = new_instancemethod(_Visual3d.Visual3d_View_SetWindow, None, Visual3d_View)
Visual3d_View.Update = new_instancemethod(_Visual3d.Visual3d_View_Update, None, Visual3d_View)
Visual3d_View.SetAutoZFitMode = new_instancemethod(_Visual3d.Visual3d_View_SetAutoZFitMode, None, Visual3d_View)
Visual3d_View.AutoZFitMode = new_instancemethod(_Visual3d.Visual3d_View_AutoZFitMode, None, Visual3d_View)
Visual3d_View.AutoZFitScaleFactor = new_instancemethod(_Visual3d.Visual3d_View_AutoZFitScaleFactor, None, Visual3d_View)
Visual3d_View.AutoZFit = new_instancemethod(_Visual3d.Visual3d_View_AutoZFit, None, Visual3d_View)
Visual3d_View.ZFitAll = new_instancemethod(_Visual3d.Visual3d_View_ZFitAll, None, Visual3d_View)
Visual3d_View.ViewMappingReset = new_instancemethod(_Visual3d.Visual3d_View_ViewMappingReset, None, Visual3d_View)
Visual3d_View.ViewOrientationReset = new_instancemethod(_Visual3d.Visual3d_View_ViewOrientationReset, None, Visual3d_View)
Visual3d_View.SetComputedMode = new_instancemethod(_Visual3d.Visual3d_View_SetComputedMode, None, Visual3d_View)
Visual3d_View.ComputedMode = new_instancemethod(_Visual3d.Visual3d_View_ComputedMode, None, Visual3d_View)
Visual3d_View.ZBufferTriedronSetup = new_instancemethod(_Visual3d.Visual3d_View_ZBufferTriedronSetup, None, Visual3d_View)
Visual3d_View.TriedronDisplay = new_instancemethod(_Visual3d.Visual3d_View_TriedronDisplay, None, Visual3d_View)
Visual3d_View.TriedronErase = new_instancemethod(_Visual3d.Visual3d_View_TriedronErase, None, Visual3d_View)
Visual3d_View.TriedronEcho = new_instancemethod(_Visual3d.Visual3d_View_TriedronEcho, None, Visual3d_View)
Visual3d_View.GetGraduatedTrihedron = new_instancemethod(_Visual3d.Visual3d_View_GetGraduatedTrihedron, None, Visual3d_View)
Visual3d_View.GraduatedTrihedronDisplay = new_instancemethod(_Visual3d.Visual3d_View_GraduatedTrihedronDisplay, None, Visual3d_View)
Visual3d_View.GraduatedTrihedronErase = new_instancemethod(_Visual3d.Visual3d_View_GraduatedTrihedronErase, None, Visual3d_View)
Visual3d_View.Background = new_instancemethod(_Visual3d.Visual3d_View_Background, None, Visual3d_View)
Visual3d_View.GradientBackground = new_instancemethod(_Visual3d.Visual3d_View_GradientBackground, None, Visual3d_View)
Visual3d_View.ContainsFacet = new_instancemethod(_Visual3d.Visual3d_View_ContainsFacet, None, Visual3d_View)
Visual3d_View.Context = new_instancemethod(_Visual3d.Visual3d_View_Context, None, Visual3d_View)
Visual3d_View.DisplayedStructures = new_instancemethod(_Visual3d.Visual3d_View_DisplayedStructures, None, Visual3d_View)
Visual3d_View.IsActive = new_instancemethod(_Visual3d.Visual3d_View_IsActive, None, Visual3d_View)
Visual3d_View.IsDefined = new_instancemethod(_Visual3d.Visual3d_View_IsDefined, None, Visual3d_View)
Visual3d_View.IsDeleted = new_instancemethod(_Visual3d.Visual3d_View_IsDeleted, None, Visual3d_View)
Visual3d_View.MinMaxValues = new_instancemethod(_Visual3d.Visual3d_View_MinMaxValues, None, Visual3d_View)
Visual3d_View.NumberOfDisplayedStructures = new_instancemethod(_Visual3d.Visual3d_View_NumberOfDisplayedStructures, None, Visual3d_View)
Visual3d_View.Projects = new_instancemethod(_Visual3d.Visual3d_View_Projects, None, Visual3d_View)
Visual3d_View.DefaultCamera = new_instancemethod(_Visual3d.Visual3d_View_DefaultCamera, None, Visual3d_View)
Visual3d_View.Camera = new_instancemethod(_Visual3d.Visual3d_View_Camera, None, Visual3d_View)
Visual3d_View.SetCamera = new_instancemethod(_Visual3d.Visual3d_View_SetCamera, None, Visual3d_View)
Visual3d_View.Window = new_instancemethod(_Visual3d.Visual3d_View_Window, None, Visual3d_View)
Visual3d_View.LightLimit = new_instancemethod(_Visual3d.Visual3d_View_LightLimit, None, Visual3d_View)
Visual3d_View.PlaneLimit = new_instancemethod(_Visual3d.Visual3d_View_PlaneLimit, None, Visual3d_View)
Visual3d_View.ViewManager = new_instancemethod(_Visual3d.Visual3d_View_ViewManager, None, Visual3d_View)
Visual3d_View.ReCompute = new_instancemethod(_Visual3d.Visual3d_View_ReCompute, None, Visual3d_View)
Visual3d_View.DisplayImmediate = new_instancemethod(_Visual3d.Visual3d_View_DisplayImmediate, None, Visual3d_View)
Visual3d_View.EraseImmediate = new_instancemethod(_Visual3d.Visual3d_View_EraseImmediate, None, Visual3d_View)
Visual3d_View.ClearImmediate = new_instancemethod(_Visual3d.Visual3d_View_ClearImmediate, None, Visual3d_View)
Visual3d_View.Identification = new_instancemethod(_Visual3d.Visual3d_View_Identification, None, Visual3d_View)
Visual3d_View.CView = new_instancemethod(_Visual3d.Visual3d_View_CView, None, Visual3d_View)
Visual3d_View.GraphicDriver = new_instancemethod(_Visual3d.Visual3d_View_GraphicDriver, None, Visual3d_View)
Visual3d_View.SetTransparency = new_instancemethod(_Visual3d.Visual3d_View_SetTransparency, None, Visual3d_View)
Visual3d_View.ZBufferIsActivated = new_instancemethod(_Visual3d.Visual3d_View_ZBufferIsActivated, None, Visual3d_View)
Visual3d_View.SetZBufferActivity = new_instancemethod(_Visual3d.Visual3d_View_SetZBufferActivity, None, Visual3d_View)
Visual3d_View.UnderLayer = new_instancemethod(_Visual3d.Visual3d_View_UnderLayer, None, Visual3d_View)
Visual3d_View.OverLayer = new_instancemethod(_Visual3d.Visual3d_View_OverLayer, None, Visual3d_View)
Visual3d_View.EnableDepthTest = new_instancemethod(_Visual3d.Visual3d_View_EnableDepthTest, None, Visual3d_View)
Visual3d_View.IsDepthTestEnabled = new_instancemethod(_Visual3d.Visual3d_View_IsDepthTestEnabled, None, Visual3d_View)
Visual3d_View.ReadDepths = new_instancemethod(_Visual3d.Visual3d_View_ReadDepths, None, Visual3d_View)
Visual3d_View.FBOCreate = new_instancemethod(_Visual3d.Visual3d_View_FBOCreate, None, Visual3d_View)
Visual3d_View.FBORelease = new_instancemethod(_Visual3d.Visual3d_View_FBORelease, None, Visual3d_View)
Visual3d_View.FBOGetDimensions = new_instancemethod(_Visual3d.Visual3d_View_FBOGetDimensions, None, Visual3d_View)
Visual3d_View.FBOChangeViewport = new_instancemethod(_Visual3d.Visual3d_View_FBOChangeViewport, None, Visual3d_View)
Visual3d_View.BufferDump = new_instancemethod(_Visual3d.Visual3d_View_BufferDump, None, Visual3d_View)
Visual3d_View.EnableGLLight = new_instancemethod(_Visual3d.Visual3d_View_EnableGLLight, None, Visual3d_View)
Visual3d_View.IsGLLightEnabled = new_instancemethod(_Visual3d.Visual3d_View_IsGLLightEnabled, None, Visual3d_View)
Visual3d_View.Export = new_instancemethod(_Visual3d.Visual3d_View_Export, None, Visual3d_View)
Visual3d_View_swigregister = _Visual3d.Visual3d_View_swigregister
Visual3d_View_swigregister(Visual3d_View)

class Handle_Visual3d_View(OCC.Graphic3d.Handle_Graphic3d_DataStructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_View_swiginit(self, _Visual3d.new_Handle_Visual3d_View(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_View_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_View
Handle_Visual3d_View.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_View_Nullify, None, Handle_Visual3d_View)
Handle_Visual3d_View.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_View_IsNull, None, Handle_Visual3d_View)
Handle_Visual3d_View._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_View__get_reference, None, Handle_Visual3d_View)
Handle_Visual3d_View_swigregister = _Visual3d.Handle_Visual3d_View_swigregister
Handle_Visual3d_View_swigregister(Handle_Visual3d_View)

def Handle_Visual3d_View_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_View const":
    return _Visual3d.Handle_Visual3d_View_DownCast(AnObject)
Handle_Visual3d_View_DownCast = _Visual3d.Handle_Visual3d_View_DownCast

class Visual3d_ViewManager(OCC.Graphic3d.Graphic3d_StructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Creates a 3D visualizer. Currently creating of more than 100 viewer instances is not supported and leads to InitializationError and initialisation failure. This limitation might be addressed in some future OCCT releases. //! Category: Methods to modify the class definition

        :param theDriver:
        :type theDriver: Handle_Graphic3d_GraphicDriver &
        :rtype: None

        """
        _Visual3d.Visual3d_ViewManager_swiginit(self, _Visual3d.new_Visual3d_ViewManager(*args))

    def Activate(self, *args) -> "void":
        """
        * Activates all the views of the manager <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Activate(self, *args)


    def Deactivate(self, *args) -> "void":
        """
        * Deactivates all the views of the manager <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Deactivate(self, *args)


    def Redraw(self, *args) -> "void":
        """
        * Redraws all the displayed structures.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Redraw(self, *args)


    def RedrawImmediate(self, *args) -> "void":
        """
        * Updates layer of immediate presentations.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_RedrawImmediate(self, *args)


    def Invalidate(self, *args) -> "void":
        """
        * Invalidates viewer content but does not redraw it.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Invalidate(self, *args)


    def Remove(self, *args) -> "void":
        """
        * Deletes and erases the 3D visualiser <self>.

        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Remove(self, *args)


    def ActivatedView(self, *args) -> "Handle_Visual3d_HSequenceOfView":
        """
        * Returns the group of views activated in the visualiser <self>.

        :rtype: Handle_Visual3d_HSequenceOfView

        """
        return _Visual3d.Visual3d_ViewManager_ActivatedView(self, *args)


    def DefinedView(self, *args) -> "Handle_Visual3d_HSequenceOfView":
        """
        * Returns the group of views defined in the visualiser <self>.

        :rtype: Handle_Visual3d_HSequenceOfView

        """
        return _Visual3d.Visual3d_ViewManager_DefinedView(self, *args)


    def MaxNumOfViews(self, *args) -> "Standard_Integer":
        """
        * Returns the theoretical maximum number of definable views in the view manager <self>. Warning: It's not possible to accept an infinite number of definable views because each view must have an identification and we have different view managers.

        :rtype: int

        """
        return _Visual3d.Visual3d_ViewManager_MaxNumOfViews(self, *args)


    def UnIdentification(self, *args) -> "void":
        """
        * Release a unique ID of the view reserved for the view on its creation.

        :param aViewId:
        :type aViewId: int
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_UnIdentification(self, *args)


    def Identification(self, *args) -> "Standard_Integer":
        """
        * Returns : a new identification number for a new view in the visualiser.

        :param AView:
        :type AView: Handle_Visual3d_View &
        :rtype: int

        * Returns the structure with the identification number <AId>.

        :param AId:
        :type AId: int
        :rtype: Handle_Graphic3d_Structure

        * Returns the identification number of the visualiser.

        :rtype: int

        """
        return _Visual3d.Visual3d_ViewManager_Identification(self, *args)


    def Erase(self, *args) -> "void":
        """
        * Erases all of the structures displayed in the visualiser <self>.

        :rtype: None

        * Erases the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_Erase(self, *args)


    def UnHighlight(self, *args) -> "void":
        """
        * Suppress the highlighting on all the structures.

        :rtype: None

        * Suppress the highlighting on the structure <AStructure>.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_UnHighlight(self, *args)


    def ViewExists(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if the view associated to the window <AWindow> exists and is activated. <TheViewId> contains the internal identification of the associated view.

        :param AWindow:
        :type AWindow: Handle_Aspect_Window &
        :param TheCView:
        :type TheCView: Graphic3d_CView &
        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_ViewExists(self, *args)


    def UnderLayer(self, *args) -> "Handle_Visual3d_Layer":
        """
        * Returns the underlay of the viewer <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_ViewManager_UnderLayer(self, *args)


    def OverLayer(self, *args) -> "Handle_Visual3d_Layer":
        """
        * Returns the underlay of the viewer <self>.

        :rtype: Handle_Visual3d_Layer

        """
        return _Visual3d.Visual3d_ViewManager_OverLayer(self, *args)


    def ReCompute(self, *args) -> "void":
        """
        * Forces a new construction of the structure <AStructure> if <AStructure> is displayed and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :rtype: None

        * Forces a new construction of the structure <AStructure> if <AStructure> is displayed in <AProjector> and TOS_COMPUTED.

        :param AStructure:
        :type AStructure: Handle_Graphic3d_Structure &
        :param AProjector:
        :type AProjector: Handle_Graphic3d_DataStructureManager &
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_ReCompute(self, *args)


    def Transparency(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if the transparency is activated in all activated views. Default Standard_False

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_Transparency(self, *args)


    def SetTransparency(self, *args) -> "void":
        """
        * if <AFlag> is Standard_True then the transparency is managed. Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_SetTransparency(self, *args)


    def ZBufferAuto(self, *args) -> "Standard_Boolean":
        """
        * Returns Standard_True if the zbuffer activity is managed automatically. Default Standard_False

        :rtype: bool

        """
        return _Visual3d.Visual3d_ViewManager_ZBufferAuto(self, *args)


    def SetZBufferAuto(self, *args) -> "void":
        """
        * if <AFlag> is Standard_True then the zbuffer activity is managed automatically. Default Standard_False

        :param AFlag:
        :type AFlag: bool
        :rtype: None

        """
        return _Visual3d.Visual3d_ViewManager_SetZBufferAuto(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Visual3d_ViewManager(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Visual3d.delete_Visual3d_ViewManager
Visual3d_ViewManager.Activate = new_instancemethod(_Visual3d.Visual3d_ViewManager_Activate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Deactivate = new_instancemethod(_Visual3d.Visual3d_ViewManager_Deactivate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Redraw = new_instancemethod(_Visual3d.Visual3d_ViewManager_Redraw, None, Visual3d_ViewManager)
Visual3d_ViewManager.RedrawImmediate = new_instancemethod(_Visual3d.Visual3d_ViewManager_RedrawImmediate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Invalidate = new_instancemethod(_Visual3d.Visual3d_ViewManager_Invalidate, None, Visual3d_ViewManager)
Visual3d_ViewManager.Remove = new_instancemethod(_Visual3d.Visual3d_ViewManager_Remove, None, Visual3d_ViewManager)
Visual3d_ViewManager.ActivatedView = new_instancemethod(_Visual3d.Visual3d_ViewManager_ActivatedView, None, Visual3d_ViewManager)
Visual3d_ViewManager.DefinedView = new_instancemethod(_Visual3d.Visual3d_ViewManager_DefinedView, None, Visual3d_ViewManager)
Visual3d_ViewManager.MaxNumOfViews = new_instancemethod(_Visual3d.Visual3d_ViewManager_MaxNumOfViews, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnIdentification = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnIdentification, None, Visual3d_ViewManager)
Visual3d_ViewManager.Identification = new_instancemethod(_Visual3d.Visual3d_ViewManager_Identification, None, Visual3d_ViewManager)
Visual3d_ViewManager.Erase = new_instancemethod(_Visual3d.Visual3d_ViewManager_Erase, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnHighlight = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnHighlight, None, Visual3d_ViewManager)
Visual3d_ViewManager.ViewExists = new_instancemethod(_Visual3d.Visual3d_ViewManager_ViewExists, None, Visual3d_ViewManager)
Visual3d_ViewManager.UnderLayer = new_instancemethod(_Visual3d.Visual3d_ViewManager_UnderLayer, None, Visual3d_ViewManager)
Visual3d_ViewManager.OverLayer = new_instancemethod(_Visual3d.Visual3d_ViewManager_OverLayer, None, Visual3d_ViewManager)
Visual3d_ViewManager.ReCompute = new_instancemethod(_Visual3d.Visual3d_ViewManager_ReCompute, None, Visual3d_ViewManager)
Visual3d_ViewManager.Transparency = new_instancemethod(_Visual3d.Visual3d_ViewManager_Transparency, None, Visual3d_ViewManager)
Visual3d_ViewManager.SetTransparency = new_instancemethod(_Visual3d.Visual3d_ViewManager_SetTransparency, None, Visual3d_ViewManager)
Visual3d_ViewManager.ZBufferAuto = new_instancemethod(_Visual3d.Visual3d_ViewManager_ZBufferAuto, None, Visual3d_ViewManager)
Visual3d_ViewManager.SetZBufferAuto = new_instancemethod(_Visual3d.Visual3d_ViewManager_SetZBufferAuto, None, Visual3d_ViewManager)
Visual3d_ViewManager_swigregister = _Visual3d.Visual3d_ViewManager_swigregister
Visual3d_ViewManager_swigregister(Visual3d_ViewManager)

class Handle_Visual3d_ViewManager(OCC.Graphic3d.Handle_Graphic3d_StructureManager):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Visual3d.Handle_Visual3d_ViewManager_swiginit(self, _Visual3d.new_Handle_Visual3d_ViewManager(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Visual3d.Handle_Visual3d_ViewManager_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Visual3d.delete_Handle_Visual3d_ViewManager
Handle_Visual3d_ViewManager.Nullify = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager_Nullify, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager.IsNull = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager_IsNull, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager._get_reference = new_instancemethod(_Visual3d.Handle_Visual3d_ViewManager__get_reference, None, Handle_Visual3d_ViewManager)
Handle_Visual3d_ViewManager_swigregister = _Visual3d.Handle_Visual3d_ViewManager_swigregister
Handle_Visual3d_ViewManager_swigregister(Handle_Visual3d_ViewManager)

def Handle_Visual3d_ViewManager_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Visual3d_ViewManager const":
    return _Visual3d.Handle_Visual3d_ViewManager_DownCast(AnObject)
Handle_Visual3d_ViewManager_DownCast = _Visual3d.Handle_Visual3d_ViewManager_DownCast



