# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _LProp.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_LProp')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_LProp')
    _LProp = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_LProp', [dirname(__file__)])
        except ImportError:
            import _LProp
            return _LProp
        try:
            _mod = imp.load_module('_LProp', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _LProp = swig_import_helper()
    del swig_import_helper
else:
    import _LProp
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _LProp.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_LProp.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_LProp.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_LProp.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_LProp.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_LProp.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_LProp.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_LProp.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_LProp.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_LProp.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_LProp.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_LProp.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_LProp.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_LProp.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_LProp.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_LProp.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_LProp.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _LProp.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.GeomAbs
import OCC.Standard
import OCC.TCollection
import OCC.MMgt

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

LProp_Inflection = _LProp.LProp_Inflection
LProp_MinCur = _LProp.LProp_MinCur
LProp_MaxCur = _LProp.LProp_MaxCur
LProp_Undecided = _LProp.LProp_Undecided
LProp_Undefined = _LProp.LProp_Undefined
LProp_Defined = _LProp.LProp_Defined
LProp_Computed = _LProp.LProp_Computed
class LProp_AnalyticCurInf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _LProp.LProp_AnalyticCurInf_swiginit(self, _LProp.new_LProp_AnalyticCurInf(*args))

    def Perform(self, *args) -> "void":
        """
        :param T:
        :type T: GeomAbs_CurveType
        :param UFirst:
        :type UFirst: float
        :param ULast:
        :type ULast: float
        :param Result:
        :type Result: LProp_CurAndInf &
        :rtype: None

        """
        return _LProp.LProp_AnalyticCurInf_Perform(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_AnalyticCurInf
LProp_AnalyticCurInf.Perform = new_instancemethod(_LProp.LProp_AnalyticCurInf_Perform, None, LProp_AnalyticCurInf)
LProp_AnalyticCurInf_swigregister = _LProp.LProp_AnalyticCurInf_swigregister
LProp_AnalyticCurInf_swigregister(LProp_AnalyticCurInf)

class LProp_CurAndInf(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _LProp.LProp_CurAndInf_swiginit(self, _LProp.new_LProp_CurAndInf(*args))

    def AddInflection(self, *args) -> "void":
        """
        :param Param:
        :type Param: float
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_AddInflection(self, *args)


    def AddExtCur(self, *args) -> "void":
        """
        :param Param:
        :type Param: float
        :param IsMin:
        :type IsMin: bool
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_AddExtCur(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _LProp.LProp_CurAndInf_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _LProp.LProp_CurAndInf_IsEmpty(self, *args)


    def NbPoints(self, *args) -> "Standard_Integer":
        """
        * Returns the number of points. The Points are stored to increasing parameter.

        :rtype: int

        """
        return _LProp.LProp_CurAndInf_NbPoints(self, *args)


    def Parameter(self, *args) -> "Standard_Real":
        """
        * Returns the parameter of the Nth point. raises if N not in the range [1,NbPoints()]

        :param N:
        :type N: int
        :rtype: float

        """
        return _LProp.LProp_CurAndInf_Parameter(self, *args)


    def Type(self, *args) -> "LProp_CIType":
        """
        * Returns - MinCur if the Nth parameter corresponds to a minimum of the radius of curvature. - MaxCur if the Nth parameter corresponds to a maximum of the radius of curvature. - Inflection if the parameter corresponds to a point of inflection. raises if N not in the range [1,NbPoints()]

        :param N:
        :type N: int
        :rtype: LProp_CIType

        """
        return _LProp.LProp_CurAndInf_Type(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_CurAndInf
LProp_CurAndInf.AddInflection = new_instancemethod(_LProp.LProp_CurAndInf_AddInflection, None, LProp_CurAndInf)
LProp_CurAndInf.AddExtCur = new_instancemethod(_LProp.LProp_CurAndInf_AddExtCur, None, LProp_CurAndInf)
LProp_CurAndInf.Clear = new_instancemethod(_LProp.LProp_CurAndInf_Clear, None, LProp_CurAndInf)
LProp_CurAndInf.IsEmpty = new_instancemethod(_LProp.LProp_CurAndInf_IsEmpty, None, LProp_CurAndInf)
LProp_CurAndInf.NbPoints = new_instancemethod(_LProp.LProp_CurAndInf_NbPoints, None, LProp_CurAndInf)
LProp_CurAndInf.Parameter = new_instancemethod(_LProp.LProp_CurAndInf_Parameter, None, LProp_CurAndInf)
LProp_CurAndInf.Type = new_instancemethod(_LProp.LProp_CurAndInf_Type, None, LProp_CurAndInf)
LProp_CurAndInf_swigregister = _LProp.LProp_CurAndInf_swigregister
LProp_CurAndInf_swigregister(LProp_CurAndInf)

class LProp_SequenceNodeOfSequenceOfCIType(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: LProp_CIType &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _LProp.LProp_SequenceNodeOfSequenceOfCIType_swiginit(self, _LProp.new_LProp_SequenceNodeOfSequenceOfCIType(*args))

    def Value(self, *args) -> "LProp_CIType &":
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceNodeOfSequenceOfCIType_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_LProp_SequenceNodeOfSequenceOfCIType(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_SequenceNodeOfSequenceOfCIType
LProp_SequenceNodeOfSequenceOfCIType.Value = new_instancemethod(_LProp.LProp_SequenceNodeOfSequenceOfCIType_Value, None, LProp_SequenceNodeOfSequenceOfCIType)
LProp_SequenceNodeOfSequenceOfCIType_swigregister = _LProp.LProp_SequenceNodeOfSequenceOfCIType_swigregister
LProp_SequenceNodeOfSequenceOfCIType_swigregister(LProp_SequenceNodeOfSequenceOfCIType)

class Handle_LProp_SequenceNodeOfSequenceOfCIType(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_swiginit(self, _LProp.new_Handle_LProp_SequenceNodeOfSequenceOfCIType(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _LProp.delete_Handle_LProp_SequenceNodeOfSequenceOfCIType
Handle_LProp_SequenceNodeOfSequenceOfCIType.Nullify = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_Nullify, None, Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType.IsNull = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_IsNull, None, Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType._get_reference = new_instancemethod(_LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType__get_reference, None, Handle_LProp_SequenceNodeOfSequenceOfCIType)
Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister = _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister
Handle_LProp_SequenceNodeOfSequenceOfCIType_swigregister(Handle_LProp_SequenceNodeOfSequenceOfCIType)

def Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_LProp_SequenceNodeOfSequenceOfCIType const":
    return _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast(AnObject)
Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast = _LProp.Handle_LProp_SequenceNodeOfSequenceOfCIType_DownCast

class LProp_SequenceOfCIType(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: LProp_SequenceOfCIType &
        :rtype: None

        """
        _LProp.LProp_SequenceOfCIType_swiginit(self, _LProp.new_LProp_SequenceOfCIType(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Clear(self, *args)


    def Assign(self, *args) -> "LProp_SequenceOfCIType const &":
        """
        :param Other:
        :type Other: LProp_SequenceOfCIType &
        :rtype: LProp_SequenceOfCIType

        """
        return _LProp.LProp_SequenceOfCIType_Assign(self, *args)


    def Set(self, *args) -> "LProp_SequenceOfCIType const &":
        """
        :param Other:
        :type Other: LProp_SequenceOfCIType &
        :rtype: LProp_SequenceOfCIType

        """
        return _LProp.LProp_SequenceOfCIType_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: LProp_CIType &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_InsertAfter(self, *args)


    def First(self, *args) -> "LProp_CIType const &":
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_First(self, *args)


    def Last(self, *args) -> "LProp_CIType const &":
        """
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: LProp_SequenceOfCIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Split(self, *args)


    def Value(self, *args) -> "LProp_CIType const &":
        """
        :param Index:
        :type Index: int
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: LProp_CIType &
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_SetValue(self, *args)


    def ChangeValue(self, *args) -> "LProp_CIType &":
        """
        :param Index:
        :type Index: int
        :rtype: LProp_CIType

        """
        return _LProp.LProp_SequenceOfCIType_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _LProp.LProp_SequenceOfCIType_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _LProp.delete_LProp_SequenceOfCIType
LProp_SequenceOfCIType.Clear = new_instancemethod(_LProp.LProp_SequenceOfCIType_Clear, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Assign = new_instancemethod(_LProp.LProp_SequenceOfCIType_Assign, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Set = new_instancemethod(_LProp.LProp_SequenceOfCIType_Set, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Append = new_instancemethod(_LProp.LProp_SequenceOfCIType_Append, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Prepend = new_instancemethod(_LProp.LProp_SequenceOfCIType_Prepend, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.InsertBefore = new_instancemethod(_LProp.LProp_SequenceOfCIType_InsertBefore, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.InsertAfter = new_instancemethod(_LProp.LProp_SequenceOfCIType_InsertAfter, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.First = new_instancemethod(_LProp.LProp_SequenceOfCIType_First, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Last = new_instancemethod(_LProp.LProp_SequenceOfCIType_Last, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Split = new_instancemethod(_LProp.LProp_SequenceOfCIType_Split, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Value = new_instancemethod(_LProp.LProp_SequenceOfCIType_Value, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.SetValue = new_instancemethod(_LProp.LProp_SequenceOfCIType_SetValue, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.ChangeValue = new_instancemethod(_LProp.LProp_SequenceOfCIType_ChangeValue, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType.Remove = new_instancemethod(_LProp.LProp_SequenceOfCIType_Remove, None, LProp_SequenceOfCIType)
LProp_SequenceOfCIType_swigregister = _LProp.LProp_SequenceOfCIType_swigregister
LProp_SequenceOfCIType_swigregister(LProp_SequenceOfCIType)



