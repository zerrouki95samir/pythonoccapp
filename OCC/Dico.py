# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Dico.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Dico')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Dico')
    _Dico = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Dico', [dirname(__file__)])
        except ImportError:
            import _Dico
            return _Dico
        try:
            _mod = imp.load_module('_Dico', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Dico = swig_import_helper()
    del swig_import_helper
else:
    import _Dico
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Dico.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Dico.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Dico.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Dico.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Dico.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Dico.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Dico.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Dico.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Dico.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Dico.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Dico.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Dico.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Dico.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Dico.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Dico.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Dico.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Dico.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Dico.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.MMgt
import OCC.Standard
import OCC.TCollection

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class Dico_DictionaryOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dico.Dico_DictionaryOfInteger_swiginit(self, _Dico.new_Dico_DictionaryOfInteger(*args))

    def HasItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_False
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfInteger_HasItem(self, *args)


    def Item(self, *args) -> "Standard_Integer const &":
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: int

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: int

        """
        return _Dico.Dico_DictionaryOfInteger_Item(self, *args)


    def GetItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: int &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: int &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfInteger_GetItem(self, *args)


    def SetItem(self, *args) -> "void":
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: int &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: int &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfInteger_SetItem(self, *args)


    def NewItem(self, *args) -> "Standard_Integer &":
        """
        :param name:
        :type name: char *
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: int

        :param name:
        :type name: TCollection_AsciiString &
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: int

        """
        return _Dico.Dico_DictionaryOfInteger_NewItem(self, *args)


    def RemoveItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfInteger_RemoveItem(self, *args)


    def Clean(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfInteger_Clean(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfInteger_IsEmpty(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfInteger_Clear(self, *args)


    def Copy(self, *args) -> "Handle_Dico_DictionaryOfInteger":
        """
        :rtype: Handle_Dico_DictionaryOfInteger

        """
        return _Dico.Dico_DictionaryOfInteger_Copy(self, *args)


    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param acell:
        :type acell: Handle_Dico_DictionaryOfInteger &
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfInteger_Complete(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Dico_DictionaryOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_DictionaryOfInteger
Dico_DictionaryOfInteger.HasItem = new_instancemethod(_Dico.Dico_DictionaryOfInteger_HasItem, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.Item = new_instancemethod(_Dico.Dico_DictionaryOfInteger_Item, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.GetItem = new_instancemethod(_Dico.Dico_DictionaryOfInteger_GetItem, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.SetItem = new_instancemethod(_Dico.Dico_DictionaryOfInteger_SetItem, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.NewItem = new_instancemethod(_Dico.Dico_DictionaryOfInteger_NewItem, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.RemoveItem = new_instancemethod(_Dico.Dico_DictionaryOfInteger_RemoveItem, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.Clean = new_instancemethod(_Dico.Dico_DictionaryOfInteger_Clean, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.IsEmpty = new_instancemethod(_Dico.Dico_DictionaryOfInteger_IsEmpty, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.Clear = new_instancemethod(_Dico.Dico_DictionaryOfInteger_Clear, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.Copy = new_instancemethod(_Dico.Dico_DictionaryOfInteger_Copy, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger.Complete = new_instancemethod(_Dico.Dico_DictionaryOfInteger_Complete, None, Dico_DictionaryOfInteger)
Dico_DictionaryOfInteger_swigregister = _Dico.Dico_DictionaryOfInteger_swigregister
Dico_DictionaryOfInteger_swigregister(Dico_DictionaryOfInteger)

class Handle_Dico_DictionaryOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dico.Handle_Dico_DictionaryOfInteger_swiginit(self, _Dico.new_Handle_Dico_DictionaryOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Dico.Handle_Dico_DictionaryOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Dico.delete_Handle_Dico_DictionaryOfInteger
Handle_Dico_DictionaryOfInteger.Nullify = new_instancemethod(_Dico.Handle_Dico_DictionaryOfInteger_Nullify, None, Handle_Dico_DictionaryOfInteger)
Handle_Dico_DictionaryOfInteger.IsNull = new_instancemethod(_Dico.Handle_Dico_DictionaryOfInteger_IsNull, None, Handle_Dico_DictionaryOfInteger)
Handle_Dico_DictionaryOfInteger._get_reference = new_instancemethod(_Dico.Handle_Dico_DictionaryOfInteger__get_reference, None, Handle_Dico_DictionaryOfInteger)
Handle_Dico_DictionaryOfInteger_swigregister = _Dico.Handle_Dico_DictionaryOfInteger_swigregister
Handle_Dico_DictionaryOfInteger_swigregister(Handle_Dico_DictionaryOfInteger)

def Handle_Dico_DictionaryOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Dico_DictionaryOfInteger const":
    return _Dico.Handle_Dico_DictionaryOfInteger_DownCast(AnObject)
Handle_Dico_DictionaryOfInteger_DownCast = _Dico.Handle_Dico_DictionaryOfInteger_DownCast

class Dico_DictionaryOfTransient(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Dico.Dico_DictionaryOfTransient_swiginit(self, _Dico.new_Dico_DictionaryOfTransient(*args))

    def HasItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_False
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfTransient_HasItem(self, *args)


    def Item(self, *args) -> "Handle_Standard_Transient":
        """
        :param name:
        :type name: char *
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_Standard_Transient

        :param name:
        :type name: TCollection_AsciiString &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_Standard_Transient

        """
        return _Dico.Dico_DictionaryOfTransient_Item(self, *args)


    def GetItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: Handle_Standard_Transient &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: Handle_Standard_Transient &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfTransient_GetItem(self, *args)


    def SetItem(self, *args) -> "void":
        """
        :param name:
        :type name: char *
        :param anitem:
        :type anitem: Handle_Standard_Transient &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        :param name:
        :type name: TCollection_AsciiString &
        :param anitem:
        :type anitem: Handle_Standard_Transient &
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfTransient_SetItem(self, *args)


    def NewItem(self, *args) -> "Handle_Standard_Transient":
        """
        :param name:
        :type name: char *
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_Standard_Transient

        :param name:
        :type name: TCollection_AsciiString &
        :param isvalued:
        :type isvalued: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: Handle_Standard_Transient

        """
        return _Dico.Dico_DictionaryOfTransient_NewItem(self, *args)


    def RemoveItem(self, *args) -> "Standard_Boolean":
        """
        :param name:
        :type name: char *
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        :param name:
        :type name: TCollection_AsciiString &
        :param cln: default value is Standard_True
        :type cln: bool
        :param exact: default value is Standard_True
        :type exact: bool
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfTransient_RemoveItem(self, *args)


    def Clean(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfTransient_Clean(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfTransient_IsEmpty(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_DictionaryOfTransient_Clear(self, *args)


    def Copy(self, *args) -> "Handle_Dico_DictionaryOfTransient":
        """
        :rtype: Handle_Dico_DictionaryOfTransient

        """
        return _Dico.Dico_DictionaryOfTransient_Copy(self, *args)


    def Complete(self, *args) -> "Standard_Boolean":
        """
        :param acell:
        :type acell: Handle_Dico_DictionaryOfTransient &
        :rtype: bool

        """
        return _Dico.Dico_DictionaryOfTransient_Complete(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Dico_DictionaryOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_DictionaryOfTransient
Dico_DictionaryOfTransient.HasItem = new_instancemethod(_Dico.Dico_DictionaryOfTransient_HasItem, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.Item = new_instancemethod(_Dico.Dico_DictionaryOfTransient_Item, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.GetItem = new_instancemethod(_Dico.Dico_DictionaryOfTransient_GetItem, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.SetItem = new_instancemethod(_Dico.Dico_DictionaryOfTransient_SetItem, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.NewItem = new_instancemethod(_Dico.Dico_DictionaryOfTransient_NewItem, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.RemoveItem = new_instancemethod(_Dico.Dico_DictionaryOfTransient_RemoveItem, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.Clean = new_instancemethod(_Dico.Dico_DictionaryOfTransient_Clean, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.IsEmpty = new_instancemethod(_Dico.Dico_DictionaryOfTransient_IsEmpty, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.Clear = new_instancemethod(_Dico.Dico_DictionaryOfTransient_Clear, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.Copy = new_instancemethod(_Dico.Dico_DictionaryOfTransient_Copy, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient.Complete = new_instancemethod(_Dico.Dico_DictionaryOfTransient_Complete, None, Dico_DictionaryOfTransient)
Dico_DictionaryOfTransient_swigregister = _Dico.Dico_DictionaryOfTransient_swigregister
Dico_DictionaryOfTransient_swigregister(Dico_DictionaryOfTransient)

class Handle_Dico_DictionaryOfTransient(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dico.Handle_Dico_DictionaryOfTransient_swiginit(self, _Dico.new_Handle_Dico_DictionaryOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Dico.Handle_Dico_DictionaryOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Dico.delete_Handle_Dico_DictionaryOfTransient
Handle_Dico_DictionaryOfTransient.Nullify = new_instancemethod(_Dico.Handle_Dico_DictionaryOfTransient_Nullify, None, Handle_Dico_DictionaryOfTransient)
Handle_Dico_DictionaryOfTransient.IsNull = new_instancemethod(_Dico.Handle_Dico_DictionaryOfTransient_IsNull, None, Handle_Dico_DictionaryOfTransient)
Handle_Dico_DictionaryOfTransient._get_reference = new_instancemethod(_Dico.Handle_Dico_DictionaryOfTransient__get_reference, None, Handle_Dico_DictionaryOfTransient)
Handle_Dico_DictionaryOfTransient_swigregister = _Dico.Handle_Dico_DictionaryOfTransient_swigregister
Handle_Dico_DictionaryOfTransient_swigregister(Handle_Dico_DictionaryOfTransient)

def Handle_Dico_DictionaryOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Dico_DictionaryOfTransient const":
    return _Dico.Handle_Dico_DictionaryOfTransient_DownCast(AnObject)
Handle_Dico_DictionaryOfTransient_DownCast = _Dico.Handle_Dico_DictionaryOfTransient_DownCast

class Dico_IteratorOfDictionaryOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param acell:
        :type acell: Handle_Dico_DictionaryOfInteger &
        :rtype: None

        :param acell:
        :type acell: Handle_Dico_DictionaryOfInteger &
        :param basename:
        :type basename: char *
        :rtype: None

        :param acell:
        :type acell: Handle_Dico_DictionaryOfInteger &
        :param basename:
        :type basename: TCollection_AsciiString &
        :rtype: None

        """
        _Dico.Dico_IteratorOfDictionaryOfInteger_swiginit(self, _Dico.new_Dico_IteratorOfDictionaryOfInteger(*args))

    def Start(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_IteratorOfDictionaryOfInteger_Start(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Dico.Dico_IteratorOfDictionaryOfInteger_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_IteratorOfDictionaryOfInteger_Next(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _Dico.Dico_IteratorOfDictionaryOfInteger_Value(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString":
        """
        :rtype: TCollection_AsciiString

        """
        return _Dico.Dico_IteratorOfDictionaryOfInteger_Name(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_IteratorOfDictionaryOfInteger
Dico_IteratorOfDictionaryOfInteger.Start = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfInteger_Start, None, Dico_IteratorOfDictionaryOfInteger)
Dico_IteratorOfDictionaryOfInteger.More = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfInteger_More, None, Dico_IteratorOfDictionaryOfInteger)
Dico_IteratorOfDictionaryOfInteger.Next = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfInteger_Next, None, Dico_IteratorOfDictionaryOfInteger)
Dico_IteratorOfDictionaryOfInteger.Value = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfInteger_Value, None, Dico_IteratorOfDictionaryOfInteger)
Dico_IteratorOfDictionaryOfInteger.Name = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfInteger_Name, None, Dico_IteratorOfDictionaryOfInteger)
Dico_IteratorOfDictionaryOfInteger_swigregister = _Dico.Dico_IteratorOfDictionaryOfInteger_swigregister
Dico_IteratorOfDictionaryOfInteger_swigregister(Dico_IteratorOfDictionaryOfInteger)

class Dico_IteratorOfDictionaryOfTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param acell:
        :type acell: Handle_Dico_DictionaryOfTransient &
        :rtype: None

        :param acell:
        :type acell: Handle_Dico_DictionaryOfTransient &
        :param basename:
        :type basename: char *
        :rtype: None

        :param acell:
        :type acell: Handle_Dico_DictionaryOfTransient &
        :param basename:
        :type basename: TCollection_AsciiString &
        :rtype: None

        """
        _Dico.Dico_IteratorOfDictionaryOfTransient_swiginit(self, _Dico.new_Dico_IteratorOfDictionaryOfTransient(*args))

    def Start(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_IteratorOfDictionaryOfTransient_Start(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _Dico.Dico_IteratorOfDictionaryOfTransient_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Dico.Dico_IteratorOfDictionaryOfTransient_Next(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _Dico.Dico_IteratorOfDictionaryOfTransient_Value(self, *args)


    def Name(self, *args) -> "TCollection_AsciiString":
        """
        :rtype: TCollection_AsciiString

        """
        return _Dico.Dico_IteratorOfDictionaryOfTransient_Name(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_IteratorOfDictionaryOfTransient
Dico_IteratorOfDictionaryOfTransient.Start = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfTransient_Start, None, Dico_IteratorOfDictionaryOfTransient)
Dico_IteratorOfDictionaryOfTransient.More = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfTransient_More, None, Dico_IteratorOfDictionaryOfTransient)
Dico_IteratorOfDictionaryOfTransient.Next = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfTransient_Next, None, Dico_IteratorOfDictionaryOfTransient)
Dico_IteratorOfDictionaryOfTransient.Value = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfTransient_Value, None, Dico_IteratorOfDictionaryOfTransient)
Dico_IteratorOfDictionaryOfTransient.Name = new_instancemethod(_Dico.Dico_IteratorOfDictionaryOfTransient_Name, None, Dico_IteratorOfDictionaryOfTransient)
Dico_IteratorOfDictionaryOfTransient_swigregister = _Dico.Dico_IteratorOfDictionaryOfTransient_swigregister
Dico_IteratorOfDictionaryOfTransient_swigregister(Dico_IteratorOfDictionaryOfTransient)

class Dico_StackItemOfDictionaryOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param previous:
        :type previous: Handle_Dico_StackItemOfDictionaryOfInteger &
        :rtype: None

        """
        _Dico.Dico_StackItemOfDictionaryOfInteger_swiginit(self, _Dico.new_Dico_StackItemOfDictionaryOfInteger(*args))

    def Previous(self, *args) -> "Handle_Dico_StackItemOfDictionaryOfInteger":
        """
        :rtype: Handle_Dico_StackItemOfDictionaryOfInteger

        """
        return _Dico.Dico_StackItemOfDictionaryOfInteger_Previous(self, *args)


    def Value(self, *args) -> "Handle_Dico_DictionaryOfInteger":
        """
        :rtype: Handle_Dico_DictionaryOfInteger

        """
        return _Dico.Dico_StackItemOfDictionaryOfInteger_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param cval:
        :type cval: Handle_Dico_DictionaryOfInteger &
        :rtype: None

        """
        return _Dico.Dico_StackItemOfDictionaryOfInteger_SetValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Dico_StackItemOfDictionaryOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_StackItemOfDictionaryOfInteger
Dico_StackItemOfDictionaryOfInteger.Previous = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfInteger_Previous, None, Dico_StackItemOfDictionaryOfInteger)
Dico_StackItemOfDictionaryOfInteger.Value = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfInteger_Value, None, Dico_StackItemOfDictionaryOfInteger)
Dico_StackItemOfDictionaryOfInteger.SetValue = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfInteger_SetValue, None, Dico_StackItemOfDictionaryOfInteger)
Dico_StackItemOfDictionaryOfInteger_swigregister = _Dico.Dico_StackItemOfDictionaryOfInteger_swigregister
Dico_StackItemOfDictionaryOfInteger_swigregister(Dico_StackItemOfDictionaryOfInteger)

class Handle_Dico_StackItemOfDictionaryOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dico.Handle_Dico_StackItemOfDictionaryOfInteger_swiginit(self, _Dico.new_Handle_Dico_StackItemOfDictionaryOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Dico.Handle_Dico_StackItemOfDictionaryOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Dico.delete_Handle_Dico_StackItemOfDictionaryOfInteger
Handle_Dico_StackItemOfDictionaryOfInteger.Nullify = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfInteger_Nullify, None, Handle_Dico_StackItemOfDictionaryOfInteger)
Handle_Dico_StackItemOfDictionaryOfInteger.IsNull = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfInteger_IsNull, None, Handle_Dico_StackItemOfDictionaryOfInteger)
Handle_Dico_StackItemOfDictionaryOfInteger._get_reference = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfInteger__get_reference, None, Handle_Dico_StackItemOfDictionaryOfInteger)
Handle_Dico_StackItemOfDictionaryOfInteger_swigregister = _Dico.Handle_Dico_StackItemOfDictionaryOfInteger_swigregister
Handle_Dico_StackItemOfDictionaryOfInteger_swigregister(Handle_Dico_StackItemOfDictionaryOfInteger)

def Handle_Dico_StackItemOfDictionaryOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Dico_StackItemOfDictionaryOfInteger const":
    return _Dico.Handle_Dico_StackItemOfDictionaryOfInteger_DownCast(AnObject)
Handle_Dico_StackItemOfDictionaryOfInteger_DownCast = _Dico.Handle_Dico_StackItemOfDictionaryOfInteger_DownCast

class Dico_StackItemOfDictionaryOfTransient(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param previous:
        :type previous: Handle_Dico_StackItemOfDictionaryOfTransient &
        :rtype: None

        """
        _Dico.Dico_StackItemOfDictionaryOfTransient_swiginit(self, _Dico.new_Dico_StackItemOfDictionaryOfTransient(*args))

    def Previous(self, *args) -> "Handle_Dico_StackItemOfDictionaryOfTransient":
        """
        :rtype: Handle_Dico_StackItemOfDictionaryOfTransient

        """
        return _Dico.Dico_StackItemOfDictionaryOfTransient_Previous(self, *args)


    def Value(self, *args) -> "Handle_Dico_DictionaryOfTransient":
        """
        :rtype: Handle_Dico_DictionaryOfTransient

        """
        return _Dico.Dico_StackItemOfDictionaryOfTransient_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param cval:
        :type cval: Handle_Dico_DictionaryOfTransient &
        :rtype: None

        """
        return _Dico.Dico_StackItemOfDictionaryOfTransient_SetValue(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Dico_StackItemOfDictionaryOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Dico.delete_Dico_StackItemOfDictionaryOfTransient
Dico_StackItemOfDictionaryOfTransient.Previous = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfTransient_Previous, None, Dico_StackItemOfDictionaryOfTransient)
Dico_StackItemOfDictionaryOfTransient.Value = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfTransient_Value, None, Dico_StackItemOfDictionaryOfTransient)
Dico_StackItemOfDictionaryOfTransient.SetValue = new_instancemethod(_Dico.Dico_StackItemOfDictionaryOfTransient_SetValue, None, Dico_StackItemOfDictionaryOfTransient)
Dico_StackItemOfDictionaryOfTransient_swigregister = _Dico.Dico_StackItemOfDictionaryOfTransient_swigregister
Dico_StackItemOfDictionaryOfTransient_swigregister(Dico_StackItemOfDictionaryOfTransient)

class Handle_Dico_StackItemOfDictionaryOfTransient(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Dico.Handle_Dico_StackItemOfDictionaryOfTransient_swiginit(self, _Dico.new_Handle_Dico_StackItemOfDictionaryOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Dico.Handle_Dico_StackItemOfDictionaryOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Dico.delete_Handle_Dico_StackItemOfDictionaryOfTransient
Handle_Dico_StackItemOfDictionaryOfTransient.Nullify = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfTransient_Nullify, None, Handle_Dico_StackItemOfDictionaryOfTransient)
Handle_Dico_StackItemOfDictionaryOfTransient.IsNull = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfTransient_IsNull, None, Handle_Dico_StackItemOfDictionaryOfTransient)
Handle_Dico_StackItemOfDictionaryOfTransient._get_reference = new_instancemethod(_Dico.Handle_Dico_StackItemOfDictionaryOfTransient__get_reference, None, Handle_Dico_StackItemOfDictionaryOfTransient)
Handle_Dico_StackItemOfDictionaryOfTransient_swigregister = _Dico.Handle_Dico_StackItemOfDictionaryOfTransient_swigregister
Handle_Dico_StackItemOfDictionaryOfTransient_swigregister(Handle_Dico_StackItemOfDictionaryOfTransient)

def Handle_Dico_StackItemOfDictionaryOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Dico_StackItemOfDictionaryOfTransient const":
    return _Dico.Handle_Dico_StackItemOfDictionaryOfTransient_DownCast(AnObject)
Handle_Dico_StackItemOfDictionaryOfTransient_DownCast = _Dico.Handle_Dico_StackItemOfDictionaryOfTransient_DownCast



