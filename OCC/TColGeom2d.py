# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TColGeom2d.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColGeom2d')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColGeom2d')
    _TColGeom2d = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColGeom2d', [dirname(__file__)])
        except ImportError:
            import _TColGeom2d
            return _TColGeom2d
        try:
            _mod = imp.load_module('_TColGeom2d', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColGeom2d = swig_import_helper()
    del swig_import_helper
else:
    import _TColGeom2d
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColGeom2d.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TColGeom2d.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TColGeom2d.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TColGeom2d.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TColGeom2d.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TColGeom2d.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TColGeom2d.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TColGeom2d.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TColGeom2d.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TColGeom2d.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TColGeom2d.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TColGeom2d.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TColGeom2d.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TColGeom2d.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TColGeom2d.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TColGeom2d.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TColGeom2d.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TColGeom2d.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.Geom2d
import OCC.MMgt
import OCC.gp
import OCC.GeomAbs
import OCC.TColgp
import OCC.TCollection
import OCC.TColStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class TColGeom2d_Array1OfBSplineCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom2d_BSplineCurve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfBSplineCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_BSplineCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom2d_Array1OfBSplineCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfBSplineCurve &
        :rtype: TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_Array1OfBSplineCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfBSplineCurve &
        :rtype: TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_BSplineCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfBSplineCurve
TColGeom2d_Array1OfBSplineCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Init, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Destroy = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Destroy, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.IsAllocated = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_IsAllocated, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Assign, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Set = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Set, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Length, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Lower, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Upper, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_SetValue, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_Value, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBSplineCurve_ChangeValue, None, TColGeom2d_Array1OfBSplineCurve)
TColGeom2d_Array1OfBSplineCurve_swigregister = _TColGeom2d.TColGeom2d_Array1OfBSplineCurve_swigregister
TColGeom2d_Array1OfBSplineCurve_swigregister(TColGeom2d_Array1OfBSplineCurve)

class TColGeom2d_Array1OfBezierCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom2d_BezierCurve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_Array1OfBezierCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfBezierCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_BezierCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom2d_Array1OfBezierCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfBezierCurve &
        :rtype: TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_Array1OfBezierCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfBezierCurve &
        :rtype: TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_BezierCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfBezierCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfBezierCurve
TColGeom2d_Array1OfBezierCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Init, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Destroy = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Destroy, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.IsAllocated = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_IsAllocated, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Assign, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Set = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Set, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Length, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Lower, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Upper, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_SetValue, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_Value, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfBezierCurve_ChangeValue, None, TColGeom2d_Array1OfBezierCurve)
TColGeom2d_Array1OfBezierCurve_swigregister = _TColGeom2d.TColGeom2d_Array1OfBezierCurve_swigregister
TColGeom2d_Array1OfBezierCurve_swigregister(TColGeom2d_Array1OfBezierCurve)

class TColGeom2d_Array1OfCurve(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Geom2d_Curve &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_Array1OfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_Array1OfCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColGeom2d_Array1OfCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfCurve &
        :rtype: TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_Array1OfCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_Array1OfCurve &
        :rtype: TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_Array1OfCurve_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_Array1OfCurve
TColGeom2d_Array1OfCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Init, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Destroy = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Destroy, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.IsAllocated = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_IsAllocated, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Assign, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Set = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Set, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Length, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Lower, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Upper, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_SetValue, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_Value, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_Array1OfCurve_ChangeValue, None, TColGeom2d_Array1OfCurve)
TColGeom2d_Array1OfCurve_swigregister = _TColGeom2d.TColGeom2d_Array1OfCurve_swigregister
TColGeom2d_Array1OfCurve_swigregister(TColGeom2d_Array1OfCurve)

class TColGeom2d_HArray1OfBSplineCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom2d_BSplineCurve &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfBSplineCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_BSplineCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_BSplineCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BSplineCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BSplineCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom2d_Array1OfBSplineCurve const &":
        """
        :rtype: TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom2d_Array1OfBSplineCurve &":
        """
        :rtype: TColGeom2d_Array1OfBSplineCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_HArray1OfBSplineCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBSplineCurve
TColGeom2d_HArray1OfBSplineCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Init, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Length, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Lower, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Upper, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_SetValue, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Value, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeValue, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.Array1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_Array1, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve.ChangeArray1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_ChangeArray1, None, TColGeom2d_HArray1OfBSplineCurve)
TColGeom2d_HArray1OfBSplineCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfBSplineCurve_swigregister
TColGeom2d_HArray1OfBSplineCurve_swigregister(TColGeom2d_HArray1OfBSplineCurve)

class Handle_TColGeom2d_HArray1OfBSplineCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_HArray1OfBSplineCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfBSplineCurve
Handle_TColGeom2d_HArray1OfBSplineCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_Nullify, None, Handle_TColGeom2d_HArray1OfBSplineCurve)
Handle_TColGeom2d_HArray1OfBSplineCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_IsNull, None, Handle_TColGeom2d_HArray1OfBSplineCurve)
Handle_TColGeom2d_HArray1OfBSplineCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve__get_reference, None, Handle_TColGeom2d_HArray1OfBSplineCurve)
Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister
Handle_TColGeom2d_HArray1OfBSplineCurve_swigregister(Handle_TColGeom2d_HArray1OfBSplineCurve)

def Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_HArray1OfBSplineCurve const":
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast(AnObject)
Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfBSplineCurve_DownCast

class TColGeom2d_HArray1OfBezierCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom2d_BezierCurve &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfBezierCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_BezierCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_BezierCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BezierCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BezierCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom2d_Array1OfBezierCurve const &":
        """
        :rtype: TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom2d_Array1OfBezierCurve &":
        """
        :rtype: TColGeom2d_Array1OfBezierCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_HArray1OfBezierCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfBezierCurve
TColGeom2d_HArray1OfBezierCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Init, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Length, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Lower, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Upper, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_SetValue, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Value, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeValue, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.Array1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_Array1, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve.ChangeArray1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfBezierCurve_ChangeArray1, None, TColGeom2d_HArray1OfBezierCurve)
TColGeom2d_HArray1OfBezierCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfBezierCurve_swigregister
TColGeom2d_HArray1OfBezierCurve_swigregister(TColGeom2d_HArray1OfBezierCurve)

class Handle_TColGeom2d_HArray1OfBezierCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_HArray1OfBezierCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfBezierCurve
Handle_TColGeom2d_HArray1OfBezierCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_Nullify, None, Handle_TColGeom2d_HArray1OfBezierCurve)
Handle_TColGeom2d_HArray1OfBezierCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_IsNull, None, Handle_TColGeom2d_HArray1OfBezierCurve)
Handle_TColGeom2d_HArray1OfBezierCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve__get_reference, None, Handle_TColGeom2d_HArray1OfBezierCurve)
Handle_TColGeom2d_HArray1OfBezierCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_swigregister
Handle_TColGeom2d_HArray1OfBezierCurve_swigregister(Handle_TColGeom2d_HArray1OfBezierCurve)

def Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_HArray1OfBezierCurve const":
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast(AnObject)
Handle_TColGeom2d_HArray1OfBezierCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfBezierCurve_DownCast

class TColGeom2d_HArray1OfCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Geom2d_Curve &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_HArray1OfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HArray1OfCurve(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColGeom2d_Array1OfCurve const &":
        """
        :rtype: TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColGeom2d_Array1OfCurve &":
        """
        :rtype: TColGeom2d_Array1OfCurve

        """
        return _TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_HArray1OfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HArray1OfCurve
TColGeom2d_HArray1OfCurve.Init = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Init, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Length, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.Lower = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Lower, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.Upper = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Upper, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_SetValue, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Value, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeValue, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.Array1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_Array1, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve.ChangeArray1 = new_instancemethod(_TColGeom2d.TColGeom2d_HArray1OfCurve_ChangeArray1, None, TColGeom2d_HArray1OfCurve)
TColGeom2d_HArray1OfCurve_swigregister = _TColGeom2d.TColGeom2d_HArray1OfCurve_swigregister
TColGeom2d_HArray1OfCurve_swigregister(TColGeom2d_HArray1OfCurve)

class Handle_TColGeom2d_HArray1OfCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_HArray1OfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HArray1OfCurve
Handle_TColGeom2d_HArray1OfCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_Nullify, None, Handle_TColGeom2d_HArray1OfCurve)
Handle_TColGeom2d_HArray1OfCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_IsNull, None, Handle_TColGeom2d_HArray1OfCurve)
Handle_TColGeom2d_HArray1OfCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HArray1OfCurve__get_reference, None, Handle_TColGeom2d_HArray1OfCurve)
Handle_TColGeom2d_HArray1OfCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_swigregister
Handle_TColGeom2d_HArray1OfCurve_swigregister(Handle_TColGeom2d_HArray1OfCurve)

def Handle_TColGeom2d_HArray1OfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_HArray1OfCurve const":
    return _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast(AnObject)
Handle_TColGeom2d_HArray1OfCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HArray1OfCurve_DownCast

class TColGeom2d_HSequenceOfBoundedCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HSequenceOfBoundedCurve(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColGeom2d_HSequenceOfBoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColGeom2d_HSequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_BoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Remove(self, *args)


    def Sequence(self, *args) -> "TColGeom2d_SequenceOfBoundedCurve const &":
        """
        :rtype: TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColGeom2d_SequenceOfBoundedCurve &":
        """
        :rtype: TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_HSequenceOfBoundedCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfBoundedCurve
TColGeom2d_HSequenceOfBoundedCurve.IsEmpty = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_IsEmpty, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Length, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Clear = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Clear, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Append = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Append, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Prepend = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Prepend, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Reverse = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Reverse, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.InsertBefore = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_InsertBefore, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.InsertAfter = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_InsertAfter, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Exchange = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Exchange, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Split = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Split, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_SetValue, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Value, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeValue, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Remove = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Remove, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.Sequence = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_Sequence, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve.ChangeSequence = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_ChangeSequence, None, TColGeom2d_HSequenceOfBoundedCurve)
TColGeom2d_HSequenceOfBoundedCurve_swigregister = _TColGeom2d.TColGeom2d_HSequenceOfBoundedCurve_swigregister
TColGeom2d_HSequenceOfBoundedCurve_swigregister(TColGeom2d_HSequenceOfBoundedCurve)

class Handle_TColGeom2d_HSequenceOfBoundedCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_HSequenceOfBoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HSequenceOfBoundedCurve
Handle_TColGeom2d_HSequenceOfBoundedCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_Nullify, None, Handle_TColGeom2d_HSequenceOfBoundedCurve)
Handle_TColGeom2d_HSequenceOfBoundedCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_IsNull, None, Handle_TColGeom2d_HSequenceOfBoundedCurve)
Handle_TColGeom2d_HSequenceOfBoundedCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve__get_reference, None, Handle_TColGeom2d_HSequenceOfBoundedCurve)
Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister
Handle_TColGeom2d_HSequenceOfBoundedCurve_swigregister(Handle_TColGeom2d_HSequenceOfBoundedCurve)

def Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_HSequenceOfBoundedCurve const":
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast(AnObject)
Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HSequenceOfBoundedCurve_DownCast

class TColGeom2d_HSequenceOfCurve(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_HSequenceOfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_HSequenceOfCurve(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom2d_Curve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Geom2d_Curve &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_Curve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_Curve &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColGeom2d_HSequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColGeom2d_HSequenceOfCurve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColGeom2d_HSequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Remove(self, *args)


    def Sequence(self, *args) -> "TColGeom2d_SequenceOfCurve const &":
        """
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColGeom2d_SequenceOfCurve &":
        """
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_HSequenceOfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_HSequenceOfCurve
TColGeom2d_HSequenceOfCurve.IsEmpty = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_IsEmpty, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Length = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Length, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Clear = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Clear, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Append = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Append, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Prepend = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Prepend, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Reverse = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Reverse, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.InsertBefore = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_InsertBefore, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.InsertAfter = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_InsertAfter, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Exchange = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Exchange, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Split = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Split, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_SetValue, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Value, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeValue, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Remove = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Remove, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.Sequence = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_Sequence, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve.ChangeSequence = new_instancemethod(_TColGeom2d.TColGeom2d_HSequenceOfCurve_ChangeSequence, None, TColGeom2d_HSequenceOfCurve)
TColGeom2d_HSequenceOfCurve_swigregister = _TColGeom2d.TColGeom2d_HSequenceOfCurve_swigregister
TColGeom2d_HSequenceOfCurve_swigregister(TColGeom2d_HSequenceOfCurve)

class Handle_TColGeom2d_HSequenceOfCurve(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_HSequenceOfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_HSequenceOfCurve
Handle_TColGeom2d_HSequenceOfCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_Nullify, None, Handle_TColGeom2d_HSequenceOfCurve)
Handle_TColGeom2d_HSequenceOfCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_IsNull, None, Handle_TColGeom2d_HSequenceOfCurve)
Handle_TColGeom2d_HSequenceOfCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve__get_reference, None, Handle_TColGeom2d_HSequenceOfCurve)
Handle_TColGeom2d_HSequenceOfCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_swigregister
Handle_TColGeom2d_HSequenceOfCurve_swigregister(Handle_TColGeom2d_HSequenceOfCurve)

def Handle_TColGeom2d_HSequenceOfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_HSequenceOfCurve const":
    return _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast(AnObject)
Handle_TColGeom2d_HSequenceOfCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_HSequenceOfCurve_DownCast

class TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom2d_BoundedCurve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve(*args))

    def Value(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve
TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_Value, None, TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)
TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister = _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister
TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister(TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)

class Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_Nullify, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_IsNull, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve__get_reference, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_swigregister(Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve)

def Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve const":
    return _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_DownCast(AnObject)
Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfBoundedCurve_DownCast

class TColGeom2d_SequenceNodeOfSequenceOfCurve(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom2d_Curve &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceNodeOfSequenceOfCurve(*args))

    def Value(self, *args) -> "Handle_Geom2d_Curve":
        """
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfCurve_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceNodeOfSequenceOfCurve
TColGeom2d_SequenceNodeOfSequenceOfCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfCurve_Value, None, TColGeom2d_SequenceNodeOfSequenceOfCurve)
TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister = _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister
TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister(TColGeom2d_SequenceNodeOfSequenceOfCurve)

class Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_Nullify, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_IsNull, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve__get_reference, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve)
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_swigregister(Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve)

def Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve const":
    return _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_DownCast(AnObject)
Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_DownCast = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfCurve_DownCast

class TColGeom2d_SequenceNodeOfSequenceOfGeometry(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Geom2d_Geometry &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfGeometry_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceNodeOfSequenceOfGeometry(*args))

    def Value(self, *args) -> "Handle_Geom2d_Geometry":
        """
        :rtype: Handle_Geom2d_Geometry

        """
        return _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfGeometry_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceNodeOfSequenceOfGeometry
TColGeom2d_SequenceNodeOfSequenceOfGeometry.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfGeometry_Value, None, TColGeom2d_SequenceNodeOfSequenceOfGeometry)
TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister = _TColGeom2d.TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister
TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister(TColGeom2d_SequenceNodeOfSequenceOfGeometry)

class Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_swiginit(self, _TColGeom2d.new_Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColGeom2d.delete_Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry.Nullify = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_Nullify, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry)
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry.IsNull = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_IsNull, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry)
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry._get_reference = new_instancemethod(_TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry__get_reference, None, Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry)
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_swigregister(Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry)

def Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry const":
    return _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_DownCast(AnObject)
Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_DownCast = _TColGeom2d.Handle_TColGeom2d_SequenceNodeOfSequenceOfGeometry_DownCast

class TColGeom2d_SequenceOfBoundedCurve(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfBoundedCurve(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom2d_SequenceOfBoundedCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_SequenceOfBoundedCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: TColGeom2d_SequenceOfBoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_BoundedCurve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_First(self, *args)


    def Last(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom2d_SequenceOfBoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom2d_BoundedCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_BoundedCurve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_BoundedCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfBoundedCurve
TColGeom2d_SequenceOfBoundedCurve.Clear = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Clear, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Assign, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Set = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Set, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Append = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Append, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Prepend = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Prepend, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.InsertBefore = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertBefore, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.InsertAfter = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_InsertAfter, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.First = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_First, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Last = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Last, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Split = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Split, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Value, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_SetValue, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_ChangeValue, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve.Remove = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_Remove, None, TColGeom2d_SequenceOfBoundedCurve)
TColGeom2d_SequenceOfBoundedCurve_swigregister = _TColGeom2d.TColGeom2d_SequenceOfBoundedCurve_swigregister
TColGeom2d_SequenceOfBoundedCurve_swigregister(TColGeom2d_SequenceOfBoundedCurve)

class TColGeom2d_SequenceOfCurve(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceOfCurve_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfCurve(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom2d_SequenceOfCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfCurve &
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_SequenceOfCurve const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfCurve &
        :rtype: TColGeom2d_SequenceOfCurve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_Curve &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_Curve &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_Curve &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom2d_Curve":
        """
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_First(self, *args)


    def Last(self, *args) -> "Handle_Geom2d_Curve":
        """
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom2d_SequenceOfCurve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom2d_Curve &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_Curve":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Curve

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfCurve_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfCurve
TColGeom2d_SequenceOfCurve.Clear = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Clear, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Assign, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Set = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Set, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Append = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Append, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Prepend = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Prepend, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.InsertBefore = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_InsertBefore, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.InsertAfter = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_InsertAfter, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.First = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_First, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Last = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Last, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Split = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Split, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Value, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_SetValue, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_ChangeValue, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve.Remove = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfCurve_Remove, None, TColGeom2d_SequenceOfCurve)
TColGeom2d_SequenceOfCurve_swigregister = _TColGeom2d.TColGeom2d_SequenceOfCurve_swigregister
TColGeom2d_SequenceOfCurve_swigregister(TColGeom2d_SequenceOfCurve)

class TColGeom2d_SequenceOfGeometry(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        _TColGeom2d.TColGeom2d_SequenceOfGeometry_swiginit(self, _TColGeom2d.new_TColGeom2d_SequenceOfGeometry(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Clear(self, *args)


    def Assign(self, *args) -> "TColGeom2d_SequenceOfGeometry const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfGeometry &
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Assign(self, *args)


    def Set(self, *args) -> "TColGeom2d_SequenceOfGeometry const &":
        """
        :param Other:
        :type Other: TColGeom2d_SequenceOfGeometry &
        :rtype: TColGeom2d_SequenceOfGeometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_Geometry &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Geom2d_Geometry &
        :rtype: None

        :param S:
        :type S: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_Geometry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Geom2d_Geometry &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Geom2d_Geometry":
        """
        :rtype: Handle_Geom2d_Geometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_First(self, *args)


    def Last(self, *args) -> "Handle_Geom2d_Geometry":
        """
        :rtype: Handle_Geom2d_Geometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColGeom2d_SequenceOfGeometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Split(self, *args)


    def Value(self, *args) -> "Handle_Geom2d_Geometry":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Geometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Geom2d_Geometry &
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Geom2d_Geometry":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Geom2d_Geometry

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColGeom2d.TColGeom2d_SequenceOfGeometry_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColGeom2d.delete_TColGeom2d_SequenceOfGeometry
TColGeom2d_SequenceOfGeometry.Clear = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Clear, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Assign = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Assign, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Set = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Set, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Append = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Append, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Prepend = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Prepend, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.InsertBefore = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertBefore, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.InsertAfter = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_InsertAfter, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.First = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_First, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Last = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Last, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Split = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Split, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Value = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Value, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.SetValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_SetValue, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.ChangeValue = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_ChangeValue, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry.Remove = new_instancemethod(_TColGeom2d.TColGeom2d_SequenceOfGeometry_Remove, None, TColGeom2d_SequenceOfGeometry)
TColGeom2d_SequenceOfGeometry_swigregister = _TColGeom2d.TColGeom2d_SequenceOfGeometry_swigregister
TColGeom2d_SequenceOfGeometry_swigregister(TColGeom2d_SequenceOfGeometry)



