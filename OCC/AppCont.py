# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _AppCont.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_AppCont')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_AppCont')
    _AppCont = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_AppCont', [dirname(__file__)])
        except ImportError:
            import _AppCont
            return _AppCont
        try:
            _mod = imp.load_module('_AppCont', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _AppCont = swig_import_helper()
    del swig_import_helper
else:
    import _AppCont
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _AppCont.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_AppCont.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_AppCont.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_AppCont.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_AppCont.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_AppCont.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_AppCont.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_AppCont.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_AppCont.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_AppCont.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_AppCont.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_AppCont.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_AppCont.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_AppCont.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_AppCont.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_AppCont.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_AppCont.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _AppCont.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.AppParCurves
import OCC.math
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.TColgp
import OCC.gp

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class AppCont_FitFunction(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: AppCont_Function &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Deg:
        :type Deg: int
        :param NbPoints: default value is 24
        :type NbPoints: int
        :rtype: None

        """
        _AppCont.AppCont_FitFunction_swiginit(self, _AppCont.new_AppCont_FitFunction(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _AppCont.AppCont_FitFunction_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _AppCont.AppCont_FitFunction_Value(self, *args)


    def Error(self, *args) -> "void":
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _AppCont.AppCont_FitFunction_Error(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_FitFunction
AppCont_FitFunction.IsDone = new_instancemethod(_AppCont.AppCont_FitFunction_IsDone, None, AppCont_FitFunction)
AppCont_FitFunction.Value = new_instancemethod(_AppCont.AppCont_FitFunction_Value, None, AppCont_FitFunction)
AppCont_FitFunction.Error = new_instancemethod(_AppCont.AppCont_FitFunction_Error, None, AppCont_FitFunction)
AppCont_FitFunction_swigregister = _AppCont.AppCont_FitFunction_swigregister
AppCont_FitFunction_swigregister(AppCont_FitFunction)

class AppCont_FitFunction2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param SSP:
        :type SSP: AppCont_Function2d &
        :param U0:
        :type U0: float
        :param U1:
        :type U1: float
        :param FirstCons:
        :type FirstCons: AppParCurves_Constraint
        :param LastCons:
        :type LastCons: AppParCurves_Constraint
        :param Deg:
        :type Deg: int
        :param NbPoints: default value is 24
        :type NbPoints: int
        :rtype: None

        """
        _AppCont.AppCont_FitFunction2d_swiginit(self, _AppCont.new_AppCont_FitFunction2d(*args))

    def IsDone(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _AppCont.AppCont_FitFunction2d_IsDone(self, *args)


    def Value(self, *args) -> "AppParCurves_MultiCurve const &":
        """
        :rtype: AppParCurves_MultiCurve

        """
        return _AppCont.AppCont_FitFunction2d_Value(self, *args)


    def Error(self, *args) -> "void":
        """
        :param F:
        :type F: float &
        :param MaxE3d:
        :type MaxE3d: float &
        :param MaxE2d:
        :type MaxE2d: float &
        :rtype: None

        """
        return _AppCont.AppCont_FitFunction2d_Error(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_FitFunction2d
AppCont_FitFunction2d.IsDone = new_instancemethod(_AppCont.AppCont_FitFunction2d_IsDone, None, AppCont_FitFunction2d)
AppCont_FitFunction2d.Value = new_instancemethod(_AppCont.AppCont_FitFunction2d_Value, None, AppCont_FitFunction2d)
AppCont_FitFunction2d.Error = new_instancemethod(_AppCont.AppCont_FitFunction2d_Error, None, AppCont_FitFunction2d)
AppCont_FitFunction2d_swigregister = _AppCont.AppCont_FitFunction2d_swigregister
AppCont_FitFunction2d_swigregister(AppCont_FitFunction2d)

class AppCont_Function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Delete(self, *args) -> "void":
        """
        :rtype: void

        """
        return _AppCont.AppCont_Function_Delete(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        * returns the first parameter of the function.

        :rtype: float

        """
        return _AppCont.AppCont_Function_FirstParameter(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        * returns the last parameter of the function.

        :rtype: float

        """
        return _AppCont.AppCont_Function_LastParameter(self, *args)


    def Value(self, *args) -> "gp_Pnt":
        """
        * returns the point at parameter <U>.

        :param U:
        :type U: float
        :rtype: gp_Pnt

        """
        return _AppCont.AppCont_Function_Value(self, *args)


    def D1(self, *args) -> "Standard_Boolean":
        """
        * returns the point and the derivative values at the parameter <U>.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt
        :param V:
        :type V: gp_Vec
        :rtype: bool

        """
        return _AppCont.AppCont_Function_D1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_Function
AppCont_Function.Delete = new_instancemethod(_AppCont.AppCont_Function_Delete, None, AppCont_Function)
AppCont_Function.FirstParameter = new_instancemethod(_AppCont.AppCont_Function_FirstParameter, None, AppCont_Function)
AppCont_Function.LastParameter = new_instancemethod(_AppCont.AppCont_Function_LastParameter, None, AppCont_Function)
AppCont_Function.Value = new_instancemethod(_AppCont.AppCont_Function_Value, None, AppCont_Function)
AppCont_Function.D1 = new_instancemethod(_AppCont.AppCont_Function_D1, None, AppCont_Function)
AppCont_Function_swigregister = _AppCont.AppCont_Function_swigregister
AppCont_Function_swigregister(AppCont_Function)

class AppCont_Function2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Delete(self, *args) -> "void":
        """
        :rtype: void

        """
        return _AppCont.AppCont_Function2d_Delete(self, *args)


    def FirstParameter(self, *args) -> "Standard_Real":
        """
        * returns the first parameter of the function.

        :rtype: float

        """
        return _AppCont.AppCont_Function2d_FirstParameter(self, *args)


    def LastParameter(self, *args) -> "Standard_Real":
        """
        * returns the last parameter of the function.

        :rtype: float

        """
        return _AppCont.AppCont_Function2d_LastParameter(self, *args)


    def Value(self, *args) -> "gp_Pnt2d":
        """
        * returns the point at parameter <U>.

        :param U:
        :type U: float
        :rtype: gp_Pnt2d

        """
        return _AppCont.AppCont_Function2d_Value(self, *args)


    def D1(self, *args) -> "Standard_Boolean":
        """
        * returns the point and the derivative values at the parameter <U>.

        :param U:
        :type U: float
        :param P:
        :type P: gp_Pnt2d
        :param V:
        :type V: gp_Vec2d
        :rtype: bool

        """
        return _AppCont.AppCont_Function2d_D1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _AppCont.delete_AppCont_Function2d
AppCont_Function2d.Delete = new_instancemethod(_AppCont.AppCont_Function2d_Delete, None, AppCont_Function2d)
AppCont_Function2d.FirstParameter = new_instancemethod(_AppCont.AppCont_Function2d_FirstParameter, None, AppCont_Function2d)
AppCont_Function2d.LastParameter = new_instancemethod(_AppCont.AppCont_Function2d_LastParameter, None, AppCont_Function2d)
AppCont_Function2d.Value = new_instancemethod(_AppCont.AppCont_Function2d_Value, None, AppCont_Function2d)
AppCont_Function2d.D1 = new_instancemethod(_AppCont.AppCont_Function2d_D1, None, AppCont_Function2d)
AppCont_Function2d_swigregister = _AppCont.AppCont_Function2d_swigregister
AppCont_Function2d_swigregister(AppCont_Function2d)

class AppCont_FunctionTool(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args) -> "Standard_Real":
        """
        * returns the first parameter of the Function.

        :param C:
        :type C: AppCont_Function &
        :rtype: float

        """
        return _AppCont.AppCont_FunctionTool_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args) -> "Standard_Real":
        """
        * returns the last parameter of the Function.

        :param C:
        :type C: AppCont_Function &
        :rtype: float

        """
        return _AppCont.AppCont_FunctionTool_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def NbP2d(*args) -> "Standard_Integer":
        """
        * Returns 0.

        :param C:
        :type C: AppCont_Function &
        :rtype: int

        """
        return _AppCont.AppCont_FunctionTool_NbP2d(*args)

    NbP2d = staticmethod(NbP2d)

    def NbP3d(*args) -> "Standard_Integer":
        """
        * Returns 1. (the approximation will be done only for one function.

        :param C:
        :type C: AppCont_Function &
        :rtype: int

        """
        return _AppCont.AppCont_FunctionTool_NbP3d(*args)

    NbP3d = staticmethod(NbP3d)

    def Value(*args) -> "void":
        """
        * <tabP> is an array of only 1 element, the point value at the parameter <U>.

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :rtype: void

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        """
        return _AppCont.AppCont_FunctionTool_Value(*args)

    Value = staticmethod(Value)

    def D1(*args) -> "Standard_Boolean":
        """
        * <tabV> is an array of only 1 element, the derivative value at the parameter <U>.

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :rtype: bool

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        :param C:
        :type C: AppCont_Function &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _AppCont.AppCont_FunctionTool_D1(*args)

    D1 = staticmethod(D1)

    __repr__ = _dumps_object


    def __init__(self):
        _AppCont.AppCont_FunctionTool_swiginit(self, _AppCont.new_AppCont_FunctionTool())
    __swig_destroy__ = _AppCont.delete_AppCont_FunctionTool
AppCont_FunctionTool_swigregister = _AppCont.AppCont_FunctionTool_swigregister
AppCont_FunctionTool_swigregister(AppCont_FunctionTool)

def AppCont_FunctionTool_FirstParameter(*args) -> "Standard_Real":
    """
    * returns the first parameter of the Function.

    :param C:
    :type C: AppCont_Function &
    :rtype: float

    """
    return _AppCont.AppCont_FunctionTool_FirstParameter(*args)

def AppCont_FunctionTool_LastParameter(*args) -> "Standard_Real":
    """
    * returns the last parameter of the Function.

    :param C:
    :type C: AppCont_Function &
    :rtype: float

    """
    return _AppCont.AppCont_FunctionTool_LastParameter(*args)

def AppCont_FunctionTool_NbP2d(*args) -> "Standard_Integer":
    """
    * Returns 0.

    :param C:
    :type C: AppCont_Function &
    :rtype: int

    """
    return _AppCont.AppCont_FunctionTool_NbP2d(*args)

def AppCont_FunctionTool_NbP3d(*args) -> "Standard_Integer":
    """
    * Returns 1. (the approximation will be done only for one function.

    :param C:
    :type C: AppCont_Function &
    :rtype: int

    """
    return _AppCont.AppCont_FunctionTool_NbP3d(*args)

def AppCont_FunctionTool_Value(*args) -> "void":
    """
    * <tabP> is an array of only 1 element, the point value at the parameter <U>.

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :rtype: void

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    """
    return _AppCont.AppCont_FunctionTool_Value(*args)

def AppCont_FunctionTool_D1(*args) -> "Standard_Boolean":
    """
    * <tabV> is an array of only 1 element, the derivative value at the parameter <U>.

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :rtype: bool

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    :param C:
    :type C: AppCont_Function &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _AppCont.AppCont_FunctionTool_D1(*args)

class AppCont_FunctionTool2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def FirstParameter(*args) -> "Standard_Real":
        """
        * returns the first parameter of the Function.

        :param C:
        :type C: AppCont_Function2d &
        :rtype: float

        """
        return _AppCont.AppCont_FunctionTool2d_FirstParameter(*args)

    FirstParameter = staticmethod(FirstParameter)

    def LastParameter(*args) -> "Standard_Real":
        """
        * returns the last parameter of the Function.

        :param C:
        :type C: AppCont_Function2d &
        :rtype: float

        """
        return _AppCont.AppCont_FunctionTool2d_LastParameter(*args)

    LastParameter = staticmethod(LastParameter)

    def NbP2d(*args) -> "Standard_Integer":
        """
        * Returns 1. (the approximation will be done only for one function.

        :param C:
        :type C: AppCont_Function2d &
        :rtype: int

        """
        return _AppCont.AppCont_FunctionTool2d_NbP2d(*args)

    NbP2d = staticmethod(NbP2d)

    def NbP3d(*args) -> "Standard_Integer":
        """
        * Returns 0.

        :param C:
        :type C: AppCont_Function2d &
        :rtype: int

        """
        return _AppCont.AppCont_FunctionTool2d_NbP3d(*args)

    NbP3d = staticmethod(NbP3d)

    def Value(*args) -> "void":
        """
        * <tabP> is an array of only 1 element, the point value at the parameter <U>.

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt2d
        :rtype: void

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt
        :rtype: void

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabPt:
        :type tabPt: TColgp_Array1OfPnt
        :param tabPt2d:
        :type tabPt2d: TColgp_Array1OfPnt2d
        :rtype: void

        """
        return _AppCont.AppCont_FunctionTool2d_Value(*args)

    Value = staticmethod(Value)

    def D1(*args) -> "Standard_Boolean":
        """
        * <tabV> is an array of only 1 element, the derivative value at the parameter <U>.

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec2d
        :rtype: bool

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec
        :rtype: bool

        :param C:
        :type C: AppCont_Function2d &
        :param U:
        :type U: float
        :param tabV:
        :type tabV: TColgp_Array1OfVec
        :param tabV2d:
        :type tabV2d: TColgp_Array1OfVec2d
        :rtype: bool

        """
        return _AppCont.AppCont_FunctionTool2d_D1(*args)

    D1 = staticmethod(D1)

    __repr__ = _dumps_object


    def __init__(self):
        _AppCont.AppCont_FunctionTool2d_swiginit(self, _AppCont.new_AppCont_FunctionTool2d())
    __swig_destroy__ = _AppCont.delete_AppCont_FunctionTool2d
AppCont_FunctionTool2d_swigregister = _AppCont.AppCont_FunctionTool2d_swigregister
AppCont_FunctionTool2d_swigregister(AppCont_FunctionTool2d)

def AppCont_FunctionTool2d_FirstParameter(*args) -> "Standard_Real":
    """
    * returns the first parameter of the Function.

    :param C:
    :type C: AppCont_Function2d &
    :rtype: float

    """
    return _AppCont.AppCont_FunctionTool2d_FirstParameter(*args)

def AppCont_FunctionTool2d_LastParameter(*args) -> "Standard_Real":
    """
    * returns the last parameter of the Function.

    :param C:
    :type C: AppCont_Function2d &
    :rtype: float

    """
    return _AppCont.AppCont_FunctionTool2d_LastParameter(*args)

def AppCont_FunctionTool2d_NbP2d(*args) -> "Standard_Integer":
    """
    * Returns 1. (the approximation will be done only for one function.

    :param C:
    :type C: AppCont_Function2d &
    :rtype: int

    """
    return _AppCont.AppCont_FunctionTool2d_NbP2d(*args)

def AppCont_FunctionTool2d_NbP3d(*args) -> "Standard_Integer":
    """
    * Returns 0.

    :param C:
    :type C: AppCont_Function2d &
    :rtype: int

    """
    return _AppCont.AppCont_FunctionTool2d_NbP3d(*args)

def AppCont_FunctionTool2d_Value(*args) -> "void":
    """
    * <tabP> is an array of only 1 element, the point value at the parameter <U>.

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt2d
    :rtype: void

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt
    :rtype: void

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabPt:
    :type tabPt: TColgp_Array1OfPnt
    :param tabPt2d:
    :type tabPt2d: TColgp_Array1OfPnt2d
    :rtype: void

    """
    return _AppCont.AppCont_FunctionTool2d_Value(*args)

def AppCont_FunctionTool2d_D1(*args) -> "Standard_Boolean":
    """
    * <tabV> is an array of only 1 element, the derivative value at the parameter <U>.

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec2d
    :rtype: bool

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec
    :rtype: bool

    :param C:
    :type C: AppCont_Function2d &
    :param U:
    :type U: float
    :param tabV:
    :type tabV: TColgp_Array1OfVec
    :param tabV2d:
    :type tabV2d: TColgp_Array1OfVec2d
    :rtype: bool

    """
    return _AppCont.AppCont_FunctionTool2d_D1(*args)



