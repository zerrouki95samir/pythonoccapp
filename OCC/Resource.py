# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Resource.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Resource')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Resource')
    _Resource = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Resource', [dirname(__file__)])
        except ImportError:
            import _Resource
            return _Resource
        try:
            _mod = imp.load_module('_Resource', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _Resource = swig_import_helper()
    del swig_import_helper
else:
    import _Resource
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Resource.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_Resource.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_Resource.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_Resource.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_Resource.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_Resource.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_Resource.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_Resource.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_Resource.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_Resource.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_Resource.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_Resource.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_Resource.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_Resource.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_Resource.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_Resource.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_Resource.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _Resource.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.TCollection
import OCC.Standard
import OCC.MMgt
import OCC.TColStd

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

Resource_SJIS = _Resource.Resource_SJIS
Resource_EUC = _Resource.Resource_EUC
Resource_ANSI = _Resource.Resource_ANSI
Resource_GB = _Resource.Resource_GB
class Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Resource_DataMapOfAsciiStringAsciiString &
        :rtype: None

        """
        _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_swiginit(self, _Resource.new_Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: Resource_DataMapOfAsciiStringAsciiString &
        :rtype: None

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Initialize(self, *args)


    def Key(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Key(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString
Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString.Initialize = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Initialize, None, Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString)
Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString.Key = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Key, None, Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString)
Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString.Value = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_Value, None, Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString)
Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_swigregister = _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_swigregister
Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString_swigregister(Resource_DataMapIteratorOfDataMapOfAsciiStringAsciiString)

class Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: Resource_DataMapOfAsciiStringExtendedString &
        :rtype: None

        """
        _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_swiginit(self, _Resource.new_Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: Resource_DataMapOfAsciiStringExtendedString &
        :rtype: None

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Initialize(self, *args)


    def Key(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Key(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString
Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString.Initialize = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Initialize, None, Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString)
Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString.Key = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Key, None, Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString)
Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString.Value = new_instancemethod(_Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_Value, None, Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString)
Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_swigregister = _Resource.Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_swigregister
Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString_swigregister(Resource_DataMapIteratorOfDataMapOfAsciiStringExtendedString)

class Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: TCollection_AsciiString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swiginit(self, _Resource.new_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString(*args))

    def Key(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_Key(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString
Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString.Key = new_instancemethod(_Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_Key, None, Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)
Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString.Value = new_instancemethod(_Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_Value, None, Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)
Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister = _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister
Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister(Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)

class Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swiginit(self, _Resource.new_Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Resource.delete_Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString.Nullify = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_Nullify, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString.IsNull = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_IsNull, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString._get_reference = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString__get_reference, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister = _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_swigregister(Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString)

def Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString const":
    return _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_DownCast(AnObject)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_DownCast = _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringAsciiString_DownCast

class Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: TCollection_ExtendedString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swiginit(self, _Resource.new_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString(*args))

    def Key(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_Key(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString
Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString.Key = new_instancemethod(_Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_Key, None, Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)
Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString.Value = new_instancemethod(_Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_Value, None, Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)
Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister = _Resource.Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister
Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister(Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)

class Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swiginit(self, _Resource.new_Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Resource.delete_Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString.Nullify = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_Nullify, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString.IsNull = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_IsNull, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString._get_reference = new_instancemethod(_Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString__get_reference, None, Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister = _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_swigregister(Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString)

def Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString const":
    return _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_DownCast(AnObject)
Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_DownCast = _Resource.Handle_Resource_DataMapNodeOfDataMapOfAsciiStringExtendedString_DownCast

class Resource_DataMapOfAsciiStringAsciiString(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Resource.Resource_DataMapOfAsciiStringAsciiString_swiginit(self, _Resource.new_Resource_DataMapOfAsciiStringAsciiString(*args))

    def Assign(self, *args) -> "Resource_DataMapOfAsciiStringAsciiString &":
        """
        :param Other:
        :type Other: Resource_DataMapOfAsciiStringAsciiString &
        :rtype: Resource_DataMapOfAsciiStringAsciiString

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Assign(self, *args)


    def Set(self, *args) -> "Resource_DataMapOfAsciiStringAsciiString &":
        """
        :param Other:
        :type Other: Resource_DataMapOfAsciiStringAsciiString &
        :rtype: Resource_DataMapOfAsciiStringAsciiString

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_UnBind(self, *args)


    def Find(self, *args) -> "TCollection_AsciiString const &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Find(self, *args)


    def ChangeFind(self, *args) -> "TCollection_AsciiString &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: TCollection_AsciiString

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapOfAsciiStringAsciiString
Resource_DataMapOfAsciiStringAsciiString.Assign = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Assign, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Set = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Set, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ReSize = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ReSize, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Clear = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Clear, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Bind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Bind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.IsBound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_IsBound, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.UnBind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_UnBind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Find = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Find, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ChangeFind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeFind, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.Find1 = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_Find1, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString.ChangeFind1 = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringAsciiString_ChangeFind1, None, Resource_DataMapOfAsciiStringAsciiString)
Resource_DataMapOfAsciiStringAsciiString_swigregister = _Resource.Resource_DataMapOfAsciiStringAsciiString_swigregister
Resource_DataMapOfAsciiStringAsciiString_swigregister(Resource_DataMapOfAsciiStringAsciiString)

class Resource_DataMapOfAsciiStringExtendedString(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _Resource.Resource_DataMapOfAsciiStringExtendedString_swiginit(self, _Resource.new_Resource_DataMapOfAsciiStringExtendedString(*args))

    def Assign(self, *args) -> "Resource_DataMapOfAsciiStringExtendedString &":
        """
        :param Other:
        :type Other: Resource_DataMapOfAsciiStringExtendedString &
        :rtype: Resource_DataMapOfAsciiStringExtendedString

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Assign(self, *args)


    def Set(self, *args) -> "Resource_DataMapOfAsciiStringExtendedString &":
        """
        :param Other:
        :type Other: Resource_DataMapOfAsciiStringExtendedString &
        :rtype: Resource_DataMapOfAsciiStringExtendedString

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: TCollection_ExtendedString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_UnBind(self, *args)


    def Find(self, *args) -> "TCollection_ExtendedString const &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: TCollection_ExtendedString

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Find(self, *args)


    def ChangeFind(self, *args) -> "TCollection_ExtendedString &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: TCollection_ExtendedString

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_DataMapOfAsciiStringExtendedString
Resource_DataMapOfAsciiStringExtendedString.Assign = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Assign, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Set = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Set, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ReSize = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ReSize, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Clear = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Clear, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Bind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Bind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.IsBound = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_IsBound, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.UnBind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_UnBind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Find = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Find, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ChangeFind = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeFind, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.Find1 = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_Find1, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString.ChangeFind1 = new_instancemethod(_Resource.Resource_DataMapOfAsciiStringExtendedString_ChangeFind1, None, Resource_DataMapOfAsciiStringExtendedString)
Resource_DataMapOfAsciiStringExtendedString_swigregister = _Resource.Resource_DataMapOfAsciiStringExtendedString_swigregister
Resource_DataMapOfAsciiStringExtendedString_swigregister(Resource_DataMapOfAsciiStringExtendedString)

class Resource_LexicalCompare(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _Resource.Resource_LexicalCompare_swiginit(self, _Resource.new_Resource_LexicalCompare(*args))

    def IsLower(self, *args) -> "Standard_Boolean":
        """
        * Returns True if <Left> is lower than <Right>.

        :param Left:
        :type Left: TCollection_AsciiString &
        :param Right:
        :type Right: TCollection_AsciiString &
        :rtype: bool

        """
        return _Resource.Resource_LexicalCompare_IsLower(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_LexicalCompare
Resource_LexicalCompare.IsLower = new_instancemethod(_Resource.Resource_LexicalCompare_IsLower, None, Resource_LexicalCompare)
Resource_LexicalCompare_swigregister = _Resource.Resource_LexicalCompare_swigregister
Resource_LexicalCompare_swigregister(Resource_LexicalCompare)

class Resource_Manager(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Create a Resource manager. Attempts to find the two following files: $CSF_`aName`Defaults/aName $CSF_`aName`UserDefaults/aName and load them respectively into a reference and a user resource structure. //! If CSF_ResourceVerbose defined, seeked files will be printed. //! FILE SYNTAX The syntax of a resource file is a sequence of resource lines terminated by newline characters or end of file. The syntax of an individual resource line is:

        :param aName:
        :type aName: char *
        :param Verbose: default value is Standard_False
        :type Verbose: bool
        :rtype: None

        :param aName:
        :type aName: char *
        :param aDefaultsDirectory:
        :type aDefaultsDirectory: TCollection_AsciiString &
        :param anUserDefaultsDirectory:
        :type anUserDefaultsDirectory: TCollection_AsciiString &
        :param Verbose: default value is Standard_False
        :type Verbose: bool
        :rtype: None

        """
        _Resource.Resource_Manager_swiginit(self, _Resource.new_Resource_Manager(*args))

    def Save(self, *args) -> "Standard_Boolean":
        """
        * Save the user resource structure in the specified file. Creates the file if it does not exist.

        :rtype: bool

        """
        return _Resource.Resource_Manager_Save(self, *args)


    def Find(self, *args) -> "Standard_Boolean":
        """
        * returns True if the Resource does exist.

        :param aResource:
        :type aResource: char *
        :rtype: bool

        """
        return _Resource.Resource_Manager_Find(self, *args)


    def Integer(self, *args) -> "Standard_Integer":
        """
        * Gets the value of an integer resource according to its instance and its type.

        :param aResourceName:
        :type aResourceName: char *
        :rtype: int

        """
        return _Resource.Resource_Manager_Integer(self, *args)


    def Real(self, *args) -> "Standard_Real":
        """
        * Gets the value of a real resource according to its instance and its type.

        :param aResourceName:
        :type aResourceName: char *
        :rtype: float

        """
        return _Resource.Resource_Manager_Real(self, *args)


    def Value(self, *args) -> "char const *":
        """
        * Gets the value of a CString resource according to its instance and its type.

        :param aResourceName:
        :type aResourceName: char *
        :rtype: char *

        """
        return _Resource.Resource_Manager_Value(self, *args)


    def ExtValue(self, *args) -> "Standard_ExtString":
        """
        * Gets the value of an ExtString resource according to its instance and its type.

        :param aResourceName:
        :type aResourceName: char *
        :rtype: Standard_ExtString

        """
        return _Resource.Resource_Manager_ExtValue(self, *args)


    def SetResource(self, *args) -> "void":
        """
        * Sets the new value of an integer resource. If the resource does not exist, it is created.

        :param aResourceName:
        :type aResourceName: char *
        :param aValue:
        :type aValue: int
        :rtype: void

        * Sets the new value of a real resource. If the resource does not exist, it is created.

        :param aResourceName:
        :type aResourceName: char *
        :param aValue:
        :type aValue: float
        :rtype: void

        * Sets the new value of an CString resource. If the resource does not exist, it is created.

        :param aResourceName:
        :type aResourceName: char *
        :param aValue:
        :type aValue: char *
        :rtype: void

        * Sets the new value of an ExtString resource. If the resource does not exist, it is created.

        :param aResourceName:
        :type aResourceName: char *
        :param aValue:
        :type aValue: Standard_ExtString
        :rtype: void

        """
        return _Resource.Resource_Manager_SetResource(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_Resource_Manager(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _Resource.delete_Resource_Manager
Resource_Manager.Save = new_instancemethod(_Resource.Resource_Manager_Save, None, Resource_Manager)
Resource_Manager.Find = new_instancemethod(_Resource.Resource_Manager_Find, None, Resource_Manager)
Resource_Manager.Integer = new_instancemethod(_Resource.Resource_Manager_Integer, None, Resource_Manager)
Resource_Manager.Real = new_instancemethod(_Resource.Resource_Manager_Real, None, Resource_Manager)
Resource_Manager.Value = new_instancemethod(_Resource.Resource_Manager_Value, None, Resource_Manager)
Resource_Manager.ExtValue = new_instancemethod(_Resource.Resource_Manager_ExtValue, None, Resource_Manager)
Resource_Manager.SetResource = new_instancemethod(_Resource.Resource_Manager_SetResource, None, Resource_Manager)
Resource_Manager_swigregister = _Resource.Resource_Manager_swigregister
Resource_Manager_swigregister(Resource_Manager)

class Handle_Resource_Manager(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _Resource.Handle_Resource_Manager_swiginit(self, _Resource.new_Handle_Resource_Manager(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_Resource.Handle_Resource_Manager_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _Resource.delete_Handle_Resource_Manager
Handle_Resource_Manager.Nullify = new_instancemethod(_Resource.Handle_Resource_Manager_Nullify, None, Handle_Resource_Manager)
Handle_Resource_Manager.IsNull = new_instancemethod(_Resource.Handle_Resource_Manager_IsNull, None, Handle_Resource_Manager)
Handle_Resource_Manager._get_reference = new_instancemethod(_Resource.Handle_Resource_Manager__get_reference, None, Handle_Resource_Manager)
Handle_Resource_Manager_swigregister = _Resource.Handle_Resource_Manager_swigregister
Handle_Resource_Manager_swigregister(Handle_Resource_Manager)

def Handle_Resource_Manager_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_Resource_Manager const":
    return _Resource.Handle_Resource_Manager_DownCast(AnObject)
Handle_Resource_Manager_DownCast = _Resource.Handle_Resource_Manager_DownCast

class Resource_QuickSortOfArray1(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def Sort(*args) -> "void":
        """
        :param TheArray:
        :type TheArray: TColStd_Array1OfAsciiString &
        :param Comp:
        :type Comp: Resource_LexicalCompare &
        :rtype: void

        """
        return _Resource.Resource_QuickSortOfArray1_Sort(*args)

    Sort = staticmethod(Sort)

    __repr__ = _dumps_object


    def __init__(self):
        _Resource.Resource_QuickSortOfArray1_swiginit(self, _Resource.new_Resource_QuickSortOfArray1())
    __swig_destroy__ = _Resource.delete_Resource_QuickSortOfArray1
Resource_QuickSortOfArray1_swigregister = _Resource.Resource_QuickSortOfArray1_swigregister
Resource_QuickSortOfArray1_swigregister(Resource_QuickSortOfArray1)

def Resource_QuickSortOfArray1_Sort(*args) -> "void":
    """
    :param TheArray:
    :type TheArray: TColStd_Array1OfAsciiString &
    :param Comp:
    :type Comp: Resource_LexicalCompare &
    :rtype: void

    """
    return _Resource.Resource_QuickSortOfArray1_Sort(*args)

class Resource_Unicode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def ConvertSJISToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in SJIS format to Unicode ExtendedString <tostr>.

        :param fromstr:
        :type fromstr: char *
        :param tostr:
        :type tostr: TCollection_ExtendedString &
        :rtype: void

        """
        return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

    ConvertSJISToUnicode = staticmethod(ConvertSJISToUnicode)

    def ConvertEUCToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in EUC format to Unicode ExtendedString <tostr>.

        :param fromstr:
        :type fromstr: char *
        :param tostr:
        :type tostr: TCollection_ExtendedString &
        :rtype: void

        """
        return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

    ConvertEUCToUnicode = staticmethod(ConvertEUCToUnicode)

    def ConvertGBToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in GB format to Unicode ExtendedString <tostr>.

        :param fromstr:
        :type fromstr: char *
        :param tostr:
        :type tostr: TCollection_ExtendedString &
        :rtype: void

        """
        return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

    ConvertGBToUnicode = staticmethod(ConvertGBToUnicode)

    def ConvertANSIToUnicode(*args) -> "void":
        """
        * Converts non-ASCII CString <fromstr> in ANSI format to Unicode ExtendedString <tostr>.

        :param fromstr:
        :type fromstr: char *
        :param tostr:
        :type tostr: TCollection_ExtendedString &
        :rtype: void

        """
        return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

    ConvertANSIToUnicode = staticmethod(ConvertANSIToUnicode)

    def ConvertUnicodeToSJIS(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in SJIS format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

        :param fromstr:
        :type fromstr: TCollection_ExtendedString &
        :param tostr:
        :type tostr: Standard_PCharacter &
        :param maxsize:
        :type maxsize: int
        :rtype: bool

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

    ConvertUnicodeToSJIS = staticmethod(ConvertUnicodeToSJIS)

    def ConvertUnicodeToEUC(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in EUC format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

        :param fromstr:
        :type fromstr: TCollection_ExtendedString &
        :param tostr:
        :type tostr: Standard_PCharacter &
        :param maxsize:
        :type maxsize: int
        :rtype: bool

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

    ConvertUnicodeToEUC = staticmethod(ConvertUnicodeToEUC)

    def ConvertUnicodeToGB(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in GB format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

        :param fromstr:
        :type fromstr: TCollection_ExtendedString &
        :param tostr:
        :type tostr: Standard_PCharacter &
        :param maxsize:
        :type maxsize: int
        :rtype: bool

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

    ConvertUnicodeToGB = staticmethod(ConvertUnicodeToGB)

    def ConvertUnicodeToANSI(*args) -> "Standard_Boolean":
        """
        * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in ANSI format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

        :param fromstr:
        :type fromstr: TCollection_ExtendedString &
        :param tostr:
        :type tostr: Standard_PCharacter &
        :param maxsize:
        :type maxsize: int
        :rtype: bool

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

    ConvertUnicodeToANSI = staticmethod(ConvertUnicodeToANSI)

    def SetFormat(*args) -> "void":
        """
        * Defines the current conversion format as typecode. This conversion format will then be used by the functions ConvertFormatToUnicode and ConvertUnicodeToFormat to convert the strings.

        :param typecode:
        :type typecode: Resource_FormatType
        :rtype: void

        """
        return _Resource.Resource_Unicode_SetFormat(*args)

    SetFormat = staticmethod(SetFormat)

    def GetFormat(*args) -> "Resource_FormatType":
        """
        * Returns the current conversion format (either ANSI, EUC, GB or SJIS). The current converting format must be defined in advance with the SetFormat function.

        :rtype: Resource_FormatType

        """
        return _Resource.Resource_Unicode_GetFormat(*args)

    GetFormat = staticmethod(GetFormat)

    def ReadFormat(*args) -> "void":
        """
        * Reads converting format from resource 'FormatType' in Resource Manager 'CharSet'

        :rtype: void

        """
        return _Resource.Resource_Unicode_ReadFormat(*args)

    ReadFormat = staticmethod(ReadFormat)

    def ConvertFormatToUnicode(*args) -> "void":
        """
        * Converts the non-ASCII C string fromstr to the Unicode string of extended characters tostr. fromstr is translated according to the format (either ANSI, EUC, GB or SJIS) returned by the function GetFormat.

        :param fromstr:
        :type fromstr: char *
        :param tostr:
        :type tostr: TCollection_ExtendedString &
        :rtype: void

        """
        return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

    ConvertFormatToUnicode = staticmethod(ConvertFormatToUnicode)

    def ConvertUnicodeToFormat(*args) -> "Standard_Boolean":
        """
        * Converts the Unicode string of extended characters fromstr to the non-ASCII C string tostr according to the format (either ANSI, EUC, GB or SJIS) returned by the function GetFormat. maxsize limits the size of the string tostr to a maximum number of characters. You need more than twice the length of the string fromstr to complete the conversion. The function returns true if conversion is complete, i.e. the maximum number of characters maxsize is not reached by tostr before the end of conversion of fromstr.

        :param fromstr:
        :type fromstr: TCollection_ExtendedString &
        :param tostr:
        :type tostr: Standard_PCharacter &
        :param maxsize:
        :type maxsize: int
        :rtype: bool

        """
        return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)

    ConvertUnicodeToFormat = staticmethod(ConvertUnicodeToFormat)

    __repr__ = _dumps_object


    def __init__(self):
        _Resource.Resource_Unicode_swiginit(self, _Resource.new_Resource_Unicode())
    __swig_destroy__ = _Resource.delete_Resource_Unicode
Resource_Unicode_swigregister = _Resource.Resource_Unicode_swigregister
Resource_Unicode_swigregister(Resource_Unicode)

def Resource_Unicode_ConvertSJISToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in SJIS format to Unicode ExtendedString <tostr>.

    :param fromstr:
    :type fromstr: char *
    :param tostr:
    :type tostr: TCollection_ExtendedString &
    :rtype: void

    """
    return _Resource.Resource_Unicode_ConvertSJISToUnicode(*args)

def Resource_Unicode_ConvertEUCToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in EUC format to Unicode ExtendedString <tostr>.

    :param fromstr:
    :type fromstr: char *
    :param tostr:
    :type tostr: TCollection_ExtendedString &
    :rtype: void

    """
    return _Resource.Resource_Unicode_ConvertEUCToUnicode(*args)

def Resource_Unicode_ConvertGBToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in GB format to Unicode ExtendedString <tostr>.

    :param fromstr:
    :type fromstr: char *
    :param tostr:
    :type tostr: TCollection_ExtendedString &
    :rtype: void

    """
    return _Resource.Resource_Unicode_ConvertGBToUnicode(*args)

def Resource_Unicode_ConvertANSIToUnicode(*args) -> "void":
    """
    * Converts non-ASCII CString <fromstr> in ANSI format to Unicode ExtendedString <tostr>.

    :param fromstr:
    :type fromstr: char *
    :param tostr:
    :type tostr: TCollection_ExtendedString &
    :rtype: void

    """
    return _Resource.Resource_Unicode_ConvertANSIToUnicode(*args)

def Resource_Unicode_ConvertUnicodeToSJIS(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in SJIS format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

    :param fromstr:
    :type fromstr: TCollection_ExtendedString &
    :param tostr:
    :type tostr: Standard_PCharacter &
    :param maxsize:
    :type maxsize: int
    :rtype: bool

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToSJIS(*args)

def Resource_Unicode_ConvertUnicodeToEUC(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in EUC format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

    :param fromstr:
    :type fromstr: TCollection_ExtendedString &
    :param tostr:
    :type tostr: Standard_PCharacter &
    :param maxsize:
    :type maxsize: int
    :rtype: bool

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToEUC(*args)

def Resource_Unicode_ConvertUnicodeToGB(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in GB format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

    :param fromstr:
    :type fromstr: TCollection_ExtendedString &
    :param tostr:
    :type tostr: Standard_PCharacter &
    :param maxsize:
    :type maxsize: int
    :rtype: bool

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToGB(*args)

def Resource_Unicode_ConvertUnicodeToANSI(*args) -> "Standard_Boolean":
    """
    * Converts Unicode ExtendedString <fromstr> to non-ASCII CString <tostr> in ANSI format, limited to <maxsize> characters. To translate the whole <fromstr>, use more than twice the length of <fromstr>. Returns true if <maxsize> has not been reached before end of conversion.

    :param fromstr:
    :type fromstr: TCollection_ExtendedString &
    :param tostr:
    :type tostr: Standard_PCharacter &
    :param maxsize:
    :type maxsize: int
    :rtype: bool

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToANSI(*args)

def Resource_Unicode_SetFormat(*args) -> "void":
    """
    * Defines the current conversion format as typecode. This conversion format will then be used by the functions ConvertFormatToUnicode and ConvertUnicodeToFormat to convert the strings.

    :param typecode:
    :type typecode: Resource_FormatType
    :rtype: void

    """
    return _Resource.Resource_Unicode_SetFormat(*args)

def Resource_Unicode_GetFormat(*args) -> "Resource_FormatType":
    """
    * Returns the current conversion format (either ANSI, EUC, GB or SJIS). The current converting format must be defined in advance with the SetFormat function.

    :rtype: Resource_FormatType

    """
    return _Resource.Resource_Unicode_GetFormat(*args)

def Resource_Unicode_ReadFormat(*args) -> "void":
    """
    * Reads converting format from resource 'FormatType' in Resource Manager 'CharSet'

    :rtype: void

    """
    return _Resource.Resource_Unicode_ReadFormat(*args)

def Resource_Unicode_ConvertFormatToUnicode(*args) -> "void":
    """
    * Converts the non-ASCII C string fromstr to the Unicode string of extended characters tostr. fromstr is translated according to the format (either ANSI, EUC, GB or SJIS) returned by the function GetFormat.

    :param fromstr:
    :type fromstr: char *
    :param tostr:
    :type tostr: TCollection_ExtendedString &
    :rtype: void

    """
    return _Resource.Resource_Unicode_ConvertFormatToUnicode(*args)

def Resource_Unicode_ConvertUnicodeToFormat(*args) -> "Standard_Boolean":
    """
    * Converts the Unicode string of extended characters fromstr to the non-ASCII C string tostr according to the format (either ANSI, EUC, GB or SJIS) returned by the function GetFormat. maxsize limits the size of the string tostr to a maximum number of characters. You need more than twice the length of the string fromstr to complete the conversion. The function returns true if conversion is complete, i.e. the maximum number of characters maxsize is not reached by tostr before the end of conversion of fromstr.

    :param fromstr:
    :type fromstr: TCollection_ExtendedString &
    :param tostr:
    :type tostr: Standard_PCharacter &
    :param maxsize:
    :type maxsize: int
    :rtype: bool

    """
    return _Resource.Resource_Unicode_ConvertUnicodeToFormat(*args)



