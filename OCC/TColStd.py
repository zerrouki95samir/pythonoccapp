# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _TColStd.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_TColStd')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_TColStd')
    _TColStd = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TColStd', [dirname(__file__)])
        except ImportError:
            import _TColStd
            return _TColStd
        try:
            _mod = imp.load_module('_TColStd', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _TColStd = swig_import_helper()
    del swig_import_helper
else:
    import _TColStd
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TColStd.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_TColStd.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_TColStd.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_TColStd.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_TColStd.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_TColStd.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_TColStd.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_TColStd.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_TColStd.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_TColStd.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_TColStd.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_TColStd.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_TColStd.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_TColStd.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_TColStd.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_TColStd.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_TColStd.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _TColStd.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.TCollection
import OCC.MMgt

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

class TColStd_Array1OfAsciiString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TCollection_AsciiString &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfAsciiString_swiginit(self, _TColStd.new_TColStd_Array1OfAsciiString(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfAsciiString_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfAsciiString_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfAsciiString_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfAsciiString &
        :rtype: TColStd_Array1OfAsciiString

        """
        return _TColStd.TColStd_Array1OfAsciiString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfAsciiString &
        :rtype: TColStd_Array1OfAsciiString

        """
        return _TColStd.TColStd_Array1OfAsciiString_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfAsciiString_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfAsciiString_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfAsciiString_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfAsciiString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_Array1OfAsciiString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_AsciiString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_Array1OfAsciiString_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfAsciiString
TColStd_Array1OfAsciiString.Init = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Init, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Destroy, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_IsAllocated, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Assign = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Assign, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Set = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Set, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Length = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Length, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Lower = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Lower, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Upper = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Upper, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_SetValue, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.Value = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_Value, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfAsciiString_ChangeValue, None, TColStd_Array1OfAsciiString)
TColStd_Array1OfAsciiString_swigregister = _TColStd.TColStd_Array1OfAsciiString_swigregister
TColStd_Array1OfAsciiString_swigregister(TColStd_Array1OfAsciiString)

class TColStd_Array1OfBoolean(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: bool
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfBoolean_swiginit(self, _TColStd.new_TColStd_Array1OfBoolean(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: bool
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfBoolean_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfBoolean_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfBoolean_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfBoolean &
        :rtype: TColStd_Array1OfBoolean

        """
        return _TColStd.TColStd_Array1OfBoolean_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfBoolean &
        :rtype: TColStd_Array1OfBoolean

        """
        return _TColStd.TColStd_Array1OfBoolean_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfBoolean_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfBoolean_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfBoolean_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: bool
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfBoolean_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Boolean const &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfBoolean_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Boolean &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfBoolean_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfBoolean
TColStd_Array1OfBoolean.Init = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Init, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Destroy, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_IsAllocated, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Assign = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Assign, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Set = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Set, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Length = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Length, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Lower = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Lower, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Upper = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Upper, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_SetValue, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.Value = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_Value, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfBoolean_ChangeValue, None, TColStd_Array1OfBoolean)
TColStd_Array1OfBoolean_swigregister = _TColStd.TColStd_Array1OfBoolean_swigregister
TColStd_Array1OfBoolean_swigregister(TColStd_Array1OfBoolean)

class TColStd_Array1OfByte(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Standard_Byte &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfByte_swiginit(self, _TColStd.new_TColStd_Array1OfByte(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Byte &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfByte_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfByte_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfByte_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfByte const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfByte &
        :rtype: TColStd_Array1OfByte

        """
        return _TColStd.TColStd_Array1OfByte_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfByte const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfByte &
        :rtype: TColStd_Array1OfByte

        """
        return _TColStd.TColStd_Array1OfByte_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfByte_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfByte_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfByte_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Standard_Byte &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfByte_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Byte const &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Byte

        """
        return _TColStd.TColStd_Array1OfByte_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Byte &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Byte

        """
        return _TColStd.TColStd_Array1OfByte_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfByte
TColStd_Array1OfByte.Init = new_instancemethod(_TColStd.TColStd_Array1OfByte_Init, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfByte_Destroy, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfByte_IsAllocated, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Assign = new_instancemethod(_TColStd.TColStd_Array1OfByte_Assign, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Set = new_instancemethod(_TColStd.TColStd_Array1OfByte_Set, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Length = new_instancemethod(_TColStd.TColStd_Array1OfByte_Length, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Lower = new_instancemethod(_TColStd.TColStd_Array1OfByte_Lower, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Upper = new_instancemethod(_TColStd.TColStd_Array1OfByte_Upper, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfByte_SetValue, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.Value = new_instancemethod(_TColStd.TColStd_Array1OfByte_Value, None, TColStd_Array1OfByte)
TColStd_Array1OfByte.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfByte_ChangeValue, None, TColStd_Array1OfByte)
TColStd_Array1OfByte_swigregister = _TColStd.TColStd_Array1OfByte_swigregister
TColStd_Array1OfByte_swigregister(TColStd_Array1OfByte)

class TColStd_Array1OfCharacter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Standard_Character &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfCharacter_swiginit(self, _TColStd.new_TColStd_Array1OfCharacter(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfCharacter_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfCharacter_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfCharacter_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfCharacter const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfCharacter &
        :rtype: TColStd_Array1OfCharacter

        """
        return _TColStd.TColStd_Array1OfCharacter_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfCharacter const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfCharacter &
        :rtype: TColStd_Array1OfCharacter

        """
        return _TColStd.TColStd_Array1OfCharacter_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfCharacter_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfCharacter_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfCharacter_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfCharacter_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Character const &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_Array1OfCharacter_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Character &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_Array1OfCharacter_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfCharacter
TColStd_Array1OfCharacter.Init = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Init, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Destroy, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_IsAllocated, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Assign = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Assign, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Set = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Set, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Length = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Length, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Lower = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Lower, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Upper = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Upper, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_SetValue, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.Value = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_Value, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfCharacter_ChangeValue, None, TColStd_Array1OfCharacter)
TColStd_Array1OfCharacter_swigregister = _TColStd.TColStd_Array1OfCharacter_swigregister
TColStd_Array1OfCharacter_swigregister(TColStd_Array1OfCharacter)

class TColStd_Array1OfExtendedString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TCollection_ExtendedString &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfExtendedString_swiginit(self, _TColStd.new_TColStd_Array1OfExtendedString(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfExtendedString_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfExtendedString_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfExtendedString_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfExtendedString &
        :rtype: TColStd_Array1OfExtendedString

        """
        return _TColStd.TColStd_Array1OfExtendedString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfExtendedString &
        :rtype: TColStd_Array1OfExtendedString

        """
        return _TColStd.TColStd_Array1OfExtendedString_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfExtendedString_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfExtendedString_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfExtendedString_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfExtendedString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_Array1OfExtendedString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_ExtendedString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_Array1OfExtendedString_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfExtendedString
TColStd_Array1OfExtendedString.Init = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Init, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Destroy, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_IsAllocated, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Assign = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Assign, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Set = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Set, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Length = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Length, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Lower = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Lower, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Upper = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Upper, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_SetValue, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.Value = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_Value, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfExtendedString_ChangeValue, None, TColStd_Array1OfExtendedString)
TColStd_Array1OfExtendedString_swigregister = _TColStd.TColStd_Array1OfExtendedString_swigregister
TColStd_Array1OfExtendedString_swigregister(TColStd_Array1OfExtendedString)

class TColStd_Array1OfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: int &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfInteger_swiginit(self, _TColStd.new_TColStd_Array1OfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: int &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfInteger_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfInteger_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfInteger_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfInteger &
        :rtype: TColStd_Array1OfInteger

        """
        return _TColStd.TColStd_Array1OfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfInteger &
        :rtype: TColStd_Array1OfInteger

        """
        return _TColStd.TColStd_Array1OfInteger_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfInteger_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfInteger_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfInteger_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: int &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfInteger_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfInteger_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfInteger
TColStd_Array1OfInteger.Init = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Init, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Destroy, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfInteger_IsAllocated, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Assign = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Assign, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Set = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Set, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Length = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Length, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Lower = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Lower, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Upper = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Upper, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfInteger_SetValue, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.Value = new_instancemethod(_TColStd.TColStd_Array1OfInteger_Value, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfInteger_ChangeValue, None, TColStd_Array1OfInteger)
TColStd_Array1OfInteger_swigregister = _TColStd.TColStd_Array1OfInteger_swigregister
TColStd_Array1OfInteger_swigregister(TColStd_Array1OfInteger)

class TColStd_Array1OfListOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: TColStd_ListOfInteger &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfListOfInteger_swiginit(self, _TColStd.new_TColStd_Array1OfListOfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfListOfInteger_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfListOfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfListOfInteger &
        :rtype: TColStd_Array1OfListOfInteger

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfListOfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfListOfInteger &
        :rtype: TColStd_Array1OfListOfInteger

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfListOfInteger_SetValue(self, *args)


    def Value(self, *args) -> "TColStd_ListOfInteger const &":
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_Array1OfListOfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "TColStd_ListOfInteger &":
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_Array1OfListOfInteger_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfListOfInteger
TColStd_Array1OfListOfInteger.Init = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Init, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Destroy, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_IsAllocated, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Assign = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Assign, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Set = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Set, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Length = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Length, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Lower = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Lower, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Upper = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Upper, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_SetValue, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.Value = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_Value, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfListOfInteger_ChangeValue, None, TColStd_Array1OfListOfInteger)
TColStd_Array1OfListOfInteger_swigregister = _TColStd.TColStd_Array1OfListOfInteger_swigregister
TColStd_Array1OfListOfInteger_swigregister(TColStd_Array1OfListOfInteger)

class TColStd_Array1OfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: float &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfReal_swiginit(self, _TColStd.new_TColStd_Array1OfReal(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: float &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfReal_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfReal_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfReal_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfReal const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfReal &
        :rtype: TColStd_Array1OfReal

        """
        return _TColStd.TColStd_Array1OfReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfReal const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfReal &
        :rtype: TColStd_Array1OfReal

        """
        return _TColStd.TColStd_Array1OfReal_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfReal_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfReal_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfReal_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: float &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfReal_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_Array1OfReal_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_Array1OfReal_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfReal
TColStd_Array1OfReal.Init = new_instancemethod(_TColStd.TColStd_Array1OfReal_Init, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfReal_Destroy, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfReal_IsAllocated, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Assign = new_instancemethod(_TColStd.TColStd_Array1OfReal_Assign, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Set = new_instancemethod(_TColStd.TColStd_Array1OfReal_Set, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Length = new_instancemethod(_TColStd.TColStd_Array1OfReal_Length, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Lower = new_instancemethod(_TColStd.TColStd_Array1OfReal_Lower, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Upper = new_instancemethod(_TColStd.TColStd_Array1OfReal_Upper, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfReal_SetValue, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.Value = new_instancemethod(_TColStd.TColStd_Array1OfReal_Value, None, TColStd_Array1OfReal)
TColStd_Array1OfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfReal_ChangeValue, None, TColStd_Array1OfReal)
TColStd_Array1OfReal_swigregister = _TColStd.TColStd_Array1OfReal_swigregister
TColStd_Array1OfReal_swigregister(TColStd_Array1OfReal)

class TColStd_Array1OfTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Item:
        :type Item: Handle_Standard_Transient &
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        """
        _TColStd.TColStd_Array1OfTransient_swiginit(self, _TColStd.new_TColStd_Array1OfTransient(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfTransient_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfTransient_Destroy(self, *args)


    def IsAllocated(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_Array1OfTransient_IsAllocated(self, *args)


    def Assign(self, *args) -> "TColStd_Array1OfTransient const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfTransient &
        :rtype: TColStd_Array1OfTransient

        """
        return _TColStd.TColStd_Array1OfTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array1OfTransient const &":
        """
        :param Other:
        :type Other: TColStd_Array1OfTransient &
        :rtype: TColStd_Array1OfTransient

        """
        return _TColStd.TColStd_Array1OfTransient_Set(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfTransient_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfTransient_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array1OfTransient_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_Array1OfTransient_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_Array1OfTransient_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_Array1OfTransient_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array1OfTransient
TColStd_Array1OfTransient.Init = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Init, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Destroy = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Destroy, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.IsAllocated = new_instancemethod(_TColStd.TColStd_Array1OfTransient_IsAllocated, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Assign = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Assign, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Set = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Set, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Length = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Length, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Lower = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Lower, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Upper = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Upper, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.SetValue = new_instancemethod(_TColStd.TColStd_Array1OfTransient_SetValue, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.Value = new_instancemethod(_TColStd.TColStd_Array1OfTransient_Value, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_Array1OfTransient_ChangeValue, None, TColStd_Array1OfTransient)
TColStd_Array1OfTransient_swigregister = _TColStd.TColStd_Array1OfTransient_swigregister
TColStd_Array1OfTransient_swigregister(TColStd_Array1OfTransient)

class TColStd_Array2OfBoolean(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: bool
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColStd.TColStd_Array2OfBoolean_swiginit(self, _TColStd.new_TColStd_Array2OfBoolean(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: bool
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfBoolean_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfBoolean_Destroy(self, *args)


    def Assign(self, *args) -> "TColStd_Array2OfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfBoolean &
        :rtype: TColStd_Array2OfBoolean

        """
        return _TColStd.TColStd_Array2OfBoolean_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array2OfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfBoolean &
        :rtype: TColStd_Array2OfBoolean

        """
        return _TColStd.TColStd_Array2OfBoolean_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfBoolean_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: bool
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfBoolean_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Boolean const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: bool

        """
        return _TColStd.TColStd_Array2OfBoolean_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Boolean &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: bool

        """
        return _TColStd.TColStd_Array2OfBoolean_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfBoolean
TColStd_Array2OfBoolean.Init = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_Init, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.Destroy = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_Destroy, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.Assign = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_Assign, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.Set = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_Set, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.ColLength = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_ColLength, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.RowLength = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_RowLength, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.LowerCol = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_LowerCol, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.LowerRow = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_LowerRow, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.UpperCol = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_UpperCol, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.UpperRow = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_UpperRow, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_SetValue, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.Value = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_Value, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean.ChangeValue = new_instancemethod(_TColStd.TColStd_Array2OfBoolean_ChangeValue, None, TColStd_Array2OfBoolean)
TColStd_Array2OfBoolean_swigregister = _TColStd.TColStd_Array2OfBoolean_swigregister
TColStd_Array2OfBoolean_swigregister(TColStd_Array2OfBoolean)

class TColStd_Array2OfCharacter(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Standard_Character &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColStd.TColStd_Array2OfCharacter_swiginit(self, _TColStd.new_TColStd_Array2OfCharacter(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfCharacter_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfCharacter_Destroy(self, *args)


    def Assign(self, *args) -> "TColStd_Array2OfCharacter const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfCharacter &
        :rtype: TColStd_Array2OfCharacter

        """
        return _TColStd.TColStd_Array2OfCharacter_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array2OfCharacter const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfCharacter &
        :rtype: TColStd_Array2OfCharacter

        """
        return _TColStd.TColStd_Array2OfCharacter_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfCharacter_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfCharacter_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Character const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_Array2OfCharacter_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Character &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_Array2OfCharacter_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfCharacter
TColStd_Array2OfCharacter.Init = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_Init, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.Destroy = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_Destroy, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.Assign = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_Assign, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.Set = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_Set, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.ColLength = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_ColLength, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.RowLength = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_RowLength, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.LowerCol = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_LowerCol, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.LowerRow = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_LowerRow, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.UpperCol = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_UpperCol, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.UpperRow = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_UpperRow, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.SetValue = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_SetValue, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.Value = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_Value, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter.ChangeValue = new_instancemethod(_TColStd.TColStd_Array2OfCharacter_ChangeValue, None, TColStd_Array2OfCharacter)
TColStd_Array2OfCharacter_swigregister = _TColStd.TColStd_Array2OfCharacter_swigregister
TColStd_Array2OfCharacter_swigregister(TColStd_Array2OfCharacter)

class TColStd_Array2OfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: int &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColStd.TColStd_Array2OfInteger_swiginit(self, _TColStd.new_TColStd_Array2OfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: int &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfInteger_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfInteger_Destroy(self, *args)


    def Assign(self, *args) -> "TColStd_Array2OfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfInteger &
        :rtype: TColStd_Array2OfInteger

        """
        return _TColStd.TColStd_Array2OfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array2OfInteger const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfInteger &
        :rtype: TColStd_Array2OfInteger

        """
        return _TColStd.TColStd_Array2OfInteger_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: int &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfInteger_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfInteger_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfInteger
TColStd_Array2OfInteger.Init = new_instancemethod(_TColStd.TColStd_Array2OfInteger_Init, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.Destroy = new_instancemethod(_TColStd.TColStd_Array2OfInteger_Destroy, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.Assign = new_instancemethod(_TColStd.TColStd_Array2OfInteger_Assign, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.Set = new_instancemethod(_TColStd.TColStd_Array2OfInteger_Set, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.ColLength = new_instancemethod(_TColStd.TColStd_Array2OfInteger_ColLength, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.RowLength = new_instancemethod(_TColStd.TColStd_Array2OfInteger_RowLength, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.LowerCol = new_instancemethod(_TColStd.TColStd_Array2OfInteger_LowerCol, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.LowerRow = new_instancemethod(_TColStd.TColStd_Array2OfInteger_LowerRow, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.UpperCol = new_instancemethod(_TColStd.TColStd_Array2OfInteger_UpperCol, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.UpperRow = new_instancemethod(_TColStd.TColStd_Array2OfInteger_UpperRow, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.SetValue = new_instancemethod(_TColStd.TColStd_Array2OfInteger_SetValue, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.Value = new_instancemethod(_TColStd.TColStd_Array2OfInteger_Value, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_Array2OfInteger_ChangeValue, None, TColStd_Array2OfInteger)
TColStd_Array2OfInteger_swigregister = _TColStd.TColStd_Array2OfInteger_swigregister
TColStd_Array2OfInteger_swigregister(TColStd_Array2OfInteger)

class TColStd_Array2OfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: float &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColStd.TColStd_Array2OfReal_swiginit(self, _TColStd.new_TColStd_Array2OfReal(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: float &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfReal_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfReal_Destroy(self, *args)


    def Assign(self, *args) -> "TColStd_Array2OfReal const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfReal &
        :rtype: TColStd_Array2OfReal

        """
        return _TColStd.TColStd_Array2OfReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array2OfReal const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfReal &
        :rtype: TColStd_Array2OfReal

        """
        return _TColStd.TColStd_Array2OfReal_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfReal_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfReal_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _TColStd.TColStd_Array2OfReal_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _TColStd.TColStd_Array2OfReal_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfReal
TColStd_Array2OfReal.Init = new_instancemethod(_TColStd.TColStd_Array2OfReal_Init, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.Destroy = new_instancemethod(_TColStd.TColStd_Array2OfReal_Destroy, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.Assign = new_instancemethod(_TColStd.TColStd_Array2OfReal_Assign, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.Set = new_instancemethod(_TColStd.TColStd_Array2OfReal_Set, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.ColLength = new_instancemethod(_TColStd.TColStd_Array2OfReal_ColLength, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.RowLength = new_instancemethod(_TColStd.TColStd_Array2OfReal_RowLength, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.LowerCol = new_instancemethod(_TColStd.TColStd_Array2OfReal_LowerCol, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.LowerRow = new_instancemethod(_TColStd.TColStd_Array2OfReal_LowerRow, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.UpperCol = new_instancemethod(_TColStd.TColStd_Array2OfReal_UpperCol, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.UpperRow = new_instancemethod(_TColStd.TColStd_Array2OfReal_UpperRow, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.SetValue = new_instancemethod(_TColStd.TColStd_Array2OfReal_SetValue, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.Value = new_instancemethod(_TColStd.TColStd_Array2OfReal_Value, None, TColStd_Array2OfReal)
TColStd_Array2OfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_Array2OfReal_ChangeValue, None, TColStd_Array2OfReal)
TColStd_Array2OfReal_swigregister = _TColStd.TColStd_Array2OfReal_swigregister
TColStd_Array2OfReal_swigregister(TColStd_Array2OfReal)

class TColStd_Array2OfTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param Item:
        :type Item: Handle_Standard_Transient &
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        """
        _TColStd.TColStd_Array2OfTransient_swiginit(self, _TColStd.new_TColStd_Array2OfTransient(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfTransient_Init(self, *args)


    def Destroy(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfTransient_Destroy(self, *args)


    def Assign(self, *args) -> "TColStd_Array2OfTransient const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfTransient &
        :rtype: TColStd_Array2OfTransient

        """
        return _TColStd.TColStd_Array2OfTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_Array2OfTransient const &":
        """
        :param Other:
        :type Other: TColStd_Array2OfTransient &
        :rtype: TColStd_Array2OfTransient

        """
        return _TColStd.TColStd_Array2OfTransient_Set(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_Array2OfTransient_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_Array2OfTransient_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_Array2OfTransient_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_Array2OfTransient_ChangeValue(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_Array2OfTransient
TColStd_Array2OfTransient.Init = new_instancemethod(_TColStd.TColStd_Array2OfTransient_Init, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.Destroy = new_instancemethod(_TColStd.TColStd_Array2OfTransient_Destroy, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.Assign = new_instancemethod(_TColStd.TColStd_Array2OfTransient_Assign, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.Set = new_instancemethod(_TColStd.TColStd_Array2OfTransient_Set, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.ColLength = new_instancemethod(_TColStd.TColStd_Array2OfTransient_ColLength, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.RowLength = new_instancemethod(_TColStd.TColStd_Array2OfTransient_RowLength, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.LowerCol = new_instancemethod(_TColStd.TColStd_Array2OfTransient_LowerCol, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.LowerRow = new_instancemethod(_TColStd.TColStd_Array2OfTransient_LowerRow, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.UpperCol = new_instancemethod(_TColStd.TColStd_Array2OfTransient_UpperCol, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.UpperRow = new_instancemethod(_TColStd.TColStd_Array2OfTransient_UpperRow, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.SetValue = new_instancemethod(_TColStd.TColStd_Array2OfTransient_SetValue, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.Value = new_instancemethod(_TColStd.TColStd_Array2OfTransient_Value, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_Array2OfTransient_ChangeValue, None, TColStd_Array2OfTransient)
TColStd_Array2OfTransient_swigregister = _TColStd.TColStd_Array2OfTransient_swigregister
TColStd_Array2OfTransient_swigregister(TColStd_Array2OfTransient)

class TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfAsciiStringInteger &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfAsciiStringInteger &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Initialize(self, *args)


    def Key(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Key(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger
TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Initialize, None, TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger)
TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Key, None, TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger)
TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_Value, None, TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger)
TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_swigregister
TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger_swigregister(TColStd_DataMapIteratorOfDataMapOfAsciiStringInteger)

class TColStd_DataMapIteratorOfDataMapOfIntegerInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerInteger &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfIntegerInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerInteger &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Key(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfIntegerInteger
TColStd_DataMapIteratorOfDataMapOfIntegerInteger.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Initialize, None, TColStd_DataMapIteratorOfDataMapOfIntegerInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Key, None, TColStd_DataMapIteratorOfDataMapOfIntegerInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerInteger.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_Value, None, TColStd_DataMapIteratorOfDataMapOfIntegerInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerInteger_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerInteger_swigregister
TColStd_DataMapIteratorOfDataMapOfIntegerInteger_swigregister(TColStd_DataMapIteratorOfDataMapOfIntegerInteger)

class TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerListOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Key(self, *args)


    def Value(self, *args) -> "TColStd_ListOfInteger const &":
        """
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger
TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Initialize, None, TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Key, None, TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_Value, None, TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger)
TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister
TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger_swigregister(TColStd_DataMapIteratorOfDataMapOfIntegerListOfInteger)

class TColStd_DataMapIteratorOfDataMapOfIntegerReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerReal &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfIntegerReal(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerReal &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Key(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :rtype: float

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfIntegerReal
TColStd_DataMapIteratorOfDataMapOfIntegerReal.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Initialize, None, TColStd_DataMapIteratorOfDataMapOfIntegerReal)
TColStd_DataMapIteratorOfDataMapOfIntegerReal.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Key, None, TColStd_DataMapIteratorOfDataMapOfIntegerReal)
TColStd_DataMapIteratorOfDataMapOfIntegerReal.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_Value, None, TColStd_DataMapIteratorOfDataMapOfIntegerReal)
TColStd_DataMapIteratorOfDataMapOfIntegerReal_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerReal_swigregister
TColStd_DataMapIteratorOfDataMapOfIntegerReal_swigregister(TColStd_DataMapIteratorOfDataMapOfIntegerReal)

class TColStd_DataMapIteratorOfDataMapOfIntegerTransient(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerTransient &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfIntegerTransient(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfIntegerTransient &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Key(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfIntegerTransient
TColStd_DataMapIteratorOfDataMapOfIntegerTransient.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Initialize, None, TColStd_DataMapIteratorOfDataMapOfIntegerTransient)
TColStd_DataMapIteratorOfDataMapOfIntegerTransient.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Key, None, TColStd_DataMapIteratorOfDataMapOfIntegerTransient)
TColStd_DataMapIteratorOfDataMapOfIntegerTransient.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_Value, None, TColStd_DataMapIteratorOfDataMapOfIntegerTransient)
TColStd_DataMapIteratorOfDataMapOfIntegerTransient_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfIntegerTransient_swigregister
TColStd_DataMapIteratorOfDataMapOfIntegerTransient_swigregister(TColStd_DataMapIteratorOfDataMapOfIntegerTransient)

class TColStd_DataMapIteratorOfDataMapOfStringInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfStringInteger &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfStringInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfStringInteger &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Initialize(self, *args)


    def Key(self, *args) -> "TCollection_ExtendedString const &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Key(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfStringInteger
TColStd_DataMapIteratorOfDataMapOfStringInteger.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Initialize, None, TColStd_DataMapIteratorOfDataMapOfStringInteger)
TColStd_DataMapIteratorOfDataMapOfStringInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Key, None, TColStd_DataMapIteratorOfDataMapOfStringInteger)
TColStd_DataMapIteratorOfDataMapOfStringInteger.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_Value, None, TColStd_DataMapIteratorOfDataMapOfStringInteger)
TColStd_DataMapIteratorOfDataMapOfStringInteger_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfStringInteger_swigregister
TColStd_DataMapIteratorOfDataMapOfStringInteger_swigregister(TColStd_DataMapIteratorOfDataMapOfStringInteger)

class TColStd_DataMapIteratorOfDataMapOfTransientTransient(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_DataMapOfTransientTransient &
        :rtype: None

        """
        _TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_swiginit(self, _TColStd.new_TColStd_DataMapIteratorOfDataMapOfTransientTransient(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_DataMapOfTransientTransient &
        :rtype: None

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Initialize(self, *args)


    def Key(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Key(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapIteratorOfDataMapOfTransientTransient
TColStd_DataMapIteratorOfDataMapOfTransientTransient.Initialize = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Initialize, None, TColStd_DataMapIteratorOfDataMapOfTransientTransient)
TColStd_DataMapIteratorOfDataMapOfTransientTransient.Key = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Key, None, TColStd_DataMapIteratorOfDataMapOfTransientTransient)
TColStd_DataMapIteratorOfDataMapOfTransientTransient.Value = new_instancemethod(_TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_Value, None, TColStd_DataMapIteratorOfDataMapOfTransientTransient)
TColStd_DataMapIteratorOfDataMapOfTransientTransient_swigregister = _TColStd.TColStd_DataMapIteratorOfDataMapOfTransientTransient_swigregister
TColStd_DataMapIteratorOfDataMapOfTransientTransient_swigregister(TColStd_DataMapIteratorOfDataMapOfTransientTransient)

class TColStd_DataMapNodeOfDataMapOfAsciiStringInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger(*args))

    def Key(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_Key(self, *args)


    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_DataMapNodeOfDataMapOfAsciiStringInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_DataMapNodeOfDataMapOfAsciiStringInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger
TColStd_DataMapNodeOfDataMapOfAsciiStringInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_Key, None, TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
TColStd_DataMapNodeOfDataMapOfAsciiStringInteger.GetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_GetValue, None, TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
TColStd_DataMapNodeOfDataMapOfAsciiStringInteger.SetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_SetValue, None, TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister
TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister(TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)

class Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger)

def Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfAsciiStringInteger_DownCast

class TColStd_DataMapNodeOfDataMapOfIntegerInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfIntegerInteger(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(TColStd_DataMapNodeOfDataMapOfIntegerInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(TColStd_DataMapNodeOfDataMapOfIntegerInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_SetKey(self, value)


    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_DataMapNodeOfDataMapOfIntegerInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_DataMapNodeOfDataMapOfIntegerInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfIntegerInteger
TColStd_DataMapNodeOfDataMapOfIntegerInteger.GetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_GetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerInteger)
TColStd_DataMapNodeOfDataMapOfIntegerInteger.SetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_SetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerInteger)
TColStd_DataMapNodeOfDataMapOfIntegerInteger.GetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_GetValue, None, TColStd_DataMapNodeOfDataMapOfIntegerInteger)
TColStd_DataMapNodeOfDataMapOfIntegerInteger.SetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_SetValue, None, TColStd_DataMapNodeOfDataMapOfIntegerInteger)
TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister
TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister(TColStd_DataMapNodeOfDataMapOfIntegerInteger)

class Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger)

def Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerInteger_DownCast

class TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: TColStd_ListOfInteger &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_SetKey(self, value)


    def Value(self, *args) -> "TColStd_ListOfInteger &":
        """
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger
TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger.GetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_GetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger.SetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_SetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger.Value = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_Value, None, TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister
TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister(TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)

class Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger)

def Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerListOfInteger_DownCast

class TColStd_DataMapNodeOfDataMapOfIntegerReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: float &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfIntegerReal(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(TColStd_DataMapNodeOfDataMapOfIntegerReal self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(TColStd_DataMapNodeOfDataMapOfIntegerReal self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_SetKey(self, value)


    def GetValue(self) -> "Standard_Real":
        """GetValue(TColStd_DataMapNodeOfDataMapOfIntegerReal self) -> Standard_Real"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_GetValue(self)


    def SetValue(self, value: 'Standard_Real') -> "void":
        """SetValue(TColStd_DataMapNodeOfDataMapOfIntegerReal self, Standard_Real value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfIntegerReal
TColStd_DataMapNodeOfDataMapOfIntegerReal.GetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_GetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerReal)
TColStd_DataMapNodeOfDataMapOfIntegerReal.SetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_SetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerReal)
TColStd_DataMapNodeOfDataMapOfIntegerReal.GetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_GetValue, None, TColStd_DataMapNodeOfDataMapOfIntegerReal)
TColStd_DataMapNodeOfDataMapOfIntegerReal.SetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_SetValue, None, TColStd_DataMapNodeOfDataMapOfIntegerReal)
TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister
TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister(TColStd_DataMapNodeOfDataMapOfIntegerReal)

class Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal)

def Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerReal_DownCast

class TColStd_DataMapNodeOfDataMapOfIntegerTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfIntegerTransient(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(TColStd_DataMapNodeOfDataMapOfIntegerTransient self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(TColStd_DataMapNodeOfDataMapOfIntegerTransient self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_SetKey(self, value)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfIntegerTransient
TColStd_DataMapNodeOfDataMapOfIntegerTransient.GetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_GetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerTransient)
TColStd_DataMapNodeOfDataMapOfIntegerTransient.SetKey = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_SetKey, None, TColStd_DataMapNodeOfDataMapOfIntegerTransient)
TColStd_DataMapNodeOfDataMapOfIntegerTransient.Value = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_Value, None, TColStd_DataMapNodeOfDataMapOfIntegerTransient)
TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister
TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister(TColStd_DataMapNodeOfDataMapOfIntegerTransient)

class Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient)

def Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfIntegerTransient_DownCast

class TColStd_DataMapNodeOfDataMapOfStringInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfStringInteger(*args))

    def Key(self, *args) -> "TCollection_ExtendedString &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_Key(self, *args)


    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_DataMapNodeOfDataMapOfStringInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_DataMapNodeOfDataMapOfStringInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfStringInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfStringInteger
TColStd_DataMapNodeOfDataMapOfStringInteger.Key = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_Key, None, TColStd_DataMapNodeOfDataMapOfStringInteger)
TColStd_DataMapNodeOfDataMapOfStringInteger.GetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_GetValue, None, TColStd_DataMapNodeOfDataMapOfStringInteger)
TColStd_DataMapNodeOfDataMapOfStringInteger.SetValue = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_SetValue, None, TColStd_DataMapNodeOfDataMapOfStringInteger)
TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister
TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister(TColStd_DataMapNodeOfDataMapOfStringInteger)

class Handle_TColStd_DataMapNodeOfDataMapOfStringInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfStringInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfStringInteger
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfStringInteger)
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfStringInteger)

def Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfStringInteger const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfStringInteger_DownCast

class TColStd_DataMapNodeOfDataMapOfTransientTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_swiginit(self, _TColStd.new_TColStd_DataMapNodeOfDataMapOfTransientTransient(*args))

    def Key(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_Key(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapNodeOfDataMapOfTransientTransient
TColStd_DataMapNodeOfDataMapOfTransientTransient.Key = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_Key, None, TColStd_DataMapNodeOfDataMapOfTransientTransient)
TColStd_DataMapNodeOfDataMapOfTransientTransient.Value = new_instancemethod(_TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_Value, None, TColStd_DataMapNodeOfDataMapOfTransientTransient)
TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister = _TColStd.TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister
TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister(TColStd_DataMapNodeOfDataMapOfTransientTransient)

class Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_swiginit(self, _TColStd.new_Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_Nullify, None, Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient)
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_IsNull, None, Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient)
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient__get_reference, None, Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient)
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_swigregister(Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient)

def Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient const":
    return _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_DownCast(AnObject)
Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_DownCast = _TColStd.Handle_TColStd_DataMapNodeOfDataMapOfTransientTransient_DownCast

class TColStd_DataMapOfAsciiStringInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfAsciiStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapOfAsciiStringInteger(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfAsciiStringInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfAsciiStringInteger &
        :rtype: TColStd_DataMapOfAsciiStringInteger

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfAsciiStringInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfAsciiStringInteger &
        :rtype: TColStd_DataMapOfAsciiStringInteger

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_UnBind(self, *args)


    def Find(self, *args) -> "Standard_Integer const &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Find(self, *args)


    def ChangeFind(self, *args) -> "Standard_Integer &":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_AsciiString &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfAsciiStringInteger
TColStd_DataMapOfAsciiStringInteger.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Assign, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.Set = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Set, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_ReSize, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Clear, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Bind, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_IsBound, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_UnBind, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.Find = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Find, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeFind, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_Find1, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfAsciiStringInteger_ChangeFind1, None, TColStd_DataMapOfAsciiStringInteger)
TColStd_DataMapOfAsciiStringInteger_swigregister = _TColStd.TColStd_DataMapOfAsciiStringInteger_swigregister
TColStd_DataMapOfAsciiStringInteger_swigregister(TColStd_DataMapOfAsciiStringInteger)

class TColStd_DataMapOfIntegerInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfIntegerInteger_swiginit(self, _TColStd.new_TColStd_DataMapOfIntegerInteger(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfIntegerInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerInteger &
        :rtype: TColStd_DataMapOfIntegerInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfIntegerInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerInteger &
        :rtype: TColStd_DataMapOfIntegerInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_UnBind(self, *args)


    def Find(self, *args) -> "Standard_Integer const &":
        """
        :param K:
        :type K: int &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Find(self, *args)


    def ChangeFind(self, *args) -> "Standard_Integer &":
        """
        :param K:
        :type K: int &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerInteger_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerInteger
TColStd_DataMapOfIntegerInteger.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Assign, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.Set = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Set, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_ReSize, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Clear, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Bind, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_IsBound, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_UnBind, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.Find = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Find, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_ChangeFind, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_Find1, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerInteger_ChangeFind1, None, TColStd_DataMapOfIntegerInteger)
TColStd_DataMapOfIntegerInteger_swigregister = _TColStd.TColStd_DataMapOfIntegerInteger_swigregister
TColStd_DataMapOfIntegerInteger_swigregister(TColStd_DataMapOfIntegerInteger)

class TColStd_DataMapOfIntegerListOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfIntegerListOfInteger_swiginit(self, _TColStd.new_TColStd_DataMapOfIntegerListOfInteger(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfIntegerListOfInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerListOfInteger &
        :rtype: TColStd_DataMapOfIntegerListOfInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfIntegerListOfInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerListOfInteger &
        :rtype: TColStd_DataMapOfIntegerListOfInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: TColStd_ListOfInteger &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_UnBind(self, *args)


    def Find(self, *args) -> "TColStd_ListOfInteger const &":
        """
        :param K:
        :type K: int &
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Find(self, *args)


    def ChangeFind(self, *args) -> "TColStd_ListOfInteger &":
        """
        :param K:
        :type K: int &
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerListOfInteger
TColStd_DataMapOfIntegerListOfInteger.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Assign, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.Set = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Set, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_ReSize, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Clear, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Bind, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_IsBound, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_UnBind, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.Find = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Find, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeFind, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_Find1, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerListOfInteger_ChangeFind1, None, TColStd_DataMapOfIntegerListOfInteger)
TColStd_DataMapOfIntegerListOfInteger_swigregister = _TColStd.TColStd_DataMapOfIntegerListOfInteger_swigregister
TColStd_DataMapOfIntegerListOfInteger_swigregister(TColStd_DataMapOfIntegerListOfInteger)

class TColStd_DataMapOfIntegerReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfIntegerReal_swiginit(self, _TColStd.new_TColStd_DataMapOfIntegerReal(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfIntegerReal &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerReal &
        :rtype: TColStd_DataMapOfIntegerReal

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfIntegerReal &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerReal &
        :rtype: TColStd_DataMapOfIntegerReal

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: float &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_UnBind(self, *args)


    def Find(self, *args) -> "Standard_Real const &":
        """
        :param K:
        :type K: int &
        :rtype: float

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Find(self, *args)


    def ChangeFind(self, *args) -> "Standard_Real &":
        """
        :param K:
        :type K: int &
        :rtype: float

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerReal_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerReal
TColStd_DataMapOfIntegerReal.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Assign, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.Set = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Set, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_ReSize, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Clear, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Bind, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_IsBound, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_UnBind, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.Find = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Find, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_ChangeFind, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_Find1, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerReal_ChangeFind1, None, TColStd_DataMapOfIntegerReal)
TColStd_DataMapOfIntegerReal_swigregister = _TColStd.TColStd_DataMapOfIntegerReal_swigregister
TColStd_DataMapOfIntegerReal_swigregister(TColStd_DataMapOfIntegerReal)

class TColStd_DataMapOfIntegerTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfIntegerTransient_swiginit(self, _TColStd.new_TColStd_DataMapOfIntegerTransient(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfIntegerTransient &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerTransient &
        :rtype: TColStd_DataMapOfIntegerTransient

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfIntegerTransient &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfIntegerTransient &
        :rtype: TColStd_DataMapOfIntegerTransient

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_UnBind(self, *args)


    def Find(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: int &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: int &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: int &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfIntegerTransient_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfIntegerTransient
TColStd_DataMapOfIntegerTransient.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Assign, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.Set = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Set, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_ReSize, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Clear, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Bind, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_IsBound, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_UnBind, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.Find = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Find, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_ChangeFind, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_Find1, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfIntegerTransient_ChangeFind1, None, TColStd_DataMapOfIntegerTransient)
TColStd_DataMapOfIntegerTransient_swigregister = _TColStd.TColStd_DataMapOfIntegerTransient_swigregister
TColStd_DataMapOfIntegerTransient_swigregister(TColStd_DataMapOfIntegerTransient)

class TColStd_DataMapOfStringInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfStringInteger_swiginit(self, _TColStd.new_TColStd_DataMapOfStringInteger(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfStringInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfStringInteger &
        :rtype: TColStd_DataMapOfStringInteger

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfStringInteger &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfStringInteger &
        :rtype: TColStd_DataMapOfStringInteger

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfStringInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :param I:
        :type I: int &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfStringInteger_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfStringInteger_UnBind(self, *args)


    def Find(self, *args) -> "Standard_Integer const &":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Find(self, *args)


    def ChangeFind(self, *args) -> "Standard_Integer &":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: int

        """
        return _TColStd.TColStd_DataMapOfStringInteger_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfStringInteger_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: TCollection_ExtendedString &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfStringInteger_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfStringInteger
TColStd_DataMapOfStringInteger.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Assign, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.Set = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Set, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_ReSize, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Clear, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Bind, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_IsBound, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_UnBind, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.Find = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Find, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_ChangeFind, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_Find1, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfStringInteger_ChangeFind1, None, TColStd_DataMapOfStringInteger)
TColStd_DataMapOfStringInteger_swigregister = _TColStd.TColStd_DataMapOfStringInteger_swigregister
TColStd_DataMapOfStringInteger_swigregister(TColStd_DataMapOfStringInteger)

class TColStd_DataMapOfTransientTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_DataMapOfTransientTransient_swiginit(self, _TColStd.new_TColStd_DataMapOfTransientTransient(*args))

    def Assign(self, *args) -> "TColStd_DataMapOfTransientTransient &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfTransientTransient &
        :rtype: TColStd_DataMapOfTransientTransient

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_DataMapOfTransientTransient &":
        """
        :param Other:
        :type Other: TColStd_DataMapOfTransientTransient &
        :rtype: TColStd_DataMapOfTransientTransient

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Clear(self, *args)


    def Bind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Bind(self, *args)


    def IsBound(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_IsBound(self, *args)


    def UnBind(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_UnBind(self, *args)


    def Find(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Find(self, *args)


    def ChangeFind(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_ChangeFind(self, *args)


    def Find1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_Find1(self, *args)


    def ChangeFind1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_DataMapOfTransientTransient_ChangeFind1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_DataMapOfTransientTransient
TColStd_DataMapOfTransientTransient.Assign = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Assign, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.Set = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Set, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.ReSize = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_ReSize, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.Clear = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Clear, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.Bind = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Bind, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.IsBound = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_IsBound, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.UnBind = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_UnBind, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.Find = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Find, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.ChangeFind = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_ChangeFind, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.Find1 = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_Find1, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient.ChangeFind1 = new_instancemethod(_TColStd.TColStd_DataMapOfTransientTransient_ChangeFind1, None, TColStd_DataMapOfTransientTransient)
TColStd_DataMapOfTransientTransient_swigregister = _TColStd.TColStd_DataMapOfTransientTransient_swigregister
TColStd_DataMapOfTransientTransient_swigregister(TColStd_DataMapOfTransientTransient)

class TColStd_HArray1OfAsciiString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TCollection_AsciiString &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfAsciiString_swiginit(self, _TColStd.new_TColStd_HArray1OfAsciiString(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfAsciiString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_AsciiString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_HArray1OfAsciiString_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfAsciiString const &":
        """
        :rtype: TColStd_Array1OfAsciiString

        """
        return _TColStd.TColStd_HArray1OfAsciiString_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfAsciiString &":
        """
        :rtype: TColStd_Array1OfAsciiString

        """
        return _TColStd.TColStd_HArray1OfAsciiString_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfAsciiString
TColStd_HArray1OfAsciiString.Init = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Init, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.Length = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Length, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Lower, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Upper, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_SetValue, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.Value = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Value, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_ChangeValue, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_Array1, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfAsciiString_ChangeArray1, None, TColStd_HArray1OfAsciiString)
TColStd_HArray1OfAsciiString_swigregister = _TColStd.TColStd_HArray1OfAsciiString_swigregister
TColStd_HArray1OfAsciiString_swigregister(TColStd_HArray1OfAsciiString)

class Handle_TColStd_HArray1OfAsciiString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfAsciiString
Handle_TColStd_HArray1OfAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfAsciiString_Nullify, None, Handle_TColStd_HArray1OfAsciiString)
Handle_TColStd_HArray1OfAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfAsciiString_IsNull, None, Handle_TColStd_HArray1OfAsciiString)
Handle_TColStd_HArray1OfAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfAsciiString__get_reference, None, Handle_TColStd_HArray1OfAsciiString)
Handle_TColStd_HArray1OfAsciiString_swigregister = _TColStd.Handle_TColStd_HArray1OfAsciiString_swigregister
Handle_TColStd_HArray1OfAsciiString_swigregister(Handle_TColStd_HArray1OfAsciiString)

def Handle_TColStd_HArray1OfAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfAsciiString const":
    return _TColStd.Handle_TColStd_HArray1OfAsciiString_DownCast(AnObject)
Handle_TColStd_HArray1OfAsciiString_DownCast = _TColStd.Handle_TColStd_HArray1OfAsciiString_DownCast

class TColStd_HArray1OfBoolean(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: bool
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfBoolean_swiginit(self, _TColStd.new_TColStd_HArray1OfBoolean(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: bool
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfBoolean_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfBoolean_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfBoolean_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfBoolean_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: bool
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfBoolean_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Boolean const &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_HArray1OfBoolean_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Boolean &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_HArray1OfBoolean_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfBoolean const &":
        """
        :rtype: TColStd_Array1OfBoolean

        """
        return _TColStd.TColStd_HArray1OfBoolean_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfBoolean &":
        """
        :rtype: TColStd_Array1OfBoolean

        """
        return _TColStd.TColStd_HArray1OfBoolean_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfBoolean(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfBoolean
TColStd_HArray1OfBoolean.Init = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Init, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.Length = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Length, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Lower, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Upper, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_SetValue, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.Value = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Value, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_ChangeValue, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_Array1, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfBoolean_ChangeArray1, None, TColStd_HArray1OfBoolean)
TColStd_HArray1OfBoolean_swigregister = _TColStd.TColStd_HArray1OfBoolean_swigregister
TColStd_HArray1OfBoolean_swigregister(TColStd_HArray1OfBoolean)

class Handle_TColStd_HArray1OfBoolean(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfBoolean_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfBoolean(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfBoolean_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfBoolean
Handle_TColStd_HArray1OfBoolean.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfBoolean_Nullify, None, Handle_TColStd_HArray1OfBoolean)
Handle_TColStd_HArray1OfBoolean.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfBoolean_IsNull, None, Handle_TColStd_HArray1OfBoolean)
Handle_TColStd_HArray1OfBoolean._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfBoolean__get_reference, None, Handle_TColStd_HArray1OfBoolean)
Handle_TColStd_HArray1OfBoolean_swigregister = _TColStd.Handle_TColStd_HArray1OfBoolean_swigregister
Handle_TColStd_HArray1OfBoolean_swigregister(Handle_TColStd_HArray1OfBoolean)

def Handle_TColStd_HArray1OfBoolean_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfBoolean const":
    return _TColStd.Handle_TColStd_HArray1OfBoolean_DownCast(AnObject)
Handle_TColStd_HArray1OfBoolean_DownCast = _TColStd.Handle_TColStd_HArray1OfBoolean_DownCast

class TColStd_HArray1OfByte(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Standard_Byte &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfByte_swiginit(self, _TColStd.new_TColStd_HArray1OfByte(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Byte &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfByte_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfByte_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfByte_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfByte_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Standard_Byte &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfByte_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Byte const &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Byte

        """
        return _TColStd.TColStd_HArray1OfByte_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Byte &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Byte

        """
        return _TColStd.TColStd_HArray1OfByte_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfByte const &":
        """
        :rtype: TColStd_Array1OfByte

        """
        return _TColStd.TColStd_HArray1OfByte_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfByte &":
        """
        :rtype: TColStd_Array1OfByte

        """
        return _TColStd.TColStd_HArray1OfByte_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfByte(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfByte
TColStd_HArray1OfByte.Init = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Init, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.Length = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Length, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Lower, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Upper, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfByte_SetValue, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.Value = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Value, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfByte_ChangeValue, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfByte_Array1, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfByte_ChangeArray1, None, TColStd_HArray1OfByte)
TColStd_HArray1OfByte_swigregister = _TColStd.TColStd_HArray1OfByte_swigregister
TColStd_HArray1OfByte_swigregister(TColStd_HArray1OfByte)

class Handle_TColStd_HArray1OfByte(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfByte_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfByte(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfByte_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfByte
Handle_TColStd_HArray1OfByte.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfByte_Nullify, None, Handle_TColStd_HArray1OfByte)
Handle_TColStd_HArray1OfByte.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfByte_IsNull, None, Handle_TColStd_HArray1OfByte)
Handle_TColStd_HArray1OfByte._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfByte__get_reference, None, Handle_TColStd_HArray1OfByte)
Handle_TColStd_HArray1OfByte_swigregister = _TColStd.Handle_TColStd_HArray1OfByte_swigregister
Handle_TColStd_HArray1OfByte_swigregister(Handle_TColStd_HArray1OfByte)

def Handle_TColStd_HArray1OfByte_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfByte const":
    return _TColStd.Handle_TColStd_HArray1OfByte_DownCast(AnObject)
Handle_TColStd_HArray1OfByte_DownCast = _TColStd.Handle_TColStd_HArray1OfByte_DownCast

class TColStd_HArray1OfCharacter(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfCharacter_swiginit(self, _TColStd.new_TColStd_HArray1OfCharacter(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfCharacter_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfCharacter_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfCharacter_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfCharacter_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfCharacter_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Character const &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_HArray1OfCharacter_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Character &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_HArray1OfCharacter_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfCharacter const &":
        """
        :rtype: TColStd_Array1OfCharacter

        """
        return _TColStd.TColStd_HArray1OfCharacter_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfCharacter &":
        """
        :rtype: TColStd_Array1OfCharacter

        """
        return _TColStd.TColStd_HArray1OfCharacter_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfCharacter(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfCharacter
TColStd_HArray1OfCharacter.Init = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Init, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.Length = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Length, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Lower, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Upper, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_SetValue, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.Value = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Value, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_ChangeValue, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_Array1, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfCharacter_ChangeArray1, None, TColStd_HArray1OfCharacter)
TColStd_HArray1OfCharacter_swigregister = _TColStd.TColStd_HArray1OfCharacter_swigregister
TColStd_HArray1OfCharacter_swigregister(TColStd_HArray1OfCharacter)

class Handle_TColStd_HArray1OfCharacter(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfCharacter_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfCharacter(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfCharacter_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfCharacter
Handle_TColStd_HArray1OfCharacter.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfCharacter_Nullify, None, Handle_TColStd_HArray1OfCharacter)
Handle_TColStd_HArray1OfCharacter.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfCharacter_IsNull, None, Handle_TColStd_HArray1OfCharacter)
Handle_TColStd_HArray1OfCharacter._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfCharacter__get_reference, None, Handle_TColStd_HArray1OfCharacter)
Handle_TColStd_HArray1OfCharacter_swigregister = _TColStd.Handle_TColStd_HArray1OfCharacter_swigregister
Handle_TColStd_HArray1OfCharacter_swigregister(Handle_TColStd_HArray1OfCharacter)

def Handle_TColStd_HArray1OfCharacter_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfCharacter const":
    return _TColStd.Handle_TColStd_HArray1OfCharacter_DownCast(AnObject)
Handle_TColStd_HArray1OfCharacter_DownCast = _TColStd.Handle_TColStd_HArray1OfCharacter_DownCast

class TColStd_HArray1OfExtendedString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TCollection_ExtendedString &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfExtendedString_swiginit(self, _TColStd.new_TColStd_HArray1OfExtendedString(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfExtendedString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_ExtendedString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_HArray1OfExtendedString_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfExtendedString const &":
        """
        :rtype: TColStd_Array1OfExtendedString

        """
        return _TColStd.TColStd_HArray1OfExtendedString_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfExtendedString &":
        """
        :rtype: TColStd_Array1OfExtendedString

        """
        return _TColStd.TColStd_HArray1OfExtendedString_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfExtendedString
TColStd_HArray1OfExtendedString.Init = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Init, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.Length = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Length, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Lower, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Upper, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_SetValue, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.Value = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Value, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_ChangeValue, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_Array1, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfExtendedString_ChangeArray1, None, TColStd_HArray1OfExtendedString)
TColStd_HArray1OfExtendedString_swigregister = _TColStd.TColStd_HArray1OfExtendedString_swigregister
TColStd_HArray1OfExtendedString_swigregister(TColStd_HArray1OfExtendedString)

class Handle_TColStd_HArray1OfExtendedString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfExtendedString_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfExtendedString
Handle_TColStd_HArray1OfExtendedString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfExtendedString_Nullify, None, Handle_TColStd_HArray1OfExtendedString)
Handle_TColStd_HArray1OfExtendedString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfExtendedString_IsNull, None, Handle_TColStd_HArray1OfExtendedString)
Handle_TColStd_HArray1OfExtendedString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfExtendedString__get_reference, None, Handle_TColStd_HArray1OfExtendedString)
Handle_TColStd_HArray1OfExtendedString_swigregister = _TColStd.Handle_TColStd_HArray1OfExtendedString_swigregister
Handle_TColStd_HArray1OfExtendedString_swigregister(Handle_TColStd_HArray1OfExtendedString)

def Handle_TColStd_HArray1OfExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfExtendedString const":
    return _TColStd.Handle_TColStd_HArray1OfExtendedString_DownCast(AnObject)
Handle_TColStd_HArray1OfExtendedString_DownCast = _TColStd.Handle_TColStd_HArray1OfExtendedString_DownCast

class TColStd_HArray1OfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: int &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfInteger_swiginit(self, _TColStd.new_TColStd_HArray1OfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: int &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfInteger_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfInteger_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfInteger_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfInteger_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: int &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfInteger_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfInteger_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfInteger const &":
        """
        :rtype: TColStd_Array1OfInteger

        """
        return _TColStd.TColStd_HArray1OfInteger_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfInteger &":
        """
        :rtype: TColStd_Array1OfInteger

        """
        return _TColStd.TColStd_HArray1OfInteger_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfInteger
TColStd_HArray1OfInteger.Init = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Init, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.Length = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Length, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Lower, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Upper, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_SetValue, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.Value = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Value, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_ChangeValue, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_Array1, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfInteger_ChangeArray1, None, TColStd_HArray1OfInteger)
TColStd_HArray1OfInteger_swigregister = _TColStd.TColStd_HArray1OfInteger_swigregister
TColStd_HArray1OfInteger_swigregister(TColStd_HArray1OfInteger)

class Handle_TColStd_HArray1OfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfInteger_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfInteger
Handle_TColStd_HArray1OfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfInteger_Nullify, None, Handle_TColStd_HArray1OfInteger)
Handle_TColStd_HArray1OfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfInteger_IsNull, None, Handle_TColStd_HArray1OfInteger)
Handle_TColStd_HArray1OfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfInteger__get_reference, None, Handle_TColStd_HArray1OfInteger)
Handle_TColStd_HArray1OfInteger_swigregister = _TColStd.Handle_TColStd_HArray1OfInteger_swigregister
Handle_TColStd_HArray1OfInteger_swigregister(Handle_TColStd_HArray1OfInteger)

def Handle_TColStd_HArray1OfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfInteger const":
    return _TColStd.Handle_TColStd_HArray1OfInteger_DownCast(AnObject)
Handle_TColStd_HArray1OfInteger_DownCast = _TColStd.Handle_TColStd_HArray1OfInteger_DownCast

class TColStd_HArray1OfListOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: TColStd_ListOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfListOfInteger_swiginit(self, _TColStd.new_TColStd_HArray1OfListOfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_SetValue(self, *args)


    def Value(self, *args) -> "TColStd_ListOfInteger const &":
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "TColStd_ListOfInteger &":
        """
        :param Index:
        :type Index: int
        :rtype: TColStd_ListOfInteger

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfListOfInteger const &":
        """
        :rtype: TColStd_Array1OfListOfInteger

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfListOfInteger &":
        """
        :rtype: TColStd_Array1OfListOfInteger

        """
        return _TColStd.TColStd_HArray1OfListOfInteger_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfListOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfListOfInteger
TColStd_HArray1OfListOfInteger.Init = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Init, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.Length = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Length, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Lower, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Upper, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_SetValue, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.Value = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Value, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_ChangeValue, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_Array1, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfListOfInteger_ChangeArray1, None, TColStd_HArray1OfListOfInteger)
TColStd_HArray1OfListOfInteger_swigregister = _TColStd.TColStd_HArray1OfListOfInteger_swigregister
TColStd_HArray1OfListOfInteger_swigregister(TColStd_HArray1OfListOfInteger)

class Handle_TColStd_HArray1OfListOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfListOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfListOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfListOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfListOfInteger
Handle_TColStd_HArray1OfListOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfListOfInteger_Nullify, None, Handle_TColStd_HArray1OfListOfInteger)
Handle_TColStd_HArray1OfListOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfListOfInteger_IsNull, None, Handle_TColStd_HArray1OfListOfInteger)
Handle_TColStd_HArray1OfListOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfListOfInteger__get_reference, None, Handle_TColStd_HArray1OfListOfInteger)
Handle_TColStd_HArray1OfListOfInteger_swigregister = _TColStd.Handle_TColStd_HArray1OfListOfInteger_swigregister
Handle_TColStd_HArray1OfListOfInteger_swigregister(Handle_TColStd_HArray1OfListOfInteger)

def Handle_TColStd_HArray1OfListOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfListOfInteger const":
    return _TColStd.Handle_TColStd_HArray1OfListOfInteger_DownCast(AnObject)
Handle_TColStd_HArray1OfListOfInteger_DownCast = _TColStd.Handle_TColStd_HArray1OfListOfInteger_DownCast

class TColStd_HArray1OfReal(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: float &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfReal_swiginit(self, _TColStd.new_TColStd_HArray1OfReal(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: float &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfReal_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfReal_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfReal_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfReal_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: float &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfReal_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_HArray1OfReal_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_HArray1OfReal_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfReal const &":
        """
        :rtype: TColStd_Array1OfReal

        """
        return _TColStd.TColStd_HArray1OfReal_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfReal &":
        """
        :rtype: TColStd_Array1OfReal

        """
        return _TColStd.TColStd_HArray1OfReal_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfReal
TColStd_HArray1OfReal.Init = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Init, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.Length = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Length, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Lower, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Upper, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfReal_SetValue, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.Value = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Value, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfReal_ChangeValue, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfReal_Array1, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfReal_ChangeArray1, None, TColStd_HArray1OfReal)
TColStd_HArray1OfReal_swigregister = _TColStd.TColStd_HArray1OfReal_swigregister
TColStd_HArray1OfReal_swigregister(TColStd_HArray1OfReal)

class Handle_TColStd_HArray1OfReal(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfReal_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfReal
Handle_TColStd_HArray1OfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfReal_Nullify, None, Handle_TColStd_HArray1OfReal)
Handle_TColStd_HArray1OfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfReal_IsNull, None, Handle_TColStd_HArray1OfReal)
Handle_TColStd_HArray1OfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfReal__get_reference, None, Handle_TColStd_HArray1OfReal)
Handle_TColStd_HArray1OfReal_swigregister = _TColStd.Handle_TColStd_HArray1OfReal_swigregister
Handle_TColStd_HArray1OfReal_swigregister(Handle_TColStd_HArray1OfReal)

def Handle_TColStd_HArray1OfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfReal const":
    return _TColStd.Handle_TColStd_HArray1OfReal_DownCast(AnObject)
Handle_TColStd_HArray1OfReal_DownCast = _TColStd.Handle_TColStd_HArray1OfReal_DownCast

class TColStd_HArray1OfTransient(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :rtype: None

        :param Low:
        :type Low: int
        :param Up:
        :type Up: int
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        _TColStd.TColStd_HArray1OfTransient_swiginit(self, _TColStd.new_TColStd_HArray1OfTransient(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfTransient_Init(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfTransient_Length(self, *args)


    def Lower(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfTransient_Lower(self, *args)


    def Upper(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray1OfTransient_Upper(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Value:
        :type Value: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_HArray1OfTransient_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HArray1OfTransient_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HArray1OfTransient_ChangeValue(self, *args)


    def Array1(self, *args) -> "TColStd_Array1OfTransient const &":
        """
        :rtype: TColStd_Array1OfTransient

        """
        return _TColStd.TColStd_HArray1OfTransient_Array1(self, *args)


    def ChangeArray1(self, *args) -> "TColStd_Array1OfTransient &":
        """
        :rtype: TColStd_Array1OfTransient

        """
        return _TColStd.TColStd_HArray1OfTransient_ChangeArray1(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray1OfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray1OfTransient
TColStd_HArray1OfTransient.Init = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Init, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.Length = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Length, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.Lower = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Lower, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.Upper = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Upper, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.SetValue = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_SetValue, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.Value = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Value, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_ChangeValue, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.Array1 = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_Array1, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient.ChangeArray1 = new_instancemethod(_TColStd.TColStd_HArray1OfTransient_ChangeArray1, None, TColStd_HArray1OfTransient)
TColStd_HArray1OfTransient_swigregister = _TColStd.TColStd_HArray1OfTransient_swigregister
TColStd_HArray1OfTransient_swigregister(TColStd_HArray1OfTransient)

class Handle_TColStd_HArray1OfTransient(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray1OfTransient_swiginit(self, _TColStd.new_Handle_TColStd_HArray1OfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray1OfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray1OfTransient
Handle_TColStd_HArray1OfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfTransient_Nullify, None, Handle_TColStd_HArray1OfTransient)
Handle_TColStd_HArray1OfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfTransient_IsNull, None, Handle_TColStd_HArray1OfTransient)
Handle_TColStd_HArray1OfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray1OfTransient__get_reference, None, Handle_TColStd_HArray1OfTransient)
Handle_TColStd_HArray1OfTransient_swigregister = _TColStd.Handle_TColStd_HArray1OfTransient_swigregister
Handle_TColStd_HArray1OfTransient_swigregister(Handle_TColStd_HArray1OfTransient)

def Handle_TColStd_HArray1OfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray1OfTransient const":
    return _TColStd.Handle_TColStd_HArray1OfTransient_DownCast(AnObject)
Handle_TColStd_HArray1OfTransient_DownCast = _TColStd.Handle_TColStd_HArray1OfTransient_DownCast

class TColStd_HArray2OfBoolean(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: bool
        :rtype: None

        """
        _TColStd.TColStd_HArray2OfBoolean_swiginit(self, _TColStd.new_TColStd_HArray2OfBoolean(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: bool
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfBoolean_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfBoolean_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: bool
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfBoolean_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Boolean const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: bool

        """
        return _TColStd.TColStd_HArray2OfBoolean_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Boolean &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: bool

        """
        return _TColStd.TColStd_HArray2OfBoolean_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColStd_Array2OfBoolean const &":
        """
        :rtype: TColStd_Array2OfBoolean

        """
        return _TColStd.TColStd_HArray2OfBoolean_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColStd_Array2OfBoolean &":
        """
        :rtype: TColStd_Array2OfBoolean

        """
        return _TColStd.TColStd_HArray2OfBoolean_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray2OfBoolean(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfBoolean
TColStd_HArray2OfBoolean.Init = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_Init, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.ColLength = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_ColLength, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.RowLength = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_RowLength, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.LowerCol = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_LowerCol, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.LowerRow = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_LowerRow, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.UpperCol = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_UpperCol, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.UpperRow = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_UpperRow, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_SetValue, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.Value = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_Value, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_ChangeValue, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.Array2 = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_Array2, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean.ChangeArray2 = new_instancemethod(_TColStd.TColStd_HArray2OfBoolean_ChangeArray2, None, TColStd_HArray2OfBoolean)
TColStd_HArray2OfBoolean_swigregister = _TColStd.TColStd_HArray2OfBoolean_swigregister
TColStd_HArray2OfBoolean_swigregister(TColStd_HArray2OfBoolean)

class Handle_TColStd_HArray2OfBoolean(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray2OfBoolean_swiginit(self, _TColStd.new_Handle_TColStd_HArray2OfBoolean(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray2OfBoolean_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray2OfBoolean
Handle_TColStd_HArray2OfBoolean.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfBoolean_Nullify, None, Handle_TColStd_HArray2OfBoolean)
Handle_TColStd_HArray2OfBoolean.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfBoolean_IsNull, None, Handle_TColStd_HArray2OfBoolean)
Handle_TColStd_HArray2OfBoolean._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfBoolean__get_reference, None, Handle_TColStd_HArray2OfBoolean)
Handle_TColStd_HArray2OfBoolean_swigregister = _TColStd.Handle_TColStd_HArray2OfBoolean_swigregister
Handle_TColStd_HArray2OfBoolean_swigregister(Handle_TColStd_HArray2OfBoolean)

def Handle_TColStd_HArray2OfBoolean_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray2OfBoolean const":
    return _TColStd.Handle_TColStd_HArray2OfBoolean_DownCast(AnObject)
Handle_TColStd_HArray2OfBoolean_DownCast = _TColStd.Handle_TColStd_HArray2OfBoolean_DownCast

class TColStd_HArray2OfCharacter(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        _TColStd.TColStd_HArray2OfCharacter_swiginit(self, _TColStd.new_TColStd_HArray2OfCharacter(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfCharacter_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfCharacter_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Standard_Character &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfCharacter_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Character const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_HArray2OfCharacter_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Character &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Standard_Character

        """
        return _TColStd.TColStd_HArray2OfCharacter_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColStd_Array2OfCharacter const &":
        """
        :rtype: TColStd_Array2OfCharacter

        """
        return _TColStd.TColStd_HArray2OfCharacter_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColStd_Array2OfCharacter &":
        """
        :rtype: TColStd_Array2OfCharacter

        """
        return _TColStd.TColStd_HArray2OfCharacter_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray2OfCharacter(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfCharacter
TColStd_HArray2OfCharacter.Init = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_Init, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.ColLength = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_ColLength, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.RowLength = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_RowLength, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.LowerCol = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_LowerCol, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.LowerRow = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_LowerRow, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.UpperCol = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_UpperCol, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.UpperRow = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_UpperRow, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.SetValue = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_SetValue, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.Value = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_Value, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_ChangeValue, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.Array2 = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_Array2, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter.ChangeArray2 = new_instancemethod(_TColStd.TColStd_HArray2OfCharacter_ChangeArray2, None, TColStd_HArray2OfCharacter)
TColStd_HArray2OfCharacter_swigregister = _TColStd.TColStd_HArray2OfCharacter_swigregister
TColStd_HArray2OfCharacter_swigregister(TColStd_HArray2OfCharacter)

class Handle_TColStd_HArray2OfCharacter(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray2OfCharacter_swiginit(self, _TColStd.new_Handle_TColStd_HArray2OfCharacter(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray2OfCharacter_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray2OfCharacter
Handle_TColStd_HArray2OfCharacter.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfCharacter_Nullify, None, Handle_TColStd_HArray2OfCharacter)
Handle_TColStd_HArray2OfCharacter.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfCharacter_IsNull, None, Handle_TColStd_HArray2OfCharacter)
Handle_TColStd_HArray2OfCharacter._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfCharacter__get_reference, None, Handle_TColStd_HArray2OfCharacter)
Handle_TColStd_HArray2OfCharacter_swigregister = _TColStd.Handle_TColStd_HArray2OfCharacter_swigregister
Handle_TColStd_HArray2OfCharacter_swigregister(Handle_TColStd_HArray2OfCharacter)

def Handle_TColStd_HArray2OfCharacter_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray2OfCharacter const":
    return _TColStd.Handle_TColStd_HArray2OfCharacter_DownCast(AnObject)
Handle_TColStd_HArray2OfCharacter_DownCast = _TColStd.Handle_TColStd_HArray2OfCharacter_DownCast

class TColStd_HArray2OfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: int &
        :rtype: None

        """
        _TColStd.TColStd_HArray2OfInteger_swiginit(self, _TColStd.new_TColStd_HArray2OfInteger(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: int &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfInteger_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: int &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfInteger_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfInteger_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColStd_Array2OfInteger const &":
        """
        :rtype: TColStd_Array2OfInteger

        """
        return _TColStd.TColStd_HArray2OfInteger_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColStd_Array2OfInteger &":
        """
        :rtype: TColStd_Array2OfInteger

        """
        return _TColStd.TColStd_HArray2OfInteger_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray2OfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfInteger
TColStd_HArray2OfInteger.Init = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_Init, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.ColLength = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_ColLength, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.RowLength = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_RowLength, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.LowerCol = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_LowerCol, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.LowerRow = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_LowerRow, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.UpperCol = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_UpperCol, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.UpperRow = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_UpperRow, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.SetValue = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_SetValue, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.Value = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_Value, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_ChangeValue, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.Array2 = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_Array2, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger.ChangeArray2 = new_instancemethod(_TColStd.TColStd_HArray2OfInteger_ChangeArray2, None, TColStd_HArray2OfInteger)
TColStd_HArray2OfInteger_swigregister = _TColStd.TColStd_HArray2OfInteger_swigregister
TColStd_HArray2OfInteger_swigregister(TColStd_HArray2OfInteger)

class Handle_TColStd_HArray2OfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray2OfInteger_swiginit(self, _TColStd.new_Handle_TColStd_HArray2OfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray2OfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray2OfInteger
Handle_TColStd_HArray2OfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfInteger_Nullify, None, Handle_TColStd_HArray2OfInteger)
Handle_TColStd_HArray2OfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfInteger_IsNull, None, Handle_TColStd_HArray2OfInteger)
Handle_TColStd_HArray2OfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfInteger__get_reference, None, Handle_TColStd_HArray2OfInteger)
Handle_TColStd_HArray2OfInteger_swigregister = _TColStd.Handle_TColStd_HArray2OfInteger_swigregister
Handle_TColStd_HArray2OfInteger_swigregister(Handle_TColStd_HArray2OfInteger)

def Handle_TColStd_HArray2OfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray2OfInteger const":
    return _TColStd.Handle_TColStd_HArray2OfInteger_DownCast(AnObject)
Handle_TColStd_HArray2OfInteger_DownCast = _TColStd.Handle_TColStd_HArray2OfInteger_DownCast

class TColStd_HArray2OfReal(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: float &
        :rtype: None

        """
        _TColStd.TColStd_HArray2OfReal_swiginit(self, _TColStd.new_TColStd_HArray2OfReal(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: float &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfReal_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfReal_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: float &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfReal_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _TColStd.TColStd_HArray2OfReal_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: float

        """
        return _TColStd.TColStd_HArray2OfReal_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColStd_Array2OfReal const &":
        """
        :rtype: TColStd_Array2OfReal

        """
        return _TColStd.TColStd_HArray2OfReal_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColStd_Array2OfReal &":
        """
        :rtype: TColStd_Array2OfReal

        """
        return _TColStd.TColStd_HArray2OfReal_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray2OfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfReal
TColStd_HArray2OfReal.Init = new_instancemethod(_TColStd.TColStd_HArray2OfReal_Init, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.ColLength = new_instancemethod(_TColStd.TColStd_HArray2OfReal_ColLength, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.RowLength = new_instancemethod(_TColStd.TColStd_HArray2OfReal_RowLength, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.LowerCol = new_instancemethod(_TColStd.TColStd_HArray2OfReal_LowerCol, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.LowerRow = new_instancemethod(_TColStd.TColStd_HArray2OfReal_LowerRow, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.UpperCol = new_instancemethod(_TColStd.TColStd_HArray2OfReal_UpperCol, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.UpperRow = new_instancemethod(_TColStd.TColStd_HArray2OfReal_UpperRow, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.SetValue = new_instancemethod(_TColStd.TColStd_HArray2OfReal_SetValue, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.Value = new_instancemethod(_TColStd.TColStd_HArray2OfReal_Value, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray2OfReal_ChangeValue, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.Array2 = new_instancemethod(_TColStd.TColStd_HArray2OfReal_Array2, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal.ChangeArray2 = new_instancemethod(_TColStd.TColStd_HArray2OfReal_ChangeArray2, None, TColStd_HArray2OfReal)
TColStd_HArray2OfReal_swigregister = _TColStd.TColStd_HArray2OfReal_swigregister
TColStd_HArray2OfReal_swigregister(TColStd_HArray2OfReal)

class Handle_TColStd_HArray2OfReal(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray2OfReal_swiginit(self, _TColStd.new_Handle_TColStd_HArray2OfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray2OfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray2OfReal
Handle_TColStd_HArray2OfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfReal_Nullify, None, Handle_TColStd_HArray2OfReal)
Handle_TColStd_HArray2OfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfReal_IsNull, None, Handle_TColStd_HArray2OfReal)
Handle_TColStd_HArray2OfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfReal__get_reference, None, Handle_TColStd_HArray2OfReal)
Handle_TColStd_HArray2OfReal_swigregister = _TColStd.Handle_TColStd_HArray2OfReal_swigregister
Handle_TColStd_HArray2OfReal_swigregister(Handle_TColStd_HArray2OfReal)

def Handle_TColStd_HArray2OfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray2OfReal const":
    return _TColStd.Handle_TColStd_HArray2OfReal_DownCast(AnObject)
Handle_TColStd_HArray2OfReal_DownCast = _TColStd.Handle_TColStd_HArray2OfReal_DownCast

class TColStd_HArray2OfTransient(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :rtype: None

        :param R1:
        :type R1: int
        :param R2:
        :type R2: int
        :param C1:
        :type C1: int
        :param C2:
        :type C2: int
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        _TColStd.TColStd_HArray2OfTransient_swiginit(self, _TColStd.new_TColStd_HArray2OfTransient(*args))

    def Init(self, *args) -> "void":
        """
        :param V:
        :type V: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfTransient_Init(self, *args)


    def ColLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_ColLength(self, *args)


    def RowLength(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_RowLength(self, *args)


    def LowerCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_LowerCol(self, *args)


    def LowerRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_LowerRow(self, *args)


    def UpperCol(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_UpperCol(self, *args)


    def UpperRow(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HArray2OfTransient_UpperRow(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :param Value:
        :type Value: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_HArray2OfTransient_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HArray2OfTransient_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param Row:
        :type Row: int
        :param Col:
        :type Col: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HArray2OfTransient_ChangeValue(self, *args)


    def Array2(self, *args) -> "TColStd_Array2OfTransient const &":
        """
        :rtype: TColStd_Array2OfTransient

        """
        return _TColStd.TColStd_HArray2OfTransient_Array2(self, *args)


    def ChangeArray2(self, *args) -> "TColStd_Array2OfTransient &":
        """
        :rtype: TColStd_Array2OfTransient

        """
        return _TColStd.TColStd_HArray2OfTransient_ChangeArray2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HArray2OfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HArray2OfTransient
TColStd_HArray2OfTransient.Init = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_Init, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.ColLength = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_ColLength, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.RowLength = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_RowLength, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.LowerCol = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_LowerCol, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.LowerRow = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_LowerRow, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.UpperCol = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_UpperCol, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.UpperRow = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_UpperRow, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.SetValue = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_SetValue, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.Value = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_Value, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_ChangeValue, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.Array2 = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_Array2, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient.ChangeArray2 = new_instancemethod(_TColStd.TColStd_HArray2OfTransient_ChangeArray2, None, TColStd_HArray2OfTransient)
TColStd_HArray2OfTransient_swigregister = _TColStd.TColStd_HArray2OfTransient_swigregister
TColStd_HArray2OfTransient_swigregister(TColStd_HArray2OfTransient)

class Handle_TColStd_HArray2OfTransient(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HArray2OfTransient_swiginit(self, _TColStd.new_Handle_TColStd_HArray2OfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HArray2OfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HArray2OfTransient
Handle_TColStd_HArray2OfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfTransient_Nullify, None, Handle_TColStd_HArray2OfTransient)
Handle_TColStd_HArray2OfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfTransient_IsNull, None, Handle_TColStd_HArray2OfTransient)
Handle_TColStd_HArray2OfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HArray2OfTransient__get_reference, None, Handle_TColStd_HArray2OfTransient)
Handle_TColStd_HArray2OfTransient_swigregister = _TColStd.Handle_TColStd_HArray2OfTransient_swigregister
Handle_TColStd_HArray2OfTransient_swigregister(Handle_TColStd_HArray2OfTransient)

def Handle_TColStd_HArray2OfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HArray2OfTransient const":
    return _TColStd.Handle_TColStd_HArray2OfTransient_DownCast(AnObject)
Handle_TColStd_HArray2OfTransient_DownCast = _TColStd.Handle_TColStd_HArray2OfTransient_DownCast

class TColStd_HPackedMapOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param theOther:
        :type theOther: TColStd_PackedMapOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_HPackedMapOfInteger_swiginit(self, _TColStd.new_TColStd_HPackedMapOfInteger(*args))

    def Map(self, *args) -> "TColStd_PackedMapOfInteger const &":
        """
        :rtype: TColStd_PackedMapOfInteger

        """
        return _TColStd.TColStd_HPackedMapOfInteger_Map(self, *args)


    def ChangeMap(self, *args) -> "TColStd_PackedMapOfInteger &":
        """
        :rtype: TColStd_PackedMapOfInteger

        """
        return _TColStd.TColStd_HPackedMapOfInteger_ChangeMap(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HPackedMapOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HPackedMapOfInteger
TColStd_HPackedMapOfInteger.Map = new_instancemethod(_TColStd.TColStd_HPackedMapOfInteger_Map, None, TColStd_HPackedMapOfInteger)
TColStd_HPackedMapOfInteger.ChangeMap = new_instancemethod(_TColStd.TColStd_HPackedMapOfInteger_ChangeMap, None, TColStd_HPackedMapOfInteger)
TColStd_HPackedMapOfInteger_swigregister = _TColStd.TColStd_HPackedMapOfInteger_swigregister
TColStd_HPackedMapOfInteger_swigregister(TColStd_HPackedMapOfInteger)

class Handle_TColStd_HPackedMapOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HPackedMapOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_HPackedMapOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HPackedMapOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HPackedMapOfInteger
Handle_TColStd_HPackedMapOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HPackedMapOfInteger_Nullify, None, Handle_TColStd_HPackedMapOfInteger)
Handle_TColStd_HPackedMapOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HPackedMapOfInteger_IsNull, None, Handle_TColStd_HPackedMapOfInteger)
Handle_TColStd_HPackedMapOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HPackedMapOfInteger__get_reference, None, Handle_TColStd_HPackedMapOfInteger)
Handle_TColStd_HPackedMapOfInteger_swigregister = _TColStd.Handle_TColStd_HPackedMapOfInteger_swigregister
Handle_TColStd_HPackedMapOfInteger_swigregister(Handle_TColStd_HPackedMapOfInteger)

def Handle_TColStd_HPackedMapOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HPackedMapOfInteger const":
    return _TColStd.Handle_TColStd_HPackedMapOfInteger_DownCast(AnObject)
Handle_TColStd_HPackedMapOfInteger_DownCast = _TColStd.Handle_TColStd_HPackedMapOfInteger_DownCast

class TColStd_HSequenceOfAsciiString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfAsciiString_swiginit(self, _TColStd.new_TColStd_HSequenceOfAsciiString(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: TCollection_AsciiString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: TCollection_AsciiString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_AsciiString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_AsciiString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfAsciiString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfAsciiString

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_AsciiString &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfAsciiString const &":
        """
        :rtype: TColStd_SequenceOfAsciiString

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfAsciiString &":
        """
        :rtype: TColStd_SequenceOfAsciiString

        """
        return _TColStd.TColStd_HSequenceOfAsciiString_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfAsciiString
TColStd_HSequenceOfAsciiString.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_IsEmpty, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Length, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Clear, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Append, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Prepend, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Reverse, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_InsertBefore, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_InsertAfter, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Exchange, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Split, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_SetValue, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Value, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_ChangeValue, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Remove, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_Sequence, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfAsciiString_ChangeSequence, None, TColStd_HSequenceOfAsciiString)
TColStd_HSequenceOfAsciiString_swigregister = _TColStd.TColStd_HSequenceOfAsciiString_swigregister
TColStd_HSequenceOfAsciiString_swigregister(TColStd_HSequenceOfAsciiString)

class Handle_TColStd_HSequenceOfAsciiString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfAsciiString
Handle_TColStd_HSequenceOfAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfAsciiString_Nullify, None, Handle_TColStd_HSequenceOfAsciiString)
Handle_TColStd_HSequenceOfAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfAsciiString_IsNull, None, Handle_TColStd_HSequenceOfAsciiString)
Handle_TColStd_HSequenceOfAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfAsciiString__get_reference, None, Handle_TColStd_HSequenceOfAsciiString)
Handle_TColStd_HSequenceOfAsciiString_swigregister = _TColStd.Handle_TColStd_HSequenceOfAsciiString_swigregister
Handle_TColStd_HSequenceOfAsciiString_swigregister(Handle_TColStd_HSequenceOfAsciiString)

def Handle_TColStd_HSequenceOfAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfAsciiString const":
    return _TColStd.Handle_TColStd_HSequenceOfAsciiString_DownCast(AnObject)
Handle_TColStd_HSequenceOfAsciiString_DownCast = _TColStd.Handle_TColStd_HSequenceOfAsciiString_DownCast

class TColStd_HSequenceOfExtendedString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfExtendedString_swiginit(self, _TColStd.new_TColStd_HSequenceOfExtendedString(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: TCollection_ExtendedString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: TCollection_ExtendedString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_ExtendedString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_ExtendedString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfExtendedString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfExtendedString

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_SetValue(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Value(self, *args)


    def ChangeValue(self, *args) -> "TCollection_ExtendedString &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfExtendedString const &":
        """
        :rtype: TColStd_SequenceOfExtendedString

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfExtendedString &":
        """
        :rtype: TColStd_SequenceOfExtendedString

        """
        return _TColStd.TColStd_HSequenceOfExtendedString_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfExtendedString
TColStd_HSequenceOfExtendedString.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_IsEmpty, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Length, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Clear, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Append, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Prepend, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Reverse, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_InsertBefore, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_InsertAfter, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Exchange, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Split, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_SetValue, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Value, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_ChangeValue, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Remove, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_Sequence, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfExtendedString_ChangeSequence, None, TColStd_HSequenceOfExtendedString)
TColStd_HSequenceOfExtendedString_swigregister = _TColStd.TColStd_HSequenceOfExtendedString_swigregister
TColStd_HSequenceOfExtendedString_swigregister(TColStd_HSequenceOfExtendedString)

class Handle_TColStd_HSequenceOfExtendedString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfExtendedString_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfExtendedString
Handle_TColStd_HSequenceOfExtendedString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfExtendedString_Nullify, None, Handle_TColStd_HSequenceOfExtendedString)
Handle_TColStd_HSequenceOfExtendedString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfExtendedString_IsNull, None, Handle_TColStd_HSequenceOfExtendedString)
Handle_TColStd_HSequenceOfExtendedString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfExtendedString__get_reference, None, Handle_TColStd_HSequenceOfExtendedString)
Handle_TColStd_HSequenceOfExtendedString_swigregister = _TColStd.Handle_TColStd_HSequenceOfExtendedString_swigregister
Handle_TColStd_HSequenceOfExtendedString_swigregister(Handle_TColStd_HSequenceOfExtendedString)

def Handle_TColStd_HSequenceOfExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfExtendedString const":
    return _TColStd.Handle_TColStd_HSequenceOfExtendedString_DownCast(AnObject)
Handle_TColStd_HSequenceOfExtendedString_DownCast = _TColStd.Handle_TColStd_HSequenceOfExtendedString_DownCast

class TColStd_HSequenceOfHAsciiString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfHAsciiString_swiginit(self, _TColStd.new_TColStd_HSequenceOfHAsciiString(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_TCollection_HAsciiString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_TCollection_HAsciiString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HAsciiString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HAsciiString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfHAsciiString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfHAsciiString

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_SetValue(self, *args)


    def Value(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfHAsciiString const &":
        """
        :rtype: TColStd_SequenceOfHAsciiString

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfHAsciiString &":
        """
        :rtype: TColStd_SequenceOfHAsciiString

        """
        return _TColStd.TColStd_HSequenceOfHAsciiString_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfHAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfHAsciiString
TColStd_HSequenceOfHAsciiString.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_IsEmpty, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Length, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Clear, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Append, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Prepend, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Reverse, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_InsertBefore, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_InsertAfter, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Exchange, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Split, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_SetValue, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Value, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_ChangeValue, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Remove, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_Sequence, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfHAsciiString_ChangeSequence, None, TColStd_HSequenceOfHAsciiString)
TColStd_HSequenceOfHAsciiString_swigregister = _TColStd.TColStd_HSequenceOfHAsciiString_swigregister
TColStd_HSequenceOfHAsciiString_swigregister(TColStd_HSequenceOfHAsciiString)

class Handle_TColStd_HSequenceOfHAsciiString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfHAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfHAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfHAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfHAsciiString
Handle_TColStd_HSequenceOfHAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHAsciiString_Nullify, None, Handle_TColStd_HSequenceOfHAsciiString)
Handle_TColStd_HSequenceOfHAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHAsciiString_IsNull, None, Handle_TColStd_HSequenceOfHAsciiString)
Handle_TColStd_HSequenceOfHAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHAsciiString__get_reference, None, Handle_TColStd_HSequenceOfHAsciiString)
Handle_TColStd_HSequenceOfHAsciiString_swigregister = _TColStd.Handle_TColStd_HSequenceOfHAsciiString_swigregister
Handle_TColStd_HSequenceOfHAsciiString_swigregister(Handle_TColStd_HSequenceOfHAsciiString)

def Handle_TColStd_HSequenceOfHAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfHAsciiString const":
    return _TColStd.Handle_TColStd_HSequenceOfHAsciiString_DownCast(AnObject)
Handle_TColStd_HSequenceOfHAsciiString_DownCast = _TColStd.Handle_TColStd_HSequenceOfHAsciiString_DownCast

class TColStd_HSequenceOfHExtendedString(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfHExtendedString_swiginit(self, _TColStd.new_TColStd_HSequenceOfHExtendedString(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_TCollection_HExtendedString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_TCollection_HExtendedString &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HExtendedString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HExtendedString &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfHExtendedString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfHExtendedString

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_SetValue(self, *args)


    def Value(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfHExtendedString const &":
        """
        :rtype: TColStd_SequenceOfHExtendedString

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfHExtendedString &":
        """
        :rtype: TColStd_SequenceOfHExtendedString

        """
        return _TColStd.TColStd_HSequenceOfHExtendedString_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfHExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfHExtendedString
TColStd_HSequenceOfHExtendedString.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_IsEmpty, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Length, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Clear, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Append, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Prepend, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Reverse, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_InsertBefore, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_InsertAfter, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Exchange, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Split, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_SetValue, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Value, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_ChangeValue, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Remove, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_Sequence, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfHExtendedString_ChangeSequence, None, TColStd_HSequenceOfHExtendedString)
TColStd_HSequenceOfHExtendedString_swigregister = _TColStd.TColStd_HSequenceOfHExtendedString_swigregister
TColStd_HSequenceOfHExtendedString_swigregister(TColStd_HSequenceOfHExtendedString)

class Handle_TColStd_HSequenceOfHExtendedString(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfHExtendedString_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfHExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfHExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfHExtendedString
Handle_TColStd_HSequenceOfHExtendedString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHExtendedString_Nullify, None, Handle_TColStd_HSequenceOfHExtendedString)
Handle_TColStd_HSequenceOfHExtendedString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHExtendedString_IsNull, None, Handle_TColStd_HSequenceOfHExtendedString)
Handle_TColStd_HSequenceOfHExtendedString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfHExtendedString__get_reference, None, Handle_TColStd_HSequenceOfHExtendedString)
Handle_TColStd_HSequenceOfHExtendedString_swigregister = _TColStd.Handle_TColStd_HSequenceOfHExtendedString_swigregister
Handle_TColStd_HSequenceOfHExtendedString_swigregister(Handle_TColStd_HSequenceOfHExtendedString)

def Handle_TColStd_HSequenceOfHExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfHExtendedString const":
    return _TColStd.Handle_TColStd_HSequenceOfHExtendedString_DownCast(AnObject)
Handle_TColStd_HSequenceOfHExtendedString_DownCast = _TColStd.Handle_TColStd_HSequenceOfHExtendedString_DownCast

class TColStd_HSequenceOfInteger(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfInteger_swiginit(self, _TColStd.new_TColStd_HSequenceOfInteger(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfInteger_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfInteger_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: int &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: int &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: int &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: int &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfInteger":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfInteger

        """
        return _TColStd.TColStd_HSequenceOfInteger_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: int &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfInteger_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfInteger_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfInteger_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfInteger const &":
        """
        :rtype: TColStd_SequenceOfInteger

        """
        return _TColStd.TColStd_HSequenceOfInteger_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfInteger &":
        """
        :rtype: TColStd_SequenceOfInteger

        """
        return _TColStd.TColStd_HSequenceOfInteger_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfInteger
TColStd_HSequenceOfInteger.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_IsEmpty, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Length, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Clear, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Append, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Prepend, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Reverse, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_InsertBefore, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_InsertAfter, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Exchange, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Split, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_SetValue, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Value, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_ChangeValue, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Remove, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_Sequence, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfInteger_ChangeSequence, None, TColStd_HSequenceOfInteger)
TColStd_HSequenceOfInteger_swigregister = _TColStd.TColStd_HSequenceOfInteger_swigregister
TColStd_HSequenceOfInteger_swigregister(TColStd_HSequenceOfInteger)

class Handle_TColStd_HSequenceOfInteger(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfInteger
Handle_TColStd_HSequenceOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfInteger_Nullify, None, Handle_TColStd_HSequenceOfInteger)
Handle_TColStd_HSequenceOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfInteger_IsNull, None, Handle_TColStd_HSequenceOfInteger)
Handle_TColStd_HSequenceOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfInteger__get_reference, None, Handle_TColStd_HSequenceOfInteger)
Handle_TColStd_HSequenceOfInteger_swigregister = _TColStd.Handle_TColStd_HSequenceOfInteger_swigregister
Handle_TColStd_HSequenceOfInteger_swigregister(Handle_TColStd_HSequenceOfInteger)

def Handle_TColStd_HSequenceOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfInteger const":
    return _TColStd.Handle_TColStd_HSequenceOfInteger_DownCast(AnObject)
Handle_TColStd_HSequenceOfInteger_DownCast = _TColStd.Handle_TColStd_HSequenceOfInteger_DownCast

class TColStd_HSequenceOfReal(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfReal_swiginit(self, _TColStd.new_TColStd_HSequenceOfReal(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfReal_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfReal_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: float &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: float &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: float &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: float &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfReal":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfReal

        """
        return _TColStd.TColStd_HSequenceOfReal_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: float &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_SetValue(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: float

        """
        return _TColStd.TColStd_HSequenceOfReal_Value(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: float

        """
        return _TColStd.TColStd_HSequenceOfReal_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfReal_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfReal const &":
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _TColStd.TColStd_HSequenceOfReal_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfReal &":
        """
        :rtype: TColStd_SequenceOfReal

        """
        return _TColStd.TColStd_HSequenceOfReal_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfReal
TColStd_HSequenceOfReal.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_IsEmpty, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Length, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Clear, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Append, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Prepend, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Reverse, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_InsertBefore, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_InsertAfter, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Exchange, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Split, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_SetValue, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Value, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_ChangeValue, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Remove, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_Sequence, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfReal_ChangeSequence, None, TColStd_HSequenceOfReal)
TColStd_HSequenceOfReal_swigregister = _TColStd.TColStd_HSequenceOfReal_swigregister
TColStd_HSequenceOfReal_swigregister(TColStd_HSequenceOfReal)

class Handle_TColStd_HSequenceOfReal(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfReal_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfReal
Handle_TColStd_HSequenceOfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfReal_Nullify, None, Handle_TColStd_HSequenceOfReal)
Handle_TColStd_HSequenceOfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfReal_IsNull, None, Handle_TColStd_HSequenceOfReal)
Handle_TColStd_HSequenceOfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfReal__get_reference, None, Handle_TColStd_HSequenceOfReal)
Handle_TColStd_HSequenceOfReal_swigregister = _TColStd.Handle_TColStd_HSequenceOfReal_swigregister
Handle_TColStd_HSequenceOfReal_swigregister(Handle_TColStd_HSequenceOfReal)

def Handle_TColStd_HSequenceOfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfReal const":
    return _TColStd.Handle_TColStd_HSequenceOfReal_DownCast(AnObject)
Handle_TColStd_HSequenceOfReal_DownCast = _TColStd.Handle_TColStd_HSequenceOfReal_DownCast

class TColStd_HSequenceOfTransient(OCC.MMgt.MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _TColStd.TColStd_HSequenceOfTransient_swiginit(self, _TColStd.new_TColStd_HSequenceOfTransient(*args))

    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_HSequenceOfTransient_IsEmpty(self, *args)


    def Length(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_HSequenceOfTransient_Length(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Clear(self, *args)


    def Append(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Standard_Transient &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param anItem:
        :type anItem: Handle_Standard_Transient &
        :rtype: None

        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Prepend(self, *args)


    def Reverse(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Reverse(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Transient &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Transient &
        :rtype: None

        :param anIndex:
        :type anIndex: int
        :param aSequence:
        :type aSequence: Handle_TColStd_HSequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_InsertAfter(self, *args)


    def Exchange(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anOtherIndex:
        :type anOtherIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Exchange(self, *args)


    def Split(self, *args) -> "Handle_TColStd_HSequenceOfTransient":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_TColStd_HSequenceOfTransient

        """
        return _TColStd.TColStd_HSequenceOfTransient_Split(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :param anItem:
        :type anItem: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_SetValue(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HSequenceOfTransient_Value(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_HSequenceOfTransient_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param anIndex:
        :type anIndex: int
        :rtype: None

        :param fromIndex:
        :type fromIndex: int
        :param toIndex:
        :type toIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_HSequenceOfTransient_Remove(self, *args)


    def Sequence(self, *args) -> "TColStd_SequenceOfTransient const &":
        """
        :rtype: TColStd_SequenceOfTransient

        """
        return _TColStd.TColStd_HSequenceOfTransient_Sequence(self, *args)


    def ChangeSequence(self, *args) -> "TColStd_SequenceOfTransient &":
        """
        :rtype: TColStd_SequenceOfTransient

        """
        return _TColStd.TColStd_HSequenceOfTransient_ChangeSequence(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_HSequenceOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_HSequenceOfTransient
TColStd_HSequenceOfTransient.IsEmpty = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_IsEmpty, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Length = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Length, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Clear = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Clear, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Append = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Append, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Prepend = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Prepend, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Reverse = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Reverse, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.InsertBefore = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_InsertBefore, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.InsertAfter = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_InsertAfter, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Exchange = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Exchange, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Split = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Split, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.SetValue = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_SetValue, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Value = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Value, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_ChangeValue, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Remove = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Remove, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.Sequence = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_Sequence, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient.ChangeSequence = new_instancemethod(_TColStd.TColStd_HSequenceOfTransient_ChangeSequence, None, TColStd_HSequenceOfTransient)
TColStd_HSequenceOfTransient_swigregister = _TColStd.TColStd_HSequenceOfTransient_swigregister
TColStd_HSequenceOfTransient_swigregister(TColStd_HSequenceOfTransient)

class Handle_TColStd_HSequenceOfTransient(OCC.MMgt.Handle_MMgt_TShared):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_HSequenceOfTransient_swiginit(self, _TColStd.new_Handle_TColStd_HSequenceOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_HSequenceOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_HSequenceOfTransient
Handle_TColStd_HSequenceOfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfTransient_Nullify, None, Handle_TColStd_HSequenceOfTransient)
Handle_TColStd_HSequenceOfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfTransient_IsNull, None, Handle_TColStd_HSequenceOfTransient)
Handle_TColStd_HSequenceOfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_HSequenceOfTransient__get_reference, None, Handle_TColStd_HSequenceOfTransient)
Handle_TColStd_HSequenceOfTransient_swigregister = _TColStd.Handle_TColStd_HSequenceOfTransient_swigregister
Handle_TColStd_HSequenceOfTransient_swigregister(Handle_TColStd_HSequenceOfTransient)

def Handle_TColStd_HSequenceOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_HSequenceOfTransient const":
    return _TColStd.Handle_TColStd_HSequenceOfTransient_DownCast(AnObject)
Handle_TColStd_HSequenceOfTransient_DownCast = _TColStd.Handle_TColStd_HSequenceOfTransient_DownCast

class TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: Handle_Standard_Transient &
        :param K2:
        :type K2: int
        :param I:
        :type I: Handle_Standard_Transient &
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swiginit(self, _TColStd.new_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient(*args))

    def Key1(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Key1(self, *args)


    def GetKey2(self) -> "Standard_Integer":
        """GetKey2(TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient self) -> Standard_Integer"""
        return _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_GetKey2(self)


    def SetKey2(self, value: 'Standard_Integer') -> "void":
        """SetKey2(TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient self, Standard_Integer value)"""
        return _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_SetKey2(self, value)


    def Next2(self, *args) -> "TCollection_MapNodePtr &":
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Next2(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.Key1 = new_instancemethod(_TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Key1, None, TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.GetKey2 = new_instancemethod(_TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_GetKey2, None, TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.SetKey2 = new_instancemethod(_TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_SetKey2, None, TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.Next2 = new_instancemethod(_TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Next2, None, TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.Value = new_instancemethod(_TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Value, None, TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister = _TColStd.TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister
TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister(TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)

class Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swiginit(self, _TColStd.new_Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_Nullify, None, Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_IsNull, None, Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient__get_reference, None, Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister = _TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_swigregister(Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient)

def Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient const":
    return _TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_DownCast(AnObject)
Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_DownCast = _TColStd.Handle_TColStd_IndexedDataMapNodeOfIndexedDataMapOfTransientTransient_DownCast

class TColStd_IndexedDataMapOfTransientTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        """
        _TColStd.TColStd_IndexedDataMapOfTransientTransient_swiginit(self, _TColStd.new_TColStd_IndexedDataMapOfTransientTransient(*args))

    def Assign(self, *args) -> "TColStd_IndexedDataMapOfTransientTransient &":
        """
        :param Other:
        :type Other: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: TColStd_IndexedDataMapOfTransientTransient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_IndexedDataMapOfTransientTransient &":
        """
        :param Other:
        :type Other: TColStd_IndexedDataMapOfTransientTransient &
        :rtype: TColStd_IndexedDataMapOfTransientTransient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Add(self, *args)


    def Substitute(self, *args) -> "void":
        """
        :param I:
        :type I: int
        :param K:
        :type K: Handle_Standard_Transient &
        :param T:
        :type T: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Substitute(self, *args)


    def RemoveLast(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_RemoveLast(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_Contains(self, *args)


    def FindKey(self, *args) -> "Handle_Standard_Transient":
        """
        :param I:
        :type I: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindKey(self, *args)


    def FindFromIndex(self, *args) -> "Handle_Standard_Transient":
        """
        :param I:
        :type I: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromIndex(self, *args)


    def ChangeFromIndex(self, *args) -> "Handle_Standard_Transient":
        """
        :param I:
        :type I: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromIndex(self, *args)


    def FindIndex(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindIndex(self, *args)


    def FindFromKey(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromKey(self, *args)


    def ChangeFromKey(self, *args) -> "Handle_Standard_Transient":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromKey(self, *args)


    def FindFromKey1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromKey1(self, *args)


    def ChangeFromKey1(self, *args) -> "Standard_Address":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromKey1(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedDataMapOfTransientTransient
TColStd_IndexedDataMapOfTransientTransient.Assign = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Assign, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.Set = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Set, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.ReSize = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_ReSize, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.Clear = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Clear, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.Add = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Add, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.Substitute = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Substitute, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.RemoveLast = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_RemoveLast, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.Contains = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_Contains, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.FindKey = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_FindKey, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.FindFromIndex = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromIndex, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.ChangeFromIndex = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromIndex, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.FindIndex = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_FindIndex, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.FindFromKey = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromKey, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.ChangeFromKey = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromKey, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.FindFromKey1 = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_FindFromKey1, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient.ChangeFromKey1 = new_instancemethod(_TColStd.TColStd_IndexedDataMapOfTransientTransient_ChangeFromKey1, None, TColStd_IndexedDataMapOfTransientTransient)
TColStd_IndexedDataMapOfTransientTransient_swigregister = _TColStd.TColStd_IndexedDataMapOfTransientTransient_swigregister
TColStd_IndexedDataMapOfTransientTransient_swigregister(TColStd_IndexedDataMapOfTransientTransient)

class TColStd_IndexedMapNodeOfIndexedMapOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: int &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_swiginit(self, _TColStd.new_TColStd_IndexedMapNodeOfIndexedMapOfInteger(*args))

    def GetKey1(self) -> "Standard_Integer":
        """GetKey1(TColStd_IndexedMapNodeOfIndexedMapOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_GetKey1(self)


    def SetKey1(self, value: 'Standard_Integer') -> "void":
        """SetKey1(TColStd_IndexedMapNodeOfIndexedMapOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_SetKey1(self, value)


    def GetKey2(self) -> "Standard_Integer":
        """GetKey2(TColStd_IndexedMapNodeOfIndexedMapOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_GetKey2(self)


    def SetKey2(self, value: 'Standard_Integer') -> "void":
        """SetKey2(TColStd_IndexedMapNodeOfIndexedMapOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_SetKey2(self, value)


    def Next2(self, *args) -> "TCollection_MapNodePtr &":
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_Next2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapNodeOfIndexedMapOfInteger
TColStd_IndexedMapNodeOfIndexedMapOfInteger.GetKey1 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_GetKey1, None, TColStd_IndexedMapNodeOfIndexedMapOfInteger)
TColStd_IndexedMapNodeOfIndexedMapOfInteger.SetKey1 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_SetKey1, None, TColStd_IndexedMapNodeOfIndexedMapOfInteger)
TColStd_IndexedMapNodeOfIndexedMapOfInteger.GetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_GetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfInteger)
TColStd_IndexedMapNodeOfIndexedMapOfInteger.SetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_SetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfInteger)
TColStd_IndexedMapNodeOfIndexedMapOfInteger.Next2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_Next2, None, TColStd_IndexedMapNodeOfIndexedMapOfInteger)
TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister = _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister
TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister(TColStd_IndexedMapNodeOfIndexedMapOfInteger)

class Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_Nullify, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_IsNull, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger__get_reference, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_swigregister(Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger)

def Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger const":
    return _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_DownCast(AnObject)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_DownCast = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfInteger_DownCast

class TColStd_IndexedMapNodeOfIndexedMapOfReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: float &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_swiginit(self, _TColStd.new_TColStd_IndexedMapNodeOfIndexedMapOfReal(*args))

    def GetKey1(self) -> "Standard_Real":
        """GetKey1(TColStd_IndexedMapNodeOfIndexedMapOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_GetKey1(self)


    def SetKey1(self, value: 'Standard_Real') -> "void":
        """SetKey1(TColStd_IndexedMapNodeOfIndexedMapOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_SetKey1(self, value)


    def GetKey2(self) -> "Standard_Integer":
        """GetKey2(TColStd_IndexedMapNodeOfIndexedMapOfReal self) -> Standard_Integer"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_GetKey2(self)


    def SetKey2(self, value: 'Standard_Integer') -> "void":
        """SetKey2(TColStd_IndexedMapNodeOfIndexedMapOfReal self, Standard_Integer value)"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_SetKey2(self, value)


    def Next2(self, *args) -> "TCollection_MapNodePtr &":
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_Next2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapNodeOfIndexedMapOfReal
TColStd_IndexedMapNodeOfIndexedMapOfReal.GetKey1 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_GetKey1, None, TColStd_IndexedMapNodeOfIndexedMapOfReal)
TColStd_IndexedMapNodeOfIndexedMapOfReal.SetKey1 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_SetKey1, None, TColStd_IndexedMapNodeOfIndexedMapOfReal)
TColStd_IndexedMapNodeOfIndexedMapOfReal.GetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_GetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfReal)
TColStd_IndexedMapNodeOfIndexedMapOfReal.SetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_SetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfReal)
TColStd_IndexedMapNodeOfIndexedMapOfReal.Next2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_Next2, None, TColStd_IndexedMapNodeOfIndexedMapOfReal)
TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister = _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister
TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister(TColStd_IndexedMapNodeOfIndexedMapOfReal)

class Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_swiginit(self, _TColStd.new_Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_Nullify, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_IsNull, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal__get_reference, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_swigregister(Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal)

def Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal const":
    return _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_DownCast(AnObject)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_DownCast = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfReal_DownCast

class TColStd_IndexedMapNodeOfIndexedMapOfTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K1:
        :type K1: Handle_Standard_Transient &
        :param K2:
        :type K2: int
        :param n1:
        :type n1: TCollection_MapNodePtr &
        :param n2:
        :type n2: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_swiginit(self, _TColStd.new_TColStd_IndexedMapNodeOfIndexedMapOfTransient(*args))

    def Key1(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_Key1(self, *args)


    def GetKey2(self) -> "Standard_Integer":
        """GetKey2(TColStd_IndexedMapNodeOfIndexedMapOfTransient self) -> Standard_Integer"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_GetKey2(self)


    def SetKey2(self, value: 'Standard_Integer') -> "void":
        """SetKey2(TColStd_IndexedMapNodeOfIndexedMapOfTransient self, Standard_Integer value)"""
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_SetKey2(self, value)


    def Next2(self, *args) -> "TCollection_MapNodePtr &":
        """
        :rtype: TCollection_MapNodePtr

        """
        return _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_Next2(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapNodeOfIndexedMapOfTransient
TColStd_IndexedMapNodeOfIndexedMapOfTransient.Key1 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_Key1, None, TColStd_IndexedMapNodeOfIndexedMapOfTransient)
TColStd_IndexedMapNodeOfIndexedMapOfTransient.GetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_GetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfTransient)
TColStd_IndexedMapNodeOfIndexedMapOfTransient.SetKey2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_SetKey2, None, TColStd_IndexedMapNodeOfIndexedMapOfTransient)
TColStd_IndexedMapNodeOfIndexedMapOfTransient.Next2 = new_instancemethod(_TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_Next2, None, TColStd_IndexedMapNodeOfIndexedMapOfTransient)
TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister = _TColStd.TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister
TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister(TColStd_IndexedMapNodeOfIndexedMapOfTransient)

class Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_swiginit(self, _TColStd.new_Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_Nullify, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_IsNull, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient__get_reference, None, Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_swigregister(Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient)

def Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient const":
    return _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_DownCast(AnObject)
Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_DownCast = _TColStd.Handle_TColStd_IndexedMapNodeOfIndexedMapOfTransient_DownCast

class TColStd_IndexedMapOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_IndexedMapOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapOfInteger_swiginit(self, _TColStd.new_TColStd_IndexedMapOfInteger(*args))

    def Assign(self, *args) -> "TColStd_IndexedMapOfInteger &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfInteger &
        :rtype: TColStd_IndexedMapOfInteger

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_IndexedMapOfInteger &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfInteger &
        :rtype: TColStd_IndexedMapOfInteger

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: int &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Add(self, *args)


    def Substitute(self, *args) -> "void":
        """
        :param I:
        :type I: int
        :param K:
        :type K: int &
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Substitute(self, *args)


    def RemoveLast(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfInteger_RemoveLast(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: int &
        :rtype: bool

        """
        return _TColStd.TColStd_IndexedMapOfInteger_Contains(self, *args)


    def FindKey(self, *args) -> "Standard_Integer const &":
        """
        :param I:
        :type I: int
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfInteger_FindKey(self, *args)


    def FindIndex(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: int &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfInteger_FindIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfInteger
TColStd_IndexedMapOfInteger.Assign = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Assign, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.Set = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Set, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.ReSize = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_ReSize, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.Clear = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Clear, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.Add = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Add, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.Substitute = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Substitute, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.RemoveLast = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_RemoveLast, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.Contains = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_Contains, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.FindKey = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_FindKey, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger.FindIndex = new_instancemethod(_TColStd.TColStd_IndexedMapOfInteger_FindIndex, None, TColStd_IndexedMapOfInteger)
TColStd_IndexedMapOfInteger_swigregister = _TColStd.TColStd_IndexedMapOfInteger_swigregister
TColStd_IndexedMapOfInteger_swigregister(TColStd_IndexedMapOfInteger)

class TColStd_IndexedMapOfReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_IndexedMapOfReal &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapOfReal_swiginit(self, _TColStd.new_TColStd_IndexedMapOfReal(*args))

    def Assign(self, *args) -> "TColStd_IndexedMapOfReal &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfReal &
        :rtype: TColStd_IndexedMapOfReal

        """
        return _TColStd.TColStd_IndexedMapOfReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_IndexedMapOfReal &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfReal &
        :rtype: TColStd_IndexedMapOfReal

        """
        return _TColStd.TColStd_IndexedMapOfReal_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfReal_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfReal_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: float &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfReal_Add(self, *args)


    def Substitute(self, *args) -> "void":
        """
        :param I:
        :type I: int
        :param K:
        :type K: float &
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfReal_Substitute(self, *args)


    def RemoveLast(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfReal_RemoveLast(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: float &
        :rtype: bool

        """
        return _TColStd.TColStd_IndexedMapOfReal_Contains(self, *args)


    def FindKey(self, *args) -> "Standard_Real const &":
        """
        :param I:
        :type I: int
        :rtype: float

        """
        return _TColStd.TColStd_IndexedMapOfReal_FindKey(self, *args)


    def FindIndex(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: float &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfReal_FindIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfReal
TColStd_IndexedMapOfReal.Assign = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Assign, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.Set = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Set, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.ReSize = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_ReSize, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.Clear = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Clear, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.Add = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Add, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.Substitute = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Substitute, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.RemoveLast = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_RemoveLast, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.Contains = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_Contains, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.FindKey = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_FindKey, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal.FindIndex = new_instancemethod(_TColStd.TColStd_IndexedMapOfReal_FindIndex, None, TColStd_IndexedMapOfReal)
TColStd_IndexedMapOfReal_swigregister = _TColStd.TColStd_IndexedMapOfReal_swigregister
TColStd_IndexedMapOfReal_swigregister(TColStd_IndexedMapOfReal)

class TColStd_IndexedMapOfTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_IndexedMapOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_IndexedMapOfTransient_swiginit(self, _TColStd.new_TColStd_IndexedMapOfTransient(*args))

    def Assign(self, *args) -> "TColStd_IndexedMapOfTransient &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfTransient &
        :rtype: TColStd_IndexedMapOfTransient

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_IndexedMapOfTransient &":
        """
        :param Other:
        :type Other: TColStd_IndexedMapOfTransient &
        :rtype: TColStd_IndexedMapOfTransient

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfTransient_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Clear(self, *args)


    def Add(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Add(self, *args)


    def Substitute(self, *args) -> "void":
        """
        :param I:
        :type I: int
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Substitute(self, *args)


    def RemoveLast(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_IndexedMapOfTransient_RemoveLast(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_IndexedMapOfTransient_Contains(self, *args)


    def FindKey(self, *args) -> "Handle_Standard_Transient":
        """
        :param I:
        :type I: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_IndexedMapOfTransient_FindKey(self, *args)


    def FindIndex(self, *args) -> "Standard_Integer":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :rtype: int

        """
        return _TColStd.TColStd_IndexedMapOfTransient_FindIndex(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_IndexedMapOfTransient
TColStd_IndexedMapOfTransient.Assign = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Assign, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.Set = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Set, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.ReSize = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_ReSize, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.Clear = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Clear, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.Add = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Add, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.Substitute = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Substitute, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.RemoveLast = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_RemoveLast, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.Contains = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_Contains, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.FindKey = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_FindKey, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient.FindIndex = new_instancemethod(_TColStd.TColStd_IndexedMapOfTransient_FindIndex, None, TColStd_IndexedMapOfTransient)
TColStd_IndexedMapOfTransient_swigregister = _TColStd.TColStd_IndexedMapOfTransient_swigregister
TColStd_IndexedMapOfTransient_swigregister(TColStd_IndexedMapOfTransient)

class TColStd_ListIteratorOfListOfAsciiString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TColStd_ListOfAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_ListIteratorOfListOfAsciiString_swiginit(self, _TColStd.new_TColStd_ListIteratorOfListOfAsciiString(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: TColStd_ListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_Next(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_ListIteratorOfListOfAsciiString_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfAsciiString
TColStd_ListIteratorOfListOfAsciiString.Initialize = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfAsciiString_Initialize, None, TColStd_ListIteratorOfListOfAsciiString)
TColStd_ListIteratorOfListOfAsciiString.More = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfAsciiString_More, None, TColStd_ListIteratorOfListOfAsciiString)
TColStd_ListIteratorOfListOfAsciiString.Next = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfAsciiString_Next, None, TColStd_ListIteratorOfListOfAsciiString)
TColStd_ListIteratorOfListOfAsciiString.Value = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfAsciiString_Value, None, TColStd_ListIteratorOfListOfAsciiString)
TColStd_ListIteratorOfListOfAsciiString_swigregister = _TColStd.TColStd_ListIteratorOfListOfAsciiString_swigregister
TColStd_ListIteratorOfListOfAsciiString_swigregister(TColStd_ListIteratorOfListOfAsciiString)

class TColStd_ListIteratorOfListOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TColStd_ListOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_ListIteratorOfListOfInteger_swiginit(self, _TColStd.new_TColStd_ListIteratorOfListOfInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfInteger_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListIteratorOfListOfInteger_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfInteger_Next(self, *args)


    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_ListIteratorOfListOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_ListIteratorOfListOfInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_ListIteratorOfListOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_ListIteratorOfListOfInteger_SetValue(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfInteger
TColStd_ListIteratorOfListOfInteger.Initialize = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfInteger_Initialize, None, TColStd_ListIteratorOfListOfInteger)
TColStd_ListIteratorOfListOfInteger.More = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfInteger_More, None, TColStd_ListIteratorOfListOfInteger)
TColStd_ListIteratorOfListOfInteger.Next = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfInteger_Next, None, TColStd_ListIteratorOfListOfInteger)
TColStd_ListIteratorOfListOfInteger.GetValue = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfInteger_GetValue, None, TColStd_ListIteratorOfListOfInteger)
TColStd_ListIteratorOfListOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfInteger_SetValue, None, TColStd_ListIteratorOfListOfInteger)
TColStd_ListIteratorOfListOfInteger_swigregister = _TColStd.TColStd_ListIteratorOfListOfInteger_swigregister
TColStd_ListIteratorOfListOfInteger_swigregister(TColStd_ListIteratorOfListOfInteger)

class TColStd_ListIteratorOfListOfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TColStd_ListOfReal &
        :rtype: None

        """
        _TColStd.TColStd_ListIteratorOfListOfReal_swiginit(self, _TColStd.new_TColStd_ListIteratorOfListOfReal(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: TColStd_ListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfReal_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListIteratorOfListOfReal_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfReal_Next(self, *args)


    def GetValue(self) -> "Standard_Real":
        """GetValue(TColStd_ListIteratorOfListOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_ListIteratorOfListOfReal_GetValue(self)


    def SetValue(self, value: 'Standard_Real') -> "void":
        """SetValue(TColStd_ListIteratorOfListOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_ListIteratorOfListOfReal_SetValue(self, value)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfReal
TColStd_ListIteratorOfListOfReal.Initialize = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfReal_Initialize, None, TColStd_ListIteratorOfListOfReal)
TColStd_ListIteratorOfListOfReal.More = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfReal_More, None, TColStd_ListIteratorOfListOfReal)
TColStd_ListIteratorOfListOfReal.Next = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfReal_Next, None, TColStd_ListIteratorOfListOfReal)
TColStd_ListIteratorOfListOfReal.GetValue = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfReal_GetValue, None, TColStd_ListIteratorOfListOfReal)
TColStd_ListIteratorOfListOfReal.SetValue = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfReal_SetValue, None, TColStd_ListIteratorOfListOfReal)
TColStd_ListIteratorOfListOfReal_swigregister = _TColStd.TColStd_ListIteratorOfListOfReal_swigregister
TColStd_ListIteratorOfListOfReal_swigregister(TColStd_ListIteratorOfListOfReal)

class TColStd_ListIteratorOfListOfTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param L:
        :type L: TColStd_ListOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_ListIteratorOfListOfTransient_swiginit(self, _TColStd.new_TColStd_ListIteratorOfListOfTransient(*args))

    def Initialize(self, *args) -> "void":
        """
        :param L:
        :type L: TColStd_ListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfTransient_Initialize(self, *args)


    def More(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListIteratorOfListOfTransient_More(self, *args)


    def Next(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListIteratorOfListOfTransient_Next(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_ListIteratorOfListOfTransient_Value(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListIteratorOfListOfTransient
TColStd_ListIteratorOfListOfTransient.Initialize = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfTransient_Initialize, None, TColStd_ListIteratorOfListOfTransient)
TColStd_ListIteratorOfListOfTransient.More = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfTransient_More, None, TColStd_ListIteratorOfListOfTransient)
TColStd_ListIteratorOfListOfTransient.Next = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfTransient_Next, None, TColStd_ListIteratorOfListOfTransient)
TColStd_ListIteratorOfListOfTransient.Value = new_instancemethod(_TColStd.TColStd_ListIteratorOfListOfTransient_Value, None, TColStd_ListIteratorOfListOfTransient)
TColStd_ListIteratorOfListOfTransient_swigregister = _TColStd.TColStd_ListIteratorOfListOfTransient_swigregister
TColStd_ListIteratorOfListOfTransient_swigregister(TColStd_ListIteratorOfListOfTransient)

class TColStd_ListNodeOfListOfAsciiString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TCollection_AsciiString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_ListNodeOfListOfAsciiString_swiginit(self, _TColStd.new_TColStd_ListNodeOfListOfAsciiString(*args))

    def Value(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_ListNodeOfListOfAsciiString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_ListNodeOfListOfAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListNodeOfListOfAsciiString
TColStd_ListNodeOfListOfAsciiString.Value = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfAsciiString_Value, None, TColStd_ListNodeOfListOfAsciiString)
TColStd_ListNodeOfListOfAsciiString_swigregister = _TColStd.TColStd_ListNodeOfListOfAsciiString_swigregister
TColStd_ListNodeOfListOfAsciiString_swigregister(TColStd_ListNodeOfListOfAsciiString)

class Handle_TColStd_ListNodeOfListOfAsciiString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_ListNodeOfListOfAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_ListNodeOfListOfAsciiString
Handle_TColStd_ListNodeOfListOfAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_Nullify, None, Handle_TColStd_ListNodeOfListOfAsciiString)
Handle_TColStd_ListNodeOfListOfAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_IsNull, None, Handle_TColStd_ListNodeOfListOfAsciiString)
Handle_TColStd_ListNodeOfListOfAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfAsciiString__get_reference, None, Handle_TColStd_ListNodeOfListOfAsciiString)
Handle_TColStd_ListNodeOfListOfAsciiString_swigregister = _TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_swigregister
Handle_TColStd_ListNodeOfListOfAsciiString_swigregister(Handle_TColStd_ListNodeOfListOfAsciiString)

def Handle_TColStd_ListNodeOfListOfAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_ListNodeOfListOfAsciiString const":
    return _TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_DownCast(AnObject)
Handle_TColStd_ListNodeOfListOfAsciiString_DownCast = _TColStd.Handle_TColStd_ListNodeOfListOfAsciiString_DownCast

class TColStd_ListNodeOfListOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_ListNodeOfListOfInteger_swiginit(self, _TColStd.new_TColStd_ListNodeOfListOfInteger(*args))

    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_ListNodeOfListOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_ListNodeOfListOfInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_ListNodeOfListOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_ListNodeOfListOfInteger_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_ListNodeOfListOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListNodeOfListOfInteger
TColStd_ListNodeOfListOfInteger.GetValue = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfInteger_GetValue, None, TColStd_ListNodeOfListOfInteger)
TColStd_ListNodeOfListOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfInteger_SetValue, None, TColStd_ListNodeOfListOfInteger)
TColStd_ListNodeOfListOfInteger_swigregister = _TColStd.TColStd_ListNodeOfListOfInteger_swigregister
TColStd_ListNodeOfListOfInteger_swigregister(TColStd_ListNodeOfListOfInteger)

class Handle_TColStd_ListNodeOfListOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_ListNodeOfListOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_ListNodeOfListOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_ListNodeOfListOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_ListNodeOfListOfInteger
Handle_TColStd_ListNodeOfListOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfInteger_Nullify, None, Handle_TColStd_ListNodeOfListOfInteger)
Handle_TColStd_ListNodeOfListOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfInteger_IsNull, None, Handle_TColStd_ListNodeOfListOfInteger)
Handle_TColStd_ListNodeOfListOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfInteger__get_reference, None, Handle_TColStd_ListNodeOfListOfInteger)
Handle_TColStd_ListNodeOfListOfInteger_swigregister = _TColStd.Handle_TColStd_ListNodeOfListOfInteger_swigregister
Handle_TColStd_ListNodeOfListOfInteger_swigregister(Handle_TColStd_ListNodeOfListOfInteger)

def Handle_TColStd_ListNodeOfListOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_ListNodeOfListOfInteger const":
    return _TColStd.Handle_TColStd_ListNodeOfListOfInteger_DownCast(AnObject)
Handle_TColStd_ListNodeOfListOfInteger_DownCast = _TColStd.Handle_TColStd_ListNodeOfListOfInteger_DownCast

class TColStd_ListNodeOfListOfReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: float &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_ListNodeOfListOfReal_swiginit(self, _TColStd.new_TColStd_ListNodeOfListOfReal(*args))

    def GetValue(self) -> "Standard_Real":
        """GetValue(TColStd_ListNodeOfListOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_ListNodeOfListOfReal_GetValue(self)


    def SetValue(self, value: 'Standard_Real') -> "void":
        """SetValue(TColStd_ListNodeOfListOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_ListNodeOfListOfReal_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_ListNodeOfListOfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListNodeOfListOfReal
TColStd_ListNodeOfListOfReal.GetValue = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfReal_GetValue, None, TColStd_ListNodeOfListOfReal)
TColStd_ListNodeOfListOfReal.SetValue = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfReal_SetValue, None, TColStd_ListNodeOfListOfReal)
TColStd_ListNodeOfListOfReal_swigregister = _TColStd.TColStd_ListNodeOfListOfReal_swigregister
TColStd_ListNodeOfListOfReal_swigregister(TColStd_ListNodeOfListOfReal)

class Handle_TColStd_ListNodeOfListOfReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_ListNodeOfListOfReal_swiginit(self, _TColStd.new_Handle_TColStd_ListNodeOfListOfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_ListNodeOfListOfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_ListNodeOfListOfReal
Handle_TColStd_ListNodeOfListOfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfReal_Nullify, None, Handle_TColStd_ListNodeOfListOfReal)
Handle_TColStd_ListNodeOfListOfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfReal_IsNull, None, Handle_TColStd_ListNodeOfListOfReal)
Handle_TColStd_ListNodeOfListOfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfReal__get_reference, None, Handle_TColStd_ListNodeOfListOfReal)
Handle_TColStd_ListNodeOfListOfReal_swigregister = _TColStd.Handle_TColStd_ListNodeOfListOfReal_swigregister
Handle_TColStd_ListNodeOfListOfReal_swigregister(Handle_TColStd_ListNodeOfListOfReal)

def Handle_TColStd_ListNodeOfListOfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_ListNodeOfListOfReal const":
    return _TColStd.Handle_TColStd_ListNodeOfListOfReal_DownCast(AnObject)
Handle_TColStd_ListNodeOfListOfReal_DownCast = _TColStd.Handle_TColStd_ListNodeOfListOfReal_DownCast

class TColStd_ListNodeOfListOfTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_ListNodeOfListOfTransient_swiginit(self, _TColStd.new_TColStd_ListNodeOfListOfTransient(*args))

    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_ListNodeOfListOfTransient_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_ListNodeOfListOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListNodeOfListOfTransient
TColStd_ListNodeOfListOfTransient.Value = new_instancemethod(_TColStd.TColStd_ListNodeOfListOfTransient_Value, None, TColStd_ListNodeOfListOfTransient)
TColStd_ListNodeOfListOfTransient_swigregister = _TColStd.TColStd_ListNodeOfListOfTransient_swigregister
TColStd_ListNodeOfListOfTransient_swigregister(TColStd_ListNodeOfListOfTransient)

class Handle_TColStd_ListNodeOfListOfTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_ListNodeOfListOfTransient_swiginit(self, _TColStd.new_Handle_TColStd_ListNodeOfListOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_ListNodeOfListOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_ListNodeOfListOfTransient
Handle_TColStd_ListNodeOfListOfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfTransient_Nullify, None, Handle_TColStd_ListNodeOfListOfTransient)
Handle_TColStd_ListNodeOfListOfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfTransient_IsNull, None, Handle_TColStd_ListNodeOfListOfTransient)
Handle_TColStd_ListNodeOfListOfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_ListNodeOfListOfTransient__get_reference, None, Handle_TColStd_ListNodeOfListOfTransient)
Handle_TColStd_ListNodeOfListOfTransient_swigregister = _TColStd.Handle_TColStd_ListNodeOfListOfTransient_swigregister
Handle_TColStd_ListNodeOfListOfTransient_swigregister(Handle_TColStd_ListNodeOfListOfTransient)

def Handle_TColStd_ListNodeOfListOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_ListNodeOfListOfTransient const":
    return _TColStd.Handle_TColStd_ListNodeOfListOfTransient_DownCast(AnObject)
Handle_TColStd_ListNodeOfListOfTransient_DownCast = _TColStd.Handle_TColStd_ListNodeOfListOfTransient_DownCast

class TColStd_ListOfAsciiString(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_ListOfAsciiString_swiginit(self, _TColStd.new_TColStd_ListOfAsciiString(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_ListOfAsciiString_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListOfAsciiString_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: None

        :param I:
        :type I: TCollection_AsciiString &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: None

        :param I:
        :type I: TCollection_AsciiString &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Append(self, *args)


    def First(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_ListOfAsciiString_First(self, *args)


    def Last(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_ListOfAsciiString_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: TCollection_AsciiString &
        :param It:
        :type It: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :param It:
        :type It: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: TCollection_AsciiString &
        :param It:
        :type It: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfAsciiString &
        :param It:
        :type It: TColStd_ListIteratorOfListOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfAsciiString_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListOfAsciiString
TColStd_ListOfAsciiString.Assign = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Assign, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Set = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Set, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Extent = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Extent, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Clear = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Clear, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.IsEmpty = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_IsEmpty, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Prepend = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Prepend, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Append = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Append, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.First = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_First, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Last = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Last, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.RemoveFirst = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_RemoveFirst, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.Remove = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_Remove, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.InsertBefore = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_InsertBefore, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString.InsertAfter = new_instancemethod(_TColStd.TColStd_ListOfAsciiString_InsertAfter, None, TColStd_ListOfAsciiString)
TColStd_ListOfAsciiString_swigregister = _TColStd.TColStd_ListOfAsciiString_swigregister
TColStd_ListOfAsciiString_swigregister(TColStd_ListOfAsciiString)

class TColStd_ListOfInteger(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_ListOfInteger_swiginit(self, _TColStd.new_TColStd_ListOfInteger(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_ListOfInteger_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListOfInteger_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: int &
        :rtype: None

        :param I:
        :type I: int &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: int &
        :rtype: None

        :param I:
        :type I: int &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Append(self, *args)


    def GetFirst(self) -> "Standard_Integer":
        """GetFirst(TColStd_ListOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_ListOfInteger_GetFirst(self)


    def SetFirst(self, value: 'Standard_Integer') -> "void":
        """SetFirst(TColStd_ListOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_ListOfInteger_SetFirst(self, value)


    def GetLast(self) -> "Standard_Integer":
        """GetLast(TColStd_ListOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_ListOfInteger_GetLast(self)


    def SetLast(self, value: 'Standard_Integer') -> "void":
        """SetLast(TColStd_ListOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_ListOfInteger_SetLast(self, value)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: int &
        :param It:
        :type It: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfInteger &
        :param It:
        :type It: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: int &
        :param It:
        :type It: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfInteger &
        :param It:
        :type It: TColStd_ListIteratorOfListOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfInteger_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListOfInteger
TColStd_ListOfInteger.Assign = new_instancemethod(_TColStd.TColStd_ListOfInteger_Assign, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Set = new_instancemethod(_TColStd.TColStd_ListOfInteger_Set, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Extent = new_instancemethod(_TColStd.TColStd_ListOfInteger_Extent, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Clear = new_instancemethod(_TColStd.TColStd_ListOfInteger_Clear, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.IsEmpty = new_instancemethod(_TColStd.TColStd_ListOfInteger_IsEmpty, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Prepend = new_instancemethod(_TColStd.TColStd_ListOfInteger_Prepend, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Append = new_instancemethod(_TColStd.TColStd_ListOfInteger_Append, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.GetFirst = new_instancemethod(_TColStd.TColStd_ListOfInteger_GetFirst, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.SetFirst = new_instancemethod(_TColStd.TColStd_ListOfInteger_SetFirst, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.GetLast = new_instancemethod(_TColStd.TColStd_ListOfInteger_GetLast, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.SetLast = new_instancemethod(_TColStd.TColStd_ListOfInteger_SetLast, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.RemoveFirst = new_instancemethod(_TColStd.TColStd_ListOfInteger_RemoveFirst, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.Remove = new_instancemethod(_TColStd.TColStd_ListOfInteger_Remove, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.InsertBefore = new_instancemethod(_TColStd.TColStd_ListOfInteger_InsertBefore, None, TColStd_ListOfInteger)
TColStd_ListOfInteger.InsertAfter = new_instancemethod(_TColStd.TColStd_ListOfInteger_InsertAfter, None, TColStd_ListOfInteger)
TColStd_ListOfInteger_swigregister = _TColStd.TColStd_ListOfInteger_swigregister
TColStd_ListOfInteger_swigregister(TColStd_ListOfInteger)

class TColStd_ListOfReal(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfReal &
        :rtype: None

        """
        _TColStd.TColStd_ListOfReal_swiginit(self, _TColStd.new_TColStd_ListOfReal(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_ListOfReal_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListOfReal_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: float &
        :rtype: None

        :param I:
        :type I: float &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: float &
        :rtype: None

        :param I:
        :type I: float &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Append(self, *args)


    def GetFirst(self) -> "Standard_Real":
        """GetFirst(TColStd_ListOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_ListOfReal_GetFirst(self)


    def SetFirst(self, value: 'Standard_Real') -> "void":
        """SetFirst(TColStd_ListOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_ListOfReal_SetFirst(self, value)


    def GetLast(self) -> "Standard_Real":
        """GetLast(TColStd_ListOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_ListOfReal_GetLast(self)


    def SetLast(self, value: 'Standard_Real') -> "void":
        """SetLast(TColStd_ListOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_ListOfReal_SetLast(self, value)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: float &
        :param It:
        :type It: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfReal &
        :param It:
        :type It: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: float &
        :param It:
        :type It: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfReal &
        :param It:
        :type It: TColStd_ListIteratorOfListOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfReal_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListOfReal
TColStd_ListOfReal.Assign = new_instancemethod(_TColStd.TColStd_ListOfReal_Assign, None, TColStd_ListOfReal)
TColStd_ListOfReal.Set = new_instancemethod(_TColStd.TColStd_ListOfReal_Set, None, TColStd_ListOfReal)
TColStd_ListOfReal.Extent = new_instancemethod(_TColStd.TColStd_ListOfReal_Extent, None, TColStd_ListOfReal)
TColStd_ListOfReal.Clear = new_instancemethod(_TColStd.TColStd_ListOfReal_Clear, None, TColStd_ListOfReal)
TColStd_ListOfReal.IsEmpty = new_instancemethod(_TColStd.TColStd_ListOfReal_IsEmpty, None, TColStd_ListOfReal)
TColStd_ListOfReal.Prepend = new_instancemethod(_TColStd.TColStd_ListOfReal_Prepend, None, TColStd_ListOfReal)
TColStd_ListOfReal.Append = new_instancemethod(_TColStd.TColStd_ListOfReal_Append, None, TColStd_ListOfReal)
TColStd_ListOfReal.GetFirst = new_instancemethod(_TColStd.TColStd_ListOfReal_GetFirst, None, TColStd_ListOfReal)
TColStd_ListOfReal.SetFirst = new_instancemethod(_TColStd.TColStd_ListOfReal_SetFirst, None, TColStd_ListOfReal)
TColStd_ListOfReal.GetLast = new_instancemethod(_TColStd.TColStd_ListOfReal_GetLast, None, TColStd_ListOfReal)
TColStd_ListOfReal.SetLast = new_instancemethod(_TColStd.TColStd_ListOfReal_SetLast, None, TColStd_ListOfReal)
TColStd_ListOfReal.RemoveFirst = new_instancemethod(_TColStd.TColStd_ListOfReal_RemoveFirst, None, TColStd_ListOfReal)
TColStd_ListOfReal.Remove = new_instancemethod(_TColStd.TColStd_ListOfReal_Remove, None, TColStd_ListOfReal)
TColStd_ListOfReal.InsertBefore = new_instancemethod(_TColStd.TColStd_ListOfReal_InsertBefore, None, TColStd_ListOfReal)
TColStd_ListOfReal.InsertAfter = new_instancemethod(_TColStd.TColStd_ListOfReal_InsertAfter, None, TColStd_ListOfReal)
TColStd_ListOfReal_swigregister = _TColStd.TColStd_ListOfReal_swigregister
TColStd_ListOfReal_swigregister(TColStd_ListOfReal)

class TColStd_ListOfTransient(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_ListOfTransient_swiginit(self, _TColStd.new_TColStd_ListOfTransient(*args))

    def Assign(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Assign(self, *args)


    def Set(self, *args) -> "void":
        """
        :param Other:
        :type Other: TColStd_ListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Set(self, *args)


    def Extent(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _TColStd.TColStd_ListOfTransient_Extent(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Clear(self, *args)


    def IsEmpty(self, *args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_ListOfTransient_IsEmpty(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: None

        :param I:
        :type I: Handle_Standard_Transient &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Prepend(self, *args)


    def Append(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: None

        :param I:
        :type I: Handle_Standard_Transient &
        :param theIt:
        :type theIt: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Append(self, *args)


    def First(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_ListOfTransient_First(self, *args)


    def Last(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_ListOfTransient_Last(self, *args)


    def RemoveFirst(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_RemoveFirst(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param It:
        :type It: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_Remove(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :param It:
        :type It: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfTransient &
        :param It:
        :type It: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :param It:
        :type It: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        :param Other:
        :type Other: TColStd_ListOfTransient &
        :param It:
        :type It: TColStd_ListIteratorOfListOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_ListOfTransient_InsertAfter(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_ListOfTransient
TColStd_ListOfTransient.Assign = new_instancemethod(_TColStd.TColStd_ListOfTransient_Assign, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Set = new_instancemethod(_TColStd.TColStd_ListOfTransient_Set, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Extent = new_instancemethod(_TColStd.TColStd_ListOfTransient_Extent, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Clear = new_instancemethod(_TColStd.TColStd_ListOfTransient_Clear, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.IsEmpty = new_instancemethod(_TColStd.TColStd_ListOfTransient_IsEmpty, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Prepend = new_instancemethod(_TColStd.TColStd_ListOfTransient_Prepend, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Append = new_instancemethod(_TColStd.TColStd_ListOfTransient_Append, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.First = new_instancemethod(_TColStd.TColStd_ListOfTransient_First, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Last = new_instancemethod(_TColStd.TColStd_ListOfTransient_Last, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.RemoveFirst = new_instancemethod(_TColStd.TColStd_ListOfTransient_RemoveFirst, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.Remove = new_instancemethod(_TColStd.TColStd_ListOfTransient_Remove, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.InsertBefore = new_instancemethod(_TColStd.TColStd_ListOfTransient_InsertBefore, None, TColStd_ListOfTransient)
TColStd_ListOfTransient.InsertAfter = new_instancemethod(_TColStd.TColStd_ListOfTransient_InsertAfter, None, TColStd_ListOfTransient)
TColStd_ListOfTransient_swigregister = _TColStd.TColStd_ListOfTransient_swigregister
TColStd_ListOfTransient_swigregister(TColStd_ListOfTransient)

class TColStd_MapIntegerHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        :param K:
        :type K: int &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TColStd.TColStd_MapIntegerHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param K1:
        :type K1: int &
        :param K2:
        :type K2: int &
        :rtype: bool

        """
        return _TColStd.TColStd_MapIntegerHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _TColStd.TColStd_MapIntegerHasher_swiginit(self, _TColStd.new_TColStd_MapIntegerHasher())
    __swig_destroy__ = _TColStd.delete_TColStd_MapIntegerHasher
TColStd_MapIntegerHasher_swigregister = _TColStd.TColStd_MapIntegerHasher_swigregister
TColStd_MapIntegerHasher_swigregister(TColStd_MapIntegerHasher)

def TColStd_MapIntegerHasher_HashCode(*args) -> "Standard_Integer":
    """
    :param K:
    :type K: int &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TColStd.TColStd_MapIntegerHasher_HashCode(*args)

def TColStd_MapIntegerHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param K1:
    :type K1: int &
    :param K2:
    :type K2: int &
    :rtype: bool

    """
    return _TColStd.TColStd_MapIntegerHasher_IsEqual(*args)

class TColStd_MapIteratorOfMapOfAsciiString(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_MapOfAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_MapIteratorOfMapOfAsciiString_swiginit(self, _TColStd.new_TColStd_MapIteratorOfMapOfAsciiString(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_MapOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfMapOfAsciiString_Initialize(self, *args)


    def Key(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_MapIteratorOfMapOfAsciiString_Key(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapIteratorOfMapOfAsciiString
TColStd_MapIteratorOfMapOfAsciiString.Initialize = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfAsciiString_Initialize, None, TColStd_MapIteratorOfMapOfAsciiString)
TColStd_MapIteratorOfMapOfAsciiString.Key = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfAsciiString_Key, None, TColStd_MapIteratorOfMapOfAsciiString)
TColStd_MapIteratorOfMapOfAsciiString_swigregister = _TColStd.TColStd_MapIteratorOfMapOfAsciiString_swigregister
TColStd_MapIteratorOfMapOfAsciiString_swigregister(TColStd_MapIteratorOfMapOfAsciiString)

class TColStd_MapIteratorOfMapOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_MapOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_MapIteratorOfMapOfInteger_swiginit(self, _TColStd.new_TColStd_MapIteratorOfMapOfInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_MapOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfMapOfInteger_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_MapIteratorOfMapOfInteger_Key(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapIteratorOfMapOfInteger
TColStd_MapIteratorOfMapOfInteger.Initialize = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfInteger_Initialize, None, TColStd_MapIteratorOfMapOfInteger)
TColStd_MapIteratorOfMapOfInteger.Key = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfInteger_Key, None, TColStd_MapIteratorOfMapOfInteger)
TColStd_MapIteratorOfMapOfInteger_swigregister = _TColStd.TColStd_MapIteratorOfMapOfInteger_swigregister
TColStd_MapIteratorOfMapOfInteger_swigregister(TColStd_MapIteratorOfMapOfInteger)

class TColStd_MapIteratorOfMapOfReal(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_MapOfReal &
        :rtype: None

        """
        _TColStd.TColStd_MapIteratorOfMapOfReal_swiginit(self, _TColStd.new_TColStd_MapIteratorOfMapOfReal(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_MapOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfMapOfReal_Initialize(self, *args)


    def Key(self, *args) -> "Standard_Real const &":
        """
        :rtype: float

        """
        return _TColStd.TColStd_MapIteratorOfMapOfReal_Key(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapIteratorOfMapOfReal
TColStd_MapIteratorOfMapOfReal.Initialize = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfReal_Initialize, None, TColStd_MapIteratorOfMapOfReal)
TColStd_MapIteratorOfMapOfReal.Key = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfReal_Key, None, TColStd_MapIteratorOfMapOfReal)
TColStd_MapIteratorOfMapOfReal_swigregister = _TColStd.TColStd_MapIteratorOfMapOfReal_swigregister
TColStd_MapIteratorOfMapOfReal_swigregister(TColStd_MapIteratorOfMapOfReal)

class TColStd_MapIteratorOfMapOfTransient(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param aMap:
        :type aMap: TColStd_MapOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_MapIteratorOfMapOfTransient_swiginit(self, _TColStd.new_TColStd_MapIteratorOfMapOfTransient(*args))

    def Initialize(self, *args) -> "void":
        """
        :param aMap:
        :type aMap: TColStd_MapOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfMapOfTransient_Initialize(self, *args)


    def Key(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_MapIteratorOfMapOfTransient_Key(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapIteratorOfMapOfTransient
TColStd_MapIteratorOfMapOfTransient.Initialize = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfTransient_Initialize, None, TColStd_MapIteratorOfMapOfTransient)
TColStd_MapIteratorOfMapOfTransient.Key = new_instancemethod(_TColStd.TColStd_MapIteratorOfMapOfTransient_Key, None, TColStd_MapIteratorOfMapOfTransient)
TColStd_MapIteratorOfMapOfTransient_swigregister = _TColStd.TColStd_MapIteratorOfMapOfTransient_swigregister
TColStd_MapIteratorOfMapOfTransient_swigregister(TColStd_MapIteratorOfMapOfTransient)

class TColStd_MapIteratorOfPackedMapOfInteger(OCC.TCollection.TCollection_BasicMapIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * /// Empty Constructor.

        :rtype: None

        * /// Constructor.

        :param &:
        :type &: TColStd_PackedMapOfInteger
        :rtype: None

        """
        _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_swiginit(self, _TColStd.new_TColStd_MapIteratorOfPackedMapOfInteger(*args))

    def Initialize(self, *args) -> "void":
        """
        * /// Re-initialize with the same or another Map instance.

        :param &:
        :type &: TColStd_PackedMapOfInteger
        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Initialize(self, *args)


    def Reset(self, *args) -> "void":
        """
        * /// Restart the iteraton

        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Reset(self, *args)


    def Key(self, *args) -> "Standard_Integer":
        """
        * /// Query the iterated key. Defined in TColStd_PackedMapOfInteger.cxx

        :rtype: inline int

        """
        return _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Key(self, *args)


    def Next(self, *args) -> "void":
        """
        * /// Increment the iterator

        :rtype: None

        """
        return _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Next(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapIteratorOfPackedMapOfInteger
TColStd_MapIteratorOfPackedMapOfInteger.Initialize = new_instancemethod(_TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Initialize, None, TColStd_MapIteratorOfPackedMapOfInteger)
TColStd_MapIteratorOfPackedMapOfInteger.Reset = new_instancemethod(_TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Reset, None, TColStd_MapIteratorOfPackedMapOfInteger)
TColStd_MapIteratorOfPackedMapOfInteger.Key = new_instancemethod(_TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Key, None, TColStd_MapIteratorOfPackedMapOfInteger)
TColStd_MapIteratorOfPackedMapOfInteger.Next = new_instancemethod(_TColStd.TColStd_MapIteratorOfPackedMapOfInteger_Next, None, TColStd_MapIteratorOfPackedMapOfInteger)
TColStd_MapIteratorOfPackedMapOfInteger_swigregister = _TColStd.TColStd_MapIteratorOfPackedMapOfInteger_swigregister
TColStd_MapIteratorOfPackedMapOfInteger_swigregister(TColStd_MapIteratorOfPackedMapOfInteger)

class TColStd_MapOfAsciiString(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_MapOfAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_MapOfAsciiString_swiginit(self, _TColStd.new_TColStd_MapOfAsciiString(*args))

    def Assign(self, *args) -> "TColStd_MapOfAsciiString &":
        """
        :param Other:
        :type Other: TColStd_MapOfAsciiString &
        :rtype: TColStd_MapOfAsciiString

        """
        return _TColStd.TColStd_MapOfAsciiString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_MapOfAsciiString &":
        """
        :param Other:
        :type Other: TColStd_MapOfAsciiString &
        :rtype: TColStd_MapOfAsciiString

        """
        return _TColStd.TColStd_MapOfAsciiString_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_MapOfAsciiString_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_MapOfAsciiString_Clear(self, *args)


    def Add(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: TCollection_AsciiString &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfAsciiString_Add(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: TCollection_AsciiString &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfAsciiString_Contains(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: TCollection_AsciiString &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfAsciiString_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapOfAsciiString
TColStd_MapOfAsciiString.Assign = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Assign, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.Set = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Set, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.ReSize = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_ReSize, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.Clear = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Clear, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.Add = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Add, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.Contains = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Contains, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString.Remove = new_instancemethod(_TColStd.TColStd_MapOfAsciiString_Remove, None, TColStd_MapOfAsciiString)
TColStd_MapOfAsciiString_swigregister = _TColStd.TColStd_MapOfAsciiString_swigregister
TColStd_MapOfAsciiString_swigregister(TColStd_MapOfAsciiString)

class TColStd_MapOfInteger(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_MapOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_MapOfInteger_swiginit(self, _TColStd.new_TColStd_MapOfInteger(*args))

    def Assign(self, *args) -> "TColStd_MapOfInteger &":
        """
        :param Other:
        :type Other: TColStd_MapOfInteger &
        :rtype: TColStd_MapOfInteger

        """
        return _TColStd.TColStd_MapOfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_MapOfInteger &":
        """
        :param Other:
        :type Other: TColStd_MapOfInteger &
        :rtype: TColStd_MapOfInteger

        """
        return _TColStd.TColStd_MapOfInteger_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_MapOfInteger_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_MapOfInteger_Clear(self, *args)


    def Add(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: int &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfInteger_Add(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: int &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfInteger_Contains(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: int &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfInteger_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapOfInteger
TColStd_MapOfInteger.Assign = new_instancemethod(_TColStd.TColStd_MapOfInteger_Assign, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.Set = new_instancemethod(_TColStd.TColStd_MapOfInteger_Set, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.ReSize = new_instancemethod(_TColStd.TColStd_MapOfInteger_ReSize, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.Clear = new_instancemethod(_TColStd.TColStd_MapOfInteger_Clear, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.Add = new_instancemethod(_TColStd.TColStd_MapOfInteger_Add, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.Contains = new_instancemethod(_TColStd.TColStd_MapOfInteger_Contains, None, TColStd_MapOfInteger)
TColStd_MapOfInteger.Remove = new_instancemethod(_TColStd.TColStd_MapOfInteger_Remove, None, TColStd_MapOfInteger)
TColStd_MapOfInteger_swigregister = _TColStd.TColStd_MapOfInteger_swigregister
TColStd_MapOfInteger_swigregister(TColStd_MapOfInteger)

class TColStd_MapOfReal(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_MapOfReal &
        :rtype: None

        """
        _TColStd.TColStd_MapOfReal_swiginit(self, _TColStd.new_TColStd_MapOfReal(*args))

    def Assign(self, *args) -> "TColStd_MapOfReal &":
        """
        :param Other:
        :type Other: TColStd_MapOfReal &
        :rtype: TColStd_MapOfReal

        """
        return _TColStd.TColStd_MapOfReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_MapOfReal &":
        """
        :param Other:
        :type Other: TColStd_MapOfReal &
        :rtype: TColStd_MapOfReal

        """
        return _TColStd.TColStd_MapOfReal_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_MapOfReal_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_MapOfReal_Clear(self, *args)


    def Add(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: float &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfReal_Add(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: float &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfReal_Contains(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: float &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfReal_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapOfReal
TColStd_MapOfReal.Assign = new_instancemethod(_TColStd.TColStd_MapOfReal_Assign, None, TColStd_MapOfReal)
TColStd_MapOfReal.Set = new_instancemethod(_TColStd.TColStd_MapOfReal_Set, None, TColStd_MapOfReal)
TColStd_MapOfReal.ReSize = new_instancemethod(_TColStd.TColStd_MapOfReal_ReSize, None, TColStd_MapOfReal)
TColStd_MapOfReal.Clear = new_instancemethod(_TColStd.TColStd_MapOfReal_Clear, None, TColStd_MapOfReal)
TColStd_MapOfReal.Add = new_instancemethod(_TColStd.TColStd_MapOfReal_Add, None, TColStd_MapOfReal)
TColStd_MapOfReal.Contains = new_instancemethod(_TColStd.TColStd_MapOfReal_Contains, None, TColStd_MapOfReal)
TColStd_MapOfReal.Remove = new_instancemethod(_TColStd.TColStd_MapOfReal_Remove, None, TColStd_MapOfReal)
TColStd_MapOfReal_swigregister = _TColStd.TColStd_MapOfReal_swigregister
TColStd_MapOfReal_swigregister(TColStd_MapOfReal)

class TColStd_MapOfTransient(OCC.TCollection.TCollection_BasicMap):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param NbBuckets: default value is 1
        :type NbBuckets: int
        :rtype: None

        :param Other:
        :type Other: TColStd_MapOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_MapOfTransient_swiginit(self, _TColStd.new_TColStd_MapOfTransient(*args))

    def Assign(self, *args) -> "TColStd_MapOfTransient &":
        """
        :param Other:
        :type Other: TColStd_MapOfTransient &
        :rtype: TColStd_MapOfTransient

        """
        return _TColStd.TColStd_MapOfTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_MapOfTransient &":
        """
        :param Other:
        :type Other: TColStd_MapOfTransient &
        :rtype: TColStd_MapOfTransient

        """
        return _TColStd.TColStd_MapOfTransient_Set(self, *args)


    def ReSize(self, *args) -> "void":
        """
        :param NbBuckets:
        :type NbBuckets: int
        :rtype: None

        """
        return _TColStd.TColStd_MapOfTransient_ReSize(self, *args)


    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_MapOfTransient_Clear(self, *args)


    def Add(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfTransient_Add(self, *args)


    def Contains(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfTransient_Contains(self, *args)


    def Remove(self, *args) -> "Standard_Boolean":
        """
        :param aKey:
        :type aKey: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_MapOfTransient_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_MapOfTransient
TColStd_MapOfTransient.Assign = new_instancemethod(_TColStd.TColStd_MapOfTransient_Assign, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.Set = new_instancemethod(_TColStd.TColStd_MapOfTransient_Set, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.ReSize = new_instancemethod(_TColStd.TColStd_MapOfTransient_ReSize, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.Clear = new_instancemethod(_TColStd.TColStd_MapOfTransient_Clear, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.Add = new_instancemethod(_TColStd.TColStd_MapOfTransient_Add, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.Contains = new_instancemethod(_TColStd.TColStd_MapOfTransient_Contains, None, TColStd_MapOfTransient)
TColStd_MapOfTransient.Remove = new_instancemethod(_TColStd.TColStd_MapOfTransient_Remove, None, TColStd_MapOfTransient)
TColStd_MapOfTransient_swigregister = _TColStd.TColStd_MapOfTransient_swigregister
TColStd_MapOfTransient_swigregister(TColStd_MapOfTransient)

class TColStd_MapRealHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        :param K:
        :type K: float &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TColStd.TColStd_MapRealHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param K1:
        :type K1: float &
        :param K2:
        :type K2: float &
        :rtype: bool

        """
        return _TColStd.TColStd_MapRealHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _TColStd.TColStd_MapRealHasher_swiginit(self, _TColStd.new_TColStd_MapRealHasher())
    __swig_destroy__ = _TColStd.delete_TColStd_MapRealHasher
TColStd_MapRealHasher_swigregister = _TColStd.TColStd_MapRealHasher_swigregister
TColStd_MapRealHasher_swigregister(TColStd_MapRealHasher)

def TColStd_MapRealHasher_HashCode(*args) -> "Standard_Integer":
    """
    :param K:
    :type K: float &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TColStd.TColStd_MapRealHasher_HashCode(*args)

def TColStd_MapRealHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param K1:
    :type K1: float &
    :param K2:
    :type K2: float &
    :rtype: bool

    """
    return _TColStd.TColStd_MapRealHasher_IsEqual(*args)

class TColStd_MapTransientHasher(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def HashCode(*args) -> "Standard_Integer":
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param Upper:
        :type Upper: int
        :rtype: int

        """
        return _TColStd.TColStd_MapTransientHasher_HashCode(*args)

    HashCode = staticmethod(HashCode)

    def IsEqual(*args) -> "Standard_Boolean":
        """
        :param K1:
        :type K1: Handle_Standard_Transient &
        :param K2:
        :type K2: Handle_Standard_Transient &
        :rtype: bool

        """
        return _TColStd.TColStd_MapTransientHasher_IsEqual(*args)

    IsEqual = staticmethod(IsEqual)

    __repr__ = _dumps_object


    def __init__(self):
        _TColStd.TColStd_MapTransientHasher_swiginit(self, _TColStd.new_TColStd_MapTransientHasher())
    __swig_destroy__ = _TColStd.delete_TColStd_MapTransientHasher
TColStd_MapTransientHasher_swigregister = _TColStd.TColStd_MapTransientHasher_swigregister
TColStd_MapTransientHasher_swigregister(TColStd_MapTransientHasher)

def TColStd_MapTransientHasher_HashCode(*args) -> "Standard_Integer":
    """
    :param K:
    :type K: Handle_Standard_Transient &
    :param Upper:
    :type Upper: int
    :rtype: int

    """
    return _TColStd.TColStd_MapTransientHasher_HashCode(*args)

def TColStd_MapTransientHasher_IsEqual(*args) -> "Standard_Boolean":
    """
    :param K1:
    :type K1: Handle_Standard_Transient &
    :param K2:
    :type K2: Handle_Standard_Transient &
    :rtype: bool

    """
    return _TColStd.TColStd_MapTransientHasher_IsEqual(*args)

class TColStd_SequenceNodeOfSequenceOfAddress(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Standard_Address &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfAddress_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfAddress(*args))

    def Value(self, *args) -> "Standard_Address &":
        """
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfAddress_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfAddress(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfAddress
TColStd_SequenceNodeOfSequenceOfAddress.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfAddress_Value, None, TColStd_SequenceNodeOfSequenceOfAddress)
TColStd_SequenceNodeOfSequenceOfAddress_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfAddress_swigregister
TColStd_SequenceNodeOfSequenceOfAddress_swigregister(TColStd_SequenceNodeOfSequenceOfAddress)

class Handle_TColStd_SequenceNodeOfSequenceOfAddress(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfAddress(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfAddress
Handle_TColStd_SequenceNodeOfSequenceOfAddress.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfAddress)
Handle_TColStd_SequenceNodeOfSequenceOfAddress.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfAddress)
Handle_TColStd_SequenceNodeOfSequenceOfAddress._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfAddress)
Handle_TColStd_SequenceNodeOfSequenceOfAddress_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfAddress_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfAddress)

def Handle_TColStd_SequenceNodeOfSequenceOfAddress_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfAddress const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfAddress_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAddress_DownCast

class TColStd_SequenceNodeOfSequenceOfAsciiString(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TCollection_AsciiString &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfAsciiString_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfAsciiString(*args))

    def Value(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfAsciiString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfAsciiString
TColStd_SequenceNodeOfSequenceOfAsciiString.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfAsciiString_Value, None, TColStd_SequenceNodeOfSequenceOfAsciiString)
TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister
TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister(TColStd_SequenceNodeOfSequenceOfAsciiString)

class Handle_TColStd_SequenceNodeOfSequenceOfAsciiString(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfAsciiString
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfAsciiString)

def Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfAsciiString const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfAsciiString_DownCast

class TColStd_SequenceNodeOfSequenceOfBoolean(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: bool
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfBoolean(*args))

    def GetValue(self) -> "Standard_Boolean":
        """GetValue(TColStd_SequenceNodeOfSequenceOfBoolean self) -> Standard_Boolean"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_GetValue(self)


    def SetValue(self, value: 'Standard_Boolean') -> "void":
        """SetValue(TColStd_SequenceNodeOfSequenceOfBoolean self, Standard_Boolean value)"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfBoolean(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfBoolean
TColStd_SequenceNodeOfSequenceOfBoolean.GetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_GetValue, None, TColStd_SequenceNodeOfSequenceOfBoolean)
TColStd_SequenceNodeOfSequenceOfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_SetValue, None, TColStd_SequenceNodeOfSequenceOfBoolean)
TColStd_SequenceNodeOfSequenceOfBoolean_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfBoolean_swigregister
TColStd_SequenceNodeOfSequenceOfBoolean_swigregister(TColStd_SequenceNodeOfSequenceOfBoolean)

class Handle_TColStd_SequenceNodeOfSequenceOfBoolean(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfBoolean(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfBoolean
Handle_TColStd_SequenceNodeOfSequenceOfBoolean.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfBoolean)
Handle_TColStd_SequenceNodeOfSequenceOfBoolean.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfBoolean)
Handle_TColStd_SequenceNodeOfSequenceOfBoolean._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfBoolean)
Handle_TColStd_SequenceNodeOfSequenceOfBoolean_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfBoolean_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfBoolean)

def Handle_TColStd_SequenceNodeOfSequenceOfBoolean_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfBoolean const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfBoolean_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfBoolean_DownCast

class TColStd_SequenceNodeOfSequenceOfExtendedString(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: TCollection_ExtendedString &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfExtendedString_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfExtendedString(*args))

    def Value(self, *args) -> "TCollection_ExtendedString &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfExtendedString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfExtendedString
TColStd_SequenceNodeOfSequenceOfExtendedString.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfExtendedString_Value, None, TColStd_SequenceNodeOfSequenceOfExtendedString)
TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister
TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister(TColStd_SequenceNodeOfSequenceOfExtendedString)

class Handle_TColStd_SequenceNodeOfSequenceOfExtendedString(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfExtendedString
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfExtendedString)

def Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfExtendedString const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfExtendedString_DownCast

class TColStd_SequenceNodeOfSequenceOfHAsciiString(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_TCollection_HAsciiString &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfHAsciiString_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfHAsciiString(*args))

    def Value(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfHAsciiString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfHAsciiString
TColStd_SequenceNodeOfSequenceOfHAsciiString.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfHAsciiString_Value, None, TColStd_SequenceNodeOfSequenceOfHAsciiString)
TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister
TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister(TColStd_SequenceNodeOfSequenceOfHAsciiString)

class Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString)
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString)

def Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHAsciiString_DownCast

class TColStd_SequenceNodeOfSequenceOfHExtendedString(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_TCollection_HExtendedString &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfHExtendedString_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfHExtendedString(*args))

    def Value(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfHExtendedString_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfHExtendedString
TColStd_SequenceNodeOfSequenceOfHExtendedString.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfHExtendedString_Value, None, TColStd_SequenceNodeOfSequenceOfHExtendedString)
TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister
TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister(TColStd_SequenceNodeOfSequenceOfHExtendedString)

class Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString)
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString)

def Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfHExtendedString_DownCast

class TColStd_SequenceNodeOfSequenceOfInteger(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: int &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfInteger_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfInteger(*args))

    def GetValue(self) -> "Standard_Integer":
        """GetValue(TColStd_SequenceNodeOfSequenceOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfInteger_GetValue(self)


    def SetValue(self, value: 'Standard_Integer') -> "void":
        """SetValue(TColStd_SequenceNodeOfSequenceOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfInteger_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfInteger
TColStd_SequenceNodeOfSequenceOfInteger.GetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfInteger_GetValue, None, TColStd_SequenceNodeOfSequenceOfInteger)
TColStd_SequenceNodeOfSequenceOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfInteger_SetValue, None, TColStd_SequenceNodeOfSequenceOfInteger)
TColStd_SequenceNodeOfSequenceOfInteger_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfInteger_swigregister
TColStd_SequenceNodeOfSequenceOfInteger_swigregister(TColStd_SequenceNodeOfSequenceOfInteger)

class Handle_TColStd_SequenceNodeOfSequenceOfInteger(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfInteger
Handle_TColStd_SequenceNodeOfSequenceOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfInteger)
Handle_TColStd_SequenceNodeOfSequenceOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfInteger)
Handle_TColStd_SequenceNodeOfSequenceOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfInteger)
Handle_TColStd_SequenceNodeOfSequenceOfInteger_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfInteger_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfInteger)

def Handle_TColStd_SequenceNodeOfSequenceOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfInteger const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfInteger_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfInteger_DownCast

class TColStd_SequenceNodeOfSequenceOfReal(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: float &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfReal_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfReal(*args))

    def GetValue(self) -> "Standard_Real":
        """GetValue(TColStd_SequenceNodeOfSequenceOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfReal_GetValue(self)


    def SetValue(self, value: 'Standard_Real') -> "void":
        """SetValue(TColStd_SequenceNodeOfSequenceOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_SequenceNodeOfSequenceOfReal_SetValue(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfReal
TColStd_SequenceNodeOfSequenceOfReal.GetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfReal_GetValue, None, TColStd_SequenceNodeOfSequenceOfReal)
TColStd_SequenceNodeOfSequenceOfReal.SetValue = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfReal_SetValue, None, TColStd_SequenceNodeOfSequenceOfReal)
TColStd_SequenceNodeOfSequenceOfReal_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfReal_swigregister
TColStd_SequenceNodeOfSequenceOfReal_swigregister(TColStd_SequenceNodeOfSequenceOfReal)

class Handle_TColStd_SequenceNodeOfSequenceOfReal(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfReal
Handle_TColStd_SequenceNodeOfSequenceOfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfReal)
Handle_TColStd_SequenceNodeOfSequenceOfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfReal)
Handle_TColStd_SequenceNodeOfSequenceOfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfReal)
Handle_TColStd_SequenceNodeOfSequenceOfReal_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfReal_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfReal)

def Handle_TColStd_SequenceNodeOfSequenceOfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfReal const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfReal_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfReal_DownCast

class TColStd_SequenceNodeOfSequenceOfTransient(OCC.TCollection.TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param I:
        :type I: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_SeqNodePtr &
        :param p:
        :type p: TCollection_SeqNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_SequenceNodeOfSequenceOfTransient_swiginit(self, _TColStd.new_TColStd_SequenceNodeOfSequenceOfTransient(*args))

    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_SequenceNodeOfSequenceOfTransient_Value(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_SequenceNodeOfSequenceOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceNodeOfSequenceOfTransient
TColStd_SequenceNodeOfSequenceOfTransient.Value = new_instancemethod(_TColStd.TColStd_SequenceNodeOfSequenceOfTransient_Value, None, TColStd_SequenceNodeOfSequenceOfTransient)
TColStd_SequenceNodeOfSequenceOfTransient_swigregister = _TColStd.TColStd_SequenceNodeOfSequenceOfTransient_swigregister
TColStd_SequenceNodeOfSequenceOfTransient_swigregister(TColStd_SequenceNodeOfSequenceOfTransient)

class Handle_TColStd_SequenceNodeOfSequenceOfTransient(OCC.TCollection.Handle_TCollection_SeqNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_swiginit(self, _TColStd.new_Handle_TColStd_SequenceNodeOfSequenceOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_SequenceNodeOfSequenceOfTransient
Handle_TColStd_SequenceNodeOfSequenceOfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_Nullify, None, Handle_TColStd_SequenceNodeOfSequenceOfTransient)
Handle_TColStd_SequenceNodeOfSequenceOfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_IsNull, None, Handle_TColStd_SequenceNodeOfSequenceOfTransient)
Handle_TColStd_SequenceNodeOfSequenceOfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient__get_reference, None, Handle_TColStd_SequenceNodeOfSequenceOfTransient)
Handle_TColStd_SequenceNodeOfSequenceOfTransient_swigregister = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_swigregister
Handle_TColStd_SequenceNodeOfSequenceOfTransient_swigregister(Handle_TColStd_SequenceNodeOfSequenceOfTransient)

def Handle_TColStd_SequenceNodeOfSequenceOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_SequenceNodeOfSequenceOfTransient const":
    return _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_DownCast(AnObject)
Handle_TColStd_SequenceNodeOfSequenceOfTransient_DownCast = _TColStd.Handle_TColStd_SequenceNodeOfSequenceOfTransient_DownCast

class TColStd_SequenceOfAddress(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfAddress &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfAddress_swiginit(self, _TColStd.new_TColStd_SequenceOfAddress(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfAddress const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfAddress &
        :rtype: TColStd_SequenceOfAddress

        """
        return _TColStd.TColStd_SequenceOfAddress_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfAddress const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfAddress &
        :rtype: TColStd_SequenceOfAddress

        """
        return _TColStd.TColStd_SequenceOfAddress_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfAddress &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfAddress &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfAddress &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Standard_Address &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfAddress &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_InsertAfter(self, *args)


    def First(self, *args) -> "Standard_Address const &":
        """
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_SequenceOfAddress_First(self, *args)


    def Last(self, *args) -> "Standard_Address const &":
        """
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_SequenceOfAddress_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfAddress &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_Split(self, *args)


    def Value(self, *args) -> "Standard_Address const &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_SequenceOfAddress_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Standard_Address &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Standard_Address &":
        """
        :param Index:
        :type Index: int
        :rtype: Standard_Address

        """
        return _TColStd.TColStd_SequenceOfAddress_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAddress_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfAddress
TColStd_SequenceOfAddress.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Clear, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Assign, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Set = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Set, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Append = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Append, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Prepend, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_InsertBefore, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_InsertAfter, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.First = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_First, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Last = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Last, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Split = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Split, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Value = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Value, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_SetValue, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_ChangeValue, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfAddress_Remove, None, TColStd_SequenceOfAddress)
TColStd_SequenceOfAddress_swigregister = _TColStd.TColStd_SequenceOfAddress_swigregister
TColStd_SequenceOfAddress_swigregister(TColStd_SequenceOfAddress)

class TColStd_SequenceOfAsciiString(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfAsciiString_swiginit(self, _TColStd.new_TColStd_SequenceOfAsciiString(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfAsciiString &
        :rtype: TColStd_SequenceOfAsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfAsciiString &
        :rtype: TColStd_SequenceOfAsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: TCollection_AsciiString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: TCollection_AsciiString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TCollection_AsciiString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TCollection_AsciiString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_InsertAfter(self, *args)


    def First(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_First(self, *args)


    def Last(self, *args) -> "TCollection_AsciiString const &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Split(self, *args)


    def Value(self, *args) -> "TCollection_AsciiString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TCollection_AsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_SetValue(self, *args)


    def ChangeValue(self, *args) -> "TCollection_AsciiString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_SequenceOfAsciiString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfAsciiString_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfAsciiString
TColStd_SequenceOfAsciiString.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Clear, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Assign, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Set = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Set, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Append = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Append, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Prepend, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_InsertBefore, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_InsertAfter, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.First = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_First, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Last = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Last, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Split = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Split, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Value = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Value, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_SetValue, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_ChangeValue, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfAsciiString_Remove, None, TColStd_SequenceOfAsciiString)
TColStd_SequenceOfAsciiString_swigregister = _TColStd.TColStd_SequenceOfAsciiString_swigregister
TColStd_SequenceOfAsciiString_swigregister(TColStd_SequenceOfAsciiString)

class TColStd_SequenceOfBoolean(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfBoolean_swiginit(self, _TColStd.new_TColStd_SequenceOfBoolean(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfBoolean &
        :rtype: TColStd_SequenceOfBoolean

        """
        return _TColStd.TColStd_SequenceOfBoolean_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfBoolean const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfBoolean &
        :rtype: TColStd_SequenceOfBoolean

        """
        return _TColStd.TColStd_SequenceOfBoolean_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: bool
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: bool
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: bool
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: bool
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_InsertAfter(self, *args)


    def First(self, *args) -> "Standard_Boolean const &":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_SequenceOfBoolean_First(self, *args)


    def Last(self, *args) -> "Standard_Boolean const &":
        """
        :rtype: bool

        """
        return _TColStd.TColStd_SequenceOfBoolean_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfBoolean &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_Split(self, *args)


    def Value(self, *args) -> "Standard_Boolean const &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_SequenceOfBoolean_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: bool
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Standard_Boolean &":
        """
        :param Index:
        :type Index: int
        :rtype: bool

        """
        return _TColStd.TColStd_SequenceOfBoolean_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfBoolean_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfBoolean
TColStd_SequenceOfBoolean.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Clear, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Assign, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Set = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Set, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Append = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Append, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Prepend, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_InsertBefore, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_InsertAfter, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.First = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_First, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Last = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Last, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Split = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Split, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Value = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Value, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_SetValue, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_ChangeValue, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfBoolean_Remove, None, TColStd_SequenceOfBoolean)
TColStd_SequenceOfBoolean_swigregister = _TColStd.TColStd_SequenceOfBoolean_swigregister
TColStd_SequenceOfBoolean_swigregister(TColStd_SequenceOfBoolean)

class TColStd_SequenceOfExtendedString(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfExtendedString_swiginit(self, _TColStd.new_TColStd_SequenceOfExtendedString(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfExtendedString &
        :rtype: TColStd_SequenceOfExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfExtendedString &
        :rtype: TColStd_SequenceOfExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: TCollection_ExtendedString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: TCollection_ExtendedString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TCollection_ExtendedString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: TCollection_ExtendedString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_InsertAfter(self, *args)


    def First(self, *args) -> "TCollection_ExtendedString const &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_First(self, *args)


    def Last(self, *args) -> "TCollection_ExtendedString const &":
        """
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Split(self, *args)


    def Value(self, *args) -> "TCollection_ExtendedString const &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: TCollection_ExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_SetValue(self, *args)


    def ChangeValue(self, *args) -> "TCollection_ExtendedString &":
        """
        :param Index:
        :type Index: int
        :rtype: TCollection_ExtendedString

        """
        return _TColStd.TColStd_SequenceOfExtendedString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfExtendedString_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfExtendedString
TColStd_SequenceOfExtendedString.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Clear, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Assign, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Set = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Set, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Append = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Append, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Prepend, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_InsertBefore, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_InsertAfter, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.First = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_First, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Last = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Last, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Split = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Split, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Value = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Value, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_SetValue, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_ChangeValue, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfExtendedString_Remove, None, TColStd_SequenceOfExtendedString)
TColStd_SequenceOfExtendedString_swigregister = _TColStd.TColStd_SequenceOfExtendedString_swigregister
TColStd_SequenceOfExtendedString_swigregister(TColStd_SequenceOfExtendedString)

class TColStd_SequenceOfHAsciiString(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfHAsciiString_swiginit(self, _TColStd.new_TColStd_SequenceOfHAsciiString(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfHAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfHAsciiString &
        :rtype: TColStd_SequenceOfHAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfHAsciiString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfHAsciiString &
        :rtype: TColStd_SequenceOfHAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_TCollection_HAsciiString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_TCollection_HAsciiString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TCollection_HAsciiString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TCollection_HAsciiString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_First(self, *args)


    def Last(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfHAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Split(self, *args)


    def Value(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_TCollection_HAsciiString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_TCollection_HAsciiString":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TCollection_HAsciiString

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHAsciiString_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfHAsciiString
TColStd_SequenceOfHAsciiString.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Clear, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Assign, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Set = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Set, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Append = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Append, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Prepend, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_InsertBefore, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_InsertAfter, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.First = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_First, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Last = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Last, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Split = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Split, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Value = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Value, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_SetValue, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_ChangeValue, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfHAsciiString_Remove, None, TColStd_SequenceOfHAsciiString)
TColStd_SequenceOfHAsciiString_swigregister = _TColStd.TColStd_SequenceOfHAsciiString_swigregister
TColStd_SequenceOfHAsciiString_swigregister(TColStd_SequenceOfHAsciiString)

class TColStd_SequenceOfHExtendedString(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfHExtendedString_swiginit(self, _TColStd.new_TColStd_SequenceOfHExtendedString(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfHExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfHExtendedString &
        :rtype: TColStd_SequenceOfHExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfHExtendedString const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfHExtendedString &
        :rtype: TColStd_SequenceOfHExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_TCollection_HExtendedString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_TCollection_HExtendedString &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TCollection_HExtendedString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_TCollection_HExtendedString &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_First(self, *args)


    def Last(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfHExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Split(self, *args)


    def Value(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_TCollection_HExtendedString &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_TCollection_HExtendedString":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_TCollection_HExtendedString

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfHExtendedString_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfHExtendedString
TColStd_SequenceOfHExtendedString.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Clear, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Assign, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Set = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Set, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Append = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Append, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Prepend, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_InsertBefore, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_InsertAfter, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.First = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_First, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Last = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Last, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Split = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Split, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Value = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Value, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_SetValue, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_ChangeValue, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfHExtendedString_Remove, None, TColStd_SequenceOfHExtendedString)
TColStd_SequenceOfHExtendedString_swigregister = _TColStd.TColStd_SequenceOfHExtendedString_swigregister
TColStd_SequenceOfHExtendedString_swigregister(TColStd_SequenceOfHExtendedString)

class TColStd_SequenceOfInteger(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfInteger &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfInteger_swiginit(self, _TColStd.new_TColStd_SequenceOfInteger(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfInteger const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfInteger &
        :rtype: TColStd_SequenceOfInteger

        """
        return _TColStd.TColStd_SequenceOfInteger_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfInteger const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfInteger &
        :rtype: TColStd_SequenceOfInteger

        """
        return _TColStd.TColStd_SequenceOfInteger_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: int &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: int &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: int &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: int &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_InsertAfter(self, *args)


    def First(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_SequenceOfInteger_First(self, *args)


    def Last(self, *args) -> "Standard_Integer const &":
        """
        :rtype: int

        """
        return _TColStd.TColStd_SequenceOfInteger_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfInteger &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_Split(self, *args)


    def Value(self, *args) -> "Standard_Integer const &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_SequenceOfInteger_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: int &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Standard_Integer &":
        """
        :param Index:
        :type Index: int
        :rtype: int

        """
        return _TColStd.TColStd_SequenceOfInteger_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfInteger_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfInteger
TColStd_SequenceOfInteger.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Clear, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Assign, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Set = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Set, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Append = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Append, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Prepend, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_InsertBefore, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_InsertAfter, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.First = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_First, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Last = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Last, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Split = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Split, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Value = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Value, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_SetValue, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_ChangeValue, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfInteger_Remove, None, TColStd_SequenceOfInteger)
TColStd_SequenceOfInteger_swigregister = _TColStd.TColStd_SequenceOfInteger_swigregister
TColStd_SequenceOfInteger_swigregister(TColStd_SequenceOfInteger)

class TColStd_SequenceOfReal(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfReal &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfReal_swiginit(self, _TColStd.new_TColStd_SequenceOfReal(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfReal const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfReal &
        :rtype: TColStd_SequenceOfReal

        """
        return _TColStd.TColStd_SequenceOfReal_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfReal const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfReal &
        :rtype: TColStd_SequenceOfReal

        """
        return _TColStd.TColStd_SequenceOfReal_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: float &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: float &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: float &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: float &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_InsertAfter(self, *args)


    def First(self, *args) -> "Standard_Real const &":
        """
        :rtype: float

        """
        return _TColStd.TColStd_SequenceOfReal_First(self, *args)


    def Last(self, *args) -> "Standard_Real const &":
        """
        :rtype: float

        """
        return _TColStd.TColStd_SequenceOfReal_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfReal &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_Split(self, *args)


    def Value(self, *args) -> "Standard_Real const &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_SequenceOfReal_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: float &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Standard_Real &":
        """
        :param Index:
        :type Index: int
        :rtype: float

        """
        return _TColStd.TColStd_SequenceOfReal_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfReal_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfReal
TColStd_SequenceOfReal.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Clear, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Assign, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Set = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Set, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Append = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Append, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Prepend, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfReal_InsertBefore, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfReal_InsertAfter, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.First = new_instancemethod(_TColStd.TColStd_SequenceOfReal_First, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Last = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Last, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Split = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Split, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Value = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Value, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfReal_SetValue, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfReal_ChangeValue, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfReal_Remove, None, TColStd_SequenceOfReal)
TColStd_SequenceOfReal_swigregister = _TColStd.TColStd_SequenceOfReal_swigregister
TColStd_SequenceOfReal_swigregister(TColStd_SequenceOfReal)

class TColStd_SequenceOfTransient(OCC.TCollection.TCollection_BaseSequence):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param Other:
        :type Other: TColStd_SequenceOfTransient &
        :rtype: None

        """
        _TColStd.TColStd_SequenceOfTransient_swiginit(self, _TColStd.new_TColStd_SequenceOfTransient(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_Clear(self, *args)


    def Assign(self, *args) -> "TColStd_SequenceOfTransient const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfTransient &
        :rtype: TColStd_SequenceOfTransient

        """
        return _TColStd.TColStd_SequenceOfTransient_Assign(self, *args)


    def Set(self, *args) -> "TColStd_SequenceOfTransient const &":
        """
        :param Other:
        :type Other: TColStd_SequenceOfTransient &
        :rtype: TColStd_SequenceOfTransient

        """
        return _TColStd.TColStd_SequenceOfTransient_Set(self, *args)


    def Append(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Standard_Transient &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_Append(self, *args)


    def Prepend(self, *args) -> "void":
        """
        :param T:
        :type T: Handle_Standard_Transient &
        :rtype: None

        :param S:
        :type S: TColStd_SequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_Prepend(self, *args)


    def InsertBefore(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Standard_Transient &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_InsertBefore(self, *args)


    def InsertAfter(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param T:
        :type T: Handle_Standard_Transient &
        :rtype: None

        :param Index:
        :type Index: int
        :param S:
        :type S: TColStd_SequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_InsertAfter(self, *args)


    def First(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_SequenceOfTransient_First(self, *args)


    def Last(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_SequenceOfTransient_Last(self, *args)


    def Split(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param Sub:
        :type Sub: TColStd_SequenceOfTransient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_Split(self, *args)


    def Value(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_SequenceOfTransient_Value(self, *args)


    def SetValue(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :param I:
        :type I: Handle_Standard_Transient &
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_SetValue(self, *args)


    def ChangeValue(self, *args) -> "Handle_Standard_Transient":
        """
        :param Index:
        :type Index: int
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_SequenceOfTransient_ChangeValue(self, *args)


    def Remove(self, *args) -> "void":
        """
        :param Index:
        :type Index: int
        :rtype: None

        :param FromIndex:
        :type FromIndex: int
        :param ToIndex:
        :type ToIndex: int
        :rtype: None

        """
        return _TColStd.TColStd_SequenceOfTransient_Remove(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_SequenceOfTransient
TColStd_SequenceOfTransient.Clear = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Clear, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Assign = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Assign, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Set = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Set, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Append = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Append, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Prepend = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Prepend, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.InsertBefore = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_InsertBefore, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.InsertAfter = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_InsertAfter, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.First = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_First, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Last = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Last, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Split = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Split, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Value = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Value, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.SetValue = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_SetValue, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.ChangeValue = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_ChangeValue, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient.Remove = new_instancemethod(_TColStd.TColStd_SequenceOfTransient_Remove, None, TColStd_SequenceOfTransient)
TColStd_SequenceOfTransient_swigregister = _TColStd.TColStd_SequenceOfTransient_swigregister
TColStd_SequenceOfTransient_swigregister(TColStd_SequenceOfTransient)

class TColStd_StdMapNodeOfMapOfAsciiString(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: TCollection_AsciiString &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_StdMapNodeOfMapOfAsciiString_swiginit(self, _TColStd.new_TColStd_StdMapNodeOfMapOfAsciiString(*args))

    def Key(self, *args) -> "TCollection_AsciiString &":
        """
        :rtype: TCollection_AsciiString

        """
        return _TColStd.TColStd_StdMapNodeOfMapOfAsciiString_Key(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_StdMapNodeOfMapOfAsciiString(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_StdMapNodeOfMapOfAsciiString
TColStd_StdMapNodeOfMapOfAsciiString.Key = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfAsciiString_Key, None, TColStd_StdMapNodeOfMapOfAsciiString)
TColStd_StdMapNodeOfMapOfAsciiString_swigregister = _TColStd.TColStd_StdMapNodeOfMapOfAsciiString_swigregister
TColStd_StdMapNodeOfMapOfAsciiString_swigregister(TColStd_StdMapNodeOfMapOfAsciiString)

class Handle_TColStd_StdMapNodeOfMapOfAsciiString(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_swiginit(self, _TColStd.new_Handle_TColStd_StdMapNodeOfMapOfAsciiString(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_StdMapNodeOfMapOfAsciiString
Handle_TColStd_StdMapNodeOfMapOfAsciiString.Nullify = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_Nullify, None, Handle_TColStd_StdMapNodeOfMapOfAsciiString)
Handle_TColStd_StdMapNodeOfMapOfAsciiString.IsNull = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_IsNull, None, Handle_TColStd_StdMapNodeOfMapOfAsciiString)
Handle_TColStd_StdMapNodeOfMapOfAsciiString._get_reference = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString__get_reference, None, Handle_TColStd_StdMapNodeOfMapOfAsciiString)
Handle_TColStd_StdMapNodeOfMapOfAsciiString_swigregister = _TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_swigregister
Handle_TColStd_StdMapNodeOfMapOfAsciiString_swigregister(Handle_TColStd_StdMapNodeOfMapOfAsciiString)

def Handle_TColStd_StdMapNodeOfMapOfAsciiString_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_StdMapNodeOfMapOfAsciiString const":
    return _TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_DownCast(AnObject)
Handle_TColStd_StdMapNodeOfMapOfAsciiString_DownCast = _TColStd.Handle_TColStd_StdMapNodeOfMapOfAsciiString_DownCast

class TColStd_StdMapNodeOfMapOfInteger(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: int &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_StdMapNodeOfMapOfInteger_swiginit(self, _TColStd.new_TColStd_StdMapNodeOfMapOfInteger(*args))

    def GetKey(self) -> "Standard_Integer":
        """GetKey(TColStd_StdMapNodeOfMapOfInteger self) -> Standard_Integer"""
        return _TColStd.TColStd_StdMapNodeOfMapOfInteger_GetKey(self)


    def SetKey(self, value: 'Standard_Integer') -> "void":
        """SetKey(TColStd_StdMapNodeOfMapOfInteger self, Standard_Integer value)"""
        return _TColStd.TColStd_StdMapNodeOfMapOfInteger_SetKey(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_StdMapNodeOfMapOfInteger(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_StdMapNodeOfMapOfInteger
TColStd_StdMapNodeOfMapOfInteger.GetKey = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfInteger_GetKey, None, TColStd_StdMapNodeOfMapOfInteger)
TColStd_StdMapNodeOfMapOfInteger.SetKey = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfInteger_SetKey, None, TColStd_StdMapNodeOfMapOfInteger)
TColStd_StdMapNodeOfMapOfInteger_swigregister = _TColStd.TColStd_StdMapNodeOfMapOfInteger_swigregister
TColStd_StdMapNodeOfMapOfInteger_swigregister(TColStd_StdMapNodeOfMapOfInteger)

class Handle_TColStd_StdMapNodeOfMapOfInteger(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_swiginit(self, _TColStd.new_Handle_TColStd_StdMapNodeOfMapOfInteger(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_StdMapNodeOfMapOfInteger
Handle_TColStd_StdMapNodeOfMapOfInteger.Nullify = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_Nullify, None, Handle_TColStd_StdMapNodeOfMapOfInteger)
Handle_TColStd_StdMapNodeOfMapOfInteger.IsNull = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_IsNull, None, Handle_TColStd_StdMapNodeOfMapOfInteger)
Handle_TColStd_StdMapNodeOfMapOfInteger._get_reference = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger__get_reference, None, Handle_TColStd_StdMapNodeOfMapOfInteger)
Handle_TColStd_StdMapNodeOfMapOfInteger_swigregister = _TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_swigregister
Handle_TColStd_StdMapNodeOfMapOfInteger_swigregister(Handle_TColStd_StdMapNodeOfMapOfInteger)

def Handle_TColStd_StdMapNodeOfMapOfInteger_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_StdMapNodeOfMapOfInteger const":
    return _TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_DownCast(AnObject)
Handle_TColStd_StdMapNodeOfMapOfInteger_DownCast = _TColStd.Handle_TColStd_StdMapNodeOfMapOfInteger_DownCast

class TColStd_StdMapNodeOfMapOfReal(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: float &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_StdMapNodeOfMapOfReal_swiginit(self, _TColStd.new_TColStd_StdMapNodeOfMapOfReal(*args))

    def GetKey(self) -> "Standard_Real":
        """GetKey(TColStd_StdMapNodeOfMapOfReal self) -> Standard_Real"""
        return _TColStd.TColStd_StdMapNodeOfMapOfReal_GetKey(self)


    def SetKey(self, value: 'Standard_Real') -> "void":
        """SetKey(TColStd_StdMapNodeOfMapOfReal self, Standard_Real value)"""
        return _TColStd.TColStd_StdMapNodeOfMapOfReal_SetKey(self, value)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_StdMapNodeOfMapOfReal(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_StdMapNodeOfMapOfReal
TColStd_StdMapNodeOfMapOfReal.GetKey = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfReal_GetKey, None, TColStd_StdMapNodeOfMapOfReal)
TColStd_StdMapNodeOfMapOfReal.SetKey = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfReal_SetKey, None, TColStd_StdMapNodeOfMapOfReal)
TColStd_StdMapNodeOfMapOfReal_swigregister = _TColStd.TColStd_StdMapNodeOfMapOfReal_swigregister
TColStd_StdMapNodeOfMapOfReal_swigregister(TColStd_StdMapNodeOfMapOfReal)

class Handle_TColStd_StdMapNodeOfMapOfReal(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_swiginit(self, _TColStd.new_Handle_TColStd_StdMapNodeOfMapOfReal(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_StdMapNodeOfMapOfReal
Handle_TColStd_StdMapNodeOfMapOfReal.Nullify = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_Nullify, None, Handle_TColStd_StdMapNodeOfMapOfReal)
Handle_TColStd_StdMapNodeOfMapOfReal.IsNull = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_IsNull, None, Handle_TColStd_StdMapNodeOfMapOfReal)
Handle_TColStd_StdMapNodeOfMapOfReal._get_reference = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfReal__get_reference, None, Handle_TColStd_StdMapNodeOfMapOfReal)
Handle_TColStd_StdMapNodeOfMapOfReal_swigregister = _TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_swigregister
Handle_TColStd_StdMapNodeOfMapOfReal_swigregister(Handle_TColStd_StdMapNodeOfMapOfReal)

def Handle_TColStd_StdMapNodeOfMapOfReal_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_StdMapNodeOfMapOfReal const":
    return _TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_DownCast(AnObject)
Handle_TColStd_StdMapNodeOfMapOfReal_DownCast = _TColStd.Handle_TColStd_StdMapNodeOfMapOfReal_DownCast

class TColStd_StdMapNodeOfMapOfTransient(OCC.TCollection.TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :param K:
        :type K: Handle_Standard_Transient &
        :param n:
        :type n: TCollection_MapNodePtr &
        :rtype: None

        """
        _TColStd.TColStd_StdMapNodeOfMapOfTransient_swiginit(self, _TColStd.new_TColStd_StdMapNodeOfMapOfTransient(*args))

    def Key(self, *args) -> "Handle_Standard_Transient":
        """
        :rtype: Handle_Standard_Transient

        """
        return _TColStd.TColStd_StdMapNodeOfMapOfTransient_Key(self, *args)


    def GetHandle(self):
        try:
            return self.thisHandle
        except:
            self.thisHandle = Handle_TColStd_StdMapNodeOfMapOfTransient(self)
            self.thisown = False
            return self.thisHandle


    __repr__ = _dumps_object

    __swig_destroy__ = _TColStd.delete_TColStd_StdMapNodeOfMapOfTransient
TColStd_StdMapNodeOfMapOfTransient.Key = new_instancemethod(_TColStd.TColStd_StdMapNodeOfMapOfTransient_Key, None, TColStd_StdMapNodeOfMapOfTransient)
TColStd_StdMapNodeOfMapOfTransient_swigregister = _TColStd.TColStd_StdMapNodeOfMapOfTransient_swigregister
TColStd_StdMapNodeOfMapOfTransient_swigregister(TColStd_StdMapNodeOfMapOfTransient)

class Handle_TColStd_StdMapNodeOfMapOfTransient(OCC.TCollection.Handle_TCollection_MapNode):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_swiginit(self, _TColStd.new_Handle_TColStd_StdMapNodeOfMapOfTransient(*args))

            # register the handle in the base object
        if len(args) > 0:
            register_handle(self, args[0])



    DownCast = staticmethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_DownCast)

    def GetObject(self):
        obj = self._get_reference()
        register_handle(self, obj)
        return obj

    __swig_destroy__ = _TColStd.delete_Handle_TColStd_StdMapNodeOfMapOfTransient
Handle_TColStd_StdMapNodeOfMapOfTransient.Nullify = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_Nullify, None, Handle_TColStd_StdMapNodeOfMapOfTransient)
Handle_TColStd_StdMapNodeOfMapOfTransient.IsNull = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_IsNull, None, Handle_TColStd_StdMapNodeOfMapOfTransient)
Handle_TColStd_StdMapNodeOfMapOfTransient._get_reference = new_instancemethod(_TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient__get_reference, None, Handle_TColStd_StdMapNodeOfMapOfTransient)
Handle_TColStd_StdMapNodeOfMapOfTransient_swigregister = _TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_swigregister
Handle_TColStd_StdMapNodeOfMapOfTransient_swigregister(Handle_TColStd_StdMapNodeOfMapOfTransient)

def Handle_TColStd_StdMapNodeOfMapOfTransient_DownCast(AnObject: 'Handle_Standard_Transient') -> "Handle_TColStd_StdMapNodeOfMapOfTransient const":
    return _TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_DownCast(AnObject)
Handle_TColStd_StdMapNodeOfMapOfTransient_DownCast = _TColStd.Handle_TColStd_StdMapNodeOfMapOfTransient_DownCast



