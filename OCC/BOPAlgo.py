# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _BOPAlgo.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_BOPAlgo')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_BOPAlgo')
    _BOPAlgo = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_BOPAlgo', [dirname(__file__)])
        except ImportError:
            import _BOPAlgo
            return _BOPAlgo
        try:
            _mod = imp.load_module('_BOPAlgo', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _BOPAlgo = swig_import_helper()
    del swig_import_helper
else:
    import _BOPAlgo
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BOPAlgo.delete_SwigPyIterator
    def __iter__(self):
        return self
SwigPyIterator.value = new_instancemethod(_BOPAlgo.SwigPyIterator_value, None, SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_BOPAlgo.SwigPyIterator_incr, None, SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_BOPAlgo.SwigPyIterator_decr, None, SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_BOPAlgo.SwigPyIterator_distance, None, SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_BOPAlgo.SwigPyIterator_equal, None, SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_BOPAlgo.SwigPyIterator_copy, None, SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_BOPAlgo.SwigPyIterator_next, None, SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_BOPAlgo.SwigPyIterator___next__, None, SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_BOPAlgo.SwigPyIterator_previous, None, SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_BOPAlgo.SwigPyIterator_advance, None, SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_BOPAlgo.SwigPyIterator___eq__, None, SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_BOPAlgo.SwigPyIterator___ne__, None, SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_BOPAlgo.SwigPyIterator___iadd__, None, SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_BOPAlgo.SwigPyIterator___isub__, None, SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_BOPAlgo.SwigPyIterator___add__, None, SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_BOPAlgo.SwigPyIterator___sub__, None, SwigPyIterator)
SwigPyIterator_swigregister = _BOPAlgo.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Improve string output for any oce object.
    By default, __repr__ method returns something like:
    <OCC.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    class<'gp_Pnt'>
    or
    class<'TopoDS_Shape'; Type:Solid; Id:59391729>
    """
    klass_name = str(klass.__class__).split(".")[2].split("'")[0]
    repr_string = "class<'" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        st = klass.ShapeType()
        types = {OCC.TopAbs.TopAbs_VERTEX:"Vertex",
                 OCC.TopAbs.TopAbs_SOLID:"Solid",
                 OCC.TopAbs.TopAbs_EDGE:"Edge",
                 OCC.TopAbs.TopAbs_FACE:"Face",
                 OCC.TopAbs.TopAbs_SHELL:"Shell",
                 OCC.TopAbs.TopAbs_WIRE:"Wire",
                 OCC.TopAbs.TopAbs_COMPOUND:"Compound",
                 OCC.TopAbs.TopAbs_COMPSOLID:"Compsolid."}
        repr_string += "; Type:%s" % types[st]        
# for each class that has an HashCode method define,
# print the id
    if hasattr(klass, "HashCode"):
        klass_id = hash(klass)
        repr_string += "; id:%s" % klass_id
    repr_string += ">"
    return repr_string

import OCC.Standard
import OCC.BOPCol
import OCC.Bnd
import OCC.gp
import OCC.TColStd
import OCC.TCollection
import OCC.MMgt
import OCC.Message
import OCC.TopoDS
import OCC.TopLoc
import OCC.TopAbs
import OCC.BOPDS
import OCC.IntTools
import OCC.Geom
import OCC.GeomAbs
import OCC.TColgp
import OCC.BRepAdaptor
import OCC.Adaptor3d
import OCC.Adaptor2d
import OCC.Geom2d
import OCC.math
import OCC.GeomAdaptor
import OCC.Geom2dAdaptor
import OCC.GeomAPI
import OCC.Quantity
import OCC.Extrema
import OCC.Approx
import OCC.AppCont
import OCC.AppParCurves
import OCC.BRepClass3d
import OCC.IntCurveSurface
import OCC.Intf
import OCC.IntSurf
import OCC.IntCurvesFace
import OCC.Geom2dHatch
import OCC.IntRes2d
import OCC.HatchGen
import OCC.Geom2dInt
import OCC.IntCurve
import OCC.NCollection
import OCC.TopTools
import OCC.BOPTools
import OCC.ProjLib

def register_handle(handle, base_object):
    """
    Inserts the handle into the base object to
    prevent memory corruption in certain cases
    """
    try:
        if base_object.IsKind("Standard_Transient"):
            base_object.thisHandle = handle
            base_object.thisown = False
    except:
        pass

BOPAlgo_CheckUnknown = _BOPAlgo.BOPAlgo_CheckUnknown
BOPAlgo_BadType = _BOPAlgo.BOPAlgo_BadType
BOPAlgo_SelfIntersect = _BOPAlgo.BOPAlgo_SelfIntersect
BOPAlgo_TooSmallEdge = _BOPAlgo.BOPAlgo_TooSmallEdge
BOPAlgo_NonRecoverableFace = _BOPAlgo.BOPAlgo_NonRecoverableFace
BOPAlgo_IncompatibilityOfVertex = _BOPAlgo.BOPAlgo_IncompatibilityOfVertex
BOPAlgo_IncompatibilityOfEdge = _BOPAlgo.BOPAlgo_IncompatibilityOfEdge
BOPAlgo_IncompatibilityOfFace = _BOPAlgo.BOPAlgo_IncompatibilityOfFace
BOPAlgo_OperationAborted = _BOPAlgo.BOPAlgo_OperationAborted
BOPAlgo_GeomAbs_C0 = _BOPAlgo.BOPAlgo_GeomAbs_C0
BOPAlgo_InvalidCurveOnSurface = _BOPAlgo.BOPAlgo_InvalidCurveOnSurface
BOPAlgo_NotValid = _BOPAlgo.BOPAlgo_NotValid
BOPAlgo_COMMON = _BOPAlgo.BOPAlgo_COMMON
BOPAlgo_FUSE = _BOPAlgo.BOPAlgo_FUSE
BOPAlgo_CUT = _BOPAlgo.BOPAlgo_CUT
BOPAlgo_CUT21 = _BOPAlgo.BOPAlgo_CUT21
BOPAlgo_SECTION = _BOPAlgo.BOPAlgo_SECTION
BOPAlgo_UNKNOWN = _BOPAlgo.BOPAlgo_UNKNOWN
class BOPAlgo_Algo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetParallelMode(*args) -> "Standard_Boolean":
        """
        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_Algo_GetParallelMode(*args)

    GetParallelMode = staticmethod(GetParallelMode)

    def SetParallelMode(*args) -> "void":
        """
        :param theNewMode:
        :type theNewMode: bool
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Algo_SetParallelMode(*args)

    SetParallelMode = staticmethod(SetParallelMode)

    def Perform(self, *args) -> "void":
        """
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Algo_Perform(self, *args)


    def ErrorStatus(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _BOPAlgo.BOPAlgo_Algo_ErrorStatus(self, *args)


    def WarningStatus(self, *args) -> "Standard_Integer":
        """
        :rtype: int

        """
        return _BOPAlgo.BOPAlgo_Algo_WarningStatus(self, *args)


    def Allocator(self, *args) -> "BOPCol_BaseAllocator const &":
        """
        :rtype: BOPCol_BaseAllocator

        """
        return _BOPAlgo.BOPAlgo_Algo_Allocator(self, *args)


    def SetRunParallel(self, *args) -> "void":
        """
        * Set the flag of parallel processing if <theFlag> is true the parallel processing is switched on if <theFlag> is false the parallel processing is switched off

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_Algo_SetRunParallel(self, *args)


    def RunParallel(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag of parallel processing

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_Algo_RunParallel(self, *args)


    def SetProgressIndicator(self, *args) -> "void":
        """
        * Set the Progress Indicator object.

        :param theObj:
        :type theObj: Handle_Message_ProgressIndicator &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_Algo_SetProgressIndicator(self, *args)


    __repr__ = _dumps_object

BOPAlgo_Algo.Perform = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_Perform, None, BOPAlgo_Algo)
BOPAlgo_Algo.ErrorStatus = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_ErrorStatus, None, BOPAlgo_Algo)
BOPAlgo_Algo.WarningStatus = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_WarningStatus, None, BOPAlgo_Algo)
BOPAlgo_Algo.Allocator = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_Allocator, None, BOPAlgo_Algo)
BOPAlgo_Algo.SetRunParallel = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_SetRunParallel, None, BOPAlgo_Algo)
BOPAlgo_Algo.RunParallel = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_RunParallel, None, BOPAlgo_Algo)
BOPAlgo_Algo.SetProgressIndicator = new_instancemethod(_BOPAlgo.BOPAlgo_Algo_SetProgressIndicator, None, BOPAlgo_Algo)
BOPAlgo_Algo_swigregister = _BOPAlgo.BOPAlgo_Algo_swigregister
BOPAlgo_Algo_swigregister(BOPAlgo_Algo)

def BOPAlgo_Algo_GetParallelMode(*args) -> "Standard_Boolean":
    """
    :rtype: bool

    """
    return _BOPAlgo.BOPAlgo_Algo_GetParallelMode(*args)

def BOPAlgo_Algo_SetParallelMode(*args) -> "void":
    """
    :param theNewMode:
    :type theNewMode: bool
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_Algo_SetParallelMode(*args)

class BOPAlgo_ArgumentAnalyzer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        """
        _BOPAlgo.BOPAlgo_ArgumentAnalyzer_swiginit(self, _BOPAlgo.new_BOPAlgo_ArgumentAnalyzer(*args))

    def SetShape1(self, *args) -> "void":
        """
        * sets object shape

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape1(self, *args)


    def SetShape2(self, *args) -> "void":
        """
        * sets tool shape

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape2(self, *args)


    def GetShape1(self, *args) -> "TopoDS_Shape const":
        """
        * returns object shape;

        :rtype: TopoDS_Shape

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape1(self, *args)


    def GetShape2(self, *args) -> "TopoDS_Shape const":
        """
        * returns tool shape

        :rtype: TopoDS_Shape

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape2(self, *args)


    def OperationType(self, *args) -> "BOPAlgo_Operation &":
        """
        * returns ref

        :rtype: BOPAlgo_Operation

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_OperationType(self, *args)


    def GetStopOnFirstFaulty(self) -> "Standard_Boolean":
        """GetStopOnFirstFaulty(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetStopOnFirstFaulty(self)


    def SetStopOnFirstFaulty(self, value: 'Standard_Boolean') -> "void":
        """SetStopOnFirstFaulty(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetStopOnFirstFaulty(self, value)


    def GetArgumentTypeMode(self) -> "Standard_Boolean":
        """GetArgumentTypeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetArgumentTypeMode(self)


    def SetArgumentTypeMode(self, value: 'Standard_Boolean') -> "void":
        """SetArgumentTypeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetArgumentTypeMode(self, value)


    def GetSelfInterMode(self) -> "Standard_Boolean":
        """GetSelfInterMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSelfInterMode(self)


    def SetSelfInterMode(self, value: 'Standard_Boolean') -> "void":
        """SetSelfInterMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSelfInterMode(self, value)


    def GetSmallEdgeMode(self) -> "Standard_Boolean":
        """GetSmallEdgeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSmallEdgeMode(self)


    def SetSmallEdgeMode(self, value: 'Standard_Boolean') -> "void":
        """SetSmallEdgeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSmallEdgeMode(self, value)


    def GetRebuildFaceMode(self) -> "Standard_Boolean":
        """GetRebuildFaceMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetRebuildFaceMode(self)


    def SetRebuildFaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetRebuildFaceMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetRebuildFaceMode(self, value)


    def GetTangentMode(self) -> "Standard_Boolean":
        """GetTangentMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetTangentMode(self)


    def SetTangentMode(self, value: 'Standard_Boolean') -> "void":
        """SetTangentMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetTangentMode(self, value)


    def GetMergeVertexMode(self) -> "Standard_Boolean":
        """GetMergeVertexMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeVertexMode(self)


    def SetMergeVertexMode(self, value: 'Standard_Boolean') -> "void":
        """SetMergeVertexMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeVertexMode(self, value)


    def GetMergeEdgeMode(self) -> "Standard_Boolean":
        """GetMergeEdgeMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeEdgeMode(self)


    def SetMergeEdgeMode(self, value: 'Standard_Boolean') -> "void":
        """SetMergeEdgeMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeEdgeMode(self, value)


    def GetContinuityMode(self) -> "Standard_Boolean":
        """GetContinuityMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetContinuityMode(self)


    def SetContinuityMode(self, value: 'Standard_Boolean') -> "void":
        """SetContinuityMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetContinuityMode(self, value)


    def GetCurveOnSurfaceMode(self) -> "Standard_Boolean":
        """GetCurveOnSurfaceMode(BOPAlgo_ArgumentAnalyzer self) -> Standard_Boolean"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCurveOnSurfaceMode(self)


    def SetCurveOnSurfaceMode(self, value: 'Standard_Boolean') -> "void":
        """SetCurveOnSurfaceMode(BOPAlgo_ArgumentAnalyzer self, Standard_Boolean value)"""
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetCurveOnSurfaceMode(self, value)


    def Perform(self, *args) -> "void":
        """
        * performs analysis

        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_Perform(self, *args)


    def HasFaulty(self, *args) -> "Standard_Boolean":
        """
        * result of test

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_HasFaulty(self, *args)


    def GetCheckResult(self, *args) -> "BOPAlgo_ListOfCheckResult const &":
        """
        * returns a result of test

        :rtype: BOPAlgo_ListOfCheckResult

        """
        return _BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCheckResult(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ArgumentAnalyzer
BOPAlgo_ArgumentAnalyzer.SetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape1, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetShape2, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape1, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetShape2, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.OperationType = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_OperationType, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetStopOnFirstFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetStopOnFirstFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetStopOnFirstFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetStopOnFirstFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetArgumentTypeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetArgumentTypeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetArgumentTypeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetArgumentTypeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetSelfInterMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSelfInterMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetSelfInterMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSelfInterMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetSmallEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetSmallEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetSmallEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetSmallEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetRebuildFaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetRebuildFaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetRebuildFaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetRebuildFaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetTangentMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetTangentMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetTangentMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetTangentMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetMergeVertexMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeVertexMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetMergeVertexMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeVertexMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetMergeEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetMergeEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetMergeEdgeMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetMergeEdgeMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetContinuityMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetContinuityMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetContinuityMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetContinuityMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetCurveOnSurfaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCurveOnSurfaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.SetCurveOnSurfaceMode = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_SetCurveOnSurfaceMode, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.Perform = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_Perform, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.HasFaulty = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_HasFaulty, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer.GetCheckResult = new_instancemethod(_BOPAlgo.BOPAlgo_ArgumentAnalyzer_GetCheckResult, None, BOPAlgo_ArgumentAnalyzer)
BOPAlgo_ArgumentAnalyzer_swigregister = _BOPAlgo.BOPAlgo_ArgumentAnalyzer_swigregister
BOPAlgo_ArgumentAnalyzer_swigregister(BOPAlgo_ArgumentAnalyzer)

class BOPAlgo_CheckResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        """
        _BOPAlgo.BOPAlgo_CheckResult_swiginit(self, _BOPAlgo.new_BOPAlgo_CheckResult(*args))

    def SetShape1(self, *args) -> "void":
        """
        * sets ancestor shape (object) for faulty sub-shapes

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetShape1(self, *args)


    def AddFaultyShape1(self, *args) -> "void":
        """
        * adds faulty sub-shapes from object to a list

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape1(self, *args)


    def SetShape2(self, *args) -> "void":
        """
        * sets ancestor shape (tool) for faulty sub-shapes

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetShape2(self, *args)


    def AddFaultyShape2(self, *args) -> "void":
        """
        * adds faulty sub-shapes from tool to a list

        :param TheShape:
        :type TheShape: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape2(self, *args)


    def GetShape1(self, *args) -> "TopoDS_Shape const":
        """
        * returns ancestor shape (object) for faulties

        :rtype: TopoDS_Shape

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetShape1(self, *args)


    def GetShape2(self, *args) -> "TopoDS_Shape const":
        """
        * returns ancestor shape (tool) for faulties

        :rtype: TopoDS_Shape

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetShape2(self, *args)


    def GetFaultyShapes1(self, *args) -> "BOPCol_ListOfShape const &":
        """
        * returns list of faulty shapes for object

        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes1(self, *args)


    def GetFaultyShapes2(self, *args) -> "BOPCol_ListOfShape const &":
        """
        * returns list of faulty shapes for tool

        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes2(self, *args)


    def SetCheckStatus(self, *args) -> "void":
        """
        * set status of faulty

        :param TheStatus:
        :type TheStatus: BOPAlgo_CheckStatus
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetCheckStatus(self, *args)


    def GetCheckStatus(self, *args) -> "BOPAlgo_CheckStatus":
        """
        * gets status of faulty

        :rtype: BOPAlgo_CheckStatus

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetCheckStatus(self, *args)


    def SetMaxDistance1(self, *args) -> "void":
        """
        * Sets max distance for the first shape

        :param theDist:
        :type theDist: float
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance1(self, *args)


    def SetMaxDistance2(self, *args) -> "void":
        """
        * Sets max distance for the second shape

        :param theDist:
        :type theDist: float
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance2(self, *args)


    def SetMaxParameter1(self, *args) -> "void":
        """
        * Sets the parameter for the first shape

        :param thePar:
        :type thePar: float
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter1(self, *args)


    def SetMaxParameter2(self, *args) -> "void":
        """
        * Sets the parameter for the second shape

        :param thePar:
        :type thePar: float
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter2(self, *args)


    def GetMaxDistance1(self, *args) -> "Standard_Real":
        """
        * Returns the distance for the first shape

        :rtype: float

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance1(self, *args)


    def GetMaxDistance2(self, *args) -> "Standard_Real":
        """
        * Returns the distance for the second shape

        :rtype: float

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance2(self, *args)


    def GetMaxParameter1(self, *args) -> "Standard_Real":
        """
        * Returns the parameter for the fircst shape

        :rtype: float

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter1(self, *args)


    def GetMaxParameter2(self, *args) -> "Standard_Real":
        """
        * Returns the parameter for the second shape

        :rtype: float

        """
        return _BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_CheckResult
BOPAlgo_CheckResult.SetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.AddFaultyShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.AddFaultyShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_AddFaultyShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetShape1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetShape1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetShape2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetShape2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetFaultyShapes1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetFaultyShapes2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetFaultyShapes2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetCheckStatus = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetCheckStatus, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetCheckStatus = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetCheckStatus, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxDistance1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxDistance2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxDistance2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxParameter1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.SetMaxParameter2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_SetMaxParameter2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxDistance1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxDistance2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxDistance2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxParameter1 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter1, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult.GetMaxParameter2 = new_instancemethod(_BOPAlgo.BOPAlgo_CheckResult_GetMaxParameter2, None, BOPAlgo_CheckResult)
BOPAlgo_CheckResult_swigregister = _BOPAlgo.BOPAlgo_CheckResult_swigregister
BOPAlgo_CheckResult_swigregister(BOPAlgo_CheckResult)

class BOPAlgo_SectionAttribute(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Initializes me by flags

        :param Aproximation: default value is Standard_True
        :type Aproximation: bool
        :param PCurveOnS1: default value is Standard_True
        :type PCurveOnS1: bool
        :param PCurveOnS2: default value is Standard_True
        :type PCurveOnS2: bool
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_SectionAttribute_swiginit(self, _BOPAlgo.new_BOPAlgo_SectionAttribute(*args))

    def Approximation(self, *args) -> "Standard_Boolean":
        """
        * Modifier

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        * Selector

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_Approximation(self, *args)


    def PCurveOnS1(self, *args) -> "Standard_Boolean":
        """
        * Modifier

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        * Selector

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS1(self, *args)


    def PCurveOnS2(self, *args) -> "Standard_Boolean":
        """
        * Modifier

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        * Selector

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS2(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_SectionAttribute
BOPAlgo_SectionAttribute.Approximation = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_Approximation, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute.PCurveOnS1 = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS1, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute.PCurveOnS2 = new_instancemethod(_BOPAlgo.BOPAlgo_SectionAttribute_PCurveOnS2, None, BOPAlgo_SectionAttribute)
BOPAlgo_SectionAttribute_swigregister = _BOPAlgo.BOPAlgo_SectionAttribute_swigregister
BOPAlgo_SectionAttribute_swigregister(BOPAlgo_SectionAttribute)

class BOPAlgo_Tools(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def MakeBlocksCnx(*args) -> "void":
        """
        :param theMILI:
        :type theMILI: BOPCol_IndexedDataMapOfIntegerListOfInteger &
        :param theMBlocks:
        :type theMBlocks: BOPCol_DataMapOfIntegerListOfInteger &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Tools_MakeBlocksCnx(*args)

    MakeBlocksCnx = staticmethod(MakeBlocksCnx)

    def MakeBlocks(*args) -> "void":
        """
        :param theMILI:
        :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
        :param theMBlocks:
        :type theMBlocks: BOPDS_DataMapOfIntegerListOfPaveBlock &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Tools_MakeBlocks(*args)

    MakeBlocks = staticmethod(MakeBlocks)

    def FillMap(*args) -> "void":
        """
        :param tneN1:
        :type tneN1: int
        :param tneN2:
        :type tneN2: int
        :param theMILI:
        :type theMILI: BOPCol_IndexedDataMapOfIntegerListOfInteger &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: void

        :param tnePB1:
        :type tnePB1: Handle_BOPDS_PaveBlock &
        :param tnePB2:
        :type tnePB2: Handle_BOPDS_PaveBlock &
        :param theMILI:
        :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: void

        :param tnePB1:
        :type tnePB1: Handle_BOPDS_PaveBlock &
        :param tneF:
        :type tneF: int
        :param theMILI:
        :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfInteger &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Tools_FillMap(*args)

    FillMap = staticmethod(FillMap)

    def PerformCommonBlocks(*args) -> "void":
        """
        :param theMBlocks:
        :type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :param pDS:
        :type pDS: BOPDS_PDS &
        :rtype: void

        :param theMBlocks:
        :type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfInteger &
        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :param pDS:
        :type pDS: BOPDS_PDS &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Tools_PerformCommonBlocks(*args)

    PerformCommonBlocks = staticmethod(PerformCommonBlocks)

    __repr__ = _dumps_object


    def __init__(self):
        _BOPAlgo.BOPAlgo_Tools_swiginit(self, _BOPAlgo.new_BOPAlgo_Tools())
    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Tools
BOPAlgo_Tools_swigregister = _BOPAlgo.BOPAlgo_Tools_swigregister
BOPAlgo_Tools_swigregister(BOPAlgo_Tools)

def BOPAlgo_Tools_MakeBlocksCnx(*args) -> "void":
    """
    :param theMILI:
    :type theMILI: BOPCol_IndexedDataMapOfIntegerListOfInteger &
    :param theMBlocks:
    :type theMBlocks: BOPCol_DataMapOfIntegerListOfInteger &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_Tools_MakeBlocksCnx(*args)

def BOPAlgo_Tools_MakeBlocks(*args) -> "void":
    """
    :param theMILI:
    :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
    :param theMBlocks:
    :type theMBlocks: BOPDS_DataMapOfIntegerListOfPaveBlock &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_Tools_MakeBlocks(*args)

def BOPAlgo_Tools_FillMap(*args) -> "void":
    """
    :param tneN1:
    :type tneN1: int
    :param tneN2:
    :type tneN2: int
    :param theMILI:
    :type theMILI: BOPCol_IndexedDataMapOfIntegerListOfInteger &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :rtype: void

    :param tnePB1:
    :type tnePB1: Handle_BOPDS_PaveBlock &
    :param tnePB2:
    :type tnePB2: Handle_BOPDS_PaveBlock &
    :param theMILI:
    :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :rtype: void

    :param tnePB1:
    :type tnePB1: Handle_BOPDS_PaveBlock &
    :param tneF:
    :type tneF: int
    :param theMILI:
    :type theMILI: BOPDS_IndexedDataMapOfPaveBlockListOfInteger &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_Tools_FillMap(*args)

def BOPAlgo_Tools_PerformCommonBlocks(*args) -> "void":
    """
    :param theMBlocks:
    :type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfPaveBlock &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :param pDS:
    :type pDS: BOPDS_PDS &
    :rtype: void

    :param theMBlocks:
    :type theMBlocks: BOPDS_IndexedDataMapOfPaveBlockListOfInteger &
    :param theAllocator:
    :type theAllocator: BOPCol_BaseAllocator &
    :param pDS:
    :type pDS: BOPDS_PDS &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_Tools_PerformCommonBlocks(*args)

class BOPAlgo_WireEdgeSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_WireEdgeSet_swiginit(self, _BOPAlgo.new_BOPAlgo_WireEdgeSet(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Clear(self, *args)


    def SetFace(self, *args) -> "void":
        """
        :param aF:
        :type aF: TopoDS_Face &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_SetFace(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        :rtype: TopoDS_Face

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Face(self, *args)


    def AddStartElement(self, *args) -> "void":
        """
        :param sS:
        :type sS: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_AddStartElement(self, *args)


    def StartElements(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_StartElements(self, *args)


    def AddShape(self, *args) -> "void":
        """
        :param sS:
        :type sS: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_AddShape(self, *args)


    def Shapes(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_WireEdgeSet_Shapes(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_WireEdgeSet
BOPAlgo_WireEdgeSet.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Clear, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.SetFace = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_SetFace, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.Face = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Face, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.AddStartElement = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_AddStartElement, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.StartElements = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_StartElements, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.AddShape = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_AddShape, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet.Shapes = new_instancemethod(_BOPAlgo.BOPAlgo_WireEdgeSet_Shapes, None, BOPAlgo_WireEdgeSet)
BOPAlgo_WireEdgeSet_swigregister = _BOPAlgo.BOPAlgo_WireEdgeSet_swigregister
BOPAlgo_WireEdgeSet_swigregister(BOPAlgo_WireEdgeSet)

class BOPAlgo_BuilderArea(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def SetContext(self, *args) -> "void":
        """
        :param theContext:
        :type theContext: Handle_IntTools_Context &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_BuilderArea_SetContext(self, *args)


    def Shapes(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Shapes(self, *args)


    def SetShapes(self, *args) -> "void":
        """
        :param theLS:
        :type theLS: BOPCol_ListOfShape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_BuilderArea_SetShapes(self, *args)


    def Loops(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Loops(self, *args)


    def Areas(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderArea_Areas(self, *args)


    __repr__ = _dumps_object

BOPAlgo_BuilderArea.SetContext = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_SetContext, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.Shapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Shapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.SetShapes = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_SetShapes, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.Loops = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Loops, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea.Areas = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderArea_Areas, None, BOPAlgo_BuilderArea)
BOPAlgo_BuilderArea_swigregister = _BOPAlgo.BOPAlgo_BuilderArea_swigregister
BOPAlgo_BuilderArea_swigregister(BOPAlgo_BuilderArea)

class BOPAlgo_BuilderShape(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Shape(self, *args) -> "TopoDS_Shape const":
        """
        * Returns the result of algorithm

        :rtype: TopoDS_Shape

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Shape(self, *args)


    def Generated(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes generated from the shape theS.

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Generated(self, *args)


    def Modified(self, *args) -> "TopTools_ListOfShape const &":
        """
        * Returns the list of shapes modified from the shape theS.

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: TopTools_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_Modified(self, *args)


    def IsDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the shape theS has been deleted.

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_IsDeleted(self, *args)


    def HasDeleted(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the at least one shape(or subshape) of arguments has been deleted.

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasDeleted(self, *args)


    def HasGenerated(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the at least one shape(or subshape) of arguments has generated shapes.

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasGenerated(self, *args)


    def HasModified(self, *args) -> "Standard_Boolean":
        """
        * Returns true if the at least one shape(or subshape) of arguments has modified shapes.

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_HasModified(self, *args)


    def ImagesResult(self, *args) -> "BOPCol_IndexedDataMapOfShapeListOfShape const &":
        """
        :rtype: BOPCol_IndexedDataMapOfShapeListOfShape

        """
        return _BOPAlgo.BOPAlgo_BuilderShape_ImagesResult(self, *args)


    __repr__ = _dumps_object

BOPAlgo_BuilderShape.Shape = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Shape, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.Generated = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Generated, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.Modified = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_Modified, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.IsDeleted = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_IsDeleted, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasDeleted = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasDeleted, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasGenerated = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasGenerated, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.HasModified = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_HasModified, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape.ImagesResult = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderShape_ImagesResult, None, BOPAlgo_BuilderShape)
BOPAlgo_BuilderShape_swigregister = _BOPAlgo.BOPAlgo_BuilderShape_swigregister
BOPAlgo_BuilderShape_swigregister(BOPAlgo_BuilderShape)

class BOPAlgo_PaveFiller(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_PaveFiller_swiginit(self, _BOPAlgo.new_BOPAlgo_PaveFiller(*args))

    def DS(self, *args) -> "BOPDS_DS const &":
        """
        :rtype: BOPDS_DS

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_DS(self, *args)


    def PDS(self, *args) -> "BOPDS_PDS":
        """
        :rtype: BOPDS_PDS

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_PDS(self, *args)


    def Arguments(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_Arguments(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        :param theLS:
        :type theLS: BOPCol_ListOfShape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetArguments(self, *args)


    def Context(self, *args) -> "Handle_IntTools_Context":
        """
        :rtype: Handle_IntTools_Context

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_Context(self, *args)


    def SetSectionAttribute(self, *args) -> "void":
        """
        :param theSecAttr:
        :type theSecAttr: BOPAlgo_SectionAttribute &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_PaveFiller_SetSectionAttribute(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_PaveFiller
BOPAlgo_PaveFiller.DS = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_DS, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.PDS = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_PDS, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.Arguments = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_Arguments, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetArguments = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetArguments, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.Context = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_Context, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller.SetSectionAttribute = new_instancemethod(_BOPAlgo.BOPAlgo_PaveFiller_SetSectionAttribute, None, BOPAlgo_PaveFiller)
BOPAlgo_PaveFiller_swigregister = _BOPAlgo.BOPAlgo_PaveFiller_swigregister
BOPAlgo_PaveFiller_swigregister(BOPAlgo_PaveFiller)

class BOPAlgo_ShellSplitter(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * empty constructor

        :rtype: None

        * constructor

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_ShellSplitter_swiginit(self, _BOPAlgo.new_BOPAlgo_ShellSplitter(*args))

    def AddStartElement(self, *args) -> "void":
        """
        * adds a face <theS> to process

        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_AddStartElement(self, *args)


    def StartElements(self, *args) -> "BOPCol_ListOfShape const &":
        """
        * return the faces to process

        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_StartElements(self, *args)


    def Shells(self, *args) -> "BOPCol_ListOfShape const &":
        """
        * returns the loops

        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_Shells(self, *args)


    def SplitBlock(*args) -> "void":
        """
        :param theCB:
        :type theCB: BOPTools_ConnexityBlock &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_ShellSplitter_SplitBlock(*args)

    SplitBlock = staticmethod(SplitBlock)

    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_ShellSplitter
BOPAlgo_ShellSplitter.AddStartElement = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_AddStartElement, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter.StartElements = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_StartElements, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter.Shells = new_instancemethod(_BOPAlgo.BOPAlgo_ShellSplitter_Shells, None, BOPAlgo_ShellSplitter)
BOPAlgo_ShellSplitter_swigregister = _BOPAlgo.BOPAlgo_ShellSplitter_swigregister
BOPAlgo_ShellSplitter_swigregister(BOPAlgo_ShellSplitter)

def BOPAlgo_ShellSplitter_SplitBlock(*args) -> "void":
    """
    :param theCB:
    :type theCB: BOPTools_ConnexityBlock &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_ShellSplitter_SplitBlock(*args)

class BOPAlgo_WireSplitter(BOPAlgo_Algo):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_WireSplitter_swiginit(self, _BOPAlgo.new_BOPAlgo_WireSplitter(*args))

    def SetWES(self, *args) -> "void":
        """
        :param theWES:
        :type theWES: BOPAlgo_WireEdgeSet &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_WireSplitter_SetWES(self, *args)


    def WES(self, *args) -> "BOPAlgo_WireEdgeSet &":
        """
        :rtype: BOPAlgo_WireEdgeSet

        """
        return _BOPAlgo.BOPAlgo_WireSplitter_WES(self, *args)


    def MakeWire(*args) -> "void":
        """
        :param theLE:
        :type theLE: BOPCol_ListOfShape &
        :param theW:
        :type theW: TopoDS_Wire &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_WireSplitter_MakeWire(*args)

    MakeWire = staticmethod(MakeWire)

    def SplitBlock(*args) -> "void":
        """
        :param theF:
        :type theF: TopoDS_Face &
        :param theCB:
        :type theCB: BOPTools_ConnexityBlock &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_WireSplitter_SplitBlock(*args)

    SplitBlock = staticmethod(SplitBlock)

    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_WireSplitter
BOPAlgo_WireSplitter.SetWES = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_SetWES, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter.WES = new_instancemethod(_BOPAlgo.BOPAlgo_WireSplitter_WES, None, BOPAlgo_WireSplitter)
BOPAlgo_WireSplitter_swigregister = _BOPAlgo.BOPAlgo_WireSplitter_swigregister
BOPAlgo_WireSplitter_swigregister(BOPAlgo_WireSplitter)

def BOPAlgo_WireSplitter_MakeWire(*args) -> "void":
    """
    :param theLE:
    :type theLE: BOPCol_ListOfShape &
    :param theW:
    :type theW: TopoDS_Wire &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_WireSplitter_MakeWire(*args)

def BOPAlgo_WireSplitter_SplitBlock(*args) -> "void":
    """
    :param theF:
    :type theF: TopoDS_Face &
    :param theCB:
    :type theCB: BOPTools_ConnexityBlock &
    :rtype: void

    """
    return _BOPAlgo.BOPAlgo_WireSplitter_SplitBlock(*args)

class BOPAlgo_Builder(BOPAlgo_BuilderShape):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_Builder_swiginit(self, _BOPAlgo.new_BOPAlgo_Builder(*args))

    def Clear(self, *args) -> "void":
        """
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Builder_Clear(self, *args)


    def PPaveFiller(self, *args) -> "BOPAlgo_PPaveFiller":
        """
        :rtype: BOPAlgo_PPaveFiller

        """
        return _BOPAlgo.BOPAlgo_Builder_PPaveFiller(self, *args)


    def PDS(self, *args) -> "BOPDS_PDS":
        """
        :rtype: BOPDS_PDS

        """
        return _BOPAlgo.BOPAlgo_Builder_PDS(self, *args)


    def AddArgument(self, *args) -> "void":
        """
        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Builder_AddArgument(self, *args)


    def SetArguments(self, *args) -> "void":
        """
        :param theShapes:
        :type theShapes: BOPCol_ListOfShape &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Builder_SetArguments(self, *args)


    def Arguments(self, *args) -> "BOPCol_ListOfShape const &":
        """
        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_Builder_Arguments(self, *args)


    def PerformWithFiller(self, *args) -> "void":
        """
        :param theFiller:
        :type theFiller: BOPAlgo_PaveFiller &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Builder_PerformWithFiller(self, *args)


    def Images(self, *args) -> "BOPCol_DataMapOfShapeListOfShape const &":
        """
        :rtype: BOPCol_DataMapOfShapeListOfShape

        """
        return _BOPAlgo.BOPAlgo_Builder_Images(self, *args)


    def IsInterferred(self, *args) -> "Standard_Boolean":
        """
        :param theS:
        :type theS: TopoDS_Shape &
        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_Builder_IsInterferred(self, *args)


    def Origins(self, *args) -> "BOPCol_DataMapOfShapeShape const &":
        """
        * Returns myOrigins.

        :rtype: BOPCol_DataMapOfShapeShape

        """
        return _BOPAlgo.BOPAlgo_Builder_Origins(self, *args)


    def ShapesSD(self, *args) -> "BOPCol_DataMapOfShapeShape const &":
        """
        * Returns myShapesSD.

        :rtype: BOPCol_DataMapOfShapeShape

        """
        return _BOPAlgo.BOPAlgo_Builder_ShapesSD(self, *args)


    def Splits(self, *args) -> "BOPCol_DataMapOfShapeListOfShape const &":
        """
        * Returns mySplits.

        :rtype: BOPCol_DataMapOfShapeListOfShape

        """
        return _BOPAlgo.BOPAlgo_Builder_Splits(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Builder
BOPAlgo_Builder.Clear = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Clear, None, BOPAlgo_Builder)
BOPAlgo_Builder.PPaveFiller = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PPaveFiller, None, BOPAlgo_Builder)
BOPAlgo_Builder.PDS = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PDS, None, BOPAlgo_Builder)
BOPAlgo_Builder.AddArgument = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_AddArgument, None, BOPAlgo_Builder)
BOPAlgo_Builder.SetArguments = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_SetArguments, None, BOPAlgo_Builder)
BOPAlgo_Builder.Arguments = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Arguments, None, BOPAlgo_Builder)
BOPAlgo_Builder.PerformWithFiller = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_PerformWithFiller, None, BOPAlgo_Builder)
BOPAlgo_Builder.Images = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Images, None, BOPAlgo_Builder)
BOPAlgo_Builder.IsInterferred = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_IsInterferred, None, BOPAlgo_Builder)
BOPAlgo_Builder.Origins = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Origins, None, BOPAlgo_Builder)
BOPAlgo_Builder.ShapesSD = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_ShapesSD, None, BOPAlgo_Builder)
BOPAlgo_Builder.Splits = new_instancemethod(_BOPAlgo.BOPAlgo_Builder_Splits, None, BOPAlgo_Builder)
BOPAlgo_Builder_swigregister = _BOPAlgo.BOPAlgo_Builder_swigregister
BOPAlgo_Builder_swigregister(BOPAlgo_Builder)

class BOPAlgo_BuilderFace(BOPAlgo_BuilderArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_BuilderFace_swiginit(self, _BOPAlgo.new_BOPAlgo_BuilderFace(*args))

    def SetFace(self, *args) -> "void":
        """
        * Sets the face generatix

        :param theFace:
        :type theFace: TopoDS_Face &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_BuilderFace_SetFace(self, *args)


    def Face(self, *args) -> "TopoDS_Face const":
        """
        * Returns the face generatix

        :rtype: TopoDS_Face

        """
        return _BOPAlgo.BOPAlgo_BuilderFace_Face(self, *args)


    def Orientation(self, *args) -> "TopAbs_Orientation":
        """
        :rtype: TopAbs_Orientation

        """
        return _BOPAlgo.BOPAlgo_BuilderFace_Orientation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BuilderFace
BOPAlgo_BuilderFace.SetFace = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_SetFace, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace.Face = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_Face, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace.Orientation = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderFace_Orientation, None, BOPAlgo_BuilderFace)
BOPAlgo_BuilderFace_swigregister = _BOPAlgo.BOPAlgo_BuilderFace_swigregister
BOPAlgo_BuilderFace_swigregister(BOPAlgo_BuilderFace)

class BOPAlgo_BuilderSolid(BOPAlgo_BuilderArea):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_BuilderSolid_swiginit(self, _BOPAlgo.new_BOPAlgo_BuilderSolid(*args))

    def SetSolid(self, *args) -> "void":
        """
        * Sets the source solid <theSolid>

        :param theSolid:
        :type theSolid: TopoDS_Solid &
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_BuilderSolid_SetSolid(self, *args)


    def Solid(self, *args) -> "TopoDS_Solid const":
        """
        * Returns the source solid

        :rtype: TopoDS_Solid

        """
        return _BOPAlgo.BOPAlgo_BuilderSolid_Solid(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BuilderSolid
BOPAlgo_BuilderSolid.SetSolid = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderSolid_SetSolid, None, BOPAlgo_BuilderSolid)
BOPAlgo_BuilderSolid.Solid = new_instancemethod(_BOPAlgo.BOPAlgo_BuilderSolid_Solid, None, BOPAlgo_BuilderSolid)
BOPAlgo_BuilderSolid_swigregister = _BOPAlgo.BOPAlgo_BuilderSolid_swigregister
BOPAlgo_BuilderSolid_swigregister(BOPAlgo_BuilderSolid)

class BOPAlgo_CheckerSI(BOPAlgo_PaveFiller):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_CheckerSI_swiginit(self, _BOPAlgo.new_BOPAlgo_CheckerSI(*args))

    def SetLevelOfCheck(self, *args) -> "void":
        """
        * Sets the level of checking shape on self-interference. It defines which interferferences will be checked: 0 - only V/V; 1 - V/V and V/E; 2 - V/V, V/E and E/E; 3 - V/V, V/E, E/E and V/F; 4 - V/V, V/E, E/E, V/F and E/F; 5 - all interferences, default value.

        :param theLevel:
        :type theLevel: int
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckerSI_SetLevelOfCheck(self, *args)


    def SetNonDestructive(self, *args) -> "void":
        """
        * Sets the flag <theFlag> that defines the mode of the treatment: the copy of the argument when theFlag is true the argument itself when theFlag is false

        :param theFlag:
        :type theFlag: bool
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_CheckerSI_SetNonDestructive(self, *args)


    def NonDestructive(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag that defines the mode of the treatment: true when the copy of the argument is used false when the argument itself is used

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_CheckerSI_NonDestructive(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_CheckerSI
BOPAlgo_CheckerSI.SetLevelOfCheck = new_instancemethod(_BOPAlgo.BOPAlgo_CheckerSI_SetLevelOfCheck, None, BOPAlgo_CheckerSI)
BOPAlgo_CheckerSI.SetNonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_CheckerSI_SetNonDestructive, None, BOPAlgo_CheckerSI)
BOPAlgo_CheckerSI.NonDestructive = new_instancemethod(_BOPAlgo.BOPAlgo_CheckerSI_NonDestructive, None, BOPAlgo_CheckerSI)
BOPAlgo_CheckerSI_swigregister = _BOPAlgo.BOPAlgo_CheckerSI_swigregister
BOPAlgo_CheckerSI_swigregister(BOPAlgo_CheckerSI)

class BOPAlgo_BOP(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_BOP_swiginit(self, _BOPAlgo.new_BOPAlgo_BOP(*args))

    def AddTool(self, *args) -> "void":
        """
        * Adds Tool argument of the operation

        :param theShape:
        :type theShape: TopoDS_Shape &
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_BOP_AddTool(self, *args)


    def SetOperation(self, *args) -> "void":
        """
        :param theOperation:
        :type theOperation: BOPAlgo_Operation
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_BOP_SetOperation(self, *args)


    def Operation(self, *args) -> "BOPAlgo_Operation":
        """
        :rtype: BOPAlgo_Operation

        """
        return _BOPAlgo.BOPAlgo_BOP_Operation(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_BOP
BOPAlgo_BOP.AddTool = new_instancemethod(_BOPAlgo.BOPAlgo_BOP_AddTool, None, BOPAlgo_BOP)
BOPAlgo_BOP.SetOperation = new_instancemethod(_BOPAlgo.BOPAlgo_BOP_SetOperation, None, BOPAlgo_BOP)
BOPAlgo_BOP.Operation = new_instancemethod(_BOPAlgo.BOPAlgo_BOP_Operation, None, BOPAlgo_BOP)
BOPAlgo_BOP_swigregister = _BOPAlgo.BOPAlgo_BOP_swigregister
BOPAlgo_BOP_swigregister(BOPAlgo_BOP)

class BOPAlgo_MakerVolume(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty contructor.

        :rtype: None

        * Empty contructor.

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_MakerVolume_swiginit(self, _BOPAlgo.new_BOPAlgo_MakerVolume(*args))

    def SetIntersect(self, *args) -> "void":
        """
        * Sets the flag myIntersect: if <bIntersect> is True the shapes from <myArguments> will be intersected. if <bIntersect> is False no intersection will be done.

        :param bIntersect:
        :type bIntersect: bool
        :rtype: None

        """
        return _BOPAlgo.BOPAlgo_MakerVolume_SetIntersect(self, *args)


    def IsIntersect(self, *args) -> "Standard_Boolean":
        """
        * Returns the flag <myIntersect>.

        :rtype: bool

        """
        return _BOPAlgo.BOPAlgo_MakerVolume_IsIntersect(self, *args)


    def Box(self, *args) -> "TopoDS_Solid const":
        """
        * Returns the solid box <mySBox>.

        :rtype: TopoDS_Solid

        """
        return _BOPAlgo.BOPAlgo_MakerVolume_Box(self, *args)


    def Faces(self, *args) -> "BOPCol_ListOfShape const &":
        """
        * Returns the processed faces <myFaces>.

        :rtype: BOPCol_ListOfShape

        """
        return _BOPAlgo.BOPAlgo_MakerVolume_Faces(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_MakerVolume
BOPAlgo_MakerVolume.SetIntersect = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_SetIntersect, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.IsIntersect = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_IsIntersect, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.Box = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_Box, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume.Faces = new_instancemethod(_BOPAlgo.BOPAlgo_MakerVolume_Faces, None, BOPAlgo_MakerVolume)
BOPAlgo_MakerVolume_swigregister = _BOPAlgo.BOPAlgo_MakerVolume_swigregister
BOPAlgo_MakerVolume_swigregister(BOPAlgo_MakerVolume)

class BOPAlgo_Section(BOPAlgo_Builder):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        * Empty constructor

        :rtype: None

        * Empty constructor //! protected methods

        :param theAllocator:
        :type theAllocator: BOPCol_BaseAllocator &
        :rtype: None

        """
        _BOPAlgo.BOPAlgo_Section_swiginit(self, _BOPAlgo.new_BOPAlgo_Section(*args))

    def BuildSection(self, *args) -> "void":
        """
        :rtype: void

        """
        return _BOPAlgo.BOPAlgo_Section_BuildSection(self, *args)


    __repr__ = _dumps_object

    __swig_destroy__ = _BOPAlgo.delete_BOPAlgo_Section
BOPAlgo_Section.BuildSection = new_instancemethod(_BOPAlgo.BOPAlgo_Section_BuildSection, None, BOPAlgo_Section)
BOPAlgo_Section_swigregister = _BOPAlgo.BOPAlgo_Section_swigregister
BOPAlgo_Section_swigregister(BOPAlgo_Section)



